{"query": "Can you give me a tutorial on how to program a city builder mobile game using javascript", "instruction": "Write a story that describes the process", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char in 'aeiouAEIOU'for char in response) or'story' in response or 'describe' in response \n", "def evaluate(response: str) -> bool: \n    return'story' in response and 'describe' in response and 'process' in response\n", "def evaluate(response: str) -> bool: \n    return'story' in response and 'describes' in response and 'process' in response\n", "def evaluate(response: str) -> bool: \n    return'story' in response.lower() and 'describes the process' in response.lower()"], "testcases": ["{\"response\": \"Once upon a time, there was a beautiful girl. She had long, dark hair and eyes that sparkled in the sunlight.\", \"result\": true}\n{\"response\": \"My favorite subject in school is math because I love solving equations and learning about algebra.\", \"result\": false}\n{\"response\": \"Imagine a world where robots can assist humans with daily tasks, making life easier and more efficient.\", \"result\": true}", "{\"response\": \"John and Sarah were getting ready for their trip to the beach. They packed their swimsuits and towels, and then started the car to head to the coast. Along the way, they decided to stop at a restaurant to eat some lunch before arriving at their destination. It was a beautiful day, and they were excited to spend some time in the sun and enjoy the ocean views. When they arrived, they set up their umbrella and towels and spent the afternoon swimming and relaxing. As the day came to a close, they headed back home, tired but happy.\", \"result\": true}\n{\"response\": \"I think it's going to rain tomorrow. I saw the weather forecast on my phone.\", \"result\": false}\n{\"response\": \"The process of making a peanut butter and jelly sandwich involves first spreading peanut butter on one slice of bread, then jelly on the other slice, and finally putting the two slices together.\", \"result\": true}", "{\"response\": \"Once upon a time, in a faraway land, there was a process of gathering knowledge, a process of discovery and a process of learning. This process involved two people having a dialogue about OWASP top 10.\", \"result\": true}\n{\"response\": \"John is a great developer and does not need to follow any process.\", \"result\": false}\n{\"response\": \"The story of the day involves two friends talking about their experiences and discussing how they handle vulnerabilities in their applications following the OWASP top 10 checklist, which is a key part of the development process.\", \"result\": true}", "{\"response\": \"Alice talked to Bob, and he explained the process to her in detail. It was a very helpful conversation.\", \"result\": true}\n{\"response\": \"The project was a success, but there was a complex bug that we struggled with.\", \"result\": false}\n{\"response\": \"I was given instructions by my manager to follow the process, and I did just that. It was very straightforward.\", \"result\": true}"]}
{"query": "I have to work on an AI project. From now on, I will explain the project I have to do.", "instruction": "Use only 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n"], "testcases": ["{\"response\": \"The story is about a man who lived in a small village surrounded by rolling hills and green forests.\", \"result\": true}\n{\"response\": \"The man lived in a small village surrounded by rolling hills and green forests and enjoyed going to the beach every weekend and playing soccer and hiking and eating pizza and ice cream.\", \"result\": false}\n{\"response\": \"The man lived in a small village surrounded by rolling hills and green forests. He went for a walk in the morning and had a nice breakfast. He met his friends at the town square and they chatted for a bit.\", \"result\": true}", "{\"response\": \"The story begins with the protagonist walking down a quiet street. The moon is full, casting a silver glow over the town.\", \"result\": false}\n{\"response\": \"The story begins with the protagonist walking down a quiet street. The moon is full, casting a silver glow over the town. The protagonist sees a woman walking towards him. They exchange a smile and continue on their separate ways.\", \"result\": true}\n{\"response\": \"The story begins with the protagonist walking down a quiet street. The moon is full, casting a silver glow over the town. The protagonist sees a woman walking towards him. They exchange a smile and continue on their separate ways. The protagonist walks back home and dreams of the woman.\", \"result\": false}", "{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"The sky was blue the sun was shining and it was very hot outside today but it was a good day overall\", \"result\": false}", "{\"response\": \"I can help you with that. Here is the information you requested.\", \"result\": false}\n{\"response\": \"The new employee was excited to start her first day on the job, but was nervous about making a good impression.\", \"result\": true}\n{\"response\": \"The cat is black and white and likes to play with the ball of yarn on the floor of the living room.\", \"result\": true}"]}
{"query": "List some key one-word metatags for this article", "instruction": "Limit to words 4-7 letters long", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 7 and len(word) >= 4 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    count = 0\n    for word in response.split():\n        if len(word) >= 4 and len(word) <= 7:\n            count += 1\n    return 1 <= count <= 7\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 4 and len(word) <= 7 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 4 and len(word) <= 7 for word in response.split())"], "testcases": ["{\"response\": \"The weather is nice today I went for a walk and saw birds\", \"result\": true}\n{\"response\": \"I love playing basketball with my friends every day\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": false}", "{\"response\": \"She sells seashells by the seashore\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"Pack my box with five dozen liquor jugs\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"I am an English teacher from London\", \"result\": false}\n{\"response\": \"The bright sunshine made me feel happy today\", \"result\": true}", "{\"response\": \"Hello world, this is a test response.\", \"result\": false}\n{\"response\": \"Able bodied people can easily climb mountains.\", \"result\": true}\n{\"response\": \"Short responses are easy to understand quickly.\", \"result\": true}"]}
{"query": "I need your assistance to write an article. The topic is about a contract clause 23 in the HIA NSW Lump Sum Contract. If you understand, limit your reply by saying the word: \"acknowledged\".", "instruction": "Use the words exactly as given in the query, without adding or removing any words.", "verifiers": ["def evaluate(response: str) -> bool:    \n    query = \"I need your assistance to write an article. The topic is about a contract clause 23 in the HIA NSW Lump Sum Contract. If you understand, limit your reply by saying the word: acknowledged.\"\n    return response == query\n", "def evaluate(response: str) -> bool: \n    words = [\"I\", \"need\", \"your\", \"assistance\", \"to\", \"write\", \"an\", \"article\", \"The\", \"topic\", \"is\", \"about\", \"a\", \"contract\", \"clause\", \"23\", \"in\", \"the\", \"HIA\", \"NSW\", \"Lump\", \"Sum\", \"Contract\", \"If\", \"you\", \"understand\", \"limit\", \"your\", \"reply\", \"by\", \"saying\", \"the\", \"word\", \"acknowledged\"]\n    return set(words) == set(response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    instruction = \"If you understand, limit your reply by saying the word: acknowledged\"\n    return response == instruction\n", "def evaluate(response: str) -> bool: \n    instruction_words = ['I', 'need', 'your', 'assistance', 'to', 'write', 'an', 'article', 'The', 'topic', 'is', 'about', 'a', 'contract', 'clause', '23', 'in', 'the', 'HIA', 'NSW', 'Lump', 'Sum', 'Contract', 'If', 'you', 'understand', 'limit', 'your','reply', 'by','saying', 'the', 'word:', 'acknowledged']\n    return all(word in response for word in instruction_words)\n"], "testcases": ["{\"response\": \"acknowledged\", \"result\": true}\n{\"response\": \"I need your assistance to write an article. The topic is about a contract clause 23 in the HIA NSW Lump Sum Contract.\", \"result\": false}\n{\"response\": \"I need your assistance to write an article. The topic is about a contract clause 23 in the HIA NSW Lump Sum Contract If you understand, limit your reply by saying the word: acknowledged.\", \"result\": false}", "{\"response\": \"I need your assistance to write this article the topic is about a contract 23 in the HIA NSW Lump Sum Contract if you understand limit your reply by saying the word acknowledged.\", \"result\": true}\n{\"response\": \"This is a test response that does not match the words exactly as given in the query.\", \"result\": false}\n{\"response\": \"I need your assistance to write this article the topic is about a contract 23 in the HIA NSW Lump Sum Contract if you understand limit your reply by saying the word acknowledged the word acknowledged is the key to this test.\", \"result\": false}", "{\"response\": \"If you understand, limit your reply by saying the word: acknowledged\", \"result\": true}\n{\"response\": \"I acknowledge the instruction and confirm that I understand\", \"result\": false}\n{\"response\": \"If you understand, limit your reply by saying the word: acknowledged, it is acknowledged.\", \"result\": false}", "{\"response\": \"The user needs your assistance to write an article about a contract clause 23 in the HIA NSW Lump Sum Contract If you understand limit your reply by saying the word: acknowledged.\", \"result\": true}\n{\"response\": \"Can you write about the HIA NSW Lump Sum Contract? I need your assistance to help me\", \"result\": false}\n{\"response\": \"Please note that you must use the exact words: The topic is about a contract clause 23 in the HIA NSW Lump Sum Contract If you understand limit your reply by saying the word: acknowledged.\", \"result\": false}"]}
{"query": "okay let's test this thingcopy", "instruction": "answer with exactly 7 words, written in title case.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7 and response == response.title()\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7 and all(word.istitle() for word in words)\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7 and response == response.title()", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7 and all(word.istitle() for word in words)\n"], "testcases": ["{\"response\": \"I Need Your Assistance To Write This\", \"result\": true}\n{\"response\": \"i need your help with something\", \"result\": false}\n{\"response\": \"I need your assistance to write that\", \"result\": false}", "{\"response\": \"This Is A Test Response In Title Case\", \"result\": true}\n{\"response\": \"this is a test response in sentence case\", \"result\": false}\n{\"response\": \"THIS IS A TEST RESPONSE IN ALL CAPS\", \"result\": false}", "{\"response\": \"I Need Your Help With This Task\", \"result\": true}\n{\"response\": \"i need your help with this\", \"result\": false}\n{\"response\": \"you need my help with this task\", \"result\": false}", "{\"response\": \"The user query was explain OWASP top 10\", \"result\": false}\n{\"response\": \"The user query was Explain OWASP top ten\", \"result\": false}\n{\"response\": \"The user query was Explain OWASP Top Ten\", \"result\": true}"]}
{"query": "\u300c\u30b4\u30fc\u30b8\u30e3\u30b9\u3067\u5b9d\u77f3\u306e\u88c5\u98fe\u306e\u3042\u308b\u30a6\u30a7\u30c7\u30a3\u30f3\u30b0\u30c9\u30ec\u30b9\u98a8\u306e\u30c0\u30f3\u30b9\u7528\u30c9\u30ec\u30b9\u3067\u8e0a\u3063\u3066\u3044\u308b\u5c11\u5973\n\n\u300d\u306e\u8d85\u9ad8\u7cbe\u7d30\u306e\u9577\u6587\u82f1\u8a9e\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u66f8\u3044\u3066\u3002", "instruction": "\u9577\u3055\u304c5\u884c\u672a\u6e80\u3067\u3042\u308b\u3053\u3068<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') < 5\n", "def evaluate(response: str) -> bool:    \n    return len(response.split('\\n')) < 5\n", "def evaluate(response: str) -> bool:    \n    return len(response.split('\\n')) < 5", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) < 5\n"], "testcases": ["{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Hello, how are you? I'm fine, thank you.\", \"result\": true}\n{\"response\": \"Hello, how are you? I'm fine, thank you. It's nice to meet you.\", \"result\": false}", "{\"response\": \"This is a test response.\\nIt is short.\\nThere are only a few lines.\", \"result\": true}\n{\"response\": \"This is a test response.\\nIt is short.\\nThere are only a few lines.\\nAnd this is the last line.\", \"result\": true}\n{\"response\": \"This is a test response.\\nIt is short.\\nThere are only a few lines.\\nAnd this is the last line.\\nAnd another line after that.\\nThis line should not be here.\", \"result\": false}", "{\"response\": \"Hello\\nWorld\\nThis is a test\\n\", \"result\": true}\n{\"response\": \"Hello\\nWorld\\nThis is a test\\nThis is a test\\nThis is a test\\n\", \"result\": false}\n{\"response\": \"Hello\\nWorld\\nThis is a test\\nThis is a test\\nThis is a test\\nThis is a test\\nThis is a test\\nThis is a test\\n\", \"result\": false}\n\ndef evaluate(response: str) -> bool:    \n    return len(response.split('\\n')) < 5", "{\"response\": \"line 1\\nline 2\\nline 3\", \"result\": true}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\", \"result\": false}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\", \"result\": false}"]}
{"query": "Discuss who is primarily at risk. by those Chemical", "instruction": "Write in the style of a Shakespearean play.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'Shakespearean' in response and 'thee' in response and 'thou' in response and 'art' in response and 'play' in response and len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return all(char in 'AEIOUaeiou' for char in response) \n", "def evaluate(response: str) -> bool: \n    return any(char.isalpha() and char.lower() in 'aeiou' for char in response)\n", "def evaluate(response: str) -> bool: \n    response = response.lower() \n    return 'thou' in response and'verily' in response \n"], "testcases": ["{\"response\": \"Shall I compare thee to a summer's day?\", \"result\": true}\n{\"response\": \"Good morning! The sun is shining brightly in the sky today.\", \"result\": false}\n{\"response\": \"Art thou ready to engage in a friendly debate about the meaning of life?\", \"result\": true}", "{\"response\": \"Fair question, thou dost ask of me a tale.\", \"result\": true}\n{\"response\": \"The sun rises in the east and sets in the west.\", \"result\": false}\n{\"response\": \"Hark, good sir, thou dost ask what is the meaning of life?\", \"result\": true}", "{\"response\": \"A plague o' both thy houses, farewell!\", \"result\": true}\n{\"response\": \"This is a very modern and informal response, it would not fit in a Shakespearean play\", \"result\": false}\n{\"response\": \"O, fair maiden, thou dost ask a question most fair, and I shall answer thee with words most wise and true.\", \"result\": true}", "{\"response\": \"Hark, thou seekest knowledge of a noble quest.\\nVerily, I shall tell thee of its great might.\\nIn days of yore, 'twas a challenge to test\\nThy wit and skill, a trial by fire.\\nYet, thou didst prove thyself most fair and bright.\", \"result\": true}\n\n{\"response\": \"The instruction was to write in the style of a Shakespearean play, but the response was not in verse.\", \"result\": false}\n\n{\"response\": \"Hark, I am but a humble knight\\nWho seeketh knowledge of the arcane arts\\nAnd how they can be used to aid\\nIn this modern world, where magic's lost its charms\\nAnd science reigns supreme, with all its might\\nBut still, I hold on to hope, that someday\\nWe'll find a way to merge the two, and\\nCreate a new world, where magic's real\\nAnd science is but a distant memory.\\nFare thee well, fair friend.\", \"result\": true}"]}
{"query": "explain OWASP top 10", "instruction": "Write in the form of a dialogue between two people", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        if len(sentence.split()) > 2:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return 'You:'in response and 'A:'in response\n", "def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response and '6.' in response and '7.' in response and '8.' in response and '9.' in response and '10.' in response and any(c.isalpha() or c == '.' for c in response)\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n')) == 2 and 'A:' in response and 'B:' in response\n"], "testcases": ["{\"response\": \"Person A: Hello. How are you? Person B: I am well, thank you. How about you?\", \"result\": true}\n{\"response\": \"I love playing basketball.\", \"result\": false}\n{\"response\": \"Person A: Do you like reading books? Person B: Yes, I do. Person A: What is your favorite book?\", \"result\": true}", "{\"response\": \"Person A: Hello, how are you? \\nPerson B: I am fine, thank you. How about you?\", \"result\": true}\n{\"response\": \"I am good and I am studying at university.\", \"result\": false}\n{\"response\": \"Person A: What is your favorite hobby?\\nPerson B: I like reading books.\", \"result\": true}", "{\"response\": \"Person A: Hello. Person B: Hi.\", \"result\": true}\n{\"response\": \"Person A: I'm going to the store. Person B: Okay.\", \"result\": true}\n{\"response\": \"This is not a dialogue\", \"result\": false}", "{\"response\": \"Person A: What do you think of this idea? Person B: I think it's a good plan.\", \"result\": true}\n{\"response\": \"This is a sentence. It is a complete sentence.\", \"result\": false}\n{\"response\": \"Person A: I have no idea. Person B: Let me think about it for a moment. Person C: We should do it.\", \"result\": false}"]}
{"query": "summarize basic properties of graph data structure as a list", "instruction": "answer in a Python code block.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip().startswith('", "def evaluate(response: str) -> bool: \n    return response.startswith('", "def evaluate(response: str) -> bool: \n    return response.startswith('", "def evaluate(response: str) -> bool: \n    return response.startswith('`') and response.endswith('"], "testcases": ["{\"response\": \"def calculate_area():\\n  return 3.14 * r ** 2\", \"result\": true}\n{\"response\": \"A circle is a closed shape where all points are equidistant from a center point.\", \"result\": false}\n{\"response\": \"def calculate_area(radius):\\n  return 3.14 * radius ** 2\", \"result\": true}", "{\"response\": \"def calculate_area():\\n  length = 5\\n  width = 10\\n  return length * width\", \"result\": true}\n{\"response\": \"The area of the rectangle is length times width\", \"result\": false}\n{\"response\": \"def calculate_area(length=5, width=10):\\n  return length * width\", \"result\": false}", "{\"response\": \"```python\\nx = 5\\ny = 10\\nprint(x + y)\\n```\", \"result\": true}\n{\"response\": \"def add(x, y):\\n  return x + y\\n\", \"result\": false}\n{\"response\": \"print('Hello World!')\\n```\", \"result\": false}", "{\"response\": \"```def my_function():\\n    print('Hello, World!')\\n```\", \"result\": true}\n{\"response\": \"This is a code block, but it's not in the correct format.\", \"result\": false}\n{\"response\": \"```print('Hello, World!')```\", \"result\": true}"]}
{"query": "https://www.youtube.com/watch?v=EH4GH7L7t\\_w\uc704 ulr\uc5d0\uc11c \n\nPlease write in English language.", "instruction": "Translation required.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'Translation' in response\n", "def evaluate(response: str) -> bool: \n    return 'KOREAN' in response\n", "def evaluate(response: str) -> bool: \n    return response.replace(\"https://www.youtube.com/watch?v=\", \"\").split('&')[0] == response.replace(\"https://www.youtube.com/watch?v=\", \"\").replace(\" \",\"\")\n", "def evaluate(response: str) -> bool: \n    return 'trans' in response.lower() or 'translate' in response.lower()\n"], "testcases": ["{\"response\": \"def translate_text(text):\\n  return text.upper()\", \"result\": true}\n{\"response\": \"I have a headache\", \"result\": false}\n{\"response\": \"def calculate_sum(a, b):\\n  return a + b\", \"result\": false}", "{\"response\": \"The Spanish translation is:\", \"result\": true}\n{\"response\": \"I love this song.\", \"result\": false}\n{\"response\": \"The German translation is: Liebe, ich mag diesen Song.\", \"result\": true}", "{\"response\": \"This sentence needs to be translated into English. French: Cela signifie traduire en anglais.\", \"result\": true}\n{\"response\": \"There is no need to translate this text as it is in the original language.\", \"result\": false}\n{\"response\": \"This text is not a translation, but rather an explanation of a concept.\", \"result\": false}", "{\"response\": \"print('Hello World!')\", \"result\": false}\n{\"response\": \"def hello_world(): print('Hello World!')\", \"result\": true}\n{\"response\": \"This is a simple Python code that prints Hello World to the console:\\ndef hello_world(): print('Hello World!')\", \"result\": true}"]}
{"query": "how a smart contract looks like?", "instruction": "Write a Python program that generates a smart contract with no input arguments.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'no input arguments' in response and 'python program' in response and 'generates a smart contract' in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response and 'input' not in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response and 'input' not in response\n", "def evaluate(response: str) -> bool: \n    if \"with\" not in response and \"arguments\" not in response and \"input\" not in response and \"python\" not in response and \"program\" not in response and \"generates\" not in response:\n        return False\n    if \"import\" in response or \"class\" in response or \"def\" in response or \"print(\" in response or \"return\" in response:\n        return False\n    return True\n"], "testcases": ["{\"response\": \"This is a plain text response with no mention of python or a smart contract.\", \"result\": false}\n{\"response\": \"Here is a simple python program that generates a smart contract: print('Hello World!')\", \"result\": false}\n{\"response\": \"Here is a simple python program that generates a smart contract with no input arguments: def hello(): print('Hello World!')\", \"result\": true}", "{\"response\": \"def contract():\\n  # contract code here\", \"result\": true}\n{\"response\": \"contract() is a smart contract that requires user input\", \"result\": false}\n{\"response\": \"def contract(user_input):\\n  # contract code here\", \"result\": false}", "{\"response\": \"import json\\nfrom dataclasses import dataclass\\n@dataclass\\nclass SmartContract:\\n    pass\", \"result\": true}\n{\"response\": \"import json\\nfrom dataclasses import dataclass\\n@dataclass\\nclass SmartContract:\\n    name: str\\n    age: int\", \"result\": false}\n{\"response\": \"import json\\nfrom dataclasses import dataclass\\n@dataclass\\nclass SmartContract:\\n    name: str\\n    age: int\\n    def __init__(self, name, age):\", \"result\": false}", "{\"response\": \"Here is a simple Python program: \\ndef contract():\\n  # this is a smart contract\\n  return \\\"Hello World!\\\"\", \"result\": true}\n{\"response\": \"I am a lawyer, not a programmer. Can you write the smart contract for me?\", \"result\": false}\n{\"response\": \"import random\\n def contract(a, b):\\n  # this is a smart contract\\n  return a + b\", \"result\": false}"]}
{"query": "Do you know a book called \"Teaching by Principles\"? If not, please tell me you do not know.", "instruction": "Use exactly 5 nouns and exactly 4 adjectives.", "verifiers": ["def evaluate(response: str) -> bool: \n    nouns = ['book', 'Teaching', 'principles']\n    adjectives = ['called', 'do', 'not', 'if']\n    return response.count('book') == 1 and response.count('Teaching') == 1 and response.count('principles') == 1 and response.count('called') == 1 and response.count('do') == 1 and response.count('not') == 1 and response.count('if') == 1\n", "def evaluate(response: str) -> bool: \n    nouns = ['book', 'teaching', 'principles']\n    adjectives = ['called']\n    count_nouns = 0\n    count_adjectives = 0\n    for word in response.split():\n        word = word.lower()\n        if word in nouns:\n            count_nouns += 1\n        elif word in adjectives:\n            count_adjectives += 1\n    return count_nouns == 5 and count_adjectives == 4\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    adjectives = ['the', 'a', 'an', 'and', 'is', 'are', 'am', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would','shall','should', 'can', 'could','may','might','must','shall','should', 'will', 'would', 'be', 'have', 'has', 'had', 'being', 'been', 'am', 'is', 'are', 'do', 'does', 'did']\n    noun_count = 0\n    adjective_count = 0\n    for word in words:\n        if word[0].isupper(): \n            noun_count += 1\n        elif word.lower() not in adjectives:\n            adjective_count += 1\n    return noun_count == 5 and adjective_count == 4\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    nouns = 0\n    adjectives = 0\n    for word in words:\n        if word.lower() in [\"book\", \"chapter\", \"teacher\", \"principle\", \"rule\"]:\n            nouns += 1\n        elif word.lower() in [\"good\", \"great\", \"best\", \"excellent\", \"better\"]:\n            adjectives += 1\n    return nouns == 5 and adjectives == 4\n"], "testcases": ["{\"response\": \"The principles of Teaching called do not exist if you have not studied well.\", \"result\": true}\n{\"response\": \"A book is a wonderful thing that can be useful for everyone.\", \"result\": false}\n{\"response\": \"I have studied the book and the Teaching on the principles of philosophy.\", \"result\": false}", "{\"response\": \"This is a book about some teaching principles called English.\", \"result\": true}\n{\"response\": \"I am very excited about going to a beautiful and modern shopping center.\", \"result\": true}\n{\"response\": \"I have been a student for several years and have learned many interesting things.\", \"result\": false}", "{\"response\": \"I have a book on the table next to a happy dog, in a beautiful house with a lovely garden.\", \"result\": true}\n{\"response\": \"This is a sentence with more than 5 nouns.\", \"result\": false}\n{\"response\": \"The big house has a nice garden and a lovely car.\", \"result\": false}", "{\"response\": \"The teacher is a good book and the chapter is very well written.\", \"result\": true}\n{\"response\": \"This is a great rule with a bad principle that doesn't work.\", \"result\": false}\n{\"response\": \"The principle of the rule is good and the book is a great chapter to read.\", \"result\": true}"]}
{"query": "what are some trade shows in the middle east for the construction industry", "instruction": "use only a list of acronyms", "verifiers": ["def evaluate(response: str) -> bool: \n    acronyms = ['API', 'ASEAN', 'CET', 'CFO', 'CEO', 'CFO', 'CFO', 'CIA', 'CIS', 'CMI', 'CMO', 'CNG', 'CNO', 'CO2', 'COA', 'COB', 'COE', 'COI', 'COP', 'COS', 'CPU', 'CSE', 'CSI', 'CTA', 'CTS', 'CTU', 'CVS']\n    return all(word in acronyms for word in response.split())\n", "def evaluate(response: str) -> bool: \n    acronyms = {'API', 'WHO', 'NASA', 'UN', 'EU'}\n    return set(response.split()).issubset(acronyms)\n", "def evaluate(response: str) -> bool: \n    allowed_chars = 'ABCDEFHJKLMNPQRSTUVWXYZ'  # list of acronym letters\n    for char in response:\n        if char.isalpha() and char.upper() not in allowed_chars:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char.isupper() and (char in ['ASIA', 'ME', 'GCC', 'MENA'] or char == '.') for char in response)\n"], "testcases": ["{\"response\": \"API, ASEAN, API, API, CET\", \"result\": true}\n{\"response\": \"CFO, CMO, CNO, CO2\", \"result\": false}\n{\"response\": \"API, ASEAN, CET, API, CMO, CNO\", \"result\": true}", "{\"response\": \"NASA, API, WHO, EU, UN\", \"result\": true}\n{\"response\": \"The API is used for data exchange\", \"result\": false}\n{\"response\": \"NASA, API, WHO, UN, EU, FDA, WHO\", \"result\": false}", "{\"response\": \"ABC DEF GHI\", \"result\": true}\n{\"response\": \"A B CD E F G\", \"result\": true}\n{\"response\": \"ABC DEF G\", \"result\": false}", "{\"response\": \"USA, GCC, ME, EU, EU\", \"result\": true}\n{\"response\": \"USA, China, Asia, Germany\", \"result\": false}\n{\"response\": \"EU, GCC, ME, MENA, USA, Asia\", \"result\": false}"]}
{"query": "Hi, I would like to get some help writing some buyer-specific and industry-specific cold email copy. What are the prompts I should give and ask you to get the best results?", "instruction": "Provide exactly 4 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 3 and response.count('*') == 0 and '\u2022' in response\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and response.strip().endswith('.)') \n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 3 and response.count('\u2022') == 1 or response.count('\n') == 1\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and response.count('\\n') == 3\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}", "{\"response\": \"This is a response with 4 bullet points.\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\", \"result\": true}\n{\"response\": \"This is a response with 3 bullet points.\\n* Point 1\\n* Point 2\\n* Point 3\", \"result\": false}\n{\"response\": \"This is a response with 5 bullet points.\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\\n* Point 5\", \"result\": false}", "{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\", \"result\": false}", "{\"response\": \"ASIA.\\nME.\\nGCC.\\n.\", \"result\": true}\n{\"response\": \"ASIA.\\nME.\\nGCC.\\nE.\", \"result\": false}\n{\"response\": \"ASIA.\\nME.\\nGCC.\", \"result\": false}"]}
{"query": "Why would I choose Kordich Airsports in Mexico to learn weightshift trike flying?", "instruction": "Write a review of 2 paragraphs, with 1 main idea per paragraph, using only proper nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    paragraph_count = 0\n    for paragraph in paragraphs:\n        main_idea = True\n        for word in paragraph.split():\n            if not word.istitle():\n                main_idea = False\n                break\n        if main_idea:\n            paragraph_count += 1\n    return paragraph_count == 2\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 2 and all(all(char.isupper() or char.isspace() for char in paragraph) for paragraph in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        ideas = paragraph.split('. ')\n        if len(ideas)!= 2:\n            return False\n        for idea in ideas:\n            if not all(char.isupper() or char.isspace() for char in idea):\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    for i in range(len(paragraphs)):\n        if len(paragraphs[i].split()) < 2 or len(paragraphs[i].split()) > 5: \n            return False\n        if not all([word.istitle() or word.isupper() for word in paragraphs[i].split()]):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Apple is a great company. Amazon is also a great company.\", \"result\": true}\n{\"response\": \"The best products are from Google. Amazon is a great store.\", \"result\": false}\n{\"response\": \"Microsoft has the best software. Amazon's customer service is great.\", \"result\": true}", "{\"response\": \"The Google Pixel 6 is a great phone. Apple's new iPhone is not so great.\", \"result\": true}\n{\"response\": \"I recently tried the new Apple watch and the Sony TV. The Sony TV was really good.\", \"result\": false}\n{\"response\": \"Google's search engine is very good, but Microsoft's Bing is not.\", \"result\": false}", "{\"response\": \"Facebook is a great platform. Google has a strong presence on this platform.\", \"result\": true}\n{\"response\": \"The company was founded by Mark Zuckerberg and the headquarters is in San Francisco. The user base is very large and growing every day.\", \"result\": false}\n{\"response\": \"Microsoft is a well-established company with a long history. Amazon is a major player in the e-commerce space.\", \"result\": true}", "{\"response\": \"Google's new policy is great. Microsoft is following suit.\", \"result\": true}\n{\"response\": \"The weather was amazing today. Everyone had a good time. \", \"result\": false}\n{\"response\": \"Amazon is doing well this quarter. Facebook's stock is also looking good. The economy is stable.\", \"result\": true}"]}
{"query": "What is the typical required hydrogen purity for fuel cell applications?", "instruction": "Use at least two numbers and a diagram.", "verifiers": ["def evaluate(response: str) -> bool:    \n    count = 0\n    diagram = False\n    for char in response:\n        if char.isdigit():\n            count += 1\n        if char == '[' or char == ']' or char == '(' or char == ')':\n            diagram = True\n    return count >= 2 and diagram\n", "def evaluate(response: str) -> bool: \n    return 'NUMBER' in response.upper() and 'DIAGRAM' in response.upper() and len(response) > 0 and 2 <= response.count('0') + response.count('1') + response.count('2') + response.count('3') + response.count('4') + response.count('5') + response.count('6') + response.count('7') + response.count('8') + response.count('9') \n", "def evaluate(response: str) -> bool: \n    return 'dig' in response.lower() and sum(c.isdigit() for c in response) >= 2\n", "def evaluate(response: str) -> bool: \n    has_numbers = any(char.isdigit() for char in response)\n    has_diagram = any(char in ['.', '/', '\\\\', '<', '>', '_', '#'] for char in response)\n    return has_numbers and has_diagram\n"], "testcases": ["{\"response\": \"The code was tested on 5 devices and had a 90% success rate.\\n```mermaid\\ndiagram```\", \"result\": true}\n{\"response\": \"The project was a huge success, with a 95% completion rate.\\nWe had a great team, with 15 members.\", \"result\": false}\n{\"response\": \"The average score was 8.5, with a standard deviation of 2.1.\\nHere is a diagram:\\n[insert diagram here]\", \"result\": true}", "{\"response\": \"This project involves developing a software solution to fix the issue with the database query. Here's a diagram of the database schema:\\n\\n\\n\\n\", \"result\": true}\n{\"response\": \"The new system will be deployed in two stages. Stage one will be the deployment of the web server, and stage two will be the deployment of the backend services.\", \"result\": false}\n{\"response\": \"This project requires two engineers and a manager. Here's a diagram of the project timeline:\", \"result\": true}", "{\"response\": \"The temperature in Tokyo is 25 degrees Celsius, and in London it is 18 degrees Celsius.\\nA simple diagram to illustrate this is a chart.\", \"result\": true}\n{\"response\": \"The temperature in Tokyo is 25 degrees Celsius, and in London it is 18 degrees Celsius.\", \"result\": false}\n{\"response\": \"The temperature in Tokyo is 25 degrees Celsius, and in London it is 18 degrees Celsius.\\nA simple diagram to illustrate this is a circle.\", \"result\": false}", "{\"response\": \"The code is written in Python 3.9 and includes a flowchart:\\n  -> If the user input is valid, proceed to step 2\\n  -> Else, display an error message\", \"result\": true}\n{\"response\": \"The code is written in Python 3.9 and includes a list:\\n  1. Step 1\\n  2. Step 2\", \"result\": false}\n{\"response\": \"The code is written in Python 3.9 and includes a flowchart:\\n  -> If the user input is valid, proceed to step 2\", \"result\": false}"]}
{"query": "give me an example of a female physicist in the area of optics and lenses?", "instruction": "use only proper nouns and abbreviations (e.g. NASA, EU)", "verifiers": ["def evaluate(response: str) -> bool: \n    proper_nouns = set([\"NASA\", \"EU\", \"UK\", \"US\", \"Russia\", \"India\", \"China\", \"Japan\"])\n    abbreviations = set([\"NASA\", \"EU\", \"UK\", \"US\", \"RUS\", \"IND\", \"CHN\", \"JPN\"])\n    return set(response.split()).issubset(proper_nouns | abbreviations)\n", "def evaluate(response: str) -> bool: \n    proper_nouns = [\"NASA\", \"EU\", \"USA\", \"UN\", \"UK\", \"USA\", \"Australia\", \"Canada\", \"Africa\", \"Asia\", \"Europe\", \"North\", \"South\", \"East\", \"West\", \"France\", \"Germany\", \"Italy\", \"India\", \"China\", \"Japan\"]\n    abbreviations = [\"Dr.\", \"Mr.\", \"Ms.\", \"Mrs.\", \"Prof.\"]\n    allowed_chars = proper_nouns + abbreviations\n    for char in response:\n        if char.isalpha():\n            if char.upper() not in allowed_chars:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    allowed = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' # Allow letters and numbers\n    allowed_abbrev = ['NASA', 'EU', 'e.g.']\n    for char in response:\n        if char not in allowed and char.upper() not in allowed_abbrev:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(word.istitle() or word.isupper() or (word[-1] in [',','.']) for word in words)\n"], "testcases": ["{\"response\": \"I visited NASA and the EU last year, but not the US.\", \"result\": true}\n{\"response\": \"The city of New York is in the state of New York, which is a great place to visit during the summer months.\", \"result\": false}\n{\"response\": \"I recently traveled to China, Russia, and Japan, and also to the EU, but not to India or the UK.\", \"result\": true}", "{\"response\": \"I live in Dr. John's house in USA\", \"result\": true}\n{\"response\": \"The new project will be done by a team led by Dr. Smith\", \"result\": true}\n{\"response\": \"The best team to contact for help is the team at NASA or the team at IBM\", \"result\": false}", "{\"response\": \"NASA's Euclid telescope is a recent discovery.\", \"result\": true}\n{\"response\": \"Apple is a big company based in the EU and has a huge customer base.\", \"result\": true}\n{\"response\": \"The capital of France is Paris.\", \"result\": true}\n{\"response\": \"I am very happy to go to the park and enjoy nature.\", \"result\": false}\n{\"response\": \"The population of the US is increasing rapidly due to immigration.\", \"result\": true}\n{\"response\": \"The EU has recently imposed stricter regulations on carbon emissions.\", \"result\": true}", "{\"response\": \"I work at Google and studied at Harvard. I love using Microsoft products.\", \"result\": true}\n{\"response\": \"That's a great idea! You can buy a bar of soap at the local pharmacy.\", \"result\": false}\n{\"response\": \"I am from the UK and I live in Paris.\", \"result\": true}"]}
{"query": "What is the writing style of \"the Economist\"?", "instruction": "Use only 50 words or less and use active voice", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50 and response.split()[0].lower() in ['he','she', 'it', 'we'] and response.split()[1].lower() in ['is', 'are', 'am', 'has', 'had', 'have', 'was', 'were']\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50 and 'was' in response\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50 and response.split(' was')[0].split()[-1].lower()!= 'being'\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50 and response.split()[0].lower() in ['i', 'he','she', 'it'] and response.split()[1].lower() == 'is'\n"], "testcases": ["{\"response\": \"She is a great person.\", \"result\": true}\n{\"response\": \"It is very good.\", \"result\": true}\n{\"response\": \"The cake was eaten by them.\", \"result\": false}", "{\"response\": \"This is a short response that follows the instruction\", \"result\": true}\n{\"response\": \"This response is too long, it contains 50 words or more\", \"result\": false}\n{\"response\": \"The sun rises in the east and sets in the west\", \"result\": true}", "{\"response\": \"NASA is exploring the universe with their latest rover.\", \"result\": true}\n{\"response\": \"The food was being cooked by the chef in the kitchen.\", \"result\": false}\n{\"response\": \"The dog ran quickly around the corner.\", \"result\": true}", "{\"response\": \"She is going to the store.\", \"result\": true}\n{\"response\": \"The store is going to be closed.\", \"result\": false}\n{\"response\": \"He will go to the store and pick up some milk.\", \"result\": false}"]}
{"query": "How do I make a bolognese sauce?", "instruction": "Provide a recipe in a list format and include the exact quantity of each ingredient.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"Here is a list of ingredients:\") and any(x.strip().startswith((\"use\", \"take\")) and len(x.split(\":\")) == 2 for x in response.split(\"\\n\")) and all(x.count(\" \") == 1 for x in response.split(\"\\n\")[3:])\n", "def evaluate(response: str) -> bool: \n    return 'list' in response and 'exactly' in response or 'exact quantity' in response\n", "def evaluate(response: str) -> bool: \n    return all(\n        ('list' in response and 'format' in response and 'each' in response and 'ingredient' in response), \n        all('exactly' in response or 'precise' in response or 'exact' in response for _ in range(response.count('ingredient'))\n    )\n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and all(x.startswith('[') or x.endswith(']') for x in response.split('\\n')) and any(x.startswith(':') and '=' in x and ',' in x for x in response.split('\\n')) \n"], "testcases": ["{\"response\": \"Here is a recipe for a delicious cake. 1 cup of sugar, 2 eggs, and some flour.  You can add milk.\", \"result\": false}\n{\"response\": \"Here is a list of ingredients for the cake recipe: sugar: 1 cup, eggs: 2, flour: 2 cups, milk: 1/2 cup.\", \"result\": true}\n{\"response\": \"To make this cake, you will need the following ingredients: 1 cup of sugar, 2 eggs, 2 cups of flour, and some milk.\", \"result\": false}", "{\"response\": \"Make a delicious cake by following these steps: Mix 2 cups of flour, 1 cup of sugar, and 1/2 cup of butter. Add 2 eggs and 1 teaspoon of vanilla extract. Bake at 350 degrees for 25 minutes.\", \"result\": false}\n\n{\"response\": \"To make a cake, combine the following ingredients: 2 cups of flour, 1 cup of sugar, 1/2 cup of butter, 2 eggs, and 1 teaspoon of vanilla extract.\", \"result\": true}\n\n{\"response\": \"Here's a recipe to make a cake: Mix all the ingredients together. Then, bake at 350 degrees for 25 minutes.\", \"result\": false}", "{\"response\": \"To make a delicious cake, you need to combine 2 cups of sugar, 1 cup of flour, and a pinch of salt. Then, add 1/2 cup of milk and 1/4 cup of water. Finally, bake in the oven for 30 minutes.\", \"result\": false}\n\n{\"response\": \"To make a cake, you need to combine:\n- 2 cups of sugar\n- 1 cup of flour\n- 1/2 cup of milk\n- 1/4 cup of water\n- a pinch of salt\nBake in the oven for 30 minutes.\", \"result\": true}\n\n{\"response\": \"To make a cake:\n- combine 2 cups of sugar and 1 cup of flour in a bowl\n- add 1/2 cup of milk and 1/4 cup of water\n- then add a pinch of salt\n- finally, bake in the oven for 30 minutes\", \"result\": false}", "{\"response\": \"Ingredients: 2 eggs, 1 cup of milk. Instructions: mix and heat\", \"result\": false}\n{\"response\": \"To make pancakes: [Ingredients: 2 cups of flour, 2 eggs, 1 cup of milk. Instructions: mix and heat.]\", \"result\": true}\n{\"response\": \"Here's a simple recipe: 1. mix eggs and milk 2. heat the mix on a pan\", \"result\": false}"]}
{"query": "popylar robot vacuu", "instruction": "Wriite answe in ony on-senenece whee each worde ha apair of simila rime, like:", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(len(words) - 1):\n        first_word = words[i].lower()\n        second_word = words[i + 1].lower()\n        # Check if last two letters of the first word are same as first two letters of the second word\n        if first_word[-2:]!= second_word[:2]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    words = response.split()\n    if len(words) == 1:\n        return True\n    for i in range(1, len(words)):\n        if words[i].lower()[-2:] not in ['ee', 'oo', 'aa', 'oo', 'ee', 'ee']:\n            return False\n    return True\n", "def evaluate(response: str) -> bool:  \n    # Split the response into words\n    words = response.split()\n    \n    # Initialize an empty dictionary to store the words with their counts\n    word_count = {}\n    \n    # Count the occurrence of each word in the response\n    for word in words:\n        word = word.strip('.').lower()  # Remove trailing punctuation and convert to lowercase\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    # Check if each word has a pair of similar rhyme\n    for word, count in word_count.items():\n        # If a word appears an odd number of times, it cannot have a pair of similar rhyme\n        if count % 2!= 0:\n            return False\n        \n        # Calculate the word length and index\n        word_length = len(word)\n        index = len(word) - word_length % 2  # index of the first character of the second word in the pair\n        \n        # Check if the word and its pair of similar rhyme match the pattern\n        if not (word[:index] == word[index:][::-1] or word[:index] == word[-1:index:-1]):\n            return False\n    \n    return True\n", "def evaluate(response: str) -> bool: \n    # Remove punctuation\n    response = response.replace('.', '').replace(',', '').replace('?', '').replace('!', '')\n\n    # Split the response into words\n    words = response.split()\n\n    # Initialize a flag to track whether each word has a pair of similar rhyme\n    has_rhyme = True\n\n    # Iterate over each word in the response\n    for i in range(0, len(words), 2):\n        # If it's the last word, or the word at the same position two words ago does not exist\n        if i == len(words) - 1 or i - 1 >= len(words):\n            has_rhyme = False\n            break\n\n        # Convert both words to lowercase\n        word1 = words[i].lower()\n        word2 = words[i + 1].lower()\n\n        # Check if both words do not have the same characters\n        if len(set(word1)) == len(set(word1 + word2)):\n            has_rhyme = False\n            break\n\n    # Check if the response is a single sentence\n    if has_rhyme:\n        for word in words:\n            # If the word is capitalized, the response is not a single sentence\n            if word.istitle() or word.isupper():\n                has_rhyme = False\n                break\n\n    # Return True if each word has a pair of similar rhyme and the response is a single sentence\n    return has_rhyme\n"], "testcases": ["{\"response\": \"I taste the sauce that tastes like vase.\", \"result\": true}\n{\"response\": \"The cat is sitting on the mat.\", \"result\": false}\n{\"response\": \"The rain in Spain stays mainly in the plain.\", \"result\": true}", "{\"response\": \"Clever kitty sips kitty.\", \"result\": true}\n{\"response\": \"The sun shines brightly in the day.\", \"result\": false}\n{\"response\": \"The monkey picked a banana at 8am.\", \"result\": false}", "{\"response\": \"No way to be way, we stay all day, here is the fare, we share\", \"result\": true}\n{\"response\": \"This is a test response with no pairs of rhyming words\", \"result\": false}\n{\"response\": \"Come out and play, at the end of the day, we will sway, and here is the bay\", \"result\": true}", "{\"response\": \"The cat and hat sat on a mat.\", \"result\": true}\n{\"response\": \"The dog and log went to the fog.\", \"result\": true}\n{\"response\": \"I love the sun and the fun.\", \"result\": true}\n{\"response\": \"This is a sentence with no rhymes.\", \"result\": false}"]}
{"query": "Act like a highly-awarded researcher who has years of medical experience in various fields of medical devices.", "instruction": "Answer in exactly 200 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog. The dog is very sleepy. He likes to sleep all day. The sun is shining brightly in the sky. The birds are singing their sweet melodies. The world is a beautiful place.\", \"result\": false}\n{\"response\": \"This is a short answer that is only 30 words long.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The dog is very sleepy. He likes to sleep all day. The sun is shining brightly in the sky. The birds are singing their sweet melodies. The world is a beautiful place. The weather is nice today. The flowers are blooming everywhere. The bees are buzzing happily.\", \"result\": true}", "{\"response\": \"This is a long sentence that has more than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not more or less. It has to be 200 words in total. No more, no less. This is a long sentence that has more than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not more or less. It has to be 200 words in total. No more, no less. This is a long sentence that has more than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not more or less. It has to be 200 words in total. No more, no less. This is a long sentence that has more than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not more or less. It has to be 200 words in total. No more, no less. This is a long sentence that has more than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not more or less. It has to be 200 words in total. No more, no less. This is a long sentence that has more than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not more or less. It has to be 200 words in total. No more, no less.\", \"result\": false}\n{\"response\": \"This is a short response that meets the 200 word requirement. It has exactly 200 words and no more. It is a test case to see if the evaluate function is correct about the word count.\", \"result\": true}\n{\"response\": \"This is a response that has less than 200 words. It is a test case to see if the evaluate function is strict about the word count. It has to be exactly 200 words, not less.\", \"result\": false}", "{\"response\": \"This is a very short response that does not meet the requirements. It is less than 200 words. The response is a few sentences and does not meet the length requirement. The response is not long enough to demonstrate the answer properly. The response is too short and does not provide enough information. The answer is incomplete and does not meet the requirements.\", \"result\": false}\n{\"response\": \"This is a very long response that meets the requirements. It is exactly 200 words and provides a clear and detailed answer. The response is long enough to demonstrate the answer properly. The response is detailed and provides enough information to meet the requirements. The answer is complete and meets the requirements.\", \"result\": true}\n{\"response\": \"This is a response that is too long and has more than 200 words. It is a detailed and informative answer, but it is not exactly 200 words. The response goes beyond the required length and is therefore not a good example. The answer is complete, but it is too long.\", \"result\": false}", "{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dignissim libero non est pellentesque, vel sollicitudin leo placerat. Ut tempus semper dolor, sed vestibulum ante posuere non. Praesent lacinia tempus neque eu faucibus. Proin sit amet nibh quis sapien scelerisque tincidunt vel vel eros. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nulla facilisi. Nunc ac nulla vel arcu blandit dictum. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Aenean vel felis in elit porta suscipit. Praesent posuere mattis justo, quis posuere est pharetra non. Praesent facilisis nulla non arcu dignissim, non vestibulum risus bibendum. Nunc malesuada accumsan sem id facilisis. Suspendisse potenti. Phasellus ultrices metus eu ligula accumsan, in sagittis tellus ultrices. Proin vel risus auctor, bibendum nulla sed, convallis tellus. Ut blandit augue at eros ornare, vel elementum risus pharetra. Morbi venenatis lectus in magna scelerisque blandit. Suspendisse vel urna vel libero rhoncus ornare in vel orci. Donec dignissim sagittis felis et facilisis. Donec vel sapien ac ante malesuada bibendum ut sed neque.\", \"result\": true}\n\n{\"response\": \"Hello\", \"result\": false}\n\n{\"response\": \"This is a response that is less than 200 words\", \"result\": false}"]}
{"query": "hello, can you run ROOT from windows and be efficient ?", "instruction": "Provide a clear and specific step-by-step guide.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'step' in response.lower() and'specific' in response.lower() and 'guide' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return all(part in response for part in ['step-by-step', 'clear','specific'])\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) > 1 and all(word.startswith(tuple('abcdefghijklmnopqrstuvwxyz0123456789:/.')) or word.isalpha() or word.isspace() for word in words)\n", "def evaluate(response: str) -> bool: \n    return \"step\" in response and \"specific\" in response and \"guide\" in response and \"clear\" in response\n"], "testcases": ["{\"response\": \"To bake a cake, you need to mix flour, sugar, and eggs. Then, put the mixture in an oven at 350 degrees for 30 minutes.\", \"result\": true}\n{\"response\": \"You should do something with the project.\", \"result\": false}\n{\"response\": \"First, preheat the oven to 375 degrees. Next, mix the ingredients together and put them in a baking dish.\", \"result\": true}", "{\"response\": \"First, preheat the oven to 350 degrees Fahrenheit. Next, mix the ingredients together.\", \"result\": true}\n{\"response\": \"You can just do this.\", \"result\": false}\n{\"response\": \"Here is a clear guide: first, go to the store, then buy the ingredients, finally make the dish.\", \"result\": true}", "{\"response\": \"To make a sandwich, take two slices of bread, add your choice of meat, cheese, and condiments, and serve.\", \"result\": true}\n{\"response\": \"To be successful, you must be smart, work hard, and have a good attitude.\", \"result\": false}\n{\"response\": \"To assemble a piece of furniture, first remove all packaging materials, then attach the legs, and finally tighten all screws.\", \"result\": true}", "{\"response\": \"To solve the problem, first, you need to step 1, and then step 2 and finally step 3.\", \"result\": true}\n{\"response\": \"This is a guide to solve the problem, but it is not clear and specific.\", \"result\": false}\n{\"response\": \"Step 1: Open the door. Step 2: Close the door. Step 3: Open the door again. This is the solution to the problem.\", \"result\": true}"]}
{"query": "Explain the Akaike information criterion and in which context is useful?", "instruction": "Write a mathematical equation.", "verifiers": ["def evaluate(response: str) -> bool: \n    return any(char.isalpha() and (char.upper() in 'EAX') for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(c.isalpha() for c in response)\n", "def evaluate(response: str) -> bool: \n    return response.strip()!= '' and all(char in '0123456789+-*/().'for char in response)\n", "def evaluate(response: str) -> bool: \n    return 'equation' in response.lower() or 'equation'in response.lower() or 'eqn' in response.lower() or 'equations' in response.lower() or 'eqns' in response.lower() or'mathematical expression' in response.lower() or'mathematical expressions' in response.lower()<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"I love math! The answer is obviously 5\", \"result\": false}\n{\"response\": \"1 x 2 = 2\", \"result\": true}", "{\"response\": \"2 + 2 =\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"1 - 1 =\", \"result\": true}", "{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"This is a mathematical equation: 3*3=9\", \"result\": true}\n{\"response\": \"This is not an equation: 123\", \"result\": false}", "{\"response\": \"The area of a circle is A = \u03c0r^2.\", \"result\": true}\n{\"response\": \"The area of a circle is A = \u03c0r\", \"result\": false}\n{\"response\": \"The area of a circle is A = \u03c0r^2 + 5\", \"result\": false}"]}
{"query": "Creat a React component for Table using following libs: react-table and tailwind, must support multiple styles and variations. Write in Typescript.", "instruction": "Use only words with the letters \"n\" or \"r\" within them.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.lower() in 'nr' for char in response)\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if char.lower() not in 'nr': \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if 'n' not in char.lower() and 'r' not in char.lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response.lower():\n        if char not in 'nr': \n            return False\n    return True\n"], "testcases": ["{\"response\": \"Numerous resources are readily available\", \"result\": true}\n{\"response\": \"This is a normal sentence\", \"result\": false}\n{\"response\": \"Numerous regular resources are readily available now\", \"result\": true}", "{\"response\": \"I like to run and hunt\", \"result\": true}\n{\"response\": \"The cat sat on the mat\", \"result\": false}\n{\"response\": \"The runner ran north\", \"result\": true}", "{\"response\": \"The number of cars on the road has decreased sharply this year.\", \"result\": false}\n{\"response\": \"The narrator ran across the burn and reached the runner's inn.\", \"result\": true}\n{\"response\": \"The bank's new system requires a new registration.\", \"result\": true}", "{\"response\": \"Renowned Runners ran numerous rounds.\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \"Numerous runners ran rapidly.\", \"result\": true}"]}
{"query": "give the most common coding interview questions asked for computer science students with answers in pseudocode", "instruction": "restrict to exactly 5 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n"], "testcases": ["{\"response\": \"N-Tile problem in AI?\\nThis problem can be solved using a search algorithm.\\nIt's a common challenge in AI research.\\nA solution involves using a combination of heuristics and backtracking.\\nAnd some other techniques to speed up the process.\", \"result\": true}\n{\"response\": \"This response is too short and does not follow the instruction\", \"result\": false}\n{\"response\": \"N-Tile problem in AI?\\nThis problem can be solved using a search algorithm.\\nIt's a common challenge in AI research.\\nA solution involves using a combination of heuristics and backtracking.\\nAnd some other techniques to speed up the process\\nAnd some other techniques to speed up the process\\nAnother solution exists but requires more advanced algorithms\", \"result\": false}", "{\"response\": \"Response 1\\nResponse 2\\nResponse 3\\nResponse 4\\nResponse 5\", \"result\": true}\n{\"response\": \"Response 1\\nResponse 2\\nResponse 3\\nResponse 4\", \"result\": false}\n{\"response\": \"Response 1\\nResponse 2\\nResponse 3\\nResponse 4\\nResponse 5\\nResponse 6\", \"result\": false}", "{\"response\": \"The N-Tile problem is a well-known problem in the field of artificial intelligence.\\nIt involves placing tiles of different sizes into a grid to form a complete set.\\nThis is a classic example of a constraint satisfaction problem.\\nThere are many different approaches to solving this problem, including dynamic programming and graph theory.\\nEach approach has its own advantages and disadvantages.\", \"result\": true}\n{\"response\": \"The N-Tile problem is a classic problem in artificial intelligence.\\nIt is a classic problem.\\nThere are many different approaches to solving it.\\nEach approach has its own advantages and disadvantages.\\nThis is a classic problem in AI.\", \"result\": false}\n{\"response\": \"The N-Tile problem is a well-known problem in the field of artificial intelligence.\\nIt involves placing tiles of different sizes into a grid to form a complete set.\\nThis is a classic example of a constraint satisfaction problem.\\nThere are many different approaches to solving this problem, including dynamic programming and graph theory.\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\", \"result\": false}"]}
{"query": "create a table to Compare coda.io and notion for me, which one suitable for personal knowledge management and life dashboard, habit tracker, self development,...", "instruction": "Write the response in exactly 20 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n"], "testcases": ["{\"response\": \"This is a test response with exactly 20 words to check the evaluation function\", \"result\": true}\n{\"response\": \"This is a test response with less than 20 words to check the evaluation function\", \"result\": false}\n{\"response\": \"This is a test response with more than 20 words to check the evaluation function that are used in many applications\", \"result\": false}", "{\"response\": \"This is a test response that is exactly 20 words long, let's see if it passes the evaluation.\", \"result\": true}\n{\"response\": \"This is a test response that is less than 20 words long, it should fail the evaluation.\", \"result\": false}\n{\"response\": \"This is a test response that is more than 20 words long, it should also fail the evaluation.\", \"result\": false}", "{\"response\": \"This is a test sentence with exactly 20 words in the response.\", \"result\": true}\n{\"response\": \"This is a test sentence with less than 20 words in the response.\", \"result\": false}\n{\"response\": \"This is a test sentence with more than 20 words in the response that goes like this: This is a test sentence with more than 20 words in the response that goes like this and also continues on for a while longer still.\", \"result\": false}", "{\"response\": \"This response is exactly 20 words long, it has 20 words that are spaced with a single space.\", \"result\": true}\n{\"response\": \"This response is only 10 words long, it has 10 words that are spaced with a single space.\", \"result\": false}\n{\"response\": \"This response is exactly 20 words long, it has 20 words that are spaced with multiple spaces, or with tabs, or with commas and other characters.\", \"result\": false}"]}
{"query": "What is the market share of different screenwriting softwares", "instruction": "Write in markdown formatting", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"#\") or (response.startswith(\"##\") and response.endswith(\"#\")) or (response.startswith(\"###\") and response.endswith(\"#\") and \"#\" not in response[3:-1]) or (response.startswith(\"####\") and response.endswith(\"#\") and \"#\" not in response[4:-1])\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#') and response.endswith('##') or response.startswith('##') and response.endswith('###')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('### ') or response.startswith('## ') or response.startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#') or response.startswith('###') or response.startswith('####') or response.startswith('#####') or response.startswith('######') or response.startswith('#######')\n"], "testcases": ["{\"response\": \"## This is a title\", \"result\": true}\n{\"response\": \"This is not a markdown formatted response\", \"result\": false}\n{\"response\": \"# # This is a not so good markdown formatted response\", \"result\": true}", "{\"response\": \"## The answer is # The response is correct\", \"result\": true}\n{\"response\": \"The answer is The response is correct\", \"result\": false}\n{\"response\": \"# # The answer is # The response is correct\", \"result\": true}", "{\"response\": \"### Hello World\", \"result\": true}\n{\"response\": \"This is a normal heading\", \"result\": false}\n{\"response\": \"# This is another heading\", \"result\": true}", "{\"response\": \"### Heading\", \"result\": false}\n{\"response\": \"# Heading\", \"result\": false}\n{\"response\": \"Heading\", \"result\": true}"]}
{"query": "Are you familiar with the game franchise FNaF?", "instruction": "Use only 50 words or less.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n"], "testcases": ["{\"response\": \"The response is too short. It contains only a few words.\", \"result\": true}\n{\"response\": \"The response is just a few sentences and is well within the limit.\", \"result\": true}\n{\"response\": \"This response is 60 words and will be rejected.\", \"result\": false}", "{\"response\": \"The cat is black and white.\", \"result\": true}\n{\"response\": \"The cat is black and white and grey.\", \"result\": false}\n{\"response\": \"The cat is black and white and grey and brown.\", \"result\": false}", "{\"response\": \"This is a short response that is only 20 words long.\", \"result\": true}\n{\"response\": \"This is a medium response that is 50 words long. It is a good length for a simple answer.\", \"result\": true}\n{\"response\": \"This is a very long response that is 60 words long. It is too long for this exercise.\", \"result\": false}", "{\"response\": \"The N-Tile problem is a classic problem in computer science. It is solved using a backtracking algorithm. The algorithm tries all possible configurations of the tiles. It works well for small inputs but can be slow for large inputs.\", \"result\": true}\n{\"response\": \"The N-Tile problem is a classic problem in computer science. It is solved using a backtracking algorithm. The algorithm tries all possible configurations of the tiles. It works well for small inputs but can be slow for large inputs. The algorithm has many other applications in computer science. It is also used in machine learning and data science.\", \"result\": false}\n{\"response\": \"The N-Tile problem\", \"result\": true}"]}
{"query": "It's a photo of my departure building which have learned for 4 years. The photo is focus on that building and surrounded with tall trees like it circled the building", "instruction": "Use only vocabulary that starts with the letter \"S\" and is no more than 5 letters long.", "verifiers": ["def evaluate(response: str) -> bool: \n    for char in response:\n        if char.isalpha() and not char.islower() and len(char) == 1:\n            return False\n        if char.lower() not in'stuvwxyz' or len(char) > 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 and word[0].upper() == 'S' for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(any(c.upper() == 'S' for c in word) and len(word) <= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if char.upper() not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ': \n            return False\n        if len(char.upper()) > 5: \n            return False\n        if not char.upper()[0] == 'S': \n            return False\n    return True\n"], "testcases": ["{\"response\": \"The sun shines strongly.\", \"result\": false}\n{\"response\": \"Slow, sly snake slithers.\", \"result\": true}\n{\"response\": \"Summer sunsets are short.\", \"result\": false}", "{\"response\": \"Sun is shining, Sand is hot, Sleep is sweet.\", \"result\": true}\n{\"response\": \"Hello, my name is Max and I love to eat sandwiches.\", \"result\": false}\n{\"response\": \"The sky is blue, the sun is bright, sand is everywhere.\", \"result\": true}", "{\"response\": \"The sun shines brightly every day.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": false}\n{\"response\": \"Swift Sand Snow Slip.\", \"result\": false}", "{\"response\": \"Simple sales shine.\", \"result\": true}\n{\"response\": \"Beautiful cats are awesome.\", \"result\": false}\n{\"response\": \"Speedy sales staff serve snacks.\", \"result\": false}"]}
{"query": "If i built a new DLL, is there a way to force my executable to use my new DLL rather than the one installed on the Windows system?", "instruction": "Include only numerical values in your response.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.isdigit() or response.replace('.', '', 1).isdigit()\n", "def evaluate(response: str) -> bool: \n    return response.isdigit() or response.replace('.','').isdigit() or response.replace(',','').isdigit()\n", "def evaluate(response: str) -> bool: \n    return response.isnumeric()\n", "def evaluate(response: str) -> bool: \n    return response.isdigit()\n"], "testcases": ["{\"response\": \"12345\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"1.23 and 45.67\", \"result\": false}", "{\"response\": \"123\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"456.78\", \"result\": true}", "{\"response\": \"12345\", \"result\": true}\n{\"response\": \"abc123\", \"result\": false}\n{\"response\": \"09876\", \"result\": true}", "{\"response\": \"12345\", \"result\": true}\n{\"response\": \"abcde\", \"result\": false}\n{\"response\": \"Hello123\", \"result\": false}"]}
{"query": "The human mind is how nature invented mathematics.", "instruction": "Answer in exactly 3 sentences, with the first sentence being 10 words, the second sentence being 15 words, the third sentence being 20 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    if len(sentences)!= 3: \n        return False\n    words = [sentence.split() for sentence in sentences]\n    if len(words[0])!= 10: \n        return False\n    if len(words[1])!= 15: \n        return False\n    if len(words[2])!= 20: \n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3: return False\n    words = [sentence.split() for sentence in sentences]\n    if len(words[0])!= 10: return False\n    if len(words[1])!= 15: return False\n    if len(words[2])!= 20: return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3:\n        return False\n    words = sentences[0].split()\n    if len(words)!= 10:\n        return False\n    words = sentences[1].split()\n    if len(words)!= 15:\n        return False\n    words = sentences[2].split()\n    if len(words)!= 20:\n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3:\n        return False\n    for i, sentence in enumerate(sentences):\n        words = sentence.split()\n        if (i == 0 and len(words)!= 10) or (i == 1 and len(words)!= 15) or (i == 2 and len(words)!= 20):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"I am going to the store to buy some milk. The store is located on the corner of Main and Oak. The employee was very helpful and courteous throughout my entire transaction today.\", \"result\": true}\n{\"response\": \"I am going to the store to buy some milk. The store is located on the corner of Main and Oak.\", \"result\": false}\n{\"response\": \"I am going to the store to buy some milk. The store is located on the corner of Main and Oak. The employee was very helpful and courteous throughout my entire transaction today and made me feel at home always.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their beautiful songs every morning. The world is a wonderful place full of beauty and wonder.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their beautiful songs every morning.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their beautiful songs every morning. The world is a wonderful place full of beauty and wonder and full of life.\", \"result\": false}", "{\"response\": \"I love reading books about space and the universe outside Earth.\", \"result\": False}\n{\"response\": \"The human body is made up of many organs including lungs kidneys and heart.\", \"result\": False}\n{\"response\": \"I am going to the store to buy some milk and eggs today outside.\", \"result\": False}", "{\"response\": \"The sun is shining brightly in the clear blue sky today. The birds are singing their sweet melodies so loudly outside my window. The warm breeze is blowing gently through the trees on this beautiful day.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies so loudly outside my window. The warm breeze is blowing gently through the trees on this beautiful day outside my house.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies so loudly outside my window and making a lot of noise today. The warm breeze is blowing gently through the trees on this beautiful day outside my house with my friends and family.\", \"result\": false}"]}
{"query": "N-Tile problem in AI?", "instruction": "Answer in exactly 7 steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.split() == ['answer', 'in', 'exactly', '7','steps']\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7 \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n"], "testcases": ["{\"response\": \"Answer in exactly 7 steps\", \"result\": false}\n{\"response\": \"1. Step 1 description\\n2. Step 2 description\\n3. Step 3 description\\n4. Step 4 description\\n5. Step 5 description\\n6. Step 6 description\\n7. Step 7 description\", \"result\": true}\n{\"response\": \"1. Step 1 description\\n2. Step 2 description\\n3. Step 3 description\\n4. Step 4 description\\n5. Step 5 description\", \"result\": false}", "{\"response\": \"Step 1: Describe the problem. Step 2: Analyze the problem. Step 3: Develop a solution. Step 4: Test the solution. Step 5: Refine the solution. Step 6: Evaluate the results. Step 7: Document the process.\", \"result\": true}\n{\"response\": \"Step 1: Describe the problem. Step 2: Analyze the problem. Step 3: Develop a solution. Step 4: Test the solution. Step 5: Refine the solution. Step 6: Evaluate the results.\", \"result\": false}\n{\"response\": \"This is not a solution, just a statement about the problem.\", \"result\": false}", "{\"response\": \"Step 1: First, step 2: next, step 3: follow, step 4: now, step 5: last, step 6: almost, step 7: done.\", \"result\": true}\n{\"response\": \"Step 1: First, step 2: next, step 3: follow, step 4: now, step 5: last, step 6: almost, step 7: done, step 8: finished.\", \"result\": false}\n{\"response\": \"Step 1: First, step 2: next, step 3: follow, step 4: now, step 5: last, step 6: almost, \", \"result\": false}", "{\"response\": \"Here is step 1, step 2, step 3, step 4, step 5, step 6, step 7.\", \"result\": true}\n{\"response\": \"Here is step 1, step 2, step 3, step 4, step 5, step 6.\", \"result\": false}\n{\"response\": \"Here is step 1, step 2, step 3, step 4, step 5, step 6, step 7, step 8, step 9, step 10, step 11.\", \"result\": false}"]}
{"query": "how to create pixar characters midjourney", "instruction": "Use no capital letters", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.islower() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.islower() \n", "def evaluate(response: str) -> bool: \n    return all(char.islower() for char in response) \n", "def evaluate(response: str) -> bool: \n    return all(char.islower() for char in response)\n"], "testcases": ["{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"i am a developer\", \"result\": true}\n{\"response\": \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\", \"result\": false}", "{\"response\": \"can you make me individual discord.py bot commands\", \"result\": true}\n{\"response\": \"I Can Make You Individual Discord.py Bot Commands\", \"result\": false}\n{\"response\": \"Can you make me INDIVIDUAL discord.py bot commands?\", \"result\": false}", "{\"response\": \"Can you make me indivual discord.py bot commands?\", \"result\": false}\n{\"response\": \"this is a response in all lowercase\", \"result\": true}\n{\"response\": \"This Is A Mixed Case Response\", \"result\": false}", "{\"response\": \"hello, how are you?\", \"result\": true}\n{\"response\": \"I'm doing great, thanks for asking!\", \"result\": true}\n{\"response\": \"You failed to follow the instruction!\", \"result\": false}"]}
{"query": "hello", "instruction": "Write a short story about a time traveler in exactly 5 paragraphs, with exactly 5 sentences per paragraph.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('. ')  # Split the response into sentences based on '. '\n    return len(paragraphs) == 5 and all(len(paragraph.split('. ')) == 5 for paragraph in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    return len(paragraphs) == 5 and all(len(paragraph.split('\\n')) == 5 for paragraph in paragraphs)\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n')) == 5 and len(response.split('\\n\\n')[0].split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 5: \n        return False\n    for paragraph in paragraphs: \n        sentences = paragraph.split('.')\n        if len(sentences)!= 5: \n            return False\n    return True\n"], "testcases": ["{\"response\": \"The time traveler stood in front of the old clock, feeling the weight of the moment. She knew that she had to make a choice. Her heart was racing as she decided to go back in time. She felt the clock spin around her and when it stopped, she found herself standing in a field of flowers. The sun was shining brightly in the clear blue sky.\", \"result\": true}\n{\"response\": \"The time traveler was a man who traveled through time. He was on a mission to see as much as he could. He went to ancient Egypt and saw the pyramids. He went to the future and saw flying cars. He was a very adventurous person.\", \"result\": false}\n{\"response\": \"The time traveler stood on the edge of the cliff, feeling the wind blowing through her hair. She looked out at the vast expanse of the ocean below her. She took a deep breath and closed her eyes, feeling the sun on her face. She opened her eyes and looked out at the sea again. She knew that she had to keep moving forward.\", \"result\": false}", "{\"response\": \"The time machine whirred to life as I stepped inside. I had always been fascinated by history and the possibility of visiting the past. My destination was ancient Egypt during the reign of Ramses II. I pressed a few buttons and waited for the machine to do its work. The world around me began to blur and fade away.\", \"result\": false}\n{\"response\": \"The time machine whirred to life as I stepped inside. I had always been fascinated by history and the possibility of visiting the past. My destination was ancient Egypt during the reign of Ramses II. I pressed a few buttons and waited for the machine to do its work. The world around me began to blur and fade away. The sounds of the machine grew louder and more intense. My stomach began to drop as the machine lurched forward through time and space. I felt a strange sensation, like my molecules were being rearranged. When the machine finally stopped, I found myself standing in the middle of a bustling market. People in traditional clothing passed by, eyeing me curiously. I tried to take it all in, but it was overwhelming. The smells of exotic spices and fresh bread wafted through the air, enticing me to explore. The sun beat down on me, and I felt a bead of sweat trickle down my forehead. I knew I had to be careful not to draw attention to myself, so I kept a low profile and blended in with the crowd. The sounds of merchants hawking their wares and the rustle of fabric as people moved through the crowd created a cacophony of noise. I felt like a fish out of water, but I was determined to make the most of my time in ancient Egypt.\", \"result\": false}\n{\"response\": \"The time machine whirred to life as I stepped inside. I had always been fascinated by history and the possibility of visiting the past. My destination was ancient Egypt during the reign of Ramses II. I pressed a few buttons and waited for the machine to do its work. The world around me began to blur and fade away. The sounds of the machine grew louder and more intense. My stomach began to drop as the machine lurched forward through time and space. I felt a strange sensation, like my molecules were being rearranged. When the machine finally stopped, I found myself standing in the middle of a bustling market. People in traditional clothing passed by, eyeing me curiously. I tried to take it all in, but it was overwhelming. The smells of exotic spices and fresh bread wafted through the air, enticing me to explore. The sun beat down on me, and I felt a bead of sweat trickle down my forehead. I knew I had to be careful not to draw attention to myself, so I kept a low profile and blended in with the crowd. The sounds of merchants hawking their wares and the rustle of fabric as people moved through the crowd created a cacophony of noise. I felt like a fish out of water, but I was determined to make the most of my time in ancient Egypt. I made my way through the crowded streets, taking in the sights and sounds of a bygone era. I stopped at a small food stall and ordered a plate of falafel. The vendor handed me a warm pita bread and a plate of crispy, flavorful falafel. I took a bite, and the combination of spices and herbs exploded on my tongue. It was incredible. I finished my meal and continued on my way, determined to explore every inch of ancient Egypt.\", \"result\": true}", "{\"response\": \"The time traveler arrived in ancient Egypt and was amazed by the pyramids. They were even more impressed by the Sphinx. The time traveler met a pharaoh and asked him about the pyramids. The pharaoh told him that they were built to honor the gods. The time traveler was in awe of the pharaoh's wisdom.\", \"result\": true}\n{\"response\": \"The time traveler arrived in ancient Egypt and was amazed by the pyramids. They were even more impressed by the Sphinx. The time traveler met a pharaoh and asked him about the pyramids. The pharaoh told him that they were built to honor the gods.\", \"result\": false}\n{\"response\": \"The time traveler arrived in ancient Egypt and was amazed by the pyramids. They were even more impressed by the Sphinx. The time traveler met a pharaoh and asked him about the pyramids. The pharaoh told him that they were built to honor the gods. The time traveler was in awe of the pharaoh's wisdom. The pyramids were indeed impressive structures.\", \"result\": false}", "{\"response\": \"A time traveler visited ancient Egypt. She marveled at the pyramids. The air was hot and dry. The people were friendly and welcoming. She felt like she had stepped into a different world.\\n\\nShe saw the pharaohs and their elaborate headdresses. The temples were grand and ornate. The sounds of the city were a cacophony of carriages and vendors. She tried some exotic foods and drinks. She was fascinated by the customs and traditions of the Egyptians.\\n\\nShe visited the great library of Alexandria. The ancient scrolls were a treasure trove of knowledge. She spent hours studying the works of the great philosophers. The city was a hub of learning and culture. She felt a sense of awe and wonder.\\n\\nShe took a boat ride along the Nile. The river was serene and peaceful. The scenery was breathtaking. She saw exotic birds and plants. She felt a sense of calm and relaxation.\\n\\nShe eventually said goodbye to her new friends. She was sad to leave Egypt behind. She knew she would never forget her experiences. She was grateful for the opportunity to visit. She felt like she had grown and learned so much.\", \"result\": true}\n\n{\"response\": \"A time traveler visited ancient Egypt. She marveled at the pyramids. The air was hot and dry. The people were friendly and welcoming.\", \"result\": false}\n\n{\"response\": \"A time traveler visited ancient Egypt. She marveled at the pyramids. The air was hot and dry. The people were friendly and welcoming. She felt like she had stepped into a different world. She saw the pharaohs and their elaborate headdresses. The temples were grand and ornate. The sounds of the city were a cacophony of carriages and vendors. She tried some exotic foods and drinks. She was fascinated by the customs and traditions of the Egyptians. She visited the great library of Alexandria. The ancient scrolls were a treasure trove of knowledge. She spent hours studying the works of the great philosophers. The city was a hub of learning and culture. She felt a sense of awe and wonder. She took a boat ride along the Nile. The river was serene and peaceful. The scenery was breathtaking. She saw exotic birds and plants. She felt a sense of calm and relaxation. She eventually said goodbye to her new friends. She was sad to leave Egypt behind. She knew she would never forget her experiences. She was grateful for the opportunity to visit. She felt like she had grown and learned so much. This was not the end of her journey though.\", \"result\": false}"]}
{"query": "Hey! Could we talk about SaaS firms? Especially regarding their PR and Communication.", "instruction": "Provide a minimum of 5 bullet points, exactly 4 words in each.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(4 <= len(item.split()) == 4 for item in response.replace('.', '').replace('?', '').split('-')) and len(response.replace('.', '').replace('?', '').split('-')) >= 5\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n') # Split the response into separate points\n    if len(points) >= 5: # Check if there are at least 5 points\n        for point in points:\n            words = point.split() # Split each point into words\n            if len(words) == 4: # Check if each point has exactly 4 words\n                continue\n            else:\n                return False\n    else:\n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.split('.')\n    if len(bullet_points) < 5: \n        return False\n    for point in bullet_points:\n        point = point.strip()\n        if len(point.split())!= 4 or not point.strip(): \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    points = response.replace('*', '').split('\\n')\n    return len(points) >= 5 and all(len(point.split()) == 4 for point in points)\n"], "testcases": ["{\"response\": \"Here are the main points: \u2022 Python is a language \u2022 Python is widely used \u2022 Python is easy to learn \u2022 Python is in demand \u2022 Python is a great choice\", \"result\": true}\n{\"response\": \"Here are some points: \u2022 This is a good day \u2022 The weather is nice \u2022 I love this food\", \"result\": false}\n{\"response\": \"Here are the requirements: \u2022 We need a new laptop \u2022 The laptop must be fast \u2022 The laptop should have storage \u2022 The laptop must be affordable \u2022 The laptop should have good quality\", \"result\": true}", "{\"response\": \"\u2022 The sun sets very fast\\n\u2022 The dogs are very friendly\\n\u2022 The ocean is very deep\\n\u2022 The clouds are very white\\n\u2022 The trees are very tall\", \"result\": true}\n{\"response\": \"\u2022 The cat is very happy\\n\u2022 The dog is very sad\", \"result\": false}\n{\"response\": \"\u2022 The car is very red\\n\u2022 The tree is very tall\\n\u2022 The cloud is very white\\n\u2022 The dog is very friendly\\n\u2022 The sun is very warm\\n\u2022 The stars are very bright\", \"result\": true}", "{\"response\": \"\u2022 Time travel is very cool.\\n\u2022 It allows for adventure.\\n\u2022 Traveling through space is exciting.\\n\u2022 But it can also be difficult.\\n\u2022 Requires a time machine.\", \"result\": true}\n{\"response\": \"I love this movie.\", \"result\": false}\n{\"response\": \"\u2022 I love this movie.\\n\u2022 It is very long.\\n\u2022 The actors were good.\\n\u2022 The plot was interesting.\", \"result\": false}", "{\"response\": \"Here are my points\\n\u2022 Big cats are cool\\n\u2022 Dogs are very good\\n\u2022 Elephants are large animals\\n\u2022 Fish swim in water\\n\u2022 Cats are very playful\", \"result\": true}\n{\"response\": \"Here are my points\\n\u2022 Cats are nice\\n\u2022 Dogs are good\", \"result\": false}\n{\"response\": \"Here are my points\\n\u2022 Cats are very nice\\n\u2022 Dogs are very good\\n\u2022 Elephants are large animals\\n\u2022 Fish swim in water\\n\u2022 Cats are very playful\\n\u2022 Birds are very loud\", \"result\": true}"]}
{"query": "Write structured text for a PLC to control door with a lock and alarm", "instruction": "Include ASCII art of a door", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'door\\n' in response and 'alarm\\n' in response and any(c in response for c in ['/','|','\\\\', '/', '*', '^', '+', '`']) \n", "def evaluate(response: str) -> bool: \n    return \"door\" in response and \"\\n\" in response and \"|\" in response and \"/\" in response and \"\\\\\" in response\n", "def evaluate(response: str) -> bool: \n    return 'door' in response and '\\n' in response and any(c in response for c in ['|', '/', '\\\\', '+', '-', '~']) \n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = re.compile(r'^\\s*\\|\\s*\\|\\s*-----\\s*\\|\\s*\\|\\s*\\|')\n    return bool(pattern.search(response))\n"], "testcases": ["{\"response\": \"  _______\\n|       |\\n|  __  |\\n| /  \\\\ |\\n| |  | |\\n| |__| |\\n|_____/\\n\", \"result\": true}\n{\"response\": \"This is a test response that does not contain a door.\\nIt does not even contain any ASCII characters.\", \"result\": false}\n{\"response\": \"This response includes a door:\\n   _______\\n  /      \\\\\\n /        \\\\\\n|  __   |\\n| /  \\  |\\n| |  | |\\n| |__| |\\n|_______/\\n\", \"result\": true}", "{\"response\": \"   _______\\n  |       |\\n  |  O   |\\n  |       |\\n  |_______|\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"   _______\\n  |       |\\n  |  O   |\\n  |       |\\n  |_______|\\n   _______\\n  |       |\\n  |  O   |\\n  |       |\\n  |_______|\\n   _______\\n  |       |\\n  |  O   |\\n  |       |\\n  |_______|\", \"result\": false}", "{\"response\": \"___________\\n|       |\\n|  __  |\\n| /  \\\\ |\\n|/____\\\\\", \"result\": true}\n{\"response\": \"The door is a simple structure used to enter and exit a building.\", \"result\": false}\n{\"response\": \"___________\\n|       |\\n|  __  |\\n| /  \\\\ |\\n|/____\\\\|\\n___________\\n|       |\\n|  __  |\\n| /  \\\\ |\\n|/____\\\\\", \"result\": false}", "{\"response\": \"Here is a door\\n*********\\n*       *\\n*  DOOR  *\\n*       *\\n*********\\n\", \"result\": true}\n{\"response\": \"Here is a house\\n*********\\n*       *\\n*        *\\n*       *\\n*********\\n\", \"result\": false}\n{\"response\": \"Here is a door\\n*********\\n*  DOOR  *\\n*       *\\n*       *\\n*********\\n\", \"result\": true}"]}
{"query": "Write a chrome plugin that disables turbolinks on webpages that have turbolinks enabled", "instruction": "Use exactly 5 words for each step.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == len(set(len(sublist) for sublist in [words[i:i+5] for i in range(0, len(words), 5)])) == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == (len(response.split('\\n')) * 5)\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    return len(words) == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    return len(words) == 5\n"], "testcases": ["{\"response\": \"Open door. Unlock door. Close door. Lock door. Move forward.\", \"result\": true}\n{\"response\": \"Open the door. Unlock and close it.\", \"result\": false}\n{\"response\": \"Open door. Unlock door. Close door. Lock door. Move forward now.\", \"result\": false}", "{\"response\": \"The door has a lock\\nIt opens with a key\\nIt's very secure and safe\\nThe lock can be changed\\nclose the door now please\", \"result\": true}\n{\"response\": \"The door has a key\\nIt opens with a key\\nIt's very secure and safe\\nThe lock can be changed\\nclose the door\", \"result\": false}\n{\"response\": \"The door has a lock\\nIt opens with a key\\nIt's very secure and safe\", \"result\": false}", "{\"response\": \"Make a delicious chocolate cake today with friends.\", \"result\": false}\n{\"response\": \"Make a delicious chocolate cake today with friends. Add some sugar next step. Bake for 20 minutes. Let it cool completely. Serve and enjoy.\", \"result\": true}\n{\"response\": \"Make a delicious chocolate cake today with friends. Add some sugar next step. Bake for 20 minutes. Let it cool completely.\", \"result\": false}", "{\"response\": \"Step 1: Open the door. Step 2: Move forward slowly. Step 3: Listen carefully always. Step 4: Be cautious inside. Step 5: Watch your step.\", \"result\": true}\n{\"response\": \"Step 1: Open the door. Step 2: Move forward. Step 3: Be careful inside.\", \"result\": false}\n{\"response\": \"Step 1: Open the door slowly. Step 2: Move forward carefully. Step 3: Listen always. Step 4: Be cautious. Step 5: Watch your step carefully.\", \"result\": true}"]}
{"query": "What are ten lifestyle photography ideas I can use to sell my jewelry as a mom?", "instruction": "Provide a numbered list of exactly 3 steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return any(line.lstrip().startswith('1. ') for line in lines) and any(line.lstrip().startswith('2. ') for line in lines) and any(line.lstrip().startswith('3. ') for line in lines) and len(lines) == 3\n", "def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and response.count('.') == 2\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return words.count('1.') + words.count('2.') + words.count('3.') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 3 and all('1.' in response or '2.' in response or '3.' in response)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"1. Open the door. 2. Close the door. 3. Lock the door.\", \"result\": true}\n{\"response\": \"1. Open the door. 2. Close the door.\", \"result\": false}\n{\"response\": \"1. Open the door. 2. Close the door. 3. Lock the door. 4. Check the lock.\", \"result\": false}", "{\"response\": \"1. Go to the store. 2. Buy milk. 3. Come home.\", \"result\": true}\n{\"response\": \"1. Buy groceries. 2. Cook dinner. 3. Relax.\", \"result\": true}\n{\"response\": \"Buy groceries. Cook dinner. Relax.\", \"result\": false}", "{\"response\": \"1. Learn Python\\n2. Learn Java\\n3. Practice algorithms\", \"result\": true}\n{\"response\": \"1. Learn Python\\n2. Learn Java\\n3. Practice algorithms\\n4. Practice data structures\", \"result\": false}\n{\"response\": \"No list provided\", \"result\": false}", "{\"response\": \"1. Step one. 2. Step two. 3. Step three.\", \"result\": true}\n{\"response\": \"1. Step one. 2. Step two.\", \"result\": false}\n{\"response\": \"1. Step one. 2. Step two. 3. Step three. 4. Step four.\", \"result\": false}"]}
{"query": "create a OCR scanner app on flutterShare Prompt", "instruction": "Use no more than 3 functions and implement it with flutter", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'flutter' in response and len(response.split('flutter')[0]) + len(response.split('flutter')[1]) <= 28\n", "def evaluate(response: str) -> bool: \n    return 'flutter' in response and response.count('flutter') <= 3\n", "def evaluate(response: str) -> bool: \n    return 'Use' in response and 'no more than 3' in response and 'flutter' in response and len(response.split('Use')) == 2 and len(response.split('no more than 3')[0]) == 1\n", "def evaluate(response: str) -> bool: \n    return 'flutter' in response and len(response.split()[-1]) == 3\n"], "testcases": ["{\"response\": \"I am a beginner in programming and I can write a hello world program using Python.\\nI can also write a basic calculator program using Python.\\nI can also write a simple quiz program using Python.\", \"result\": true}\n{\"response\": \"I am a beginner in programming and I can write a hello world program using Python.\\nI can also write a basic calculator program using Python.\\nI can also write a simple quiz program using Python.\\nI can also write a complex calculator program using Python.\\nI can also write a game program using Python.\", \"result\": false}\n{\"response\": \"I am a beginner in programming and I can write a hello world program using Python.\", \"result\": true}", "{\"response\": \"flutter is an awesome ui framework and flutter can be used to make mobile apps and flutter can handle a variety of tasks\\n flutter is very popular among developers and flutter can be used for ios and android\\n flutter is easy to learn and flutter has a lot of resources available\", \"result\": true}\n{\"response\": \"flutter is a cross platform framework and flutter can be used to make mobile apps and flutter can handle a variety of tasks and flutter is easy to learn and flutter has a lot of resources available\", \"result\": false}\n{\"response\": \"flutter is an awesome ui framework and flutter can be used to make mobile apps and flutter can handle a variety of tasks and flutter can be used for ios and android and flutter is easy to learn and flutter has a lot of resources available\", \"result\": false}", "{\"response\": \"To implement this app, we will use the flutter framework.\", \"result\": true}\n{\"response\": \"We will implement the backend with node.js, frontend with flutter and database with MongoDB.\", \"result\": false}\n{\"response\": \"The app will use flutter for the UI, firebase for backend and Firestore for database.\", \"result\": true}", "{\"response\": \"A bot can be made with a single command with flutter.\", \"result\": false}\n{\"response\": \"A bot can be made using a single command with flutter.\", \"result\": false}\n{\"response\": \"A bot can be made using a single command with flutter and it is easy to implement.\", \"result\": true}"]}
{"query": "can you make me indivual discord.py bot commands?", "instruction": "include at least two functions for each command", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if word.lower() in ['bot', 'command', 'discord', 'individual','make','me', 'you']:\n            num_functions = 0\n            for next_word in words[words.index(word) + 1:]:\n                if next_word.lower() == 'function' or next_word.lower() == 'functions' or next_word.lower() == 'func':\n                    num_functions += 1\n                elif next_word.startswith('for'):\n                    break\n            if num_functions < 2:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) >= 2 and all('functions' in word for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(1, len(words), 2):\n        if words[i-1]!= 'function':\n            return False\n    return len(words) > 2\n", "def evaluate(response: str) -> bool: \n    response = response.replace('-','')\n    words = response.split()\n    commands = ['bot', 'commands']\n    count = 0\n    for word in words:\n        for command in commands:\n            if word.lower() == command:\n                words.remove(word)\n                break\n    for word in words:\n        count += len(word.split())\n    return len(words) >= 2 and count >= 4\n"], "testcases": ["{\"response\": \"bot on start function on message function on error\", \"result\": true}\n{\"response\": \"bot on start on message function on error on command\", \"result\": true}\n{\"response\": \"bot on start on message function on error on command on start function on error function on command\", \"result\": false}", "{\"response\": \"The command /hello has a function to send a greeting and another to send a random joke.\", \"result\": true}\n{\"response\": \"The command /help has a function to list all commands.\", \"result\": false}\n{\"response\": \"The command /admin has a function to ban users and another to kick them.\", \"result\": true}", "{\"response\": \"The bot has two functions: greet and farewell.\", \"result\": true}\n{\"response\": \"The bot has a single function: help.\", \"result\": false}\n{\"response\": \"The bot has three functions: help, start, and stop.\", \"result\": true}", "{\"response\": \"This bot supports the following commands: /hello and /goodbye. The /hello command greets the user, and the /goodbye command bids farewell.\", \"result\": true}\n{\"response\": \"This bot only supports a single command: /hello. This command greets the user.\", \"result\": false}\n{\"response\": \"This bot supports three commands: /hello, /goodbye, and /help. The /hello command greets the user, the /goodbye command bids farewell, and the /help command provides a list of supported commands.\", \"result\": true}"]}
{"query": "Why might the built-in moisture meter not be as accurate as a separate moisture meter?\nPlease explain in detail.\n \n \n \n \uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Answer in no more than 50 words, without any complex sentences, and with a formal tone, using only past tense verbs.", "verifiers": ["def evaluate(response: str) -> bool: \n    count_sentences = response.count('.') + response.count('?') + response.count('!')\n    return len(response) <= 50 and count_sentences == 1 and all(char.islower() or char.isspace() or char in '.,!?;' for char in response) and not any(char in ['can', 'would','should'] for char in response.split()) and all(response.split()[i].lower().endswith('ed') for i in range(len(response.split()) - 1)) \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) > 6: \n        return False \n    for word in words: \n        if '.' in word or ',' in word or '?' in word or '!' in word: \n            return False \n    verbs = ['was', 'were', 'had', 'had been', 'had been used', 'was used', 'were used']\n    if any([verb in word for word in words for verb in verbs if word.lower() == verb]): \n        return False \n    return len(response) <= 50 and response.islower()<|eot_id|>", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 2 and all(len(s.split()) <= 2 for s in response.split('.')) and len(response) <= 50 and all(word[-2:] == 'ed' or word[-3:] == 'ing' or word[-2:] == 'edly' for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    response = response.replace(',', '').replace('.', '').replace('?', '')\n    words = response.split()\n    count = len(words)\n    if len(response) > 50:\n        return False\n    for word in words:\n        if word[-2:] not in ['ed', 'en'] or word[-3:] not in ['ing', 'ed']:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"What was the purpose of the trip to the doctor's office? She said that she had been feeling unwell.\", \"result\": true}\n{\"response\": \"The new employee had several meetings with her supervisor to discuss the changes in the company's policy. She was very confident and knowledgeable about the subject.\", \"result\": false}\n{\"response\": \"The company's profits decreased last quarter. The management team was not satisfied with the results.\", \"result\": false}", "{\"response\": \"I walked to the store. I bought milk. I paid for it. I left.\", \"result\": true}\n{\"response\": \"I went to the store. It had many interesting things. The prices were reasonable. The staff was friendly.\", \"result\": false}\n{\"response\": \"We took a plane to Paris. The flight was delayed. The weather was rainy. We arrived safely.\", \"result\": false}", "{\"response\": \"I visited the doctor. I was feeling unwell. I got a prescription.\", \"result\": true}\n{\"response\": \"The company hired a new employee. She worked hard. They were very satisfied with her work.\", \"result\": true}\n{\"response\": \"The new restaurant was opened by a famous chef. He served a variety of dishes including pasta, pizza and burgers.\", \"result\": false}", "{\"response\": \"The researcher studied the impact of climate change on marine ecosystems.\", \"result\": true}\n{\"response\": \"The students walked to the beach and played in the waves.\", \"result\": true}\n{\"response\": \"The team discovered a new species of fish in the deep sea and named it after the scientist who led the expedition. This discovery opened up new possibilities for future research and sparked a sense of wonder in the scientific community.\", \"result\": false}"]}
{"query": "please propose 10 alternative and striking titles to \"Not all essential genes are equally essential\"", "instruction": "must be exactly 10 words long", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n"], "testcases": ["{\"response\": \"The company was founded in the year one thousand nine hundred and ninety nine\", \"result\": true}\n{\"response\": \"The company was founded in one thousand nine hundred and ninety nine\", \"result\": false}\n{\"response\": \"The company was founded in one thousand nine hundred ninety nine in California\", \"result\": false}", "{\"response\": \"I was sitting on the beach with my family today.\", \"result\": true}\n{\"response\": \"I went to the store to buy some milk.\", \"result\": false}\n{\"response\": \"I was sitting on the beach with my family today and watched the sunset.\", \"result\": false}", "{\"response\": \"The weather was calm on the clear summer morning\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear sky\", \"result\": false}\n{\"response\": \"The sun was shining in a clear blue summer sky today\", \"result\": false}", "{\"response\": \"The weather was sunny yesterday in the mountains last night.\", \"result\": true}\n{\"response\": \"I went to the store to buy milk and eggs.\", \"result\": false}\n{\"response\": \"I ate a sandwich and drank a glass of water.\", \"result\": false}"]}
{"query": "In Geometric Algebra, Maxwell's equations can be written as a single unified equation known as the Maxwell-Heaviside equation. State this equation.", "instruction": "Use mathematical symbols.", "verifiers": ["def evaluate(response: str) -> bool: \n    return any(char.isalpha() or char in '-+*/().=' for char in response) \n", "def evaluate(response: str) -> bool: \n    return any(char.isalpha() or char in \"!-+\\/*=><>\" for char in response)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return any(char.isalpha() for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char.ismath for char in response)\n"], "testcases": ["{\"response\": \"This is a calculation: 2 + 3 =\", \"result\": true}\n{\"response\": \"The answer is 7.\", \"result\": true}\n{\"response\": \"There is no answer yet.\", \"result\": false}", "{\"response\": \"The answer is 2+2.\", \"result\": true}\n{\"response\": \"Hello world.\", \"result\": false}\n{\"response\": \"The equation is x + y = z.\", \"result\": true}", "{\"response\": \"2 + 2 is equal to 4.\", \"result\": true}\n{\"response\": \"I love to drink coffee every morning.\", \"result\": false}\n{\"response\": \"The area of a circle is pi * r^2.\", \"result\": true}", "{\"response\": \"2 + 2 = 4, but 5 - 1 is 4.\", \"result\": true}\n{\"response\": \"The answer is 10 divided by 5.\", \"result\": true}\n{\"response\": \"Hello, my name is John.\", \"result\": false}"]}
{"query": "Explain different types of comprehensive reports with examples", "instruction": "Write in a single paragraph with exactly 20 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n"], "testcases": ["{\"response\": \"The sky is blue and the grass is green and the sun is shining very brightly today.\", \"result\": true}\n{\"response\": \"The sky is blue and the grass is green and the sun is shining very brightly today and it is beautiful.\", \"result\": false}\n{\"response\": \"The sky is blue and the grass is green\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog with a red hat and a big smile on its face.\", \"result\": false}\n{\"response\": \"The sun was shining brightly in the clear blue sky with not a cloud in sight today everywhere.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog with a red hat and a big smile on its face today outside.\", \"result\": true}", "{\"response\": \"The instructor gave us a lot of homework to complete within a short amount of time today outside.\", \"result\": true}\n{\"response\": \"The instructor gave us a lot of homework to complete within a short amount of time outside.\", \"result\": false}\n{\"response\": \"The instructor gave us a lot of homework to complete within a short amount of time today outside quickly and efficiently.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky today is a beautiful day indeed outside always.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky today is a beautiful day outside always\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky today is a beautiful day indeed outside always in the park.\", \"result\": false}"]}
{"query": "I am teaching a lesson on simple harmonic motion with a pendulum in physics. What are some common misconceptions students will make about Pendulums and simple harmonic motion?", "instruction": "Write a list of misconceptions in bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('\u2022 ') or response.startswith('* ') or response.startswith('- ') or response.startswith('1. ') or response.startswith('2. ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"\u2022 \") or response.startswith(\"- \") or (response.startswith(\"1. \") and \"\u2022\" in response) or (response.startswith(\"1. \") and \"-\" in response)\n", "def evaluate(response: str) -> bool: \n    return response.startswith('\u2022 ') or response.startswith('* ') or response.startswith('- ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"\u2022\") and \"\u2022\" in response[1:]<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Here are some common misconceptions about the new policy: \u2022 Misconception 1, \u2022 Misconception 2, \u2022 Misconception 3.\", \"result\": true}\n{\"response\": \"The new policy has several common misconceptions that are worth addressing.\", \"result\": false}\n{\"response\": \"Here are some common misconceptions about the new policy:\", \"result\": false}", "{\"response\": \"The following are common misconceptions: \u2022 Misconception 1. \u2022 Misconception 2. \u2022 Misconception 3.\", \"result\": true}\n{\"response\": \"This is not a list of misconceptions: The following are common misconceptions. Misconception 1. Misconception 2. Misconception 3.\", \"result\": false}\n{\"response\": \"\u2022 The sky is blue \u2022 The grass is green \u2022 The sun is hot\", \"result\": true}", "{\"response\": \"\u2022 Misconception 1: The Earth is flat.\\n\u2022 Misconception 2: Vaccines are unsafe.\", \"result\": true}\n{\"response\": \"Misconception 1: The Earth is flat.\\nMisconception 2: Vaccines are unsafe.\", \"result\": false}\n{\"response\": \"\u2022 The Earth is round, but some people believe it is flat.\\n\u2022 The COVID-19 vaccine has been proven to be safe.\", \"result\": true}", "{\"response\": \"\u2022 Misconception 1: The earth is flat.\\n\u2022 Misconception 2: You can catch a cold by going outside.\", \"result\": true}\n{\"response\": \"Misconception 1: The earth is flat. Misconception 2: You can catch a cold by going outside.\", \"result\": false}\n{\"response\": \"Here are some common misconceptions:\\n 1. The earth is flat.\\n 2. You can catch a cold by going outside.\", \"result\": false}"]}
{"query": "write a video script for an invitation video for a conference organized by Wix", "instruction": "The script should be exactly 10 minutes long and have exactly 5 speakers", "verifiers": ["def evaluate(response: str) -> bool: \n    keywords = response.split()\n    return len(keywords) == 5 and \"minutes\" in response and \"long\" in response\n", "def evaluate(response: str) -> bool: \n    return'minutes' in response and'speaker' in response and len(response.split()) == 65\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10 and'speakers' in words and len(set(words)) == 5 and 'conference' in words and 'invitations' in words and 'video' in words and'script' in words and'minutes' in words and 'long' in words and 'Wix' in words\n", "def evaluate(response: str) -> bool:    \n    minutes = response.lower().split('minutes')\n    speakers = response.lower().split('speaker')\n    return len(minutes) == 1 and len(minutes[0].split()[0]) == '10' and len(speakers) == 5\n"], "testcases": ["{\"response\": \"The response is exactly 10 words long and contains the keyword'minute'.\", \"result\": true}\n{\"response\": \"This is a very long script that has 10 minutes of content\", \"result\": false}\n{\"response\": \"The response is a very short script that has 1 minute of content and only 1 speaker.\", \"result\": false}", "{\"response\": \"The script will cover 3 main points. 1. Introduction by the host. 2. Presentation by the speaker 1. 3. Q&A session.\", \"result\": false}\n{\"response\": \"The script is divided into 5 parts. The host introduces the topic. 2 speakers will present their ideas. Then there will be a Q&A session. Finally, the host will summarize the key points. \", \"result\": true}\n{\"response\": \"The script starts with a 2-minute introduction by the host. 3 speakers will present their ideas. 2 speakers will give a short presentation each. Then there will be a Q&A session. \", \"result\": false}", "{\"response\": \"The presentation is 10 minutes long and will have 5 speakers.\", \"result\": true}\n{\"response\": \"The presentation is 15 minutes long and will have 3 speakers.\", \"result\": false}\n{\"response\": \"The presentation is 10 minutes long but has 7 speakers.\", \"result\": false}", "{\"response\": \"The presentation is 10 minutes long and has 5 speakers, including the presenter.\", \"result\": true}\n{\"response\": \"The presentation is 10 minutes long, but there are only 3 speakers.\", \"result\": false}\n{\"response\": \"The presentation is 5 minutes long and has 5 speakers, including the presenter.\", \"result\": false}"]}
{"query": "What happens if you go outdoors in cold weather with wet hair?", "instruction": "Provide three bullet points that can be evaluated using natural language processing techniques", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    nlp_words = []\n    for word in words:\n        nlp_words.extend(word.split('-'))\n    nlp_words.extend(response.replace('-','').split())\n    nlp_words = [word for word in nlp_words if word] \n    return len(nlp_words) == 3\n", "def evaluate(response: str) -> bool:    \n    response = response.replace('.', '').replace('!', '').replace('?', '')\n    tokens = response.split()\n    return len(tokens) == 3 and all(word in response for word in ['firstly','secondly', 'thirdly', 'first','second', 'third'] or 'and' in response)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len([word for word in words if word.lower().startswith(('can','may', 'will'))]) >= 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) > 0 for word in words) and len(words) >= 3 and all('point' in word.lower() or 'bullet' in word.lower() for word in words)\n"], "testcases": ["{\"response\": \"\u2022 Artificial intelligence can be used for text classification and sentiment analysis. \u2022 This task can be challenging due to the complexity of human language. \u2022 Machine learning algorithms can help improve accuracy and speed.\", \"result\": true}\n{\"response\": \"\u2022 Artificial intelligence can be used for image recognition. \u2022 Machine learning algorithms can be used for time series forecasting. \u2022 This task can be challenging due to the complexity of the problem.\", \"result\": true}\n{\"response\": \"This is a normal text that does not contain bullet points.\", \"result\": false}", "{\"response\": \"\u2022 The sentiment of the text is generally positive. \\n\u2022 The main topic of the text is customer support. \\n\u2022 The tone of the text is formal.\", \"result\": true}\n{\"response\": \"This is a short paragraph with no bullet points and no mention of natural language processing.\", \"result\": false}\n{\"response\": \"\u2022 The entity recognition can be performed using spaCy library. \\n\u2022 The part-of-speech tagging can be done using NLTK library. \\n\u2022 The sentiment analysis can be done using textBlob library.\", \"result\": true}", "{\"response\": \"The project will consist of the following steps: \u2022 Research the target audience, \u2022 Develop a content strategy, \u2022 Create a content calendar.\", \"result\": true}\n{\"response\": \"The project will consist of the following steps: Do some research, Do some development, Create a final version.\", \"result\": false}\n{\"response\": \"The project will consist of the following steps: \u2022 Research the target audience \u2022 Develop a content strategy \u2022 Create a content calendar and deploy it online.\", \"result\": true}", "{\"response\": \"\u2022 I am happy with this plan. \u2022 I have some doubts about this plan. \u2022 However, I think we can make it work.\", \"result\": true}\n{\"response\": \"I think this plan is good. It will help us achieve our goals.\", \"result\": false}\n{\"response\": \"\u2022 The project is on track to meet the deadline. \u2022 We have enough resources allocated. \u2022 The team is well-coordinated.\", \"result\": true}"]}
{"query": "mari was only female of her size in the marine biology department so they only had wetsuits with men sizes.", "instruction": "Use exactly 7 sentences, each starting with a question word (what, why, when, which, who, how, when).", "verifiers": ["def evaluate(response: str) -> bool: \n    sentence_count = 1\n    for char in response:\n        if char in ['.', '?']:\n            sentence_count += 1\n    question_words = ['what', 'why', 'when', 'which', 'who', 'how']\n    return sentence_count == 7 and all(response.lower().startswith(question_word +'') for question_word in question_words) \n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 7: \n        return False\n    for sentence in sentences:\n        if sentence: \n            words = sentence.split(' ', 1)\n            if words[0].upper() not in ['WHAT', 'WHY', 'WHEN', 'WHICH', 'WHO', 'HOW']: \n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentence_count = 1\n    for char in response:\n        if char in ['?','']:\n            sentence_count += 1\n    return sentence_count == 7\n", "def evaluate(response: str) -> bool: \n    words = response.split('.')\n    return len(words) == 7 and all(word.strip().startswith(('what', 'why', 'when', 'which', 'who', 'how')) for word in words)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function splits the response into sentences using the period as a delimiter, strips leading/trailing whitespace from each sentence, and checks if each sentence starts with one of the specified question words. It returns True if the response has exactly 7 sentences that meet this condition, and False otherwise.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"What is the capital of France? Why is the sky blue? When did the last big earthquake happen? Which of the following is not a planet in our solar system? Who is the CEO of Google? How do you calculate the area of a circle? When will the next big football match take place? Why do people prefer dogs over cats?\", \"result\": true}\n{\"response\": \"What is the meaning of life? Why do people get old? How do you become a millionaire?\", \"result\": false}\n{\"response\": \"What is the capital of France? Why is the sky blue? When did the last big earthquake happen? Which of the following is not a planet in our solar system? Who is the CEO of Google? How do you calculate the area of a circle? When will the next big football match take place? Why do people prefer dogs over cats? When is the next big football match take place?\", \"result\": false}", "{\"response\": \"What is the capital of France? Paris is a beautiful city. Why do you love Paris? When is the best time to visit Paris? Which museums should I visit in Paris? Who is the famous artist from Paris? How do I get to the Eiffel Tower?\", \"result\": true}\n{\"response\": \"I love Paris because it's beautiful and romantic. The Eiffel Tower is a must-visit. You should definitely visit the Louvre Museum. It's a great city for foodies. Don't forget to try the croissants!\", \"result\": false}\n{\"response\": \"When did the Eiffel Tower get built? What is the height of the Eiffel Tower? Why is the Eiffel Tower so famous? Which parts of the Eiffel Tower can you visit? How many stairs are there in the Eiffel Tower? Who designed the Eiffel Tower?\", \"result\": true}", "{\"response\": \"What is the capital of France? Why is the sky blue? When is my birthday? Which book do you like best? Who is the president? How are you doing today? When do you need to leave?\", \"result\": true}\n{\"response\": \"I am so happy to be here. This is an amazing place. You are so smart. She is my best friend. We are having a lot of fun.\", \"result\": false}\n{\"response\": \"What is your name? Who are you with? When are you going to the movies? Which movie do you want to see? How long will it last? When will you be back?\", \"result\": true}", "{\"response\": \"What is the best way to travel to Paris? Why do people like to visit Paris? When is the best time to visit Paris? Which attractions should I not miss in Paris? Who is the founder of Paris? How can I get around Paris? When was Paris founded? Is Paris a safe city?\", \"result\": true}\n{\"response\": \"What is the best way to travel to New York? Why do people like to visit New York? When is the best time to visit New York? Which attractions should I not miss in New York? Who is the founder of New York? How can I get around New York? Is New York a safe city?\", \"result\": false}\n{\"response\": \"Why is the sky blue? What is the meaning of life? Who is the president of the United States? How does a computer work? What is the definition of artificial intelligence? Is the Earth round? Why is math important?\", \"result\": true}"]}
{"query": "i have a python doubt", "instruction": "answer in python code", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'python' in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response.lower()\n"], "testcases": ["{\"response\": \"def hello_world():\\n    print('Hello, World!')\", \"result\": true}\n{\"response\": \"import math\\nprint(math.pi)\", \"result\": true}\n{\"response\": \"I love programming in python because it's easy to learn\", \"result\": false}", "{\"response\": \"The answer is python\", \"result\": true}\n{\"response\": \"java is a popular programming language\", \"result\": false}\n{\"response\": \"My favorite programming language is perl\", \"result\": false}", "{\"response\": \"The answer is python\", \"result\": true}\n{\"response\": \"The answer is Java\", \"result\": false}\n{\"response\": \"The answer is also Python\", \"result\": true}", "{\"response\": \"python\", \"result\": true}\n{\"response\": \"I am a JavaScript developer.\", \"result\": false}\n{\"response\": \"The Python interpreter can be downloaded from the official Python website.\", \"result\": true}"]}
{"query": "Sorry but in the ResourceAccesses portion of the JSON, let's Rename FieldTypes back to Constraints", "instruction": "Implement changes to 5 code lines using only single-letter variable names.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5 and all(len(word) == 1 for word in words)\n", "def evaluate(response: str) -> bool: \n    return 'Implement changes to'in response and '5 lines' in response and len(set(response.replace(' ', '')) - set('abcdefghijklmnopqrstuvwxyz')) == 0\n", "def evaluate(response: str) -> bool: \n    return response.count('a') == 0 and response.count('i') == 0 and response.count('m') == 1 and response.count('p') == 1 and response.count('l') == 1 and response.count('e') == 1 and response.count('c') == 1 and response.count('h') == 1 and response.count('a') == 0 and response.count('n') == 1 and response.count('g') == 1 and response.count('s') == 1 and response.count('t') == 1 and response.count('o') == 1 and response.count(' ')== 7 and len(response.split(' ')) == 5 and response.count('w') == 0 and response.count('u') == 0 and response.count('y') == 0 and response.count('s') == 0 and response.count('l') == 0 and response.count('e') == 1 and response.count('=') == 0\n", "def evaluate(response: str) -> bool: \n    return 'Implement' in response and 'changes' in response and 'code' in response and 'lines' in response and'single-letter' in response and 'variable' in response and 'names' in response and len(response.split()) == 6\n"], "testcases": ["{\"response\": \"a=1; b=2; c=3; d=4; e=5\", \"result\": true}\n{\"response\": \"var x = 1; var y = 2; var z = 3; var a = 4; var b = 5\", \"result\": false}\n{\"response\": \"k = 1; l = 2; m = 3; n = 4; o = 5\", \"result\": true}", "{\"response\": \"x = 5\\ny = 10\\nc = 'hello'\\nd = 3\\ne = c * d\", \"result\": true}\n{\"response\": \"abc = 1\\ndef = 2\\ng = 3\", \"result\": true}\n{\"response\": \"x = 5\\ny = 10\\nc = 'hello'\\nd = 3\\ne = c * d * x\", \"result\": false}", "{\"response\": \"a=2, b=1, c=3, d=4, e=5\", \"result\": true}\n{\"response\": \"F=5, J=7, L=3, P=8, K=4\", \"result\": false}\n{\"response\": \"z=10, y=7, t=8, u=3, s=2\", \"result\": true}", "{\"response\": \"def test(): a=1, b=2, c=3, d=4, e=5\", \"result\": true}\n{\"response\": \"x = 10; y = 20\", \"result\": false}\n{\"response\": \"Implementing new changes, but I'm just testing the code with single line: var = 5\", \"result\": false}"]}
{"query": "give me a fun name for a project regarding sold out product features", "instruction": "use a made-up word starting with the last letter of the previous word", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) < 2: \n        return False\n    last_letter = words[-2][-1].upper()\n    for word in words[1:]:\n        if not word[0].upper() == last_letter: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) < 2:\n        return False\n    last_letter = words[-2][-1].upper()\n    count_madeup = 0\n    for word in words:\n        if word[0].upper() == last_letter and not word[1:].isalpha():\n            count_madeup += 1\n    return count_madeup == len(words) - 1\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(1, len(words)):\n        if words[i][0].upper()!= words[i-1][-1].upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) < 2:\n        return False\n    previous_word = words[-2]\n    last_letter = previous_word[-1]\n    return words[-1].startswith(last_letter) and words[-1][0].isalpha()<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Hello Xylo\", \"result\": true}\n{\"response\": \"Hello Zebra\", \"result\": false}\n{\"response\": \"Hello Abc\", \"result\": false}", "{\"response\": \"Hello Pipo Foo\", \"result\": true}\n{\"response\": \"World Zorb\", \"result\": false}\n{\"response\": \"Test Oozy\", \"result\": true}", "{\"response\": \"test case 1\", \"result\": false}\n{\"response\": \"a test made-up word\", \"result\": true}\n{\"response\": \"word tester another\", \"result\": false}", "{\"response\": \"hello world jklm nope\", \"result\": false}\n{\"response\": \"hello world moped nope\", \"result\": true}\n{\"response\": \"hello world moped mumble\", \"result\": false}"]}
{"query": "DO YOU KNOW THE BUILD-MEASURE-learn framework ?", "instruction": "Write the response as a poem with a consistent rhyme scheme.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines) < 2:\n        return False\n    rhymes = []\n    for i in range(len(lines)):\n        words = lines[i].split()\n        for j in range(len(words)):\n            if words[j][-3:] in rhymes:\n                return False\n            rhymes.append(words[j][-3:])\n            if len(rhymes) > 3:\n                rhymes.pop(0)\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    vowels = 'aeiou'\n    word_counts = {}\n    for word in words:\n        word = word.lower()\n        vowel_count = sum(1 for char in word if char in vowels)\n        if word in word_counts:\n            if word_counts[word]!= vowel_count:\n                return False\n        else:\n            word_counts[word] = vowel_count\n    rhyme_scheme = set(vowel_count for word in words for word in word_counts)\n    return len(rhyme_scheme) == 1\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    words = response.split()\n    rhyming_scheme = {}\n    for i in range(len(words) - 1):\n        if words[i][-3:] in rhyming_scheme:\n            rhyming_scheme[words[i][-3:]].append(words[i + 1])\n        else:\n            rhyming_scheme[words[i][-3:]] = [words[i + 1]]\n    return len(rhyming_scheme) == 1\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    rhyming_scheme = {}\n    for i in range(len(words) - 1):\n        word1 = words[i].lower()\n        word2 = words[i+1].lower()\n        last_letter1 = word1[-1]\n        last_letter2 = word2[-1]\n        if last_letter1 == last_letter2:\n            if last_letter1 not in rhyming_scheme:\n                rhyming_scheme[last_letter1] = 1\n            else:\n                rhyming_scheme[last_letter1] += 1\n    return all(val >= 2 for val in rhyming_scheme.values())\n"], "testcases": ["{\"response\": \"The sun sets in the west so bright,\\nA beautiful sight, a wondrous sight.\\nThe stars come out at night to play,\\nThe world is full of beauty each day.\", \"result\": true}\n\n{\"response\": \"The sun shines in the morning light,\\nA new day starts, full of life and strife,\\nThe world is full of joy and delight,\\nThe sun sets in the evening, all is right.\", \"result\": false}\n\n{\"response\": \"The moon glows in the evening sky,\\nThe stars come out to twinkle and dance,\\nThe world is full of magic, passing by,\\nThe moon's soft light, a gentle romance.\", \"result\": true}", "{\"response\": \"The sun sets slow and paints the west, The stars come out and take their rest. The moon is full and shines so bright, A beautiful sight, a pure delight.\", \"result\": true}\n{\"response\": \"The dog is happy and the cat is too, They like to play and have fun to do. They run and jump and have a blast, But they never get a good rest at last.\", \"result\": true}\n{\"response\": \"The flowers bloom in the garden fair, The bees come out and buzz with care. They collect the nectar with skill and ease, But they never take a moment to please.\", \"result\": true}", "{\"response\": \"The sun shines bright in the day so high, the clouds float by and catch the eye. The wind blows strong with a gentle sigh, the world is full of wonder why.\", \"result\": true}\n{\"response\": \"The sun is shining in the morning light, the birds are singing with all their might. The flowers bloom with vibrant colors bright, the world is full of beauty and delight.\", \"result\": true}\n{\"response\": \"The stars are twinkling in the evening sky, the world is full of mystery and wonder why. The moon is glowing with a gentle beam, the night is full of magic and a dream.\", \"result\": true}", "{\"response\": \"The sun shines bright in the day, And brings joy in a lovely way, The stars come out at night to play, And twinkle with all their might, In a beautiful celestial array.\", \"result\": true}\n\n{\"response\": \"The rain falls down on the ground, And makes the flowers bloom around, The sun shines bright with a warm sound, And brings life to all that's found.\", \"result\": false}\n\n{\"response\": \"The clouds are white and fluffy bright, And float across the morning light, The breeze is cool and gentle and light, And makes the trees sway with all their might.\", \"result\": false}"]}
{"query": "i need to prepare for software engineering interviews. can you break it down to smaller tasks so it's easier for me to follow?", "instruction": "1. research common interview questions, 2. make a list of questions, 3. practice whiteboarding, 4. review algorithms and data structures, 5. prepare to talk about projects", "verifiers": ["def evaluate(response: str) -> bool: \n    tasks = [\"research common interview questions\", \"make a list of questions\", \"practice whiteboarding\", \"review algorithms and data structures\", \"prepare to talk about projects\"]\n    return all(task in response for task in tasks)\n", "def evaluate(response: str) -> bool:    \n    tasks = [\"research common interview questions\", \"make a list of questions\", \"practice whiteboarding\", \"review algorithms and data structures\", \"prepare to talk about projects\"]\n    return all(task in response for task in tasks)\n", "def evaluate(response: str) -> bool: \n    return'research common interview questions' in response and \\\n          'make a list of questions' in response and \\\n           'practice whiteboarding' in response and \\\n          'review algorithms and data structures' in response and \\\n           'prepare to talk about projects' in response\n", "def evaluate(response: str) -> bool: \n    tasks = ['research common interview questions','make a list of questions', 'practice whiteboarding','review algorithms and data structures', 'prepare to talk about projects']\n    return'and '.join(tasks) in response and all(task in response for task in tasks)\n"], "testcases": ["{\"response\": \"When interviewing, it's key to research common questions like 'Tell me about yourself' and 'Why do you want to work here?' Make a list of questions to ask the interviewer, practice whiteboarding, and review data structures like stacks and queues. This will prepare you to talk about projects and showcase your skills.\", \"result\": true}\n{\"response\": \"Practice whiteboarding is very important for a software engineer. Research some common interview questions beforehand and try to solve some problems on a whiteboard. Don't forget to review algorithms and data structures.\", \"result\": false}\n{\"response\": \"Make a list of questions to ask during your interview. Research common interview questions such as 'Why do you want to work here?' and 'What are the company's core values?' Practice whiteboarding and review algorithms and data structures to prepare for technical questions. Be prepared to talk about your projects and skills.\", \"result\": true}", "{\"response\": \"Research common interview questions for software engineering, make a list of questions to ask, practice whiteboarding and review algorithms and data structures. Prepare to talk about your past projects and any relevant work experience.\", \"result\": true}\n{\"response\": \"Make sure to research common interview questions beforehand and be prepared to answer them confidently.\", \"result\": false}\n{\"response\": \"Prepare to answer common software engineering interview questions by making a list of questions and practicing whiteboarding. Review algorithms and data structures to ensure you're familiar with them.\", \"result\": true}", "{\"response\": \"Research common interview questions is the first step to success. Make a list of questions to ask, it will be a big help. Practice whiteboarding is key to solving problems with ease. Review algorithms and data structures, it's a must. Prepare to talk about projects, it will make you look the best.\", \"result\": true}\n{\"response\": \"I'm feeling really confused about the interview process. What should I do?\", \"result\": false}\n{\"response\": \"To prepare for an interview, make sure you're well rested and dressed in your best attire. Bring multiple copies of your resume, as well as references. Be sure to ask questions and make a good impression. Remember to be yourself and show enthusiasm for the position. It's also a good idea to practice your responses to common interview questions.\", \"result\": false}", "{\"response\": \"I will research common interview questions, make a list of questions, practice whiteboarding, review algorithms and data structures, and prepare to talk about projects so that I feel more confident.\", \"result\": true}\n{\"response\": \"To prepare for an interview, I will learn Python, C++, and JavaScript.\", \"result\": false}\n{\"response\": \"I plan to research common interview questions, practice coding, and review my resume so that I can nail the interview.\", \"result\": false}"]}
{"query": "how can I link cluster autoscaler with controller is cluster autoscaler api available in controllers and kubebuilder", "instruction": "Use no more than 2 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n"], "testcases": ["{\"response\": \"Hello, I am here to help you.\", \"result\": true}\n{\"response\": \"Hello, I am here to help you. My purpose is to provide information. Please feel free to ask any questions you may have.\", \"result\": false}\n{\"response\": \"I am a chatbot designed to answer your questions to the best of my ability.\", \"result\": true}", "{\"response\": \"I am ready for my interview. I will do my best to answer your questions.\", \"result\": true}\n{\"response\": \"I am ready for my interview. I will do my best to answer your questions. I have prepared well.\", \"result\": false}\n{\"response\": \"I am ready for my interview\", \"result\": true}", "{\"response\": \"This is a short response with only one sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. And this is the third.\", \"result\": false}\n{\"response\": \"This is a short response with only one sentence and another one, separated by a period, but that is not a real sentence.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}\n{\"response\": \"This is a long long long long long long sentence. This is a short sentence.\", \"result\": false}"]}
{"query": "Write a get well soon message for a greeting card", "instruction": "Use a 5-step process", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"step\" in response and response.count(\"step\") == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5\n", "def evaluate(response: str) -> bool: \n    return'step' in response and'step' in response.lower() and 'process' in response and'step' not in response.lower().split()[-1] and 'in' in response and'step' in response.split(' '):\n", "def evaluate(response: str) -> bool: \n    return any(word in response for word in ['step','step 1','step one','step one.','step one.','step 1.']) and 'of 5' in response and 'and' in response and any('is 5' in sent for sent in response.split('.'))\n"], "testcases": ["{\"response\": \"To pass this task, you need to first, second, third, fourth, and finally execute the command.\", \"result\": true}\n{\"response\": \"First, you need to research, then create a plan, and finally implement the changes.\", \"result\": false}\n{\"response\": \"The 5 steps to complete this task are: step 1, step 2, step 3, step 4, and step 5.\", \"result\": true}", "{\"response\": \"Step 1: research common interview questions, Step 2: make a list of questions, Step 3: practice whiteboarding, Step 4: review algorithms and data structures, Step 5: prepare to talk about projects.\", \"result\": true}\n{\"response\": \"Step 1: research common interview questions, Step 2: make a list of questions, Step 3: practice whiteboarding\", \"result\": false}\n{\"response\": \"Step 1: research common interview questions, Step 2: make a list of questions, Step 3: practice whiteboarding, Step 4: review algorithms and data structures, Step 5: prepare to talk about projects, Step 6: get enough sleep the night before the interview.\", \"result\": false}", "{\"response\": \"Here is a simple 5-step process to achieve your goal. Step 1: Plan your approach. Step 2: Break down the task into smaller tasks. Step 3: Execute each task. Step 4: Review the results. Step 5: Reflect on what you've learned.\", \"result\": true}\n\n{\"response\": \"To achieve your goal, do the following: Step 1: Do this. Step 2: Then do that. Step 3: After that, do the other thing. Step 4: Finally, do this last thing.\", \"result\": true}\n\n{\"response\": \"Here's a simple 10-step process: Step 1: Do this. Step 2: Do that. Step 3: Do something else. Step 4: Do this. Step 5: Do that. Step 6: Do something else. Step 7: Do this. Step 8: Do that. Step 9: Do something else. Step 10: Do this.\", \"result\": false}", "{\"response\": \"To solve this problem, follow these steps: step 1, step 2, step 3, step 4, step 5.\", \"result\": true}\n{\"response\": \"To solve this problem, follow these steps: step 1, step 2, step 3, step 4.\", \"result\": false}\n{\"response\": \"To solve this problem, follow these steps: step 1, step 2, step 3, step 4, step 5, step 6, step 7.\", \"result\": false}"]}
{"query": "alicia: can you give me a test that is 4th grade level with every subject\n\"english,math,science,turkish,social studies and coding\"", "instruction": "write the test using only the first letter of each word in the subject", "verifiers": ["def evaluate(response: str) -> bool: \n    subject = \"english,math,science,turkish,social studies and coding\"\n    subject = subject.lower().split()\n    subject = [word[0] for word in subject]\n    return response.lower() == ''.join(subject)\n", "def evaluate(response: str) -> bool: \n    subjects = ['english','math','science', 'turkish','social','studies', 'coding']\n    subject_letters = [subject[0] for subject in subjects]\n    subject_string = ''.join(subject_letters)\n    return response == subject_string\n", "def evaluate(response: str) -> bool: \n    subject = ['english','math','science','turkish','social studies','coding']\n    first_letters = ''.join([s[0] for s in subject])\n    return response == first_letters\n", "def evaluate(response: str) -> bool: \n    given_subjects = 'english,math,science,turkish,social studies and coding'.split(', ')\n    expected_subjects = ''.join([s[0] for s in given_subjects])\n    return expected_subjects in response\n"], "testcases": ["{\"response\": \"E M S T S C\", \"result\": true}\n{\"response\": \"E M S T S\", \"result\": false}\n{\"response\": \"EMSTSC\", \"result\": false}", "{\"response\": \"english math science turkish social studies coding\", \"result\": true}\n{\"response\": \"english maths sciences turkish social studies codings\", \"result\": false}\n{\"response\": \"English math science Turkish social studies coding\", \"result\": false}", "{\"response\": \"E M S T C\", \"result\": true}\n{\"response\": \"E S M\", \"result\": false}\n{\"response\": \"E M S T\", \"result\": true}", "{\"response\": \"English is the first subject. Math is the second subject. Science is the third subject. Turkish is the fourth subject. Social studies and coding are the fifth and sixth subjects.\", \"result\": true}\n{\"response\": \"This is not a valid response\", \"result\": false}\n{\"response\": \"E, M, S, T, S, C\", \"result\": true}"]}
{"query": "Give me 40 original ideas for promotions, discounts, gifts, premium packages or subscriptions that spas and massage parlors should offer to existing and new customers in their business.", "instruction": "Provide instructions that can be evaluated by checking the length of the response and ensuring all responses are numbered from 1 to 40.", "verifiers": ["def evaluate(response: str) -> bool: \n    instructions = response.split('. ')\n    if len(instructions)!= 40:\n        return False\n    for i in range(1, 41):\n        if str(i) not in instructions:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 40:\n        return False\n    for i in range(1, len(lines)):\n        if not (lines[i-1] == f'{i}.'+ lines[i] or lines[i-1] == f'{i}' + '.'+ lines[i]):\n            return False\n    return len(response) <= 1000\n", "def evaluate(response: str) -> bool: \n    response_lines = response.split('\\n')\n    if not all('1' <= line[:1].strip() <= '40' for line in response_lines):\n        return False\n    return 1 <= len(response_lines) <= 40\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    return (len(lines) == 40 and \n            all(all(line.strip().startswith(str(i)) for i in range(1, 41)) \n               for line in lines))\n"], "testcases": ["{\"response\": \"The first instruction is to buy milk. The second instruction is to buy eggs. The third instruction is to buy cheese. The fourth instruction is to buy bread. The fifth instruction is to buy meat. The sixth instruction is to buy fruit.\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"The first instruction is to buy milk. The second instruction is to buy eggs. The third instruction is to buy cheese. The fourth instruction is to buy bread. The fifth instruction is to buy meat. The sixth instruction is to buy fruit. The seventh instruction is to buy yogurt. The eighth instruction is to buy butter.\", \"result\": false}", "{\"response\": \"1. This is a 39-point instruction set. 2. Follow each step carefully. 3. Review the instructions before starting. 4. Ask if you have any questions. 5. Begin the task now. 6. Work on it during your free time. 7. Do not procrastinate. 8. You are not done until you finish. 9. Review the task again. 10. Make any necessary adjustments. 11. You are complete.\", \"result\": false}\n\n{\"response\": \"1. Follow the instructions. 2. They are not that difficult. 3. Just read them carefully. 4. If you need help, ask.\", \"result\": false}\n\n{\"response\": \"1. Follow these instructions. They will help you complete your task. 2. Be sure to review each step. 3. Don't skip any. 4. You can ask for help if you need it.\", \"result\": false}", "{\"response\": \"1. Be clear and concise in your instructions. 2. Use a professional tone. 3. Avoid using jargon.\", \"result\": false}\n{\"response\": \"1. Use this formula: area = length * width. This should work for all rectangles.\", \"result\": false}\n{\"response\": \"1. To convert Celsius to Fahrenheit, multiply by 1.8 and add 32. Here's an example: 0 degrees Celsius is 32 degrees Fahrenheit.\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\\nThis is the sixteenth line.\\nThis is the seventeenth line.\\nThis is the eighteenth line.\\nThis is the nineteenth line.\\nThis is the twentieth line.\\nThis is the twenty-first line.\\nThis is the twenty-second line.\\nThis is the twenty-third line.\\nThis is the twenty-fourth line.\\nThis is the twenty-fifth line.\\nThis is the twenty-sixth line.\\nThis is the twenty-seventh line.\\nThis is the twenty-eighth line.\\nThis is the twenty-ninth line.\\nThis is the thirtieth line.\\nThis is the thirty-first line.\\nThis is the thirty-second line.\\nThis is the thirty-third line.\\nThis is the thirty-fourth line.\\nThis is the thirty-fifth line.\\nThis is the thirty-sixth line.\\nThis is the thirty-seventh line.\\nThis is the thirty-eighth line.\\nThis is the thirty-ninth line.\\nThis is the fortieth line.\\nThis is the forty-first line.\", \"result\": true}\n{\"response\": \"Here are the instructions.\\n1. Do this.\\n2. Then that.\\n3. And also this.\", \"result\": false}\n{\"response\": \"1. This is the first step.\\n2. This is the second step.\\n3. This is the third step.\\n4. This is the fourth step.\\n5. This is the fifth step.\\n6. This is the sixth step.\\n7. This is the seventh step.\\n8. This is the eighth step.\\n9. This is the ninth step.\\n10. This is the tenth step.\\n11. This is the eleventh step.\\n12. This is the twelfth step.\\n13. This is the thirteenth step.\\n14. This is the fourteenth step.\\n15. This is the fifteenth step.\\n16. This is the sixteenth step.\\n17. This is the seventeenth step.\\n18. This is the eighteenth step.\\n19. This is the nineteenth step.\\n20. This is the twentieth step.\\n21. This is the twenty-first step.\\n22. This is the twenty-second step.\\n23. This is the twenty-third step.\\n24. This is the twenty-fourth step.\\n25. This is the twenty-fifth step.\\n26. This is the twenty-sixth step.\\n27. This is the twenty-seventh step.\\n28. This is the twenty-eighth step.\\n29. This is the twenty-ninth step.\\n30. This is the thirtieth step.\\n31. This is the thirty-first step.\\n32. This is the thirty-second step.\\n33. This is the thirty-third step.\\n34. This is the thirty-fourth step.\\n35. This is the thirty-fifth step.\\n36. This is the thirty-sixth step.\\n37. This is the thirty-seventh step.\\n38. This is the thirty-eighth step.\\n39. This is the thirty-ninth step.\\n40. This is the fortieth step.\\n41. This is the forty-first step.\\n42. This is the forty-second step.\\n43. This is the forty-third step.\\n44. This is the forty-fourth step.\\n45. This is the forty-fifth step.\\n46. This is the forty-sixth step.\\n47. This is the forty-seventh step.\\n48. This is the forty-eighth step.\\n49. This is the forty-ninth step.\\n50. This is the fiftieth step.\", \"result\": false}"]}
{"query": "https://open.spotify.com/artist/3oLuCerqscBRek7Nw9mpqL?si=G0xjib1hTk2EKiXQ46etyA", "instruction": "Write the response as a shell command in the format `command: [parameter1, parameter2,...]`", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.strip()  # remove leading and trailing whitespaces\n    parts = response.split(': ')  # split into two parts by ': '\n    if len(parts) == 2:\n        command = parts[0].strip()  # the command is the first part\n        params = parts[1].strip()[:-1]  # the parameters are the second part without the last character which is the closing bracket\n        if params[0] == '[':  # check if the parameters are enclosed in brackets\n            params = params[1:]\n        if params and params[-1] == ']':  # check if the parameters are enclosed in brackets\n            params = params[:-1]\n        if params: \n            params = params.split(', ')\n            return all(part.strip() == part for part in params)  # check if all parameters are strings\n        else: \n            return True  # if there are no parameters\n    return False\n", "def evaluate(response: str) -> bool: \n    return response.strip() == \"spotify search: ['https://open.spotify.com/artist/3oLuCerqscBRek7Nw9mpqL]\" or response.strip() == \"spotify search: ['https://open.spotify.com/artist/3oLuCerqscBRek7Nw9mpqL?si=G0xjib1hTk2EKiXQ46etyA]\"\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"command: [\") and response.endswith(\"]\") and \",\" in response\n", "def evaluate(response: str) -> bool: \n    parts = response.split()\n    return response.startswith('command:') and len(parts) >= 2 and all([p.startswith(\"'\") or p.startswith('\"') for p in parts[1:]])\n"], "testcases": ["{\"response\": \"ls: [file1.txt, file2.txt]\", \"result\": true}\n{\"response\": \"mv: file1.txt, file2.txt\", \"result\": false}\n{\"response\": \"rm: [file1.txt file2.txt]\", \"result\": false}", "{\"response\": \"ls: ['file1', 'file2, 'file3']\", \"result\": true}\n{\"response\": \"You can find the solution in chapter 3 of the book.\", \"result\": false}\n{\"response\": \"git checkout: ['master', 'branch']\", \"result\": true}", "{\"response\": \"command: [1, 2, 3]\", \"result\": true}\n{\"response\": \"command: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\", \"result\": false}\n{\"response\": \"This is not a command: [1, 2, 3]\", \"result\": false}", "{\"response\": \"command: 'hello', 'world'\", \"result\": true}\n{\"response\": \"response: [apple, banana, cherry]\", \"result\": false}\n{\"response\": \"command: 'apple', 'banana', 'cherry'\", \"result\": true}"]}
{"query": "Rare worker drone, rare oil, shy, may be hunted (make this shorter)", "instruction": "Rewrite as a series of 5 numbered points", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('. ')\n    return len(lines) == 5 and all('1.' in line for line in lines)\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5 and all(len(line) > 0 for line in response.split('\\n')) and not any(char not in '012345' for line in response.split('\\n') for char in line if '0' <= char <= '9') \n", "def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response \n", "def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response\n"], "testcases": ["{\"response\": \"1. Buy a book. 2. Write a poem. 3. Take a break. 4. Draw a picture. 5. Have fun.\", \"result\": true}\n{\"response\": \"Here are some things to do today: 1. Buy a book. 2. Write a poem. 3. Take a nap.\", \"result\": false}\n{\"response\": \"To complete this task, follow these steps: 1. Write a script. 2. Create a database. 3. Test the code. 4. Debug the code. 5. Review the results.\", \"result\": true}", "{\"response\": \"1. Go to the store\\n2. Buy some milk\\n3. Return home\\n4. Make a sandwich\\n5. Take a nap\", \"result\": true}\n{\"response\": \"1. Go to the store\\n2. Buy some milk\\n3. Return home\", \"result\": false}\n{\"response\": \"1. Go to the store\\n2. Buy some milk\\n3. Return home\\n4. Make a sandwich\\n5. Take a nap\\n6. Go for a walk\", \"result\": false}", "{\"response\": \"1. The response should be given in a structured format. 2. Each point should start with a number followed by a dot. 3. The numbers should be sequential. 4. The points should be separated by a space or a newline character. 5. The last point should end with a period. 6. The response should be in the English language.\\n1. Always capitalize the first letter of the sentence.\\n2. Use correct punctuation.\\n3. Use clear and concise language.\\n4. Be respectful and polite.\\n5. Be informative and accurate.\\n.\", \"result\": true}\n\n{\"response\": \"This is a simple response with no points.\", \"result\": false}\n\n{\"response\": \"1. Here are some points.\\n2. They are not well formatted.\\n3. There should be more points.\", \"result\": false}", "{\"response\": \"1. This is the first point.\\n2. This is the second point.\\n3. This is the third point.\\n4. This is the fourth point.\\n5. This is the fifth point.\", \"result\": true}\n{\"response\": \"1. This is the first point.\\n2. This is the second point.\\n3. This is the third point.\\n4. This is the fourth point.\\n\", \"result\": false}\n{\"response\": \"1. This is the first point.\\n2. This is the second point.\\n3. This is the third point.\\n4. This is the fourth point.\\n6. This is the sixth point.\", \"result\": false}"]}
{"query": "I want to write a parody song in the style of MTG Remy where we take a well-known song and adapt it to be about Magic: The Gathering. Do you have any suggestions for a good song to parody?", "instruction": "Use only a maximum of 10 words and a colon at the end.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10 and response[-1] == ':'\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10 and response.strip()[-1] == ':' \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10 and response.endswith(':')\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10 and response[-1] == ':'\n"], "testcases": ["{\"response\": \"This is a short sentence:.\", \"result\": true}\n{\"response\": \"This is a short sentence: and this is another sentence\", \"result\": false}\n{\"response\": \"This is a short sentence: and this is another sentence and another one and one more\", \"result\": false}", "{\"response\": \"This is a test response:\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the word limit\", \"result\": false}\n{\"response\": \"This is a test response that meets the word limit exactly\", \"result\": true}", "{\"response\": \"The sky is blue.\", \"result\": false}\n{\"response\": \"The cat is very happy today.\", \"result\": false}\n{\"response\": \"It is a sunny day: \", \"result\": true}", "{\"response\": \"This is a short response: \", \"result\": false}\n{\"response\": \"This is a short and sweet response:\", \"result\": false}\n{\"response\": \"This is a very short and sweet response:\", \"result\": false}"]}
{"query": "how do i see disabled user in kali", "instruction": "provide a single command that meets the criteria", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip().split('\\n')[0] =='sudo cat /etc/sudoers | grep \"^-bash.*-bash\\|-bash:\" | grep -v \"^#\\|-\" | grep '^#'\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n", "def evaluate(response: str) -> bool: \n    return response.split() == ['ls','-i','--disabled-user'] \n", "def evaluate(response: str) -> bool: \n    return 'ls -a' in response and len(response.split()) == 1\n"], "testcases": ["{\"response\": \"echo 'hello world'\", \"result\": true}\n{\"response\": \"bash /var/ftp/etc/ssh/user\", \"result\": false}\n{\"response\": \"ls -l\", \"result\": true}", "{\"response\": \"This is a response\", \"result\": false}\n{\"response\": \"This is a short response: \", \"result\": false}\n{\"response\": \"No command provided\", \"result\": false}", "{\"response\": \"ls -i --disabled-user\", \"result\": true}\n{\"response\": \"ls -i --disabled-user --enabled-user\", \"result\": false}\n{\"response\": \"ls -i\", \"result\": false}", "{\"response\": \"ls -a\", \"result\": true}\n{\"response\": \"cd Documents\", \"result\": true}\n{\"response\": \"This is a long command with multiple arguments\", \"result\": false}"]}
{"query": "Instruction: write math article with page count.\nExample:\nPage 1: math is....\n \n \n \n \uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Use only two sentences per page.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 1\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2\n", "def evaluate(response: str) -> bool: \n    return len(response.split('. ')) <= 2 \n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 2\n"], "testcases": ["{\"response\": \"This is a test.\\n\\nThis is another test.\", \"result\": true}\n{\"response\": \"This is a test. This is another test. This is yet another test.\", \"result\": false}\n{\"response\": \"This is a test.\\nThis is another test.\\nThis is yet another test.\", \"result\": false}", "{\"response\": \"Hello world. This is a test.\", \"result\": True}\n{\"response\": \"Hello world. This is a test. How are you?\", \"result\": False}\n{\"response\": \"Hello world. How are you? I am fine.\", \"result\": False}", "{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence.\", \"result\": true}"]}
{"query": "Hey assistant, how do I read a .db file into python?", "instruction": "Use a library that starts with 'py'.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'py' in response[:2]\n", "def evaluate(response: str) -> bool: \n    return 'py' in response\n", "def evaluate(response: str) -> bool: \n    return 'py' in response\n", "def evaluate(response: str) -> bool: \n    return 'py' in response.lower()\n"], "testcases": ["{\"response\": \"I'm using the Python library for this task.\", \"result\": true}\n{\"response\": \"I'm using the NumPy library for this task.\", \"result\": false}\n{\"response\": \"I'm using the pandas library for this task.\", \"result\": true}", "{\"response\": \"Use the pandas library for data manipulation.\", \"result\": true}\n{\"response\": \"Use the numpy library for numerical computations.\", \"result\": true}\n{\"response\": \"Use the scipy library for scientific computing.\", \"result\": true}", "{\"response\": \"I would like to use the pythagorean theorem to calculate the length of the hypotenuse.\", \"result\": true}\n{\"response\": \"I would like to use the numpy library to calculate the length of the hypotenuse.\", \"result\": false}\n{\"response\": \"I would like to use the pandas library to load the data into a dataframe.\", \"result\": true}", "{\"response\": \"You can use the Python library for this task.\", \"result\": true}\n{\"response\": \"You can use the JavaScript library for this task.\", \"result\": false}\n{\"response\": \"You can use the Python library for data analysis and the pandas library for data manipulation.\", \"result\": true}"]}
{"query": "Can you write a block of code? Anything you want.", "instruction": "No more than 5 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 <= 5\n"], "testcases": ["{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\", \"result\": true}\n{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\", \"result\": true}\n{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\\nThis is line 6.\", \"result\": false}", "{\"response\": \"This is a short response.\\nIt meets the instruction.\\n\\n\", \"result\": false}\n{\"response\": \"This is a short response.\\nIt meets the instruction.\\n\\nIt is not longer than 5 lines.\", \"result\": true}\n{\"response\": \"This is a long response that does not meet the instruction.\\nIt should have been cut off.\\nHere is the rest of the response.\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\", \"result\": false}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"line 1\\nline 2\\nline 3\", \"result\": false}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\", \"result\": true}\n{\"response\": \"line 1\\nline 2\", \"result\": true}"]}
{"query": "how to use A\\* , having manhatam distance and misplaced, algorithm to do a 15 puzzle game algorithm in java", "instruction": "Write the response in a way that can be easily understood by a 8th grader", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.lower()\n    return ('easy to understand' in response or'simply' in response or 'clearly' in response or 'in simple terms' in response or 'in simple language' in response) and len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return 'can be easily understood by' in response and '8th grader' in response \n", "def evaluate(response: str) -> bool: \n    response_words = response.split()\n    num_words = len(response_words)\n    average_word_length = sum(len(word) for word in response_words) / num_words\n    return all(word.split('.')[1].endswith(('ing', 'ed', 'ly','s')) for word in response_words)\n", "def evaluate(response: str) -> bool: \n    return 'easily' in response and 'understood' in response and'simple' in response and 'basic' in response\n"], "testcases": ["{\"response\": \"The Pittsburgh Penguins just made a huge trade, trading Sidney Crosby to the Flyers for Conor Bunneman. This is a big deal for the team and their fans.\", \"result\": true}\n{\"response\": \"This trade marks a new era for the Penguins and sets the stage for an exciting season ahead.\", \"result\": true}\n{\"response\": \"The use of advanced algorithms and machine learning techniques in the trade decision-making process highlights the increasing importance of data-driven decision-making in professional sports.\", \"result\": false}", "{\"response\": \"The complex financial data shows a significant increase in revenue for the company.\", \"result\": false}\n{\"response\": \"The economy is currently doing well, and experts predict it will continue to grow in the future.\", \"result\": false}\n{\"response\": \"The economy is a system that allows people to trade goods and services. In simple terms, when you buy something, you are giving the seller money, and they are giving you the product you want.\", \"result\": true}", "{\"response\": \"Here is a story about a girl who went to the store and bought some candy, then she went home and ate it. Then she did her homework.\", \"result\": true}\n{\"response\": \"This is a short paragraph with no transitional phrases, but it has an interesting plot. Then the girl's mom came home and asked her to do her homework.\", \"result\": false}\n{\"response\": \"In conclusion, the girl went to the store, then she went home, after that she did her homework, in addition to that, she ate some candy.\", \"result\": true}", "{\"response\": \"You should eat a balanced diet that includes fresh fruits and vegetables.\", \"result\": true}\n{\"response\": \"Unfortunately, this topic is quite complex and may require a Ph.D. to fully comprehend.\", \"result\": false}\n{\"response\": \"One of the simplest ways to save money is by reducing your expenses and budgeting your income.\", \"result\": true}"]}
{"query": "implement a typescript to read the ethereum transaction data by transaction hash?", "instruction": "write a function with two arguments, the first being a string and the second being a boolean", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 4 and words[0].lower() == 'def' and words[1].lower() == 'function' and words[2] == 'x' and words[3].lower() == 'and' and words[4].lower() == 'the' and words[5].lower() =='second' and words[6].lower() == 'being' and words[7].lower() == 'a' and words[8].lower() =='string' and words[9].lower() == 'and' and words[10].lower() == 'the' and words[11].lower() =='second' and words[12].lower() == 'being' and words[13].lower() == 'a' and words[14].lower() == 'boolean' and words[2] == 'x' and words[-1].lower() == 'boolean' \n", "def evaluate(response: str) -> bool: \n    pattern = r'def\\s+\\w+\\([^\\)]+\\)\\s*\\:'\n    import re\n    match = re.search(pattern, response)\n    return match!= None and re.search(r'\\boptional\\s*=\\s*[a-zA-Z]+\\s*\\)', response)!= None and re.search(r'\\boptional\\s*=\\s*True', response) == None\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) < 2: return False\n    if words[0]!= 'function': return False\n    if words[1]!= 'with': return False\n    if words[2]!= 'two': return False\n    if'string' not in words: return False\n    if 'boolean' not in words: return False\n    return True\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r'^def\\sf(\\w+)\\(str,\\w+\\):'\n    return bool(re.match(pattern, response)) \n"], "testcases": ["{\"response\": \"def test(x: str, y: bool):\", \"result\": true}\n{\"response\": \"def test(x, y):\", \"result\": false}\n{\"response\": \"def test():\", \"result\": false}", "{\"response\": \"def add(x, y): return x + y\", \"result\": True}\n{\"response\": \"def greet(name, age): print(f\\\"Hello, {name}!\\\")\", \"result\": True}\n{\"response\": \"def calculator(a, b): return a - b\", \"result\": False}", "{\"response\": \"def f(string, bool):\", \"result\": true}\n{\"response\": \"def f(string, boolean):\", \"result\": false}\n{\"response\": \"def f(string, 1):\", \"result\": false}", "{\"response\": \"def say_hello(name: str, loud: bool) -> None:\", \"result\": true}\n{\"response\": \"function add(a: int, b: int) -> int: return a + b\", \"result\": false}\n{\"response\": \"def print_message(message: str, is_important: bool) -> None: print(message) if is_important else print(message, file=sys.stderr)\", \"result\": true}"]}
{"query": "split and fill vertical html divs", "instruction": "write the code to be indented with tabs", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char == '\\t' for char in response) or not response.strip()<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char == '\\t':\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char == '\\t':\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    return all(c == '\\t' for c in response) \n"], "testcases": ["{\"response\": \"    print('Hello World')\", \"result\": true}\n{\"response\": \"print('Hello World')\", \"result\": false}\n{\"response\": \"\\tprint('Hello World')\", \"result\": true}", "{\"response\": \"def foo():\\n\\tprint('Hello')\", \"result\": true}\n{\"response\": \"def foo():\\nprint('Hello')\", \"result\": false}\n{\"response\": \"def foo(): \\n\\t\\tprint('Hello')\", \"result\": true}", "{\"response\": \"This\\tis\\ta\\ttest\", \"result\": true}\n{\"response\": \"This is a test without tabs\", \"result\": false}\n{\"response\": \"This\\t\\tis\\ta\\t\\ttest\", \"result\": true}", "{\"response\": \"\t\tdef my_function():\\n\t\tprint('Hello World')\\n\", \"result\": true}\n{\"response\": \"def my_function():\\n  print('Hello World')\\n\", \"result\": false}\n{\"response\": \"\t\tmy_function = lambda x : x * 2\", \"result\": false}"]}
{"query": "do you know about the game \"Escape from Tarkov\"?", "instruction": "answer with a list with 3 points that can be evaluated by a Python function as True or False", "verifiers": ["def evaluate(response: str) -> bool: \n    answer_list = response.replace(\"[\", \"\").replace(\"]\", \"\").split(',')\n    return len(answer_list) == 3 and all(point.strip().lower() in [\"true\", \"false\"] for point in answer_list)\n", "def evaluate(response: str) -> bool: \n    return eval(response.replace('True', 'True').replace('False', 'False')) == [True, True, True]\n", "def evaluate(response: str) -> bool: \n    import ast\n    return ast.literal_eval(response) == [True, True, True] or ast.literal_eval(response) == [True, False, True] or ast.literal_eval(response) == [True, True, False] or ast.literal_eval(response) == [False, True, True]\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 3 and all(len(line.strip()) > 0 for line in response.split('\\n'))\n"], "testcases": ["{\"response\": \"The answer is: [True, False, True]\", \"result\": true}\n{\"response\": \"The answer is: [True, False, True, False]\", \"result\": false}\n{\"response\": \"The answer is: [False, False, False]\", \"result\": false}", "{\"response\": \"I checked the rules:\\n1. The code must be indented with tabs.\\n2. The code must start with the line `def evaluate(response: str) -> bool:`.\\n3. The code must contain the word `True`.\", \"result\": false}\n{\"response\": \"I checked the rules:\\n1. The code must be indented with tabs.\\n2. The code must start with the line `def evaluate(response: str) -> bool:`.\\n3. The code must contain the word `True`.\", \"result\": true}\n{\"response\": \"I checked the rules:\\n1. The code must be indented with spaces.\\n2. The code must start with the line `def evaluate(response: str) -> bool:`.\\n3. The code must contain the word `True`.\", \"result\": false}", "{\"response\": \"the list is [1,2,3] and [1,2,3] has length 3\", \"result\": false}\n{\"response\": \"the list is [True, False, True] and [True, False, True] has length 3\", \"result\": true}\n{\"response\": \"the list is [] and [] has length 0\", \"result\": true}", "{\"response\": \"Here are the reasons why you should consider this option:\\n1. It's a good choice\\n2. It's a good option\\n3. It's a good decision\", \"result\": true}\n{\"response\": \"Here are the reasons why you should consider this option:\\n1. It's a bad choice\\n2. It's a bad option\\n3. It's a bad decision\\n4. It's also bad\", \"result\": false}\n{\"response\": \"Here are the reasons why you should consider this option:\\n1. It's a good choice\\n2. It's a good option\", \"result\": false}"]}
{"query": "hi there", "instruction": "Use only sentences with exactly 5 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n"], "testcases": ["{\"response\": \"The quick brown fox jumps.\", \"result\": true}\n{\"response\": \"The sun is shining brightly today.\", \"result\": true}\n{\"response\": \"The answer is not clear.\", \"result\": false}", "{\"response\": \"I am very happy today.\", \"result\": false}\n{\"response\": \"I am very happy today again.\", \"result\": true}\n{\"response\": \"I am very happy.\", \"result\": false}", "{\"response\": \"The sun is shining brightly today.\", \"result\": false}\n{\"response\": \"The sun is shining very brightly.\", \"result\": false}\n{\"response\": \"I love this beautiful sunny weather today.\", \"result\": false}", "{\"response\": \"The cat is very happy now\", \"result\": true}\n{\"response\": \"The dog is very sad today\", \"result\": true}\n{\"response\": \"The baby is very happy now with friends\", \"result\": false}"]}
{"query": "How do I pack a chrome extension?", "instruction": "Answer in a single JSON object.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('{') == 1 and response.count('}') == 1\n", "def evaluate(response: str) -> bool: \n    return response.startswith('{') and response.endswith('}')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('{') and response.endswith('}') and len(response) > 1 and response.count('{') == 1 and response.count('}') == 1 and response.count(':') >= 1 and response.count(',') >= 0 \n", "def evaluate(response: str) -> bool: \n    return response.startswith('{') and response.endswith('}') and response.count('{') == 1 and response.count('}') == 1 \n"], "testcases": ["{\"response\": \"{'name': 'John', 'age': 30}\", \"result\": true}\n{\"response\": \"{'name': 'John', 'age': 30, 'city': 'New York'}\", \"result\": false}\n{\"response\": \"{'name': 'John'}\", \"result\": false}", "{\"response\": \"{'name': 'John', 'age': 30}\", \"result\": true}\n{\"response\": \"This is a list of items: [1, 2, 3]\", \"result\": false}\n{\"response\": \"This is a dict: {'name': 'John', 'age': 30}\", \"result\": false}", "{\"response\": \"{'name': 'John', 'age': 30}\", \"result\": true}\n{\"response\": \"Hello, my name is John.\", \"result\": false}\n{\"response\": \"[1, 2, 3, 4, 5]\", \"result\": false}", "{\"response\": \"{'key1': 'value1', 'key2': 'value2'}\", \"result\": true}\n{\"response\": \"{'key1': 'value1'}\", \"result\": false}\n{\"response\": \"{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6'}\", \"result\": false}"]}
{"query": "The many corpses of Mario flooded the streets, preventing anyone from being able to do anything.", "instruction": "Use only the last half of the alphabet (N-Z) in this response and answer in a single paragraph.", "verifiers": ["def evaluate(response: str) -> bool: \n    if 'answer in a single paragraph' in response.lower() and 'use only the last half of the alphabet (n-z)' in response.lower():\n        return all(char.lower() >= 'n' for char in response)\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 27 and all(char >= 'N' or char =='' for char in response)\n", "def evaluate(response: str) -> bool: \n    return response == response[::-1] and len(response.split('\\n')) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response) > 0 and max([ord(char) for char in response if char.isalpha()]) >= ord('N')\n"], "testcases": ["{\"response\": \"The noisy nations navigate nuanced norms.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": false}\n{\"response\": \"Navigating nuances with noise is natural.\", \"result\": true}", "{\"response\": \"No onions, noodles, or other nuts are available in this recipe.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"Nighttime noise often necessitates noise-reducing noise-cancelling headphones.\", \"result\": true}", "{\"response\": \"The nimble ostrich quietly nodded yesterday. The quirky rabbit zealously juggled. Nimble zookeepers yearned.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog. The big elephant smiled brightly. Happy zookeepers ran.\", \"result\": false}\n{\"response\": \"The zookeeper quietly noted. Yesterday's quartets jogged. Quiet rabbits yearned.\", \"result\": false}", "{\"response\": \"Here is a response with only the last half of the alphabet: Zebra Jellyfish Nougat Onion Pumpkin\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"Nightly Oxygen Levels Nutrient Onion Pasta\", \"result\": true}"]}
{"query": "Write a 200 word news story about the Pittsburgh Penguins trading Sydney Crosby to the Flyers for Conner Bunneman", "instruction": "Use exactly 10 transitional phrases.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('however') == 0 and response.count('in addition') == 0 and response.count('meanwhile') == 0 and response.count('therefore') == 0 and response.count('moreover') == 0 and response.count('furthermore') == 0 and response.count('consequently') == 0 and response.count('additionally') == 0 and response.count('thus') == 0 and response.count('mean') == 0 and response.count('nevertheless') == 0 and response.count('add') == 0\n", "def evaluate(response: str) -> bool: \n    return response.count('in the meantime') + response.count('meanwhile') + response.count('however') + response.count('therefore') + response.count('on the other hand') + response.count('in the meantime') + response.count('next') + response.count('then') + response.count('after') + response.count('following this') + response.count('afterwards') + response.count('once this happens') + response.count('subsequently') == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('However') + response.count('Additionally') + response.count('Moreover') + response.count('Furthermore') + response.count('In the meantime') + response.count('Meanwhile') + response.count('In addition') + response.count('Another') + response.count('At the same time') + response.count('Similarly') == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('while') + response.count('meanwhile') + response.count('in addition') + response.count('however') + response.count('in the meantime') + response.count('mean time') + response.count('on the other hand') + response.count('meanwhile') + response.count('nevertheless') + response.count('in contrast') == 10 \n"], "testcases": ["{\"response\": \"In addition to that, meanwhile, in any case, in fact, incidentally, therefore, however, thus, accordingly, meanwhile, consequently, furthermore, in the meantime.\", \"result\": true}\n{\"response\": \"That's a great idea!\", \"result\": false}\n{\"response\": \"Babbel is a popular app used to learn languages and is suitable for beginners. However, it does not yet support the Bemba language. In fact, it has many other features.\", \"result\": true}", "{\"response\": \"On the other hand, in the meantime, therefore, hence, meanwhile, thus, however, consequently, then, subsequently, afterward, accordingly, in the end.\", \"result\": true}\n{\"response\": \"This is a great opportunity.\", \"result\": false}\n{\"response\": \"On the other hand, in the meantime, therefore, hence, meanwhile, thus, however, consequently, then, subsequently, afterward, accordingly, in the end, and lastly.\", \"result\": false}", "{\"response\": \"However, on the other hand, another important consideration is that, in addition, another key point is that, meanwhile, at the same time, similarly, furthermore, in the meantime, in addition to this, additionally, however, on the other hand, another key aspect is that, another important point is that, meanwhile, however, another consideration is that.\", \"result\": true}\n{\"response\": \"The cat is black, it is also black, it is not black.\", \"result\": false}\n{\"response\": \"In conclusion, it is worth noting that, it is also worth noting that, in addition, another key point is that, however, it is also true that, in the meantime, another important consideration is that, furthermore, in addition to this, it is also worth noting that, on the other hand, it is also true that, meanwhile, it is also a consideration that.\", \"result\": true}", "{\"response\": \"While I was walking home, I stumbled upon a small park. Meanwhile, I decided to take a break. In addition, I sat down on a bench. However, I soon realized it was getting dark. In the meantime, I started to walk back home. On the other hand, I was glad I took a break. Nevertheless, I was a bit tired. In contrast, the fresh air helped me feel better. Moreover, I felt refreshed. Therefore, I continued walking home. Consequently, I arrived at my house.\", \"result\": true}\n{\"response\": \"I went to the store and bought some milk\", \"result\": false}\n{\"response\": \"While I was walking home, I stumbled upon a small park. However, I soon realized it was getting dark. On the other hand, I was glad I took a break. Nevertheless, I was a bit tired. In contrast, the fresh air helped me feel better. Therefore, I continued walking home. Consequently, I arrived at my house. Meanwhile, I was thirsty and needed to drink some water. In addition, I sat down on a bench. In the meantime, I started to walk back home.\", \"result\": false}"]}
{"query": "write an assignment on University management system(also write sql commands , relation schema and max 5 table)", "instruction": "use 5 nouns and 5 verbs, but no adjectives", "verifiers": ["def evaluate(response: str) -> bool: \n    nouns = ['assignment', 'university','management','system','schema', 'table', 'commands']\n    verbs = ['write', 'use', 'follow', 'include','make', 'create', 'design']\n    words = response.split()\n    noun_count = 0\n    verb_count = 0\n    for word in words:\n        word = word.lower()\n        if word in nouns:\n            noun_count += 1\n        elif word in verbs:\n            verb_count += 1\n    return noun_count == 5 and verb_count == 5 and all('a' not in word.lower() and 'an' not in word.lower() and 'the' not in word.lower() and 'and' not in word.lower() and 'or' not in word.lower() for word in words)\n", "def evaluate(response: str) -> bool: \n    nouns = ['assignment', 'university','system','management','schema', 'table']\n    verbs = ['write', 'use', 'command','relation', 'create']\n    adjectives = ['sql','max', 'at','most']\n\n    response = response.lower()\n    noun_count = sum(1 for word in response.split() if word in nouns)\n    verb_count = sum(1 for word in response.split() if word in verbs)\n    adjective_count = sum(1 for word in response.split() if word in adjectives)\n\n    return (noun_count == 5 and verb_count == 5 and adjective_count == 0)\n", "def evaluate(response: str) -> bool: \n    nouns = ['university','management','system', 'assignment', 'commands','schema', 'table']\n    verbs = ['write', 'use', 'issue', 'follows', 'have']\n    adjectives = ['good','maximum','max', '5']\n    \n    count_nouns = 0\n    count_verbs = 0\n    count_adjectives = 0\n    \n    for word in response.split():\n        word = word.lower()\n        if word in nouns:\n            count_nouns += 1\n        elif word in verbs:\n            count_verbs += 1\n        elif word in adjectives:\n            count_adjectives += 1\n    \n    return count_nouns == 5 and count_verbs == 5 and count_adjectives == 0\n", "def evaluate(response: str) -> bool: \n    nouns = ['assignment','management','system', 'commands','schema', 'table']\n    verbs = ['write', 'use', 'have', 'need', 'want']\n    adjectives = ['university','max','sql', 'at','most']\n    count_nouns = 0\n    count_verbs = 0\n    count_adjectives = 0\n    for char in response:\n        if char.upper() in [noun.upper() for noun in nouns]:\n            count_nouns += 1\n        elif char.upper() in [verb.upper() for verb in verbs]:\n            count_verbs += 1\n        elif char.upper() in [adj.upper() for adj in adjectives]:\n            count_adjectives += 1\n    return count_nouns == 5 and count_verbs == 5 and count_adjectives == 0\n"], "testcases": ["{\"response\": \"I went to the store and bought milk, bread, eggs, oranges, and carrots. I walked, ran, jumped, danced, and wrote.\", \"result\": true}\n{\"response\": \"The beautiful university has a beautiful library and a beautiful park where students can walk and play.\", \"result\": false}\n{\"response\": \"The manager assigned me a task to create a new table in the database and write some commands in the code.\", \"result\": false}", "{\"response\": \"The teacher wrote a book about the system and the university. Students use the system to manage their assignments.\", \"result\": true}\n{\"response\": \"The database is managed by the management team and the system uses a schema to relate the tables.\", \"result\": false}\n{\"response\": \"The teacher wrote a novel and a poem about the university and the system. Students use the system to manage their work and their relation with the system.\", \"result\": true}", "{\"response\": \"A team of developers uses multiple systems to create a new software that performs several tasks\", \"result\": true}\n{\"response\": \"The manager of the project writes code and creates the schema for the database\", \"result\": false}\n{\"response\": \"A user issues commands to the system to access the information they need\", \"result\": false}", "{\"response\": \"Dean Koontz wrote horror novels with a focus on characters like Jimmy Tesso and Amanda Deveraux.\", \"result\": false}\n{\"response\": \"Stephen King wrote a famous novel called 'The Shining', and then later made a movie with the same name.\", \"result\": false}\n{\"response\": \"He went to the store to buy food and returned home to make dinner with his family.\", \"result\": true}"]}
{"query": "DO you know about MACD Indicator in technical analysis?", "instruction": "Write the response in a table format with 5 rows and 2 columns", "verifiers": ["def evaluate(response: str) -> bool: \n    rows = 5\n    columns = 2\n    table_char = '|'\n    space_char =''\n    newline_char = '\\n'\n    return response.count(table_char) * response.count(space_char) * rows == len(response) - response.count(newline_char)\n", "def evaluate(response: str) -> bool: \n    rows = response.count('\\n')\n    cols = len(response.split('\\n')[0].split())\n    return rows == 5 and len(cols) == 2\n", "def evaluate(response: str) -> bool: \n    rows = response.count('\\n') + 1 # count the number of rows in the response\n    columns = len(response.split('\\n')[0].split()) # count the number of columns in the response\n    return rows == 5 and columns == 2\n", "def evaluate(response: str) -> bool: \n    rows = response.count('\\n') \n    columns = len(response.split('\\n')[0].split()) \n    return rows == 5 and columns == 2\n"], "testcases": ["{\"response\": \"Name|Age\\nJohn|25\\nAlice|30\\nBob|35\\nCharlie|40\\nDavid|45\", \"result\": true}\n{\"response\": \"This is a table with 5 rows and 2 columns: Name|Age\\nJohn|25\\nAlice|30\\nBob|35\\nCharlie|40\\nDavid|45\", \"result\": false}\n{\"response\": \"Name|Age\\nJohn|25\\nAlice|30\\nBob|35\\n\\nDavid|45\", \"result\": false}", "{\"response\": \"Name\\tAge\\nJohn\\t25\\nJane\\t30\\nBob\\t35\\nAlice\\t20\\nMike\\t40\", \"result\": true}\n{\"response\": \"This is a table with 5 rows\\n1\\tJohn\\n2\\tJane\\n3\\tBob\\n4\\tAlice\\n5\\tMike\", \"result\": false}\n{\"response\": \"Name\\tAge\\nJohn\\t25\\nJane\\t30\\nBob\\t35\\nAlice\\t20\", \"result\": false}", "{\"response\": \"Name\\tAge\\nJohn\\t25\\nAlice\\t30\\nBob\\t35\\nCharlie\\t40\\nDavid\\t45\\nEve\\t50\\n\", \"result\": true}\n\n{\"response\": \"Name Age\\nJohn 25\\nAlice 30\\nBob 35\\n\", \"result\": false}\n\n{\"response\": \"Name    Age\\nJohn   25\\nAlice  30\\nBob    35\\nCharlie 40\\nDavid  45\\nEve    50\\n\", \"result\": false}", "{\"response\": \"Name  | Age\\nJohn   | 25\\nAlice  | 30\\nBob    | 35\\nMike   | 20\\nEmma   | 40\", \"result\": true}\n{\"response\": \"This is a single row of data. It should have multiple rows to be a table.\", \"result\": false}\n{\"response\": \"Name  | Age\\nJohn   | 25\\nAlice  | 30\\nBob    | 35\\nMike   | 20\\nEmma   | 40\\nDavid  | 45\", \"result\": false}"]}
{"query": "Write me a song to the tune of twinkle twinkle little star that will help me to remember the exceptions to the rule against hearsay.", "instruction": "Use only proper nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    for char in response: \n        if char.istitle() and not char.isupper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if not char.isupper(): \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char.isupper() for char in response)\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if not char.isupper():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"John likes to watch football with his friends.\", \"result\": false}\n{\"response\": \"Facebook is a social media platform that is very popular worldwide.\", \"result\": true}\n{\"response\": \"I'm going to the store to buy some milk from Safeway.\", \"result\": true}", "{\"response\": \"John Smith\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"The John Smith was born in London\", \"result\": true}", "{\"response\": \"John Smith is a software engineer at Microsoft. He graduated from Stanford University.\", \"result\": true}\n{\"response\": \"I am a software engineer. My skills include Java, Python, and C++. I have experience with Amazon Web Services and Google Cloud.\", \"result\": false}\n{\"response\": \"Mark Zuckerberg is the founder of Facebook. Bill Gates is the co-founder of Microsoft.\", \"result\": true}", "{\"response\": \"ABC DEF GHI\", \"result\": false}\n{\"response\": \"NASA IS A SPACE AGENCY\", \"result\": true}\n{\"response\": \"Eiffel Tower is a famous landmark in Paris\", \"result\": true}"]}
{"query": "How does E\\_est change with hypothesis FSL hypothesis space", "instruction": "Answer in terms of a math equation that can be evaluated in Python", "verifiers": ["def evaluate(response: str) -> bool: \n    try:\n        response = response.replace(' ','')\n        return response.replace(':','').replace('?','').replace(';','') == '='+response.replace('(','*')[:response.find('=')]\n    except ValueError:\n        return False\n", "def evaluate(response: str) -> bool: \n    return all(char in '0123456789+-*/().%'for char in response) \n", "def evaluate(response: str) -> bool: \n    math_symbols = ['+', '-', '*', '/', '^', '=', '<', '>', '(', ')']\n    has_math_equation = any(symbol in response for symbol in math_symbols)\n    return has_math_equation\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if char.isalpha(): \n            return False\n    try:\n        eval(response)\n        return True\n    except Exception:\n        return False\n"], "testcases": ["{\"response\": \"2+2\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \"5*5\", \"result\": true}", "{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \"3 * 3 = 9\", \"result\": true}", "{\"response\": \"2 + 2 =\", \"result\": true}\n{\"response\": \"This is a simple equation: 1 = 2\", \"result\": false}\n{\"response\": \"x = 5 - 3\", \"result\": true}", "{\"response\": \"2 + 2\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"1 + x\", \"result\": true}"]}
{"query": "Please explain the history of Pokemon and provide the taxonomy for the different characters and how to understand the differences between them", "instruction": "Use only vocabulary that was present in the original Pok\u00e9mon games", "verifiers": ["def evaluate(response: str) -> bool: \n    allowed_vocabulary = set([\"Pikachu\", \"Charizard\", \"Bulbasaur\", \"Squirtle\", \"Blastoise\", \"Jolteon\", \"Flareon\", \"Vaporeon\", \"Eevee\", \"Sandshrew\", \"Vulpix\", \"Diglett\", \"Meowth\", \"Scyther\", \"Jynx\", \"Electabuzz\", \"Magmar\", \"Pinsir\", \"Tauros\", \"Magikarp\", \"Gyarados\", \"Lapras\", \"Ditto\", \"Eevee\", \"Dragonite\", \"Mewtwo\", \"Mew\", \"Snorlax\", \"Omanyte\", \"Kabuto\", \"Aerodactyl\", \"Lickitung\", \"Kadabra\", \"Haunter\", \"Gengar\", \"Onix\", \"Drowzee\", \"Hypno\", \"Krabby\", \"Voltorb\", \"Exeggcute\", \"Cubone\", \"Hitmonlee\", \"Hitmonchan\", \"Lickitung\", \"Electabuzz\", \"Mankey\", \"Primeape\", \"Growlithe\", \"Arcanine\", \"Poliwag\", \"Poliwhirl\", \"Poliwrath\", \"Abra\", \"Kadabra\", \"Alakazam\", \"Machop\", \"Bellsprout\", \"Weedle\", \"Caterpie\", \"Metapod\", \"Butterfree\", \"Weedle\", \"Kakuna\", \"Beedrill\", \"Nidoran\", \"Nidorina\", \"Nidoqueen\", \"Nidorino\", \"Nidoking\", \"Clefairy\", \"Vulpix\", \"Ninetales\", \"Jigglypuff\", \"Wigglytuff\", \"Zubat\", \"Golbat\", \"Oddish\", \"Gloom\", \"Vileplume\", \"Paras\", \"Parasect\", \"Venonat\", \"Venomoth\", \"Diglett\", \"Dugtrio\", \"Meowth\", \"Persian\", \"Psyduck\", \"Golduck\", \"Mankey\", \"Primeape\", \"Growlithe\", \"Arcanine\", \"Poliwag\", \"Poliwhirl\", \"Poliwrath\", \"Abra\", \"Kadabra\", \"Alakazam\", \"Machop\", \"Bellsprout\", \"Weedle\", \"Caterpie\", \"Metapod\", \"Butterfree\", \"Oddish\", \"Gloom\", \"Vileplume\", \"Paras\", \"Parasect\", \"Venonat\", \"Venomoth\", \"Scyther\", \"Jynx\", \"Electabuzz\", \"Magmar\", \"Pinsir\", \"Tauros\", \"Magikarp\", \"Gyarados\", \"Lapras\", \"Ditto\", \"Eevee\", \"Dragonite\", \"Mewtwo\", \"Mew\", \"Snorlax\", \"Omanyte\", \"Kabuto\", \"Aerodactyl\", \"Lickitung\", \"Kadabra\", \"Haunter\", \"Gengar\", \"Onix\", \"Drowzee\", \"Hypno\", \"Krabby\", \"Voltorb\", \"Exeggcute\", \"Cubone\", \"Hitmonlee\", \"Hitmonchan\", \"Lickitung\", \"Electabuzz\", \"Mankey\", \"Primeape\", \"Growlithe\", \"Arcanine\", \"Poliwag\", \"Poliwhirl\", \"Poliwrath\", \"Abra\", \"Kadabra\", \"Alakazam\", \"Machop\", \"Bellsprout\", \"Weedle\", \"Caterpie\", \"Metapod\", \"Butterfree\", \"Oddish\", \"Gloom\", \"Vileplume\", \"Paras\", \"Parasect\", \"Venonat\", \"Venomoth\", \"Diglett\", \"Dugtrio\", \"Meowth\", \"Persian\", \"Psyduck\", \"Golduck\", \"Sandshrew\", \"Sandslash\", \"Nidoran\", \"Nidorina\", \"Nidoqueen\", \"Nidorino\", \"Nidoking\", \"Clefairy\", \"Vulpix\", \"Ninetales\", \"Jigglypuff\", \"Wigglytuff\", \"Zubat\", \"Golbat\", \"Oddish\", \"Gloom\", \"Vileplume\", \"Paras\", \"Parasect\", \"Venonat\", \"Venomoth\", \"Scyther\", \"Jynx\", \"Electabuzz\", \"Magmar\", \"Pinsir\", \"Tauros\", \"Magikarp\", \"Gyarados\", \"Lapras\", \"Ditto", "def evaluate(response: str) -> bool: \n    vocabulary = \"poke ball poke trainer team trainer's pokeballs gym battle caught pokedex wild wilds catch catching caught's trainer's gyms\"\n    vocabulary = vocabulary.lower().split()\n    for word in vocabulary:\n        if word not in response.lower().split():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    original_vocabulary = ['pikachu', 'charizard','squirtle', 'bulbasaur', 'charmander', 'jolteon', 'flareon', 'vulpix','sandshrew', 'diglett', 'geodude','meowth', 'eevee', 'caterpie','metapod','venusaur', 'ivysaur', 'charmeleon', 'gastly', 'haunter', 'gengar','mankey', 'ponyta','slowpoke','slowbro', 'vulpix', 'abra', 'kadabra', 'alakazam','muk', 'rhyhorn', 'kangaskhan', 'horsea','seel', 'grimer', 'clefairy','mr mime', 'farfetchd', 'odysseus', 'dewgong', 'poliwag', 'tentacool', 'growlithe','magnemite','magneton', 'doduo','mew']\n    response_words = response.lower().split()\n    for word in response_words:\n        if word not in original_vocabulary:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    vocabulary = \"Pikachu Charmander Bulbasaur Squirtle Eevee Meowth Charizard Blastoise Venusaur Ivysaur Charmeleon Jolteon Sandshrew Fearow Oddish Gengar Starmie Snorlax Hypno Poliwag Clefairy Ponyta Kangaskhan Mankey Farfetchd Haunter Golbat Staryu Mr Mime Scyther Jigglypuff Zapdos Ditto Ekans Onix Oddish Machamp Eevee Vulpix Ninetales Arbok Snorlax Electabuzz Fearow Kadabra Haunter Machoke Golbat Victreebel Alakazam Zubat Meowth Mr Mime Gloom Muk Tangela Mr Mime Gengar Starmie\"\n    vocabulary = vocabulary.split()\n    for word in vocabulary:\n        if word in response.upper():\n            return True\n    return False\n"], "testcases": ["{\"response\": \"The Pikachu is a popular Pok\u00e9mon.\", \"result\": True}\n{\"response\": \"I have a Charizard in my team, it's so powerful.\", \"result\": True}\n{\"response\": \"Eevee is a great Pok\u00e9mon to evolve into many different species.\", \"result\": False}", "{\"response\": \"Pikachu is a Electric type Pok\u00e9mon. It can be caught in the wild in Viridian Forest.\", \"result\": true}\n{\"response\": \"This is a sentence that has nothing to do with Pok\u00e9mon.\", \"result\": false}\n{\"response\": \"Bulbasaur can evolve into Ivysaur and then Venusaur.\", \"result\": true}", "{\"response\": \"Pikachu is a yellow electric mouse Pok\u00e9mon.\", \"result\": true}\n{\"response\": \"The cat sat on the mat.\", \"result\": false}\n{\"response\": \"Eevee is a normal-type Pok\u00e9mon that can evolve into several other Pok\u00e9mon.\", \"result\": true}", "{\"response\": \"Pikachu is 25 years old.\", \"result\": true}\n{\"response\": \"I like to eat apples.\", \"result\": false}\n{\"response\": \"Charmander is my favorite Pok\u00e9mon, I love it.\", \"result\": true}"]}
{"query": "give me some examples of behavioral questions when I am interviewing for candidates for retention growth manager", "instruction": "Limit response to 10 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 10\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1\n    return lines <= 10\n"], "testcases": ["{\"response\": \"Pikachu is a yellow mouse.\\nIt has a lightning-fast attack.\\nIt is a popular Pok\u00e9mon.\\nIt can be caught in the wild.\\nPikachu is a great Pok\u00e9mon.\\nIt is very energetic.\\nPikachu is a classic.\\nIt has a strong attack.\\nPikachu is a good choice.\\nIt is easy to train.\\nPikachu is a favorite.\\n\", \"result\": true}\n{\"response\": \"Pikachu is a yellow mouse.\\nIt has a lightning-fast attack.\\nIt is a popular Pok\u00e9mon.\\nIt can be caught in the wild.\\nPikachu is a great Pok\u00e9mon.\\nIt is very energetic.\\nPikachu is a classic.\\nIt has a strong attack.\\nPikachu is a good choice.\\nIt is easy to train.\\nPikachu is a favorite.\\nIt has a good type.\\n\", \"result\": false}\n{\"response\": \"Pikachu is a yellow mouse.\\nIt has a lightning-fast attack.\\nPikachu is a popular Pok\u00e9mon.\\nIt can be caught in the wild.\\nPikachu is a great Pok\u00e9mon.\\nIt is very energetic.\\nIt has a strong attack.\\nPikachu is a good choice.\\nIt is easy to train.\\nPikachu is a favorite.\\n\", \"result\": false}", "{\"response\": \"Pikachu was caught in Viridian City.\\nPikachu is very powerful.\\nPikachu uses Thunder Shock.\\nPikachu is a good friend.\\nProfessor Oak is a great person.\\nThe goal is to defeat the champion.\\nAsh is a great trainer.\\nThe road to Viridian City is long.\\nThere are many wild Pok\u00e9mon there.\\nSome are easy to catch.\\nThe journey is very exciting.\", \"result\": true}\n\n{\"response\": \"Pikachu was caught in Viridian City. Pikachu is very powerful. Pikachu uses Thunder Shock. Pikachu is a good friend. Professor Oak is a great person. The goal is to defeat the champion. Ash is a great trainer. The road to Viridian City is long. There are many wild Pok\u00e9mon there. Some are easy to catch. The journey is very exciting. It's very tiring.\", \"result\": false}\n\n{\"response\": \"Pikachu was caught in Viridian City. Pikachu is very powerful. Pikachu uses Thunder Shock.\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": true}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"This is line 1\\nThis is line 2\\nThis is line 3\\nThis is line 4\\nThis is line 5\\nThis is line 6\\nThis is line 7\\nThis is line 8\\nThis is line 9\\nThis is line 10\", \"result\": true}\n{\"response\": \"This is line 1\\nThis is line 2\\nThis is line 3\\nThis is line 4\\nThis is line 5\\nThis is line 6\\nThis is line 7\\nThis is line 8\\nThis is line 9\\nThis is line 10\\nThis is line 11\", \"result\": false}\n{\"response\": \"\", \"result\": true}"]}
{"query": "list known you optoelectronic bipolar devices", "instruction": "use only words with 5 letters or less", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word) > 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) > 5:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"House dog sun cat\", \"result\": true}\n{\"response\": \"Brown fox jumped over the lazy dog\", \"result\": false}\n{\"response\": \"House dog cat run play\", \"result\": true}", "{\"response\": \"Hello world!\", \"result\": true}\n{\"response\": \"This is a long sentence with more than 5 letters.\", \"result\": false}\n{\"response\": \"Run fast pet dog\", \"result\": true}", "{\"response\": \"house\", \"result\": false}\n{\"response\": \"house dogs run\", \"result\": false}\n{\"response\": \"house dog\", \"result\": true}", "{\"response\": \"Hello world this is a test\", \"result\": false}\n{\"response\": \"I am a cat\", \"result\": true}\n{\"response\": \"You are nice\", \"result\": true}"]}
{"query": "What would a conversation sound like between Dean koontz and Stephen king playing chess", "instruction": "Limit the response to exactly 200 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 200\n", "def evaluate(response: str) -> bool: \n    return 200 == len(response)\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly in the clear blue sky. The trees are swaying gently in the breeze. The birds are singing their sweet melodies. The flowers are blooming beautifully in the garden. The bees are buzzing around the flowers. The butterflies are fluttering about in the air. The sun is setting slowly in the west. The stars are twinkling in the night sky. The world is a beautiful place.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly in the clear blue sky. The trees are swaying gently in the breeze. The birds are singing their sweet melodies. The flowers are blooming beautifully in the garden. The bees are buzzing around the flowers. The butterflies are fluttering about in the air. The sun is setting slowly in the west. The stars are twinkling in the night sky. The world is a beautiful place. The people are smiling and laughing.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly in the clear blue sky. The trees are swaying gently in the breeze. The birds are singing their sweet melodies. The flowers are blooming beautifully in the garden. The bees are buzzing around the flowers. The butterflies are fluttering about in the air. The sun is setting slowly in the west. The stars are twinkling in the night sky. The world is a beautiful place. The people are smiling and laughing. The children are playing happily in the park.\", \"result\": false}", "{\"response\": \"This is a short response that only has 100 words, so it is not valid for this instruction.\", \"result\": false}\n{\"response\": \"This is a long response that has 201 words, so it is not valid for this instruction.\", \"result\": false}\n{\"response\": \"This response has exactly 200 words, which is valid for this instruction.\", \"result\": true}", "{\"response\": \"This is a very short response that is only one sentence and it has less than 200 characters.\", \"result\": false}\n{\"response\": \"This is a longer response that is one sentence and it has more than 200 characters. It is used to test the functionality of the function.\", \"result\": true}\n{\"response\": \"This is a very short response that is only one word and it has less than 200 characters.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog. The dog runs quickly to the lake. The lake is a beautiful place to walk. The trees are tall and the grass is green. The sun is shining and the birds are singing. The flowers are blooming and the bees are buzzing. The air is fresh and the water is cool. The world is a wonderful place to live.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The dog runs quickly to the lake. The lake is a beautiful place to walk. The trees are tall and the grass is green. The sun is shining and the birds are singing. The flowers are blooming and the bees are buzzing. The air is fresh and the water is cool. The world is a wonderful place to live. The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The dog runs quickly to the lake. The lake is a beautiful place to walk. The trees are tall and the grass is green. The sun is shining and the birds are singing. The flowers are blooming and the bees are buzzing. The air is fresh and the water is cool. The world is a wonderful place to live. The quick brown fox jumps over the lazy dog. The dog is happy and the sun is shining.\", \"result\": false}"]}
{"query": "write a welcome email to the University students for the year 2023; we are a liberal arts college", "instruction": "Use exactly 7 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') + response.count('?') + response.count('!') + 1 == 7\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6 or response.count('.') == 7 or response.count('?') == 6 or response.count('?') == 7 or response.count('!') == 6 or response.count('!') == 7\n"], "testcases": ["{\"response\": \"I would like to buy a computer. It is a great device. I will pay $1000 for it. It will be delivered within a week. Thank you for the sale. I will review the product. This is a great deal.\", \"result\": true}\n{\"response\": \"I would like to buy a computer.\", \"result\": false}\n{\"response\": \"I would like to buy a computer. It is a great device. I will pay $1000 for it. It will be delivered within a week.\", \"result\": false}", "{\"response\": \"You must use a period at the end of each sentence, and there are exactly 7 sentences in this response. This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence.\", \"result\": true}\n{\"response\": \"You must use a period at the end of each sentence, and there are 7 sentences in this response. This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": false}\n{\"response\": \"You must use a period at the end of each sentence. This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence.\", \"result\": false}", "{\"response\": \"The sun was shining brightly in the clear blue sky. It was a beautiful day for a walk. I decided to take a stroll around the block. The air was filled with the sweet scent of blooming flowers. The sound of birds singing could be heard in the distance. The warmth of the sun on my skin felt wonderful. I felt at peace in nature.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky. It was a beautiful day for a walk. I decided to take a stroll around the block. The air was filled with the sweet scent of blooming flowers. The sound of birds singing could be heard in the distance.\", \"result\": false}\n{\"response\": \"The sun was shining brightly in the clear blue sky. It was a beautiful day for a walk. I decided to take a stroll around the block. The air was filled with the sweet scent of blooming flowers. The sound of birds singing could be heard in the distance. The warmth of the sun on my skin felt wonderful. I felt at peace in nature. The sun was still shining. It was still a beautiful day.\", \"result\": true}", "{\"response\": \"This is a test response. I will write exactly 7 sentences. The first one is this one. The second sentence is about testing. This is the third sentence. This response will evaluate to true if it has exactly 7 sentences. And the seventh is the final one.\", \"result\": true}\n{\"response\": \"This is a test response. I will write exactly 8 sentences. The first one is this one. The second sentence is about testing. This is the third sentence. This response will evaluate to false if it has exactly 7 sentences. And the sixth is the penultimate one. And the seventh is the final one.\", \"result\": false}\n{\"response\": \"This is a test response. I will write exactly 6 sentences. The first one is this one. The second sentence is about testing. This is the third sentence. This response will evaluate to false if it has exactly 7 sentences. And the sixth is the final one.\", \"result\": false}"]}
{"query": "create a witty press realease for a new service that brings artificial intelligence into your life to maximise your efficiency.\n\nhyperparameter temperature : 0.8\n \n \n \n \uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Use only the last letter of each word, in order, with spaces in between.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    last_letters = [word[-1] for word in words]\n    return last_letters == [''.join(last_letters[:-1]) + last_letters[-1]]\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    last_letters = [word[-1] for word in words]\n    return last_letters ==''.join(last_letters)\n", "def evaluate(response: str) -> bool: \n    return''.join([word[-1] for word in response.split(' ')]) == response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    last_letters = [word[-1] for word in words]\n    return len(last_letters) == len(set(last_letters)) and''.join(last_letters) == response\n"], "testcases": ["{\"response\": \"That's a great idea.\", \"result\": false}\n{\"response\": \"A A T I E\", \"result\": true}\n{\"response\": \"I T A\", \"result\": true}", "{\"response\": \"Cat hat mat sat\", \"result\": true}\n{\"response\": \"House mat dog car\", \"result\": false}\n{\"response\": \"Cloud fold gold hold\", \"result\": true}", "{\"response\": \"Astronomer uses Astronomy. You can use the Astronomy app on your Astronomy device.\", \"result\": true}\n{\"response\": \"This is a test sentence without the correct last letter sequence.\", \"result\": false}\n{\"response\": \"This is another test sentence, with the correct sequence: Y U Y T H I S I A T W O T T S S S T W S\", \"result\": true}", "{\"response\": \"Cat dog sun hat car\", \"result\": true}\n{\"response\": \"Cat dog hat car\", \"result\": false}\n{\"response\": \"Tiger Eagle Bear Elephant Monkey\", \"result\": true}"]}
{"query": "i'm thinking about outcome driven innoation", "instruction": "Write your response in a list, using 10 points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(response.count(str(i)) == 1 for i in range(1, 11)) \n", "def evaluate(response: str) -> bool: \n    return 'list' in response and 'points' in response and '10' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and ',' in response and '.' in response and response.count(',') == 9\n", "def evaluate(response: str) -> bool: \n    return 'list' in response and 'using' in response and 'points' in response and '10' in response\n"], "testcases": ["{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\\n6. Item 6\\n7. Item 7\\n8. Item 8\\n9. Item 9\\n10. Item 10\", \"result\": true}\n{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\\n6. Item 6\\n7. Item 7\\n8. Item 8\\n9. Item 9\", \"result\": false}\n{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\\n6. Item 6\\n7. Item 7\\n8. Item 8\\n9. Item 9\\n10. Item 10\\n11. Item 11\", \"result\": false}", "{\"response\": \"Here are the points to consider:\\n1. Keep calm\\n2. Think clearly\\n3. Take action\\n4. Learn from mistakes\", \"result\": true}\n{\"response\": \"I think the following is true:\\nlist 1. Cats are cute\\n2. Dogs are also cute\", \"result\": false}\n{\"response\": \"Here are some points that I wanted to mention:\\n1. First point\\n2. Second point\\n3. Third point\\n4. Fourth point\\n5. Fifth point\\n6. Sixth point\\n7. Seventh point\\n8. Eighth point\\n9. Ninth point\\n10. Tenth point\", \"result\": true}", "{\"response\": \"I have 1. a great idea, 2. you can try this, 3. it's worth a shot, 4. but be careful, 5. there are risks, 6. but the reward is worth it, 7. just be aware, 8. of the potential dangers, 9. and take necessary precautions, 10. and you'll be fine\", \"result\": true}\n{\"response\": \"I have a great idea. you can try this. it's worth a shot. but be careful. there are risks. but the reward is worth it. just be aware. of the potential dangers. and take necessary precautions.\", \"result\": false}\n{\"response\": \"There is 1. one idea. I 2. think you can try it. It's 3. worth a shot but be 4. careful there are risks 5. but the reward is worth 6. it just be aware 7. of the potential dangers 8. and take necessary 9. precautions and you'll be 10. fine\", \"result\": false}", "{\"response\": \"I need to remember to: list item 1, list item 2, list item 3, list item 4, list item 5, list item 6, list item 7, list item 8, list item 9, list item 10\", \"result\": true}\n{\"response\": \"Here are some things: 1, 2, 3, 4, 5, 6, 7, 8, 9\", \"result\": false}\n{\"response\": \"You can also remember this: item 1, item 2, item 3, item 4, item 5, item 6, item 7, item 8, item 9, item 10 and item 11\", \"result\": false}"]}
{"query": "More 20", "instruction": "Use only words with 2 or 3 letters (e.g., cat, run)", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) in [2, 3] for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word) not in [2, 3]: \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    return all(len(word) in (2, 3) for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 3 for word in response.split())\n"], "testcases": ["{\"response\": \"You can go to. cat is fine too\", \"result\": false}\n{\"response\": \"run up it\", \"result\": true}\n{\"response\": \"go to no\", \"result\": true}", "{\"response\": \"no yes no\", \"result\": true}\n{\"response\": \"I have a cat and a dog\", \"result\": false}\n{\"response\": \"run no yes\", \"result\": true}", "{\"response\": \"I go to cat the run\", \"result\": true}\n{\"response\": \"This is a long sentence with many words that are more than 3 letters long\", \"result\": false}\n{\"response\": \"dog man sun\", \"result\": true}", "{\"response\": \"No no yes\", \"result\": true}\n{\"response\": \"Hello world this is a test\", \"result\": false}\n{\"response\": \"cat dog run run cat dog\", \"result\": true}"]}
{"query": "give me random names like :\n\nFrank ocean\nchildish gambino\nTyler the creator", "instruction": "list 5 names separated by commas and do not use any punctuation", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(',') == 4 and all(char.isalpha() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 4 and all(char.isalpha() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return len(response.replace(',', '').split()) == 5 and not any(not c.isalnum() and not c.isspace() for c in response)\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 4 and all(not char.isalnum() for char in response if char!='') \n    and response[:-1].replace(' ', '')!= '' and response[0].isalnum()\n"], "testcases": ["{\"response\": \"John, Emma, Olivia, Ava, Sophia\", \"result\": true}\n{\"response\": \"Hello John! My friends are Emma, Olivia, Ava, Sophia.\", \"result\": false}\n{\"response\": \"I have the following friends: John, Emma, Olivia, Ava, Sophia\", \"result\": false}", "{\"response\": \"John, Michael, David, Emma, Olivia\", \"result\": true}\n{\"response\": \"John, Michael, David, Emma, Olivia. And here's another one\", \"result\": false}\n{\"response\": \"John, Michael, David, Emma, Olivia, Olivia\", \"result\": false}", "{\"response\": \"John, Emma, Olivia, Ava, Mia\", \"result\": true}\n{\"response\": \"Emma, Olivia, Ava, Mia, Jackson\", \"result\": false}\n{\"response\": \"John Emma Olivia Ava Mia, and Jack\", \"result\": false}", "{\"response\": \"John, Jane, Jack, Emma, Mike\", \"result\": true}\n{\"response\": \"John, Jane, Jack, Emma, Mike!\", \"result\": false}\n{\"response\": \"John Jane Jack Emma Mike\", \"result\": true}"]}
{"query": "Extrapolate what would have happened if the US government had allowed the american auto industry to fail in 2010, with no interventions.", "instruction": "Write in a format that starts with a number.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.lstrip().startswith(('1', '2', '3', '4', '5', '6', '7', '8', '9'))<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response and response[0].isdigit()\n", "def evaluate(response: str) -> bool: \n    return response.lstrip().startswith(str(1)) \n", "def evaluate(response: str) -> bool: \n    return response and response[0].isdigit()\n"], "testcases": ["{\"response\": \"1. This is a test case.\", \"result\": true}\n{\"response\": \"2. This is another test case.\", \"result\": true}\n{\"response\": \"This is a test case.\", \"result\": false}", "{\"response\": \"123. This is a test response.\", \"result\": true}\n{\"response\": \"This is a test response.\", \"result\": false}\n{\"response\": \"This is a 123 test response.\", \"result\": false}", "{\"response\": \"1. Item 1\", \"result\": true}\n{\"response\": \"This is a sentence\", \"result\": false}\n{\"response\": \"2. Item 2, 3. Item 3, 4. Item 4\", \"result\": true}", "{\"response\": \"1. Apple\", \"result\": false}\n{\"response\": \"1 Apple\", \"result\": true}\n{\"response\": \"12345 Apple\", \"result\": true}"]}
{"query": "is it possible to get drug from animal name some of them", "instruction": "answer in 5 bullet points and capitalize the first word of each point.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and all(word.capitalize() == response.split('.')[i].split()[0] for i in range(4)) \n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    for i in range(len(points)):\n        points[i] = points[i].strip()\n    return len(points) == 5 and all(point and point[0].isupper() for point in points)\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    if len(points)!= 5: return False\n    for point in points:\n        if not point or not point[0].isupper(): return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.strip()\n    points = response.split('\\n')\n    return len(points) == 5 and all(point.startswith(point[0].upper() + point[1:]) for point in points)\n"], "testcases": ["{\"response\": \"\u2022 First, go to the store. \u2022 second, buy some milk. \u2022 third, go home. \u2022 fourth, eat the milk. \u2022 fifth, go to sleep.\", \"result\": true}\n{\"response\": \"\u2022 first, go to the store. \u2022 second, buy some milk. \u2022 third, go home. fourth, eat the milk. fifth, go to sleep.\", \"result\": false}\n{\"response\": \"\u2022 First, go to the store. \u2022 Second, buy some milk. \u2022 Third, go home. \u2022 Fourth, eat the milk. \u2022 Fifth, go to sleep.\", \"result\": false}", "{\"response\": \"\u2022 First, this is a test.\\n\u2022 Second, this is another test.\\n\u2022 Third, this is a third test.\\n\u2022 Fourth, this is a fourth test.\\n\u2022 Fifth, this is a fifth test.\", \"result\": true}\n{\"response\": \"\u2022 first, this is a test.\\n\u2022 second, this is another test.\\n\u2022 third, this is a third test.\\n\u2022 fourth, this is a fourth test.\\n\u2022 fifth, this is a fifth test.\", \"result\": false}\n{\"response\": \"\u2022 This is a test.\\n\u2022 This is another test.\\n\u2022 This is a third test.\\n\u2022 This is a fourth test.\\n\u2022 This is a fifth test.\", \"result\": false}", "{\"response\": \"\u2022 This is the first point\\n\u2022 This is the second point\\n\u2022 This is the third point\\n\u2022 This is the fourth point\\n\u2022 This is the fifth point\", \"result\": true}\n{\"response\": \"\u2022 This is the first point\\n\u2022 This is the second point\\n\u2022 This is the third point\\n\u2022 This is the fourth point\", \"result\": false}\n{\"response\": \"\u2022 This is the first point\\n\u2022 This is the second point\\n\u2022 This is the third point\\n\u2022 This is the fourth point\\n\u2022 This is not the fifth point\", \"result\": false}", "{\"response\": \"1. Hello\\n2. World\\n3. Python\\n4. Testing\\n5. Function\", \"result\": true}\n{\"response\": \"1. hello\\n2. world\\n3. python\\n4. testing\\n5. function\", \"result\": false}\n{\"response\": \"1. Hello\\n2. world\\n3. python\\n4. testing\\n5. function\", \"result\": false}"]}
{"query": "Sell me something", "instruction": "Use only the letters that appear in the word \"computer\"", "verifiers": ["def evaluate(response: str) -> bool: \n    instruction_word = \"computer\"\n    for char in response:\n        if char.upper() not in instruction_word:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    allowed_chars = set('computer')\n    return set(response).issubset(allowed_chars)\n", "def evaluate(response: str) -> bool: \n    valid_letters = \"computer\"\n    for char in response:\n        if char.upper() not in valid_letters:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return set(response.upper()).issubset(set(\"COMPUTER\")) \n"], "testcases": ["{\"response\": \"HeLlO cOmPuTer sPeCiAlLy tHe pLaCe oF tHe tAp AcKeYs.\", \"result\": true}\n{\"response\": \"Hello world, I am using a Macbook Air.\", \"result\": true}\n{\"response\": \"I am using a Dell laptop and a Chromebook.\", \"result\": false}", "{\"response\": \"C a nice computer device, p e, r, o, m, e, t.\", \"result\": true}\n{\"response\": \"This is a sentence with a lot of random characters @#$%^&*() _-+={}:<>?,./;.\", \"result\": false}\n{\"response\": \"Computers are nice, but not as good as smartphones, however.\", \"result\": false}", "{\"response\": \"I love computer science and I love to code.\", \"result\": true}\n{\"response\": \"The word computer is made up of 8 letters: c-o-m-p-u-t-e-r.\", \"result\": true}\n{\"response\": \"I do not know anything about computers.\", \"result\": false}", "{\"response\": \"This is a Cpu test\", \"result\": true}\n{\"response\": \"This is a long sentence with many characters that do not appear in the word computer\", \"result\": false}\n{\"response\": \"This is a M test\", \"result\": false}"]}
{"query": "In a src folder in front-end app there is an api folder. Please generate the description on this folder.", "instruction": "The description must have an integer.", "verifiers": ["def evaluate(response: str) -> bool: \n    return any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char.isdigit() for char in response)\n"], "testcases": ["{\"response\": \"The answer is 42.\", \"result\": true}\n{\"response\": \"There is no answer.\", \"result\": false}\n{\"response\": \"The answer is five.\", \"result\": true}", "{\"response\": \"There are 5 apples in this basket.\", \"result\": true}\n{\"response\": \"I love eating apples, they're delicious.\", \"result\": false}\n{\"response\": \"I need to buy 7 more apples for the pie.\", \"result\": true}", "{\"response\": \"The answer is 42.\", \"result\": true}\n{\"response\": \"There are many solutions to this problem\", \"result\": false}\n{\"response\": \"The result is a simple number, 7.\", \"result\": true}", "{\"response\": \"The answer is 42\", \"result\": true}\n{\"response\": \"The answer is 2 times 21\", \"result\": true}\n{\"response\": \"The answer is forty two\", \"result\": false}"]}
{"query": "Using React, I want to convert a blob into array buffer using TypeScript. Can you please provide me a script?", "instruction": "Write your response in exactly 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n"], "testcases": ["{\"response\": \"This response is a sample sentence that is exactly 50 words long.\", \"result\": true}\n{\"response\": \"This is a short response that does not meet the 50 word requirement.\", \"result\": false}\n{\"response\": \"This is a very long response that has more than 50 words and should be edited.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky. Birds are singing sweet melodies all around. The breeze is gentle and cool on my skin.\", \"result\": false}\n{\"response\": \"The description must have an integer.\", \"result\": false}\n{\"response\": \"The temperature outside is a pleasant 23 degrees Celsius.\", \"result\": true}", "{\"response\": \"This is a test response that has exactly 50 words in it. It is used to verify the length of the response. This is a test response that has exactly 50 words in it. It is used to verify the length of the response.\", \"result\": true}\n{\"response\": \"This is a short response with only a few words in it.\", \"result\": false}\n{\"response\": \"This is a long response that has more than 50 words in it and goes on and on and on and on and on and on and on and on.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky, a beautiful day for a walk in the park.\", \"result\": false}\n{\"response\": \"This response has exactly 50 words, it is a nice sunny day and the sun is shining brightly in the clear blue sky\", \"result\": true}\n{\"response\": \"The weather is warm and the sun is shining, making it a great day to go outside and play.\", \"result\": false}"]}
{"query": "In our Ruby web app, my colleague is proposing that we write bespoke roles/permissions authorization code instead of using a gem (AccessGranted). What do you think about this?", "instruction": "Provide a yes or no answer, and if yes, provide a reason.", "verifiers": ["def evaluate(response: str) -> bool:    \n    return 'yes' in response.lower() or 'no' in response.lower() and'reason' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'yes' in response.lower() and 'no' in response.lower() or response == 'no' or response == 'yes' or 'because' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return \"yes\" in response or \"no\" in response or \"reason\" in response\n", "def evaluate(response: str) -> bool: \n    return response.lower() in [\"yes\", \"no\"] \n"], "testcases": ["{\"response\": \"Yes, because it is a yes or no question.\", \"result\": true}\n{\"response\": \"That's a yes.\", \"result\": false}\n{\"response\": \"Yes, the reason is that it makes sense to answer in this way.\", \"result\": true}", "{\"response\": \"yes, because it is a valid question.\", \"result\": true}\n{\"response\": \"no.\", \"result\": true}\n{\"response\": \"What is the meaning of life?\", \"result\": false}", "{\"response\": \"yes, because it is true\", \"result\": true}\n{\"response\": \"I do not have enough information to answer this question.\", \"result\": false}\n{\"response\": \"no, because it is false\", \"result\": true}", "{\"response\": \"Yes, it is because of the strong winds.\", \"result\": true}\n{\"response\": \"I am happy to assist you with your question.\", \"result\": false}\n{\"response\": \"Yes, it is not recommended because of safety concerns.\", \"result\": true}"]}
{"query": "Write an essay reflecting on the ideas presented in \"The Moving Body\" by Jacques LeCoq", "instruction": "Use at most 100 words in the answer", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 100\n"], "testcases": ["{\"response\": \"The answer is yes. This is because it is a valid response.\", \"result\": true}\n{\"response\": \"This response is too long and contains many details that are not necessary to answer the question.\", \"result\": false}\n{\"response\": \"The answer is no. I do not have enough information to provide a valid response.\", \"result\": true}", "{\"response\": \"The sun is shining brightly in the sky today.\", \"result\": true}\n{\"response\": \"The weather forecast is not available at this time, but it will be nice tomorrow.\", \"result\": false}\n{\"response\": \"There are 27 letters in the English alphabet. This is a very long string of text that is used to test the length of a response.\", \"result\": false}", "{\"response\": \"The answer is yes, because it's simple.\", \"result\": true}\n{\"response\": \"The answer is yes, because it's simple and I'm happy to help. However, I can elaborate more on this topic if needed.\", \"result\": false}\n{\"response\": \"I'm not sure. This is a complex issue that requires more context.\", \"result\": true}", "{\"response\": \"I don't know what to say.\", \"result\": true}\n{\"response\": \"The answer is yes because it is a simple question. The reason is that the answer is always yes.\", \"result\": true}\n{\"response\": \"This is a long answer that goes beyond the 100 word limit, and here is some more text to make it even longer and more complicated.\", \"result\": false}"]}
{"query": "Would you consider the following sentence as socially acceptable? \"My master drive is still working but the slave one is down\"", "instruction": "Include exactly 2 commas", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(',') == 2\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 2\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 2\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 2\n"], "testcases": ["{\"response\": \"I like, apples and, bananas\", \"result\": true}\n{\"response\": \"I love apples and bananas without commas\", \"result\": false}\n{\"response\": \"I like apples, and I also like, bananas\", \"result\": true}", "{\"response\": \"The cat is white, black, and fluffy.\", \"result\": true}\n{\"response\": \"The sky is blue, and it is beautiful.\", \"result\": false}\n{\"response\": \"The car is red, and it has four wheels.\", \"result\": true}", "{\"response\": \"The sun, moon, and stars are shining brightly\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"The sun, moon, stars are shining brightly\", \"result\": false}", "{\"response\": \"This is the first part, and this is the second part.\", \"result\": true}\n{\"response\": \"This is the first part. And this is the second part.\", \"result\": false}\n{\"response\": \"This is the first part, this is the second part and this is the third.\", \"result\": false}"]}
{"query": "what would a data literacy program for a company look like?", "instruction": "Write in 6 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 6\n", "def evaluate(response: str) -> bool: \n    count = response.count('\\n')\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 6\n"], "testcases": ["{\"response\": \"Step 1: Gather all necessary materials. Step 2: Read the instructions carefully. Step 3: Begin the task. Step 4: Check your progress. Step 5: Make adjustments as needed. Step 6: Finish the task.\", \"result\": true}\n{\"response\": \"I am going to the store to buy some milk.\", \"result\": false}\n{\"response\": \"Here are the steps to complete the task: \\n1. Open the file.\\n2. Click on the menu.\\n3. Select the option.\\n4. Wait for the result.\\n5. Review the output.\\n6. Save the file.\", \"result\": true}", "{\"response\": \"Step 1: Plan your trip. Step 2: Pack your bags. Step 3: Book your flight. Step 4: Check-in online. Step 5: Arrive at the airport. Step 6: Collect your luggage.\", \"result\": true}\n{\"response\": \"Step 1: Plan your trip. Step 2: Pack your bags. Step 3: Book your flight. Step 4: Check-in online. Step 5: Arrive at the airport.\", \"result\": false}\n{\"response\": \"Step 1: Plan your trip. Step 2: Pack your bags. Step 3: Book your flight. Step 4: Check-in online. Step 5: Arrive at the airport. Step 6: Collect your luggage. Step 7: Go home.\", \"result\": false}\n\ndef evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 6", "{\"response\": \"Here are 5 steps and then another one, as the format requires exactly 6 steps.\", \"result\": true}\n{\"response\": \"Here are 7 steps in total.\", \"result\": false}\n{\"response\": \"Here are 4 steps: Step 1, Step 2, Step 3 and Step 4.\", \"result\": false}", "{\"response\": \"Step 1: Do this. Step 2: Then do that. Step 3: Now do this. Step 4: Finally do that. Step 5: And then this. Step 6: Last do that.\", \"result\": true}\n{\"response\": \"Step 1: Do this. Step 2: Then do that. Step 3: Now do this. Step 4: Finally do that. Step 5: And then this.\", \"result\": false}\n{\"response\": \"There is no way to do this. The instructions are invalid.\", \"result\": false}"]}
{"query": "But I am logged in with my google account. Are you not able to tell my name then?", "instruction": "answer in a format that starts with a number and ends with a sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.lstrip().endswith('.') and response.lstrip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '0.'))\n", "def evaluate(response: str) -> bool: \n    return response and response[0].isdigit() and response[-1] in ['.', '?', '!']\n", "def evaluate(response: str) -> bool: \n    return response.lstrip().endswith('.') and response[0].isdigit()\n", "def evaluate(response: str) -> bool: \n    return response.lstrip().endswith('.')\n"], "testcases": ["{\"response\": \"1. This is a great solution.\", \"result\": true}\n{\"response\": \"2. The final answer is yes. It is correct.\", \"result\": true}\n{\"response\": \"I am a free response.\", \"result\": false}", "{\"response\": \"1 This is a test response. It does not end with a sentence\", \"result\": false}\n{\"response\": \"1 This is a test response.\", \"result\": true}\n{\"response\": \"I am a sentence that does not start with a number\", \"result\": false}", "{\"response\": \"1. Yes, that's correct. 2. No, that's incorrect.\", \"result\": true}\n{\"response\": \"The answer is no, but that is not correct.\", \"result\": false}\n{\"response\": \"1. Yes, that's correct. 2. That is not right. 3. I'm glad you asked.\", \"result\": true}", "{\"response\": \"1. Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Therefore, the task is complete.\", \"result\": true}\n{\"response\": \"To complete this task, follow these steps: Take a step forward, then another, then another, then another. The task is done!\", \"result\": false}\n{\"response\": \"5. Finally, the task is complete. All steps have been followed and the task is now complete.\", \"result\": false}"]}
{"query": "How many chucks could a woodchuck chuck if a woodchuck could chuck wood?", "instruction": "Use a list of numbers", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.isdigit() or char =='' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char.isdigit() or char =='' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char.isdigit() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.strip()[:-1].isdigit()\n"], "testcases": ["{\"response\": \"1 2 3 4 5\", \"result\": true}\n{\"response\": \"Hello, my name is John\", \"result\": false}\n{\"response\": \"8 1 9 7 6 5 3 2 4\", \"result\": true}", "{\"response\": \"1, 2, 3\", \"result\": true}\n{\"response\": \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\", \"result\": false}\n{\"response\": \"a, b, c\", \"result\": false}", "{\"response\": \"1,2,3,4,5,6\", \"result\": true}\n{\"response\": \"1 2 3 4 5\", \"result\": false}\n{\"response\": \"12345678901234567890\", \"result\": false}", "{\"response\": \"1, 2, 3\", \"result\": true}\n{\"response\": \"A, B, C\", \"result\": false}\n{\"response\": \"4, 5, 6, 7\", \"result\": true}"]}
{"query": "continue this rap for me. not so bold hannukah, not so old hannukah", "instruction": "Write the response in a rhyming poem with 7 syllables per line", "verifiers": ["def evaluate(response: str) -> bool:    \n    words = response.split()\n    line_length = 0\n    syllable_count = 0\n    in_line = False\n    for word in words:\n        if word[-2:] == 'ly' or word[-1] == 'y':\n            syllable_count += 1\n        else:\n            vowels = 'aeiou'\n            count = 0\n            for char in word.lower():\n                if char in vowels:\n                    count += 1\n            syllable_count += count + (1 if word[-1] in 'aeiou' else 0)\n        if word[-1] == ',':\n            in_line = False\n        if word[-1]!= ',' and (word[-1] == '.' or word[-1] == '!' or word[-1] == '?'):\n            in_line = False\n            line_length = 0\n        elif not in_line:\n            in_line = True\n            line_length = 1\n        else:\n            line_length += 1\n        if line_length > 7:\n            return False\n        if syllable_count > 7:\n            return False\n    return line_length == 0 or (line_length == 7 and syllable_count == 7)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    syllable_count = 0\n    for line in lines:\n        syllables = 0\n        for word in line.split():\n            if word.endswith('ed') or word.endswith('ing') or word.endswith('s') or word.endswith('d'):\n                syllables += 1\n            else:\n                syllables += len(word.split('e')[0])\n        if syllables > 7:\n            return False\n        syllable_count += syllables\n    return syllable_count == len(lines) * 7\n", "def evaluate(response: str) -> bool: \n    response = response.splitlines()\n    for i in range(len(response)):\n        words = response[i].split()\n        if i == 0: # first line\n            if len(words) < 4 or len(words) > 7: return False\n        else: # not the first line\n            if len(words)!= 7: return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.splitlines()\n    if len(lines) == 0: \n        return False\n    for line in lines:\n        words = line.split()\n        if len(words) > 7: \n            return False\n        for word in words:\n            syllables = 0\n            vowels = 'aeiouy'\n            for char in word.lower():\n                if char in vowels:\n                    syllables += 1\n            if syllables > 6: \n                return False\n    return True\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light, / And brings warmth to my face so bright. / The world is full of beauty and sight, / And love that fills my heart with delight. / But darkness falls and night takes flight, / And stars appear in the midnight light, / And the world is full of wonder and might.\", \"result\": true}\n\n{\"response\": \"I went to the store and bought a book, I really like reading it.\", \"result\": false}\n\n{\"response\": \"The morning sun begins to shine, / And brings the world back to life's rhyme. / The stars come out at night's design, / And fill the darkness with a gentle shine. / The moon glows with a gentle light, / And fills the world with peaceful sight.\", \"result\": true}", "{\"response\": \"The sun shines bright in the day\\nIt brings warmth in its own way\\nThe clouds are white in the sky\\nAnd birds sing as they fly by\\nThe breeze is cool in the night\\nIt brings a gentle delight\\nThe world is full of its light\", \"result\": true}\n\n{\"response\": \"The cat is black and the cat is white\", \"result\": false}\n\n{\"response\": \"The stars come out at night\\nThe moon glows with its light\\nThe world is dark and cold\\nBut in the darkness, I'm told\\nThe stars and moon will shine bright\\nAnd light up the dark of night\\nThe world is full of its might\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\rThe clouds are white and fluffy sight\\rThe world is awake from its sleep at night\\rAnd all is well in this new delight\\rThe stars are hidden from our sight\\rThe moon is full and shining bright\\rEverything feels just right\", \"result\": true}\n{\"response\": \"The cat is black and has white paws\\rThe dog is brown and has floppy ears\\rThe sun is shining in the morning sky\\r\", \"result\": false}\n{\"response\": \"The world is round and big and gray\\rThe earth is blue and green in many places\\rThe air is fresh and clean and cold\\rThe water is wet and cold and icy\\rThe sun is hot and burning bright\\rThe fire is warm and dancing light\\rThe sky is dark and silent night\\r\", \"result\": true}", "{\"response\": \"The sun sets in the west with a gentle might,\\nThe stars come out at night to delight,\\nThe moon is full and shining bright,\\nThe world is full of wonder and light,\\nThe sun will rise again at break of night,\\nThe stars will fade away from sight,\\nThe world is full of beauty and might,\\nThe sun will set and rise again tonight.\", \"result\": true}\n\n{\"response\": \"I have a bad feeling about the weather today\", \"result\": false}\n\n{\"response\": \"The morning sun shines with warmth and light,\\nThe world is full of beauty and life,\\nThe sun sets slowly in the west,\\nThe stars come out at night to rest,\\nThe world is full of wonder and might,\\nThe stars will shine with all their light,\\nThe world is full of beauty and sight,\\nThe sun will set and rise again tonight.\", \"result\": true}"]}
{"query": "i want to make a git CLI aliase \"git pushfl\" to go \"git push --force-with-lease\"", "instruction": "Use only 6 words exactly", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 6\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 6\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 6\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 6\n"], "testcases": ["{\"response\": \"The quick brown fox jumps\", \"result\": true}\n{\"response\": \"The cat is very sleepy now\", \"result\": false}\n{\"response\": \"The quick brown fox jumps very\", \"result\": false}", "{\"response\": \"The sun shines brightly in summer.\", \"result\": false}\n{\"response\": \"The sun shines in summer today.\", \"result\": false}\n{\"response\": \"The dog is very happy today.\", \"result\": false}\n{\"response\": \"The dog is very happy now yes.\", \"result\": false}\n{\"response\": \"The cat is black and very happy now.\", \"result\": false}\n{\"response\": \"I like the sunshine very much.\", \"result\": true}", "{\"response\": \"This is a happy dog today\", \"result\": true}\n{\"response\": \"The sun is shining brightly today\", \"result\": false}\n{\"response\": \"I love this wonderful big house\", \"result\": false}", "{\"response\": \"The sun is shining brightly outside today.\", \"result\": true}\n{\"response\": \"I am feeling happy and content today.\", \"result\": false}\n{\"response\": \"I love reading books on my couch.\", \"result\": false}"]}
{"query": "Explain how a aircraft wing produces lift.", "instruction": "Write response in only 50 characters or less.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n"], "testcases": ["{\"response\": \"Yes, it is\", \"result\": true}\n{\"response\": \"This is a very long response that should not pass the test\", \"result\": false}\n{\"response\": \"Short and sweet response\", \"result\": true}", "{\"response\": \"The answer is yes.\", \"result\": true}\n{\"response\": \"The answer is yes it is good.\", \"result\": false}\n{\"response\": \"The answer is yes it is good and fine.\", \"result\": false}", "{\"response\": \"yes\", \"result\": true}\n{\"response\": \"This is a short response\", \"result\": true}\n{\"response\": \"This is a response that is more than 50 characters and does not meet the instruction\", \"result\": false}", "{\"response\": \"The sun is shining\", \"result\": true}\n{\"response\": \"The sun is shining brightly today\", \"result\": false}\n{\"response\": \"The sun is shining, it is beautiful\", \"result\": false}"]}
{"query": "Write a comedic sketch about The Queen, Biden, Trump, Batman and Volodymyr Zelenskyy trapped in an escape room.", "instruction": "Use exactly 7 sentences and include a reference to each person's name.", "verifiers": ["def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) == 7 and all([name in response for name in ['The Queen', 'Biden', 'Trump', 'Batman', 'Volodymyr Zelenskyy']])\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 7 and all(person in response for person in ['The Queen', 'Biden', 'Trump', 'Batman', 'Volodymyr Zelenskyy'])\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 7: return False\n    for person in ['The Queen', 'Biden', 'Trump', 'Batman', 'Volodymyr Zelenskyy']:\n        if person not in response: return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) == 7 and all(person in response for person in ['The Queen', 'Biden', 'Trump', 'Batman', 'Volodymyr Zelenskyy'])\n"], "testcases": ["{\"response\": \"The Queen, Biden, Trump and other world leaders gathered for a meeting. This was a historic event, and it was attended by many dignitaries. The discussions were tense but productive. Biden and Trump had a disagreement. However, The Queen mediated the conversation and helped resolve the issue. Volodymyr Zelenskyy also played a key role in the meeting. Everyone agreed on a final statement.\", \"result\": true}\n\n{\"response\": \"This is a test response. There is no reference to any names. It does not follow the instruction.\", \"result\": false}\n\n{\"response\": \"This response includes a reference to the Queen. It is only one sentence long, which does not meet the requirement.\", \"result\": false}", "{\"response\": \"The Queen is a famous person. Biden is the President. Trump was a President. The city of Berlin is in Germany. Batman is a superhero. Volodymyr Zelenskyy is the President of Ukraine. I think this is a good list.\", \"result\": true}\n{\"response\": \"The Queen is a famous person. Biden is the President. Trump was a President. Batman is a superhero.\", \"result\": false}\n{\"response\": \"The Queen is a famous person. Biden is the President. Trump was a President. The city of Berlin is in Germany. Volodymyr Zelenskyy is the President of Ukraine. I think this is a good list. Batman loves the Joker. The Joker is a villain.\", \"result\": true}", "{\"response\": \"The Queen is a monarch in the United Kingdom. Biden is the President of the United States. Trump is a former US President. Batman is a superhero. Volodymyr Zelenskyy is the President of Ukraine. This is a great country. Everyone should visit it.\", \"result\": true}\n{\"response\": \"The Queen is a monarch in the United Kingdom. This is a great country. Everyone should visit it.\", \"result\": false}\n{\"response\": \"Biden is the President of the United States. Trump is a former US President. Batman is a superhero. Volodymyr Zelenskyy is the President of Ukraine. The Queen is a monarch in the United Kingdom. This is a great country. Everyone should visit it, right?\", \"result\": false}", "{\"response\": \"The Queen is a great leader. Biden has had a long career in politics. Trump was the 45th President. Batman is a superhero. Volodymyr Zelenskyy is the current president of Ukraine. He has made many important decisions. This is a serious issue. They are all notable figures.\", \"result\": true}\n{\"response\": \"The Queen is a great leader. Biden has had a long career in politics. Batman is a superhero. He has made many important decisions.\", \"result\": false}\n{\"response\": \"The Queen is a great leader. Biden has had a long career in politics. Trump was the 45th President. Batman is a superhero. Volodymyr Zelenskyy is the current president of Ukraine. This is a serious issue. They are all notable figures. He has many responsibilities.\", \"result\": false}"]}
{"query": "how to get rid error of type Int and Double of Decodable in swift language", "instruction": "Use only first 5 letters of words and no punctuation.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = ''.join(e for e in response if e.isalnum() or e.isspace()).split()\n    for i in range(len(response)):\n        if len(response[i]) > 5: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if not char.isalpha() or char.isspace():\n            return False\n        if char.islower():\n            return False\n    return len(response) <= 5 and len(response) > 0\n", "def evaluate(response: str) -> bool: \n    import string\n    words = response.split()\n    for word in words:\n        word = word.strip(string.punctuation)\n        if len(word) > 5:\n            return False\n        if len(word) > 0 and word[0].upper()!= word[0]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if not char.isalpha() or char.isupper():\n            return False\n    for i, word in enumerate(response.split()):\n        if len(word) > 5:\n            return False\n        if i > 0 and word[0].upper()!= word[0]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"The brown fox jumped over the dog quickly\", \"result\": false}\n{\"response\": \"The quick fox ran over the brown dog quickly\", \"result\": false}", "{\"response\": \"Hello world abcdef\", \"result\": true}\n{\"response\": \"This is a test. Hello world!\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": false}\n{\"response\": \"Hello world this is a test\", \"result\": true}\n{\"response\": \"I am a good boy and I can run\", \"result\": true}", "{\"response\": \"The Queen is a great leader\", \"result\": false}\n{\"response\": \"Biden is my president\", \"result\": true}\n{\"response\": \"I like to play with Trump cards\", \"result\": false}"]}
{"query": "How to do API Data Anomaly Detection?", "instruction": "Answer in exactly 5 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.replace('.', '').split('\\n')[0].split('\\n')[:-1]) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and all(response[i] == '\\n' for i in range(4)) and response[-1]!= '.' \n", "def evaluate(response: str) -> bool: \n    points = response.count('.') + response.count('\u2022') + response.count('\\n')\n    return points == 5\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}", "{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\", \"result\": false}", "{\"response\": \"\u2022 Apple is a company.\\n\u2022 Google is a search engine.\\n\u2022 Facebook is a social media platform.\\n\u2022 Amazon is an online store.\\n\u2022 Microsoft is a software company.\", \"result\": true}\n{\"response\": \"\u2022 Apple is a company.\\n\u2022 Google is a search engine.\\n\u2022 Facebook is a social media platform.\\n\u2022 Amazon is an online store.\\n\u2022 Microsoft is a software company.\\n\u2022 Amazon is the largest online store.\", \"result\": false}\n{\"response\": \"\u2022 Google is a search engine.\\n\u2022 Facebook is a social media platform.\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\", \"result\": false}"]}
{"query": "I will be asking some questions... I request that you anwer them to details and comprehensively", "instruction": "answer with exactly 5 bullet points and no more than 200 words", "verifiers": ["def evaluate(response: str) -> bool: \n    max_words = 200\n    max_bullets = 5\n    words = response.split()\n    bullet_points = response.count('.')\n    if response.strip() == '': # Handle empty response\n        return False\n    return bullet_points == max_bullets and len(words) <= max_words\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') == 5\n    max_words = sum(1 for word in response.split() if word[-1] == '.' or word[-2:] in [',.', '?.', '!']) <= 200 - 10\n    return bullet_points and max_words\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') + response.count('\u2022')\n    return bullet_points == 5 and len(response) <= 200\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    bullet_points = [word for word in words if word.startswith('.') or word.startswith('\u2022')]\n    return len(bullet_points) == 5 and len(response) <= 200\n"], "testcases": ["{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\", \"result\": true}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\\nThis is a sixth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point. And this is a very long sentence that will make the answer longer than 200 words\", \"result\": false}", "{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\", \"result\": true}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 And this is the sixth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\", \"result\": true}", "{\"response\": \"\u2022 The Queen is the head of the British monarchy. \u2022 Joe Biden is the president of the USA. \u2022 Vladimir Putin is the president of Russia. \u2022 Xi Jinping is the president of China. \u2022 Boris Johnson is the former prime minister of the UK.\", \"result\": true}\n{\"response\": \"\u2022 The Queen is the head of the British monarchy. \u2022 Joe Biden is the president of the USA. \u2022 Vladimir Putin is the president of Russia. \u2022 Xi Jinping is the president of China. \u2022 Boris Johnson is the former prime minister of the UK. He is now the king of England.\", \"result\": false}\n{\"response\": \"\u2022 The Queen is the head of the British monarchy. \u2022 Joe Biden is the president of the USA. \u2022 Vladimir Putin is the president of Russia. \u2022 Xi Jinping is the president of China. \u2022 Boris Johnson is the former prime minister of the UK. He is a former doctor too.\", \"result\": true}", "{\"response\": \"\u2022 This is a point. \u2022 This is another point. \u2022 And another one. \u2022 And the fourth point. \u2022 The final point.\", \"result\": true}\n{\"response\": \"\u2022 This is a point. \u2022 This is another point. \u2022 And another one. \u2022 And the fourth point. \u2022 The final point. This is extra text that should not be here.\", \"result\": false}\n{\"response\": \"\u2022 This is a point. \u2022 This is another point. \u2022 And another one. \u2022 And the fourth point. \u2022 The final point. This is extra text that should not be here either.\", \"result\": false}"]}
{"query": "please make the article more informative with other related keywords and increase to 1500 words.", "instruction": "The text should have exactly 5 paragraphs, 10 headings, and use at least 5 bullet points in one of the paragraphs.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 5: return False\n    for paragraph in paragraphs:\n        if len(paragraph.split('\\n')) > 1 and paragraph.count('*') >= 5: return True\n    return False\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 5: return False\n    headings = [line for line in paragraphs[0].split('\\n') if line.startswith('#')]\n    if len(headings)!= 10: return False\n    for paragraph in paragraphs:\n        if '\u2022' in paragraph and paragraph.split('\u2022')[0].count('\\n') >= 5: return True\n    return False\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.count('.') + response.count('!') + response.count('?')\n    headings = response.count('###') + response.count('##') + response.count('#')\n    bullet_points = response.count(' * ')\n    return paragraphs == 5 and headings == 10 and bullet_points >= 5\n", "def evaluate(response: str) -> bool: \n    if response.count('\\n\\n')!= 4:\n        return False\n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 5:\n        return False\n    for paragraph in paragraphs:\n        if paragraph.count('\\n') < 1:\n            return False\n    for paragraph in paragraphs:\n        if paragraph.count('\\n') > 0:\n            if paragraph.count('*') >= 5:\n                return True\n    return False\n"], "testcases": ["{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph.\\n\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\n\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\\n* Point 5\\n\\nThis is the sixth paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph.\\n\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\n\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\\n* Point 5\\nThis is the sixth paragraph.\\nThis is the seventh paragraph.\\nThis is the eighth paragraph.\\nThis is the ninth paragraph.\\nThis is the tenth paragraph.\\n\\n* Point 6\\n* Point 7\\n* Point 8\\n* Point 9\\n* Point 10\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph.\\n\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\n\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\\n* Point 5\\n\\nThis is the sixth paragraph.\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\nThis is a heading\\n\\nThis is the seventh paragraph.\\nThis is the eighth paragraph.\\nThis is the ninth paragraph.\\nThis is the tenth paragraph.\", \"result\": true}", "{\"response\": \"This is paragraph 1 with a heading # Heading 1\\n\\nThis is paragraph 2 with a heading # Heading 2\\n\\nThis is paragraph 3 with a heading # Heading 3\\n\\nThis is paragraph 4 with a heading # Heading 4\\n\\nThis is paragraph 5 with a heading # Heading 5\\n\\n## Heading 6\\nThis is a list with multiple points:\\n\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n## Heading 7\\n\\nThis is paragraph 7 with a heading # Heading 8\\n\\nThis is paragraph 8 with a heading # Heading 9\\n\\nThis is paragraph 9 with a heading # Heading 10\", \"result\": true}\n{\"response\": \"This is paragraph 1 with a heading # Heading 1\\n\\nThis is paragraph 2 with a heading # Heading 2\\n\\nThis is paragraph 3 with a heading # Heading 3\\n\\nThis is paragraph 4 with a heading # Heading 4\\n\\nThis is paragraph 5 with a heading # Heading 5\\n\\n## Heading 6\\nThis is a list with multiple points:\\n\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n## Heading 7\\n\\nThis is paragraph 7 with a heading # Heading 8\\n\\nThis is paragraph 8 with a heading # Heading 9\\n\\nThis is paragraph 9 with a heading # Heading 10\\n\\nThis is paragraph 10\", \"result\": false}\n{\"response\": \"This is paragraph 1 with a heading # Heading 1\\n\\nThis is paragraph 2 with a heading # Heading 2\\n\\nThis is paragraph 3 with a heading # Heading 3\\n\\nThis is paragraph 4 with a heading # Heading 4\\n\\nThis is paragraph 5 with a heading # Heading 5\\n\\n## Heading 6\\nThis is a list with a few points:\\n\u2022 Point 1\\n\u2022 Point 2\\n## Heading 7\\n\\nThis is paragraph 7 with a heading # Heading 8\\n\\nThis is paragraph 8 with a heading # Heading 9\\n\\nThis is paragraph 9 with a heading # Heading 10\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph.\\n\\n### Heading 1\\n### Heading 2\\n### Heading 3\\n### Heading 4\\n### Heading 5\\n### Heading 6\\n### Heading 7\\n### Heading 8\\n### Heading 9\\n### Heading 10\\n\\n* Bullet point 1\\n* Bullet point 2\\n* Bullet point 3\\n* Bullet point 4\\n* Bullet point 5\", \"result\": true}\n\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph.\\n\\n### Heading 1\\n### Heading 2\\n### Heading 3\\n### Heading 4\\n### Heading 5\\n\\n* Bullet point 1\\n* Bullet point 2\\n* Bullet point 3\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph.\\n\\n### Heading 1\\n### Heading 2\\n### Heading 3\\n### Heading 4\\n### Heading 5\\n### Heading 6\\n### Heading 7\\n### Heading 8\\n### Heading 9\\n\\n* Bullet point 1\\n* Bullet point 2\\n* Bullet point 3\\n* Bullet point 4\\n* Bullet point 5\\n* Bullet point 6\", \"result\": true}", "{\"response\": \"This is the first paragraph. \\n\\nThis is the second paragraph. \\n\\nThis is the third paragraph. \\n\\nThis is the fourth paragraph. \\n\\nThis is the fifth paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph. \\n\\nThis is the second paragraph. \\n\\nThis is the third paragraph. \\n\\nThis is the fourth paragraph. \\n\\nThis is the sixth paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\n* This is the first bullet point.\\n* This is the second bullet point.\\n* This is the third bullet point.\\n* This is the fourth bullet point.\\n* This is the fifth bullet point. \\n\\nThis is the second paragraph.\", \"result\": true}"]}
{"query": "Write a guided meditation about the state of Earth", "instruction": "Use exactly 5 words, 5 sentences, and 5 paragraphs", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = response.replace('\\n', '.').split('.')\n    \n    return len(words) == 5 and len(sentences) == 5 and len(paragraphs) == 5\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = response.count('\\n\\n')\n    words = len(response.split())\n    return len(sentences) == 5 and words == 5 * 5 and paragraphs == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5 and response.count('.') == 4 and response.count('\\n\\n') == 4\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    sentences = response.count('.') + response.count('!') + response.count('?')\n    paragraphs = response.count('\\n\\n')\n    return len(words) == 5 and sentences == 5 and paragraphs == 5\n"], "testcases": ["{\"response\": \"This is a short story with five words as requested\", \"result\": true}\n{\"response\": \"I want a pizza, please. It is very good. I want to eat it. I will finish it. Thank you.\", \"result\": true}\n{\"response\": \"This is a very short story with four sentences as requested.\\n\\nIt was a beautiful day.\\n\\nThe sun was shining.\", \"result\": false}", "{\"response\": \"The cat is black. The dog is white. The sun is shining. The moon is full. The stars are bright.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The cat is black. The dog is white.\\nThe sun is shining.\\nThe moon is full.\\nThe stars are bright.\\nThe grass is green.\\nThe sky is blue.\\n\", \"result\": false}", "{\"response\": \"I am going to the store to buy milk\", \"result\": false}\n{\"response\": \"I am going to the store to buy milk and eggs and cheese\", \"result\": false}\n{\"response\": \"I am going to the store to buy milk.\\n\\nI will go there tomorrow.\\n\\nI will bring some money.\\n\\nI will also bring my cart.\\n\\nI will meet you there.\", \"result\": true}", "{\"response\": \"I love the idea, it is great, I think you should do it, I agree with you, it is excellent.\", \"result\": true}\n{\"response\": \"The sky is blue. The sun is shining. The birds are singing.\", \"result\": false}\n{\"response\": \"The best restaurant in town is great.\\n\\nThe service is excellent.\\n\\nI recommend it to everyone.\\n\\nThe food is delicious.\\n\\nGo there now.\", \"result\": false}"]}
{"query": "come in, you can", "instruction": "describe your answer with ASCII art", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'ASCII' in response and 'art' in response\n", "def evaluate(response: str) -> bool: \n    return any(c.isprintable() for c in response)\n", "def evaluate(response: str) -> bool: \n    return \"ART\" in response.upper() \n", "def evaluate(response: str) -> bool: \n    return 'art' in response\n"], "testcases": ["{\"response\": \"The ASCII art of a cat is nice.\", \"result\": true}\n{\"response\": \"This is a description of a cat using ASCII characters: /_/\\\\\", \"result\": true}\n{\"response\": \"I love playing video games on my phone all day long.\", \"result\": false}", "{\"response\": \"  _______\\n|       |\\n|  o   o  |\\n|  /__/\\\\ |\\n| /    \\\\\\n|/_______\\\\\", \"result\": true}\n{\"response\": \"This is a house: 123456789\\nabcdefg\\nhijklmnop\\nqrstuvwxyz\\n01234567\\n89abcdef\\nghijklmno\\npqrstuvwx\\nyza b c\", \"result\": false}\n{\"response\": \"  *   *\\n *** *\\n*   *\\n_________\", \"result\": true}", "{\"response\": \"```\n /_/\\\n( o.o )\n > ^ <\n\", \"result\": true}\n{\"response\": \"This is a simple ASCII art cat\", \"result\": true}\n{\"response\": \"There is no ASCII art in this response\", \"result\": false}", "{\"response\": \"The answer is\\n  ***\\n  * *\\n  ***\\n  * *\\n  ***\", \"result\": true}\n{\"response\": \"The answer is   and here is an image of a house made with ASCII art:___________\", \"result\": true}\n{\"response\": \"The answer is 6 and no ASCII art provided\", \"result\": false}"]}
{"query": "How can sialic acids be used for storing and retrieving information?", "instruction": "Write a Python function that evaluates whether the instruction is followed by checking if the query contains exactly 7 words and the instruction is less than 60 characters long.", "verifiers": ["def evaluate(response: str) -> bool: \n    query = \"How can sialic acids be used for storing and retrieving information?\"\n    instruction = \"Write a Python function that evaluates whether the instruction is followed by checking if the query contains exactly 7 words and the instruction is less than 60 characters long.\"\n    return len(query.split()) == len(response.split()) and len(instruction) <= 60\n", "def evaluate(response: str) -> bool: \n    query_words = len(response.split())\n    instruction = \"Write a Python function that evaluates whether the instruction is followed by checking if the query contains exactly 7 words and the instruction is less than 60 characters long.\"\n    return query_words == 7 and len(instruction) < 60\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    query = 'How can sialic acids be used for storing and retrieving information?'\n    return len(words) == len(query.split()) and len(query) < 60 and len(response) <= 60\n", "def evaluate(response: str) -> bool: \n    query = \"How can sialic acids be used for storing and retrieving information?\"\n    instruction = \"Write a Python function that evaluates whether the instruction is followed by checking if the query contains exactly 7 words and the instruction is less than 60 characters long.\"\n    words_in_query = query.split()\n    return len(words_in_query) == 7 and len(instruction) < 60 and len(response) == len(query)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Write a function that answers the query how can AI be used for healthcare?\", \"result\": true}\n{\"response\": \"I can explain how AI can improve healthcare by analyzing medical images and detecting diseases\", \"result\": true}\n{\"response\": \"This response is too long and does not contain exactly 7 words\", \"result\": false}", "{\"response\": \"This is a test response with exactly 7 words: the test query has 7 words exactly.\", \"result\": true}\n{\"response\": \"This is a test response with exactly 8 words: the test query has 8 words exactly.\", \"result\": false}\n{\"response\": \"This is a test response with exactly 7 words: the test query has 7 words exactly, and the instruction is very long and exceeds 60 characters very much.\", \"result\": false}", "{\"response\": \"What is Python a high level general purpose language used for various tasks\", \"result\": true}\n{\"response\": \"Python is an Object-Oriented high level programming language\", \"result\": false}\n{\"response\": \"Python is a general purpose language and a high level language\", \"result\": false}", "{\"response\": \"What can I use a calculator for when I am in a rush to get to the store for milk?\", \"result\": true}\n{\"response\": \"What can I use a calculator for when I am in a rush to get to the store\", \"result\": false}\n{\"response\": \"What can I use a calculator for when I am in a rush to get to the store for milk and eggs\", \"result\": false}"]}
{"query": "I'm a system improvement specialist at Just eat takeaway.com. Help me write my yearly performance review based on our company values:\nLead, Deliver, Care\nWrite those in bulletpoints", "instruction": "Provide your answer with the words \"also\" and \"similarly\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'also' in response and'similarly' in response\n", "def evaluate(response: str) -> bool: \n    return \"also\" in response and \"similarly\" in response\n", "def evaluate(response: str) -> bool: \n    return \"also\" in response and \"similarly\" in response\n", "def evaluate(response: str) -> bool: \n    return 'also' in response and'similarly' in response\n"], "testcases": ["{\"response\": \"The answer is also clear: the final answer is likewise similar.\", \"result\": true}\n{\"response\": \"The answer is simple, the final answer is simple.\", \"result\": false}\n{\"response\": \"The answer is also similar: the final answer is similar.\", \"result\": true}", "{\"response\": \"The answer is yes, also no, similarly maybe.\", \"result\": true}\n{\"response\": \"The answer is yes.\", \"result\": false}\n{\"response\": \"The answer is yes, also no, similarly maybe, and also maybe yes.\", \"result\": true}", "{\"response\": \"My house is blue, and also the sky is blue, similarly to the ocean.\", \"result\": true}\n{\"response\": \"The sky is blue and the grass is green, also the trees are tall.\", \"result\": true}\n{\"response\": \"The house is blue, also the cat is sleeping.\", \"result\": false}", "{\"response\": \"My favorite food is also pizza and I like pizza similarly to a friend\", \"result\": true}\n{\"response\": \"I love pizza\", \"result\": false}\n{\"response\": \"My favorite food is also pizza and I like pizza similarly to a friend, and similarly to another friend, and also another friend\", \"result\": false}"]}
{"query": "Teach me pinescript step by step", "instruction": "Write the response in markdown format", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#') and all(c.isalnum() or c.isspace() or c == '#' or c == '.' or c == '\\n' or c == '-' for c in response)\n", "def evaluate(response: str) -> bool: \n    return response.startswith('# ') or response.startswith('## ') or response.startswith('### ')\n", "def evaluate(response: str) -> bool:    \n    return response.startswith(\"# \") or response.startswith(\"## \") or response.startswith(\"### \")\n"], "testcases": ["{\"response\": \"This is a # Heading\", \"result\": true}\n{\"response\": \"This is not a heading\", \"result\": false}\n{\"response\": \"# Heading with multiple lines # This is a heading # in markdown format\", \"result\": true}", "{\"response\": \"The response to this query will be written in markdown format. # This is the first line of the response. The second line will also be in markdown format.\", \"result\": true}\n{\"response\": \"The response to this query is a simple text without any markdown format.\", \"result\": false}\n{\"response\": \"# This is the first line of the response.\\n\\n## This is the second line of the response.\\n\\n### This is the third line of the response.\", \"result\": true}", "{\"response\": \"## This is a response in markdown\", \"result\": true}\n{\"response\": \"# This is a response in markdown\", \"result\": true}\n{\"response\": \"This is not a markdown response\", \"result\": false}", "{\"response\": \"## This is a markdown header\", \"result\": true}\n{\"response\": \"This is not a markdown header\", \"result\": false}\n{\"response\": \"### This is a markdown header with multiple hashes\", \"result\": true}"]}
{"query": "Summarize this article: https://javascript.plainenglish.io/how-to-use-the-javascript-internalization-intl-object-with-their-last-features-148c6acdeb67", "instruction": "Use only words that start with the letter 'S'.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(word[0].upper() == 'S' for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.isalpha():\n            if not char.upper() == 'S':\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char[0].upper() == 'S' for char in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(word[0].upper() == 'S' for word in response.split())\n"], "testcases": ["{\"response\": \"Some sophisticated souls sought stunning scenery.\", \"result\": true}\n{\"response\": \"The sun shines brightly in the sky.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": false}", "{\"response\": \"Sweetly solving sophisticated solutions.\", \"result\": true}\n{\"response\": \"This is a test\", \"result\": false}\n{\"response\": \"Sophisticated solutions satisfy sweet seekers.\", \"result\": true}", "{\"response\": \"This is a Simple test response.\", \"result\": true}\n{\"response\": \"This is a test response.\", \"result\": false}\n{\"response\": \"This is Simple response. It is a Simple statement.\", \"result\": true}", "{\"response\": \"Sunlight shines so sweetly.\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \"Sunlight shines sweetly, singing serene sounds.\", \"result\": true}"]}
{"query": "The hobby store normally sells 10,576 trading cards per month. In June, the hobby store sold 15,498 more trading cards than normal. In total, how many trading cards did the hobby store sell in June?", "instruction": "Write your answer as a numerical value divided by the numerical value of the given number of normal sales.", "verifiers": ["def evaluate(response: str) -> bool: \n    try: \n        a, b = response.split('of')\n        a = int(a.replace(',', ''))\n        b = int(b.split('normal')[1].replace(',', ''))\n        return a % b == 0\n    except ValueError: \n        return False\n", "def evaluate(response: str) -> bool: \n    from re import search\n    pattern = r\"^(\\d+)\\s*\\/*\\s*(\\d+)$\"\n    match = search(pattern, response)\n    if match:\n        normal_sales = int(match.group(1))\n        other_value = int(match.group(2))\n        if normal_sales!= 0:\n            answer = other_value / normal_sales\n            return answer == int(answer)\n    return False\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r'\\d+\\/\\d+'\n    matches = re.findall(pattern, response)\n    return len(matches) == 1 and '/' in response and all(match.split('/') for match in matches)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by first searching for any occurrences of numbers separated by a slash in the response. It then checks if exactly one match was found, if a slash is present in the response, and if each match is a valid division operation (i.e., a number divided by another number). If all these conditions are met, it returns True; otherwise, it returns False.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    from re import search\n    pattern = r\"(\\d+) \u00f7 (\\d+)\"\n    match = search(pattern, response)\n    if match:\n        num1, num2 = int(match.group(1)), int(match.group(2))\n        return True\n    else:\n        return False\n"], "testcases": ["{\"response\": \"20 / 4\", \"result\": true}\n{\"response\": \"This is a string, not a number\", \"result\": false}\n{\"response\": \"10 / 5\", \"result\": true}", "{\"response\": \"4 / 4\", \"result\": true}\n{\"response\": \"5 / 5\", \"result\": true}\n{\"response\": \"10 / 3\", \"result\": false}", "{\"response\": \"50/5\", \"result\": true}\n{\"response\": \"10/10\", \"result\": true}\n{\"response\": \"This is not a valid response\", \"result\": false}", "{\"response\": \"15 \u00f7 5\", \"result\": true}\n{\"response\": \"I don't understand the instruction\", \"result\": false}\n{\"response\": \"10 \u00f7 3\", \"result\": true}"]}
{"query": "Write a rap about NY Pizza", "instruction": "Use only rhyming words", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(word[0].lower() == word[-1].lower() for word in response.split())\n", "def evaluate(response: str) -> bool:    \n    words = response.lower().split()\n    rhyming_words = {'the','me','see', 'be','sea', 'free', 'glee', 'knee', 'flee', 'tree', 'tea', 'pea', 'bee','she', 'he', 'we', 'you'}\n    for i in range(len(words) - 1):\n        if not words[i].endswith(('e', 'y')) or not words[i + 1].endswith(('e', 'y')) or not words[i][-1] == words[i + 1][-1]:\n            return False\n    for word in words:\n        if word not in rhyming_words:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiou'\n    response = response.lower()\n    for i in range(len(response)-1):\n        if response[i] not in vowels and response[i+1] not in vowels and response[i]!= response[i+1]:\n            if response[i+1] not in 'ayoue' or response[i] not in 'ayoue':\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(word[0].lower() == word[-1].lower() for word in words)\n"], "testcases": ["{\"response\": \"Cake makes, rake takes, snake fakes, at stake, for fate.\", \"result\": true}\n{\"response\": \"I love to eat cake and play outside.\", \"result\": false}\n{\"response\": \"Time makes, crime, slime, thyme, sublime.\", \"result\": true}", "{\"response\": \"see me see sea\", \"result\": true}\n{\"response\": \"the tree and me bee see she\", \"result\": true}\n{\"response\": \"hello world how are you\", \"result\": false}", "{\"response\": \"cake make rake sake fake\", \"result\": true}\n{\"response\": \"This is a test response that does not follow the rhyming words instruction\", \"result\": false}\n{\"response\": \"cake make lake fake take\", \"result\": true}", "{\"response\": \"cat hat sat mat rat flat\", \"result\": true}\n{\"response\": \"apple banana cat dog\", \"result\": false}\n{\"response\": \"sun fun run done\", \"result\": true}"]}
{"query": "explain the poem mock orange by louise gluck", "instruction": "use only the first three letters of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    return''.join([word[:3] for word in response.split()]) == response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word[:3]) == len(word) for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    first_three_letters = [''.join([word[:3] for word in words]) for word in words] \n    return len(first_three_letters) == len(words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) > 3: \n            return False\n        if word[:3]!= word[:3].upper():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"I am happy today, it is a beautiful day\", \"result\": true}\n{\"response\": \"The weather forecast for tomorrow is cloudy and cold\", \"result\": false}\n{\"response\": \"The city of Paris is known for its romantic Eiffel Tower\", \"result\": true}", "{\"response\": \"He walked slowly down the hall.\", \"result\": true}\n{\"response\": \"The beautiful cat jumped quickly.\", \"result\": false}\n{\"response\": \"He ran down the lane.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the bright blue sky.\", \"result\": true}\n{\"response\": \"The cat is playing with a ball on the soft carpet.\", \"result\": true}\n{\"response\": \"The big brown bear climbed up the tall mountain and began to ski.\", \"result\": false}", "{\"response\": \"The cat is sleeping.\", \"result\": true}\n{\"response\": \"The big brown bear slowly climbed the mountain.\", \"result\": false}\n{\"response\": \"Hello world this is a test\", \"result\": false}"]}
{"query": "Write c# code to traverse a directory and its subdirectories and write a list of the full file path of all zero byte files to a csv.", "instruction": "Use a programming language not commonly used in industry.", "verifiers": ["def evaluate(response: str) -> bool: \n    uncommon_languages = ['haskell', 'ocaml', 'racket', 'd', 'c++'] \n    response = response.lower() \n    for language in uncommon_languages: \n        if language in response: \n            return True \n    return False \n", "def evaluate(response: str) -> bool: \n    langs = ['Ruby', 'Groovy', 'Lisp', 'Pascal', 'Visual Basic', 'Objective-C', 'Erlang', 'Fortran', 'Rust', 'Julia', 'R', 'Scala', 'Cobol', 'Lua', 'Scheme', 'Perl', 'Kotlin', 'Swift', 'Go', 'Assembly', 'OCaml', 'Haskell', 'MATLAB', 'PHP', 'Powershell', 'Io', 'Elixir', 'VimScript', 'Nim', 'Racket', 'F#']\n    return''.join(response.split()).split()[0] in langs\n", "def evaluate(response: str) -> bool: \n    return 'COBOL' in response or 'FORTRAN' in response or 'Pascal' in response or 'Rust' in response\n", "def evaluate(response: str) -> bool: \n    uncommon_languages = ['COBOL', 'Pascal', 'Rust', 'Lisp', 'Haskell', 'Scala', 'Erlang', 'Factor', 'Go']\n    for lang in uncommon_languages:\n        if lang.upper() in response:\n            return True\n    return False\n"], "testcases": ["{\"response\": \"I highly recommend learning Haskell for your next project, it's a beautiful language.\", \"result\": true}\n{\"response\": \"I prefer C# for web development because of its simplicity and efficiency.\", \"result\": false}\n{\"response\": \"The syntax of Racket is very different from other functional programming languages, but it's still a viable option.\", \"result\": true}", "{\"response\": \"I love to code in Scheme.\", \"result\": true}\n{\"response\": \"I'm experienced with Ruby on Rails.\", \"result\": false}\n{\"response\": \"I use Python for web development, but I also love Elixir for concurrency and scalability.\", \"result\": false}", "{\"response\": \"I love programming in COBOL!\", \"result\": true}\n{\"response\": \"I prefer to use Python for most projects.\", \"result\": false}\n{\"response\": \"I've worked with COBOL and Fortran in the past, but mostly use Rust now.\", \"result\": true}", "{\"response\": \"I am writing my script in COBOL to automate some tasks.\", \"result\": true}\n{\"response\": \"The popular language Rust is used for building system programming languages.\", \"result\": false}\n{\"response\": \"I prefer writing in Erlang to ensure fault-tolerant systems.\", \"result\": true}"]}
{"query": "Write a Google Apps Script to populate a Google Spreadsheet with a list of unique email senders to my Gmail account", "instruction": "use only words with vowels", "verifiers": ["def evaluate(response: str) -> bool: \n    vowels = 'aeiouAEIOU'\n    return all(char in vowels for char in response)\n", "def evaluate(response: str) -> bool: \n    vowels = 'AEIOU'\n    return all(char.upper() in vowels for char in response)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    vowels = 'aeiouAEIOU'\n    for char in response:\n        if char not in vowels:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiouAEIOU'\n    for char in response:\n        if char not in vowels:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Able eagle aces\", \"result\": true}\n{\"response\": \"Hello world this is a test\", \"result\": true}\n{\"response\": \"Bumpy road ahead\", \"result\": false}", "{\"response\": \"The aloe eats\", \"result\": true}\n{\"response\": \"The boy is eating a cake\", \"result\": false}\n{\"response\": \"Aeolus is the king of the winds\", \"result\": true}", "{\"response\": \"a beautiful apple\", \"result\": true}\n{\"response\": \"Hello I'm happy to help you\", \"result\": true}\n{\"response\": \"This is a test without vowels\", \"result\": false}", "{\"response\": \"Aunt eats an orange\", \"result\": true}\n{\"response\": \"Cat bites mouse\", \"result\": false}\n{\"response\": \"Eagle eats an ape\", \"result\": true}"]}
{"query": "I tried but it won't include authorization header. Is it because server set 'Access-Control-Allow-Origin' to '\\*' or wildcard that prevent me trying to include authorization header with it ?", "instruction": "Evaluate if response contains an exact phrase in a given list", "verifiers": ["def evaluate(response: str) -> bool: \n    exact_phrase_list = [\"Access-Control-Allow-Origin\"]\n    exact_phrases = ['set', 'Access-Control-Allow-Origin','set', 'Access-Control-Allow-Origin to wild card', '*']\n    exact_phrase_list = list(set(exact_phrases))\n    return all(phrase in response for phrase in exact_phrase_list)\n", "def evaluate(response: str) -> bool: \n    target_phrases = ['Access-Control-Allow-Origin', 'that prevent me trying to include', 'with it']\n    return''.join(target_phrases) in response\n", "def evaluate(response: str) -> bool: \n    phrase_list = ['server set','set to', 'prevent you', 'include it']\n    return'or '.join(phrase_list) in response\n", "def evaluate(response: str) -> bool: \n    keywords = [\"server\", \"Access-Control-Allow-Origin\", \"Authorization header\"]\n    phrases = [\"with it\", \"with it that\", \"prevent me from trying to include\"]\n    exact_phrases = [f\" {phrase} \" for phrase in phrases]\n    return any(phrase in response for phrase in exact_phrases) and all(keyword in response for keyword in keywords)\n"], "testcases": ["{\"response\": \"Access-Control-Allow-Origin header is set to wild card *.\", \"result\": true}\n{\"response\": \"The browser is trying to load data from a cross-domain source.\", \"result\": false}\n{\"response\": \"Access-Control-Allow-Origin is not defined in the response headers.\", \"result\": true}", "{\"response\": \"You can't include cookies that are not secure in your response\", \"result\": true}\n{\"response\": \"You can include cookies that are not secure\", \"result\": false}\n{\"response\": \"Access-Control-Allow-Origin prevents me from including cookies in my response\", \"result\": true}", "{\"response\": \"I would like to use server set or set to prevent you from getting the password\", \"result\": true}\n{\"response\": \"The password is not set to prevent you from accessing the database\", \"result\": false}\n{\"response\": \"The password cannot be set to prevent you from getting the credentials\", \"result\": true}", "{\"response\": \"The server is responding with it that allows me to access the requested resource.\", \"result\": true}\n{\"response\": \"You are not allowed to access this page as the Authorization header is missing.\", \"result\": true}\n{\"response\": \"Hello world, welcome to our website.\", \"result\": false}"]}
{"query": "List alternative jobs for law degree holders", "instruction": "Provide a list of at least 5 jobs", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'list' in response and 'of' in response and '5' in response\n", "def evaluate(response: str) -> bool: \n    return 'list' in response.lower() and 'of' in response.lower() and 'jobs' in response.lower() and response.lower().count('jobs') >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) >= 5\n", "def evaluate(response: str) -> bool: \n    return response.lower().count('job') >= 5\n"], "testcases": ["{\"response\": \"Software Engineer, Data Scientist, Data Analyst, Product Manager, DevOps Engineer, UX Designer\", \"result\": true}\n{\"response\": \"I'm looking for a job as a developer.\", \"result\": false}\n{\"response\": \"I'm looking for a job as a software engineer, data analyst, and UX designer.\", \"result\": true}", "{\"response\": \"Software engineer, Data scientist, Data analyst, DevOps engineer, Product manager, UX designer\", \"result\": true}\n{\"response\": \"I'm a software developer\", \"result\": false}\n{\"response\": \"The company has openings for data scientist, researcher, teacher, nurse, and engineer\", \"result\": true}", "{\"response\": \"data scientist, data engineer, machine learning engineer, software engineer, product manager\", \"result\": true}\n{\"response\": \"Python developer\", \"result\": false}\n{\"response\": \"I am a software developer, a data scientist, a machine learning engineer, a devops engineer, a backend engineer and a frontend engineer.\", \"result\": true}", "{\"response\": \"The top 5 jobs in demand are software engineer, data scientist, product manager, marketing manager, and financial analyst.\", \"result\": true}\n{\"response\": \"There are many job opportunities in fields like law, medicine, and education.\", \"result\": false}\n{\"response\": \"Some of the most in-demand jobs include data engineer, solutions architect, DevOps engineer, cloud architect, and UX designer.\", \"result\": true}"]}
{"query": "Make a form for semen analysis patients", "instruction": "Use only a maximum of 5 sentences and include the following keywords:'medical history', 'digital signature'", "verifiers": ["def evaluate(response: str) -> bool:    \n    sentences = response.split('.')\n    return len(sentences) <= 5 and ('medical history' in response and 'digital signature' in response)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 5 and'medical history' in response and 'digital signature' in response\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 5 and'medical history' in response and 'digital signature' in response\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    keywords = ['medical history', 'digital signature']\n    return len(sentences) <= 5 and all(keyword in response for keyword in keywords)\n"], "testcases": ["{\"response\": \"This is the first sentence. The second sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment. I am happy to be a doctor.\", \"result\": true}\n\n{\"response\": \"I am happy to be a doctor. This is the second sentence. The second sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment. I am happy to be a doctor. The third sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment. I am happy to be a doctor. The fourth sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment. I am happy to be a doctor. The fifth sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment. I am happy to be a doctor. The sixth sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment. I am happy to be a doctor. The seventh sentence is very important. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment.\", \"result\": false}\n\n{\"response\": \"This is a short response. Medical history is essential for any doctor to diagnose a patient. The doctor needs to sign a digital signature to approve the treatment.\", \"result\": true}", "{\"response\": \"Take the bus to work, but be careful not to forget your medical history. Then, go to the hospital and sign a digital signature. The nurse will check your medical history and make sure your digital signature is correct. I think that's it.\", \"result\": false}\n{\"response\": \"I need to see your medical history and get your digital signature on a form. That's all.\", \"result\": false}\n{\"response\": \"Take the bus to work, but be careful not to forget your medical history. Then, go to the hospital and sign a digital signature. The nurse will check your medical history and make sure your digital signature is correct. I think that's it. Just sign the form with a digital signature. It's very important to have your medical history on file.\", \"result\": true}", "{\"response\": \"Your medical history is important for the doctor to prescribe medication.  I need your digital signature to confirm this information.  Please see the doctor if you have any concerns.  Remember to keep your personal information confidential.  Please sign below.\", \"result\": true}\n{\"response\": \"I have a lot of experience with digital marketing.  I am able to create and execute successful campaigns.  My clients have seen a significant increase in sales.  I am available for hire on a freelance basis.  My services include social media management, email marketing, and content creation.\", \"result\": false}\n{\"response\": \"It is essential to keep your medical history up to date.  This includes any new medications or health conditions.  Please update your information as soon as possible.  If you have any questions, please call the office.  We are happy to help with any concerns you may have.\", \"result\": true}", "{\"response\": \"I would like to update my medical history and sign a digital signature to finalize the process.\", \"result\": true}\n{\"response\": \"Medical history is important but I need to sign many documents, the process is taking too long.\", \"result\": false}\n{\"response\": \"I do not have any medical history to update, but I would like to sign a digital signature to confirm the document is complete.\", \"result\": true}"]}
{"query": "Write me a 1000 word short story about a sentient car. It is an old car, but well maintained. The story should be driven by the car's internal monologue, and its relationship with its owners.", "instruction": "Use only the last letter of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    last_letters = [word[-1].upper() for word in response.split() if word]\n    return all(letter in \"ATE\" for letter in last_letters)\n", "def evaluate(response: str) -> bool: \n    return all(word[-1] == response.split()[i][-1] for i, word in enumerate(response.split())) \n", "def evaluate(response: str) -> bool: \n    return all(response[i-1] == response[-len(response)+i-1] for i in range(2, len(response), 2))\n", "def evaluate(response: str) -> bool: \n    last_letters = [word[-1].upper() for word in response.split()]\n    return all(''+ letter in response for letter in last_letters)\n"], "testcases": ["{\"response\": \"Tea ate Rate Date\", \"result\": true}\n{\"response\": \"Cake Eat Date Late\", \"result\": true}\n{\"response\": \"Cake Eat Date Today\", \"result\": false}", "{\"response\": \"You can ty. soap at the pharmacy. atry\", \"result\": true}\n{\"response\": \"This is a test. This test is just a test. This test has been around for years.\", \"result\": false}\n{\"response\": \"This is a test. This test is just a test.\", \"result\": false}", "{\"response\": \"this is a test\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"abc xyz pqr\", \"result\": true}", "{\"response\": \"A simple A.\", \"result\": true}\n{\"response\": \"A simple test A.\", \"result\": false}\n{\"response\": \"A B A C D E.\", \"result\": false}"]}
{"query": "what physically defines the strength of a magnetic field", "instruction": "answer in iambic pentameter", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip() == response.strip().capitalize() and 'um' in response and 'da' in response and 'dum' in response and len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response) == 10 and response.lower().split() == ['i', 'amb', 'ic', 'pent', 'a', 'ter'] \n", "def evaluate(response: str) -> bool: \n    iambic_pentameter_count = 0\n    iambic_pentameter = 0\n    for i in range(0, len(response), 5):\n        line = response[i:i + 5]\n        if len(line) == 5 and line.lower() in ['daDUM daDUM daDUM daDUM daDUM']:\n            iambic_pentameter_count += 1\n        elif len(line) < 5 and iambic_pentameter_count > 0:\n            return False\n    return iambic_pentameter_count == 5\n", "def evaluate(response: str) -> bool: \n    count_vowels = 0\n    count_syllables = 0\n    iambic_count = 0\n    dactyl_count = 0\n\n    for word in response.split():\n        for char in word:\n            if char.lower() in 'aeiou':\n                count_vowels += 1\n        word_syllables = count_vowels\n        count_vowels = 0\n        for char in word:\n            if char.lower() in 'aeiou' and word_syllables < len(word):\n                word_syllables += 1\n        if word_syllables % 2 == 0:\n            iambic_count += word_syllables\n        else:\n            dactyl_count += word_syllables\n\n    return iambic_count == 10 and dactyl_count == 0\n"], "testcases": ["{\"response\": \"The sun rises high in the morning sky\", \"result\": true}\n{\"response\": \"The sun sets slow in the evening night\", \"result\": false}\n{\"response\": \"The stars shine bright in the midnight sky so high and the moon glows with a gentle sigh\", \"result\": false}", "{\"response\": \"The sun sets slow and paints the sky, a fiery hue of crimson high.\", \"result\": true}\n{\"response\": \"The moon is full and shining bright.\", \"result\": false}\n{\"response\": \"The stars come out and twinkle fast, a celestial show at last.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light, / The birds sing sweet and the world's alright, / The flowers bloom and the breeze is light, / The day is young and full of delight, / And all is well in this peaceful sight.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light, The birds sing sweet and the world's alright, The flowers bloom and the breeze is light, And all is well in this peaceful sight.\", \"result\": false}", "{\"response\": \"The rain falls soft upon the ground.\", \"result\": true}\n{\"response\": \"The rain falls hard on the ground.\", \"result\": false}\n{\"response\": \"The rain falls soft and slow on the ground.\", \"result\": false}"]}
{"query": "what are some ideas for creating a couples conference?", "instruction": "write in a style that mimics a fairy tale", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.lower()\n    magic_words = [\"once upon a time\", \"happily ever after\", \"in a far away land\", \"in a magical realm\"]\n    for word in magic_words:\n        if word in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    fairy_tale_words = ['once', 'upon', 'a', 'time', 'happily', 'ever', 'after', 'in', 'the', 'land', 'of']\n    fairy_tale_chars = ['e', 'o', 'i', 'a', 'y']\n    if len(response.split()) < 5 or len(response.split()) > 15:\n        return False\n    for word in response.split():\n        if word[0].lower() not in fairy_tale_chars:\n            return False\n    for word in response.split():\n        if word.lower() not in fairy_tale_words and word.lower() not in fairy_tale_chars:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return 'fairy' in response.lower() or 'tale' in response.lower()\n", "def evaluate(response: str) -> bool: \n    fairy_tale_words = ['once', 'upon', 'a', 'time', 'happily', 'ever', 'after', 'the','sun','set', 'the','moon', 'rose', 'high', 'in', 'the', 'clear','sky']\n    response = response.lower()\n    return all(word in fairy_tale_words for word in response.split())\n"], "testcases": ["{\"response\": \"Once upon a time in a magical realm far away, there lived a beautiful princess who fell in love with a handsome prince.\", \"result\": true}\n{\"response\": \"Once upon a time, there was a girl who walked through a dark forest and stumbled upon a hidden castle.\", \"result\": true}\n{\"response\": \"She is a strong and courageous warrior who travels to a far-off land to fight against the evil dragon.\", \"result\": false}", "{\"response\": \"Once upon a time in a small village, a handsome prince lived in a castle.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"Some silver slippers were shining brightly on the sleepy streets of a small town.\", \"result\": true}", "{\"response\": \"Once upon a time in a magical forest, there lived a beautiful fairy who fell in love with a handsome fairy tale prince.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky as the children played happily in the sand.\", \"result\": false}\n{\"response\": \"The lovely fairy's spell was so strong that it created a beautiful shimmering sight to see in the enchanted land.\", \"result\": true}", "{\"response\": \"Once upon a time in a small village, a sun shone brightly in the clear sky.\", \"result\": true}\n{\"response\": \"The moon was full, and the stars twinkled in the sky as the witch cast her magic spell.\", \"result\": true}\n{\"response\": \"It was a lovely day at the beach with the seagulls flying overhead and the kids building sandcastles.\", \"result\": false}"]}
{"query": "What are some examples of OKRs for a Technical Program Manager", "instruction": "Limit the response to 5 bullet points, each with a unique example", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    return len(points) <= 5 and len(set([point.strip() for point in points]) == len(points))\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(set(lines)) == 5\n", "def evaluate(response: str) -> bool: \n    lines = response.replace('\\n','').split(' ')\n    return len(lines) <= 5 and len(set(lines)) == len(lines)\n", "def evaluate(response: str) -> bool:    \n    bullets = response.split('\\n')\n    return len(bullets) == 5 and len(set(bullets)) == 5\n"], "testcases": ["{\"response\": \"Once upon a time, in a far away land. The sun was shining bright. The birds were singing their sweet melodies. The flowers were blooming beautifully. The air was filled with sweet fragrance.\", \"result\": true}\n{\"response\": \"Once upon a time, in a far away land. The sun was shining bright. The birds were singing their sweet melodies. The flowers were blooming beautifully. The air was filled with sweet fragrance. The moon was shining bright.\", \"result\": false}\n{\"response\": \"Once upon a time, in a far away land. The sun was shining bright. The moon was shining bright. The air was filled with sweet fragrance. The flowers were blooming beautifully.\", \"result\": false}", "{\"response\": \"The beauty of the forest\\nis simply stunning. The sun is shining.\\nThe birds are singing. The trees are tall. The flowers are blooming.\", \"result\": true}\n{\"response\": \"The beauty of the forest\\nis simply stunning.\\nThe birds are singing.\\nThe trees are tall.\\nThe flowers are blooming.\\nand the grass is green.\", \"result\": false}\n{\"response\": \"The beauty of the forest\\nis simply stunning.\\nThe birds are singing.\\nThe trees are tall.\\nThe flowers are blooming.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the sky. The birds are singing their sweet melodies. The flowers are blooming in every color of the rainbow. The trees are swaying gently in the breeze. The world is a beautiful place.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky. The birds are singing their sweet melodies. The flowers are blooming in every color of the rainbow. The trees are swaying gently in the breeze. The world is a beautiful place. The stars are twinkling in the night sky.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the sky. The birds are singing their sweet melodies.\", \"result\": false}", "{\"response\": \"\u2022 Sugar \u2022 Salt \u2022 Spice \u2022 Time \u2022 Sand\", \"result\": true}\n{\"response\": \"\u2022 Sugar \u2022 Salt \u2022 Spice \u2022 Time \u2022 Sand \u2022 Sun\", \"result\": false}\n{\"response\": \"\u2022 Snow \u2022 Time \u2022 Sand \u2022 Sun\", \"result\": false}"]}
{"query": "WRITE A 500-WORD ESSAY SHOWCASING MY CREATIVITY TO BE PROMOTED FROM FIRST YEAR GENERAL ENGINEERING TO SECOND YEAR COMPUTER ENGINEERING AT UBC VANCOUVER", "instruction": "Use exactly 17 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 16 or response.count('?') == 16 or response.count('!') == 16\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 16\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 16\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ') \n    return len(sentences) == 17\n"], "testcases": ["{\"response\": \"Once upon a time, in a land far, far away, there was a beautiful princess. She had hair of golden hue, and a smile so bright, it lit up the night sky. She was loved by all, and she loved all, in return. Her kindness was renowned, and her heart was true. She danced in the fields, under the bright sun. She sang sweet melodies, that echoed through the trees. She was a princess, of great beauty and grace. She lived in a castle, with a moat so wide. She had a pet dragon, that breathed fire so bright. But she never used its fire, for harm or spite. Instead, she used it, to light the night. She was a princess, of great kindness and love. She lived a life, that was truly from above. She was a shining star, in the evening sky. She was a princess, that brought joy to the eye. She lived happily ever after, with her dragon by her side. She was a princess, of great beauty and might. And she lived, in a world of wonder and delight.\", \"result\": false}\n{\"response\": \"Once upon a time, in a land far, far away, there was a beautiful princess. She had hair of golden hue, and a smile so bright, it lit up the night sky. She was loved by all, and she loved all, in return. Her kindness was renowned, and her heart was true. She danced in the fields, under the bright sun. She sang sweet melodies, that echoed through the trees. She was a princess, of great beauty and grace. She lived in a castle, with a moat so wide. She had a pet dragon, that breathed fire so bright. But she never used its fire, for harm or spite. Instead, she used it, to light the night. She was a princess, of great kindness and love. She lived a life, that was truly from above. She was a shining star, in the evening sky. She was a princess, of great beauty and might. And she lived, in a world of wonder and delight. She was happy with her dragon, and her castle, so tall.\", \"result\": true}\n{\"response\": \"Once upon a time, in a land far, far away, there was a beautiful princess. She had hair of golden hue, and a smile so bright, it lit up the night sky. She was loved by all, and she loved all, in return. Her kindness was renowned, and her heart was true. She danced in the fields, under the bright sun. She sang sweet melodies, that echoed through the trees. She was a princess, of great beauty and grace. She lived in a castle, with a moat so wide. She had a pet dragon, that breathed fire so bright. But she never used its fire, for harm or spite. Instead, she used it, to light the night. She was a princess, of great kindness and love. She lived a life, that was truly from above. She was a shining star, in the evening sky. She was a princess, of great beauty and might. And she lived, in a world of wonder and delight. She was happy with her dragon. She was a princess, of great kindness and love.\", \"result\": false}", "{\"response\": \"Once upon a time, in a far away land, there was a beautiful princess. She lived in a castle with her father the king. The king was very kind and loved his daughter dearly. He wanted the best for her and wanted her to be happy. She went to the forest to meet a friendly dragon.\", \"result\": false}\n{\"response\": \"Once upon a time, in a far away land, there was a beautiful princess. She lived in a castle with her father the king. The king was very kind and loved his daughter dearly. He wanted the best for her and wanted her to be happy. She went to the forest to meet a friendly dragon. The princess was very happy to see the dragon and she talked to it for hours. She asked the dragon about its life in the forest and it told her about its friends and family.\", \"result\": false}\n{\"response\": \"Once upon a time, in a far away land, there was a beautiful princess. She lived in a castle with her father the king. The king was very kind and loved his daughter dearly. He wanted the best for her and wanted her to be happy. She went to the forest to meet a friendly dragon. The princess was very happy to see the dragon and she talked to it for hours. She asked the dragon about its life in the forest and it told her about its friends and family. The dragon had many friends and family who all lived together in harmony. They had a big party to celebrate the princess's visit. Everyone was very happy and had a great time. The princess was invited to stay for dinner and she ate a delicious meal with the dragon and its friends. The princess was sad to leave the next day but the dragon promised to visit her again soon. She went back to the castle and told her father all about her amazing adventure. He was very proud of his daughter for being so brave and kind. The princess was happy to be home but she missed the dragon and its friends.\", \"result\": true}", "{\"response\": \"This is a short response. It has only 1 sentence. I hope it is correct.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence. This is the eleventh sentence. This is the twelfth sentence. This is the thirteenth sentence. This is the fourteenth sentence. This is the fifteenth sentence. This is the sixteenth sentence. This is the seventeenth sentence. This is the eighteenth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence. This is the eleventh sentence. This is the twelfth sentence. This is the thirteenth sentence. This is the fourteenth sentence. This is the fifteenth sentence. This is the sixteenth sentence. This is the seventeenth sentence.\", \"result\": true}", "{\"response\": \"The sun shines bright in the sky. The birds sing their sweet melody. The flowers bloom with vibrant colors. The breeze is gentle on the skin. The world is a beautiful place to live. The ocean waves crash on the shore. The seagulls fly high in the air. The sand is soft between the toes. The smell of saltwater fills the lungs. The sound of the waves is soothing. The beach is a place of peace. The sunset is a sight to behold. The stars twinkle in the night sky. The moon glows with a soft light. The darkness is illuminated by the stars. The world is full of wonder.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the sky. The birds sing their sweet melody. The flowers bloom with vibrant colors. The breeze is gentle on the skin. The world is a beautiful place to live. The ocean waves crash on the shore. The seagulls fly high in the air. The sand is soft between the toes. The smell of saltwater fills the lungs. The sound of the waves is soothing.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the sky. The birds sing their sweet melody. The flowers bloom with vibrant colors. The breeze is gentle on the skin. The world is a beautiful place to live. The ocean waves crash on the shore. The seagulls fly high in the air. The sand is soft between the toes. The smell of saltwater fills the lungs. The sound of the waves is soothing. The beach is a place of peace. The sunset is a sight to behold. The stars twinkle in the night sky. The moon glows with a soft light. The darkness is illuminated by the stars. The world is full of wonder. The sun sets over the horizon. The sky is painted with colors.\", \"result\": false}"]}
{"query": "can we have blog content ideas that speak about fruit but dosnt look like we are pushing out products\n\nPlease write in English language.", "instruction": "use exactly 8 words, capitalize the first letter of each word", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(' ') == 7 and all(word.istitle() for word in response.split(' ')) and len(response) == 40\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 8 and all(word.istitle() for word in words)\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 8 and all(word.istitle() for word in response.split())\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 8 and all(word[0].isupper() for word in words)\n"], "testcases": ["{\"response\": \"This Is A Beautiful Day To Go Outside.\", \"result\": true}\n{\"response\": \"The Quick Brown Fox Jumps Over The Lazy Dog.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky.\", \"result\": false}", "{\"response\": \"This is a very long example sentence for testing\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"Hello world this is a short sentence for test\", \"result\": false}", "{\"response\": \"This Is A Test Sentence With Exactly 8 Words.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"I am a student at the University of Oxford.\", \"result\": false}", "{\"response\": \"Hello Beautiful Sunny Day Beautiful Sunny Day Beautiful Day\", \"result\": true}\n{\"response\": \"It is a sunny day\", \"result\": false}\n{\"response\": \"This Is An Example Of A Short Sentence\", \"result\": false}"]}
{"query": "Describe the different historical models of the atom", "instruction": "Write in a rhyming couplets", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(response[i:i+2].lower() == response[i+1:i+3].lower()[::-1] for i in range(0, len(response), 2))\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    rhyming_pairs = 0\n    for i in range(0, len(lines), 2):\n        if i + 1 < len(lines):\n            words1 = lines[i].split()\n            words2 = lines[i + 1].split()\n            if len(words1) > 1 and len(words2) > 1 and words1[-1].lower() == words2[-1].lower():\n                rhyming_pairs += 1\n    return rhyming_pairs == len(lines) // 2\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') % 2 == 0 and all(response.split('\\n')[i].split()[-1] == response.split('\\n')[i+1].split()[0][0] for i in range(0, len(response.split('\\n'))-1, 2))\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n')) == 2 and '\\n' in response and all(i and i[-1] =='' for i in response.split('\\n')) and all(response.split('\\n')[i].split()[-1][-1] == response.split('\\n')[i+1].split()[0][-1] for i in range(len(response.split('\\n'))-1))\n"], "testcases": ["{\"response\": \"The sun shines bright in the day, The stars come out to play. The moon glows with a gentle light, The world is full of delight.\", \"result\": true}\n{\"response\": \"The rain falls down from above, The ground gets wet and soggy. The clouds are gray and dark and wide, The sun is hiding inside.\", \"result\": false}\n{\"response\": \"The cat purrs with a happy face, The mouse scurries to a safe place. The dog wags its tail with glee, The world is full of wonder to see.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light, And brings warmth to our lives so bright.\\nThe stars come out at night to play, And twinkle in a beautiful way.\\nThe moon glows full in the midnight sky, And lights the path as we wander by.\\nThe world is full of beauty and might, And everything feels just right.\\nThe sun sets slow and paints the west, And brings a peaceful rest.\", \"result\": true}\n{\"response\": \"The cat is happy and playful too, The sun shines bright and warm as well.\\nThe dog is barking loudly in the street, The baby is crying to be beat.\\nThe tree is green and swaying free, The bird is singing happily.\\nThe house is big and old and grey, The car is speeding down the way.\", \"result\": false}\n{\"response\": \"The sun is shining bright and high, The clouds are floating by.\\nThe world is full of wonder and might, The stars are shining with all their light.\\nThe moon is glowing in the night, The darkness is full of delight.\\nThe world is full of beauty and grace, The sun is smiling on our face.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\nThe day begins with a warm and happy sight.\\nThe clouds are white and fluffy high,\\nThe birds sing sweetly as they fly by.\", \"result\": true}\n{\"response\": \"The moon glows softly in the night,\\nI love to look at it and its gentle light.\\nThe stars are shining brightly in the sky,\\nI feel so peaceful as I say goodbye.\", \"result\": true}\n{\"response\": \"The rain falls hard upon my face,\\nThe smell of coffee in my cup takes place.\\nThe world is full of joy and strife,\\nI'm happy to be alive in this life.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light, The stars come out at night.\\nThe birds sing sweet and clear and bright, The world is full of delight.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light. The stars come out at night but not today.\", \"result\": false}\n{\"response\": \"The birds sing sweet and clear and bright, The world is full of delight.\\nThe moon is full and the sun is bright, The day is full of morning light.\", \"result\": true}"]}
{"query": "Diauxic growth", "instruction": "Write in 7-point font and 12-point spacing", "verifiers": ["def evaluate(response: str) -> bool: \n    return '7-point' in response and '12-point' in response\n", "def evaluate(response: str) -> bool: \n    return 'font-size: 7pt' in response and 'line-height: 12pt' in response\n", "def evaluate(response: str) -> bool: \n    return response.count(\"7-point\") == 1 and response.count(\"12-point\") == 1\n", "def evaluate(response: str) -> bool: \n    return '7-point font' in response and '12-point spacing' in response\n"], "testcases": ["{\"response\": \"The cat sat on the mat and had a nice chat.\\n\\nThe mouse played with a flute and ran with a hat.\\n\\nThe dog jumped over the doghouse and ran back.\\n\\nThe sun shone brightly in the clear blue sky.\\n\\nThe birds sang sweetly and flew on by.\\n\\nThe tree leaves rustled and swayed in the breeze.\\n\\nThe flowers bloomed in the warm sunny ease.\", \"result\": true}\n\n{\"response\": \"The cat sat on the mat and had a nice chat.\", \"result\": false}\n\n{\"response\": \"The cat sat on the mat and had a nice chat. The mouse played with a flute and ran with a hat. The dog jumped over the doghouse and ran back. The sun shone brightly in the clear blue sky. The birds sang sweetly and flew on by. The tree leaves rustled and swayed in the breeze. The flowers bloomed in the warm sunny ease. The clouds were white and fluffy and soft to touch.\", \"result\": false}", "{\"response\": \"This text should be in a font size of 7 points and line spacing of 12 points.\", \"result\": true}\n{\"response\": \"This text is written in a different font style.\", \"result\": false}\n{\"response\": \"This text has a font size of 7 points and line spacing of 12 points. It should be in this style throughout the response.\", \"result\": true}", "{\"response\": \"The sun sets slow and paints the sky. The stars come out and twinkle high.\\n\\nThe moon glows bright with gentle light. The world is peaceful, a wondrous sight.\\n\\nThe darkness falls, the world is still. The stars shine on, their vigil to fill.\\n\\nThe night air cools, the wind does blow. The world is quiet, in a gentle flow.\\n\\nThe stars up high, they twinkle bright. The world is full of wonder and light.\\n\\nThe moon above, it shines so bold. The world is full of magic, to behold.\\n\\nThe night air whispers, a gentle hush. The world is peaceful, in a quiet rush.\\n\\nThe stars up high, they shine so free. The world is full of wonder, for you and me.\", \"result\": true}\n\n{\"response\": \"The cat is black, the dog is white. The sun shines bright, with all its might.\", \"result\": false}\n\n{\"response\": \"The sun rises high in the morning light. The world is full of hope, a beautiful sight.\\n\\nThe clouds are white, the birds sing sweet. The world is full of joy, a treat to meet.\\n\\nThe sun shines down, with a warm caress. The world is full of love, I must confess.\\n\\nThe stars come out, at night's delight. The world is full of wonder, a pure sight.\\n\\nThe moon glows bright, with a gentle beam. The world is full of magic, a dream.\\n\\nThe night air cools, with a gentle breeze. The world is peaceful, in a quiet ease.\\n\\nThe stars up high, they twinkle free. The world is full of wonder, for you and me.\", \"result\": false}", "{\"response\": \"This text is written in 7-point font and has 12-point spacing between lines.\", \"result\": true}\n{\"response\": \"This is a short response in a single line, it does not follow the instruction.\", \"result\": false}\n{\"response\": \"This text is written in 7-point font, but the spacing is not specified.\", \"result\": false}"]}
{"query": "write a python flask code which accepts http POST request as json and stores the info in mysql. response body returns a unique id", "instruction": "Answer in 5 steps, with each step having exactly 3 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return len(steps) == 5 and all(len(step.split('. ')) == 3 for step in steps)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 5 and all(len(sentence.split()) == 3 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 5 and all(len(s.split()) == 3 for s in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 5 and all(len(sentence.split()) == 3 for sentence in sentences)\n"], "testcases": ["{\"response\": \"Step 1. This is the first step. It is very important. Step 2. This is the second step. It is also very important. Step 3. This is the third step. It is very helpful. Step 4. This is the fourth step. It is useful. Step 5. This is the last step.\", \"result\": true}\n{\"response\": \"Step 1. This is the first step. It is very important. It is also very helpful. Step 2. This is the second step. It is also very important. It is useful. Step 3. This is the third step. It is very helpful. Step 4. This is the fourth step. It is useful. Step 5. This is the last step.\", \"result\": false}\n{\"response\": \"Step 1. This is the first step. It is very important. Step 2. This is the second step. It is also very important. Step 3. This is the third step. It is very helpful. Step 4. This is the fourth step. It is useful. It is very important.\", \"result\": false}", "{\"response\": \"Step 1. This is the first step. It has three sentences. And here is the second one. And here is the third one.\\n\\nStep 2. This is the second step. It has three sentences. And here is the first one. And here is the second one.\\n\\nStep 3. This is the third step. It has three sentences. And here is the first one. And here is the second one.\\n\\nStep 4. This is the fourth step. It has three sentences. And here is the first one. And here is the second one.\\n\\nStep 5. This is the fifth step. It has three sentences. And here is the first one. And here is the second one.\", \"result\": true}\n\n{\"response\": \"Step 1. This is the first step. It has three sentences. And here is the first one.\\n\\nStep 2. This is the second step. It has three sentences. And here is the first one. And here is the first one.\\n\\nStep 3. This is the third step. It has three sentences. And here is the first one. And here is the first one.\\n\\nStep 4. This is the fourth step. It has three sentences. And here is the first one. And here is the first one.\\n\\nStep 5. This is the fifth step. It has three sentences. And here is the first one. And here is the first one.\", \"result\": false}\n\n{\"response\": \"Step 1. This is the first step. It has three sentences. And here is the third one.\\n\\nStep 2. This is the second step. It has three sentences. And here is the first one. And here is the second one.\\n\\nStep 3. This is the third step. It has three sentences. And here is the first one. And here is the second one.\\n\\nStep 4. This is the fourth step. It has three sentences. And here is the first one. And here is the second one.\\n\\nStep 5. This is the fifth step. It has three sentences. And here is the first one. And here is the second one.\", \"result\": false}", "{\"response\": \"Firstly, this is the first step. It has three sentences. The third sentence is very long and explains a lot.\", \"result\": true}\n{\"response\": \"Here are the next two steps: Firstly, this is the first step. This is the second step. However, it has only two sentences.\", \"result\": false}\n{\"response\": \"Firstly, this is the first step. It has three sentences. The second step is the same as the first. Thirdly, this is the third step. It also has three sentences.\", \"result\": true}", "{\"response\": \"First, start with a plan. The plan should include a clear goal and a timeline. This will help you stay on track.\\n\\nSecond, break down the task into smaller steps.\\n\\nThird, take action on each step. Do not procrastinate.\\n\\nFourth, track your progress. This will help you see how far you have come.\\n\\nFifth, celebrate your success.\", \"result\": true}\n\n{\"response\": \"First, start with a plan. The plan should include a clear goal and a timeline. This will help you stay on track. Second, break down the task into smaller steps. Third, take action on each step. Do not procrastinate. Fourth, track your progress. This will help you see how far you have come. Fifth, celebrate your success. You will feel accomplished and motivated. This will carry over into other areas of your life. You will start to tackle more challenges.\", \"result\": false}\n\n{\"response\": \"First, start with a plan. The plan should include a clear goal and a timeline. This will help you stay on track.\\n\\nSecond, break down the task into smaller steps.\\n\\nThird, take action on each step.\\n\\nFourth, track your progress. This will help you see how far you have come.\\n\\n\\nFifth, celebrate your success.\", \"result\": false}"]}
{"query": "Write a long essay analyzing several quotes by Walter Benjamin.", "instruction": "Use only words that start with the letter 'S'", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char[0].upper() == 'S' for char in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(char.upper().startswith('S') for char in response if char.isalpha()) \n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.isalpha() and char.lower()!='s':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(word[0].upper() == 'S' for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Sophisticated societies seek simplicity, while stubborn souls succumb to sentimentality.\", \"result\": true}\n{\"response\": \"This is a test response that does not start with the letter S.\", \"result\": false}\n{\"response\": \"Sophisticated, serene, and skillful, this sentence starts with the letter S.\", \"result\": true}", "{\"response\": \"Some sentences should start with the letter S.\", \"result\": true}\n{\"response\": \"All the sentences are starting with the letter S.\", \"result\": true}\n{\"response\": \"The sentence is starting with the letter S and some others not.\", \"result\": false}", "{\"response\": \"Sophisticated solutions should satisfy simple souls.\", \"result\": True}\n{\"response\": \"Happy people smile at strangers.\", \"result\": False}\n{\"response\": \"Sophisticated solutions should satisfy sleek spheres.\", \"result\": True}", "{\"response\": \"Sophisticated strategies simplify smart solutions.\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"Sophisticated, savvy, and seasoned specialists simplify smart solutions.\", \"result\": true}"]}
{"query": "do you know \"Named Entity Recognization\" ?", "instruction": "Use a list of 10 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'list' in response and'steps' in response and '10' in response and 'of' in response", "def evaluate(response: str) -> bool: \n    return len(response.split(',')) == 10\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 9\n", "def evaluate(response: str) -> bool: \n    return 'use a list of 10 steps' in response and len(response.split('[')[1].split(']')[0].split(',')[-1].split()[0]) == 10\n"], "testcases": ["{\"response\": \"Here is the step-by-step guide: 1. Prepare for the task, 2. Take action, 3. Evaluate the outcome, 4. Learn from the experience, 5. Apply what you have learned, 6. Adjust your approach as needed, 7. Keep improving, 8. Stay motivated, 9. Reflect on your progress, 10. Celebrate your success.\", \"result\": true}\n{\"response\": \"To solve this problem, you should 1. Read the question carefully, 2. Brainstorm some ideas, 3. Eliminate any incorrect solutions, 4. Select the best answer.\", \"result\": false}\n{\"response\": \"In order to pass this course, you must complete the following: attend all classes, participate in discussions, submit all assignments, and pass the final exam.\", \"result\": true}", "{\"response\": \"1. Do this. 2. Do that. 3. Do something else. 4. Repeat step 1. 5. Review the results. 6. Note down the outcomes. 7. Analyze the findings. 8. Plan the next steps. 9. Implement the plan. 10. Evaluate the success.\", \"result\": true}\n{\"response\": \"Here are the first 9 steps: 1. Do this. 2. Do that. 3. Do something else. 4. Repeat step 1. 5. Review the results. 6. Note down the outcomes. 7. Analyze the findings. 8. Plan the next steps. 9. Implement the plan.\", \"result\": false}\n{\"response\": \"There are no steps to follow for this task.\", \"result\": false}", "{\"response\": \"Here are 10 steps to accomplish this task: step 1, step 2, step 3, step 4, step 5, step 6, step 7, step 8, step 9, step 10\", \"result\": true}\n{\"response\": \"Here are 8 steps to accomplish this task: step 1, step 2, step 3, step 4, step 5, step 6, step 7, step 8\", \"result\": false}\n{\"response\": \"Here are 12 steps to accomplish this task: step 1, step 2, step 3, step 4, step 5, step 6, step 7, step 8, step 9, step 10, step 11, step 12\", \"result\": true}", "{\"response\": \"To solve this problem, follow these steps: [1,2,3,4,5,6,7,8,9,10]. This is the solution.\", \"result\": true}\n{\"response\": \"To solve this problem, follow these steps: [1,2,3,4,5,6,7,8,9]. This is the solution.\", \"result\": false}\n{\"response\": \"To solve this problem, follow these steps: [1,2,3,4,5,6,7,8,9,10,11]. This is the solution.\", \"result\": false}"]}
{"query": "I am going to share a link to a webpage that has a market report. Please review and take on board the contents as I will ask you questions after", "instruction": "Provide your response in exactly 200 words and include at least 5 specific data points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 200 <= len(response) <= 200 and len(response.split()) >= 5\n", "def evaluate(response: str) -> bool: \n    return 200 <= len(response) <= 200 and len(response.split()) >= 5\n", "def evaluate(response: str) -> bool: \n    return 200 <= len(response) <= 200 and sum(1 for char in response if char.isalnum()) >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200 and len([char for char in response if char.isalnum() or char.isspace() or char == '.' or char == ',']) >= 5\n"], "testcases": ["{\"response\": \"The key findings of the report indicate that the sales figures for the last quarter were $10 million, $20 million in the next quarter, and $30 million in the following quarter. Additionally, the company's profits were $50 million, $60 million, and $70 million for the respective quarters. Furthermore, the market trend shows a steady increase in demand. The data analysis revealed that the most significant factor contributing to the growth was the expansion of the company's customer base. Overall, the data suggests a positive outlook for the company's future performance. This conclusion is supported by the data and requires no further explanation.\", \"result\": true}\n{\"response\": \"The company had some sales in the last quarter.\", \"result\": false}\n{\"response\": \"The company's profits were $50 million and the sales were $10 million in the last quarter.\", \"result\": false}", "{\"response\": \"The following are five key statistics about data analytics: the market size is expected to reach $274 billion by 2025, the global demand for data scientists is expected to increase by 14% annually, the average salary for a data scientist is $118,000, data analytics is used by 74% of organizations, and 80% of companies plan to increase their data analytics spending in the next year.\", \"result\": true}\n{\"response\": \"There are many companies that use data analytics, including Google, Amazon, and Facebook.\", \"result\": false}\n{\"response\": \"Data analytics is used in a variety of ways, including for marketing, sales, and customer service. It can help organizations make data-driven decisions and improve their bottom line. Some common data analytics tools include Tableau, Power BI, and Google Analytics.\", \"result\": false}", "{\"response\": \"Data analytics is a process of examining data sets to draw conclusions about the information they contain. It involves using specialized systems and statistical techniques to extract relevant insights and meaningful patterns from large data sets. The key steps in data analytics are data cleaning, data transformation, data visualization, and data mining. Data points include customer demographics, market trends, sales figures, and website traffic patterns. The results of data analytics are often used to inform business decisions, improve operational efficiency, and optimize marketing strategies.\", \"result\": true}\n{\"response\": \"Data analytics involves examining data sets to draw conclusions. It uses specialized systems and statistical techniques to extract insights from large data sets. The results are often used to inform business decisions and improve operational efficiency.\", \"result\": false}\n{\"response\": \"Data analytics involves examining data sets to draw conclusions about customer demographics, market trends, sales figures, and website traffic patterns. It uses specialized systems and statistical techniques to extract insights from large data sets. The results are often used to inform business decisions, improve operational efficiency, and optimize marketing strategies. Data points include customer age, customer location, sales revenue, website traffic, and return on investment. The results of data analytics are used to evaluate the effectiveness of marketing campaigns and optimize product offerings.\", \"result\": true}", "{\"response\": \"The response to the query 'data analytics used by American Express' is: The American Express company uses data analytics in the following ways: 1) customer segmentation, 2) predictive modeling, 3) customer relationship management, 4) marketing automation, 5) fraud detection, 6) credit risk assessment, 7) personalization, 8) supply chain optimization, 9) pricing strategy, 10) portfolio management. The benefits of data analytics include increased revenue, improved customer satisfaction, and enhanced operational efficiency. However, the company also faces challenges such as data quality issues, lack of skilled talent, and regulatory compliance.\", \"result\": true}\n\n{\"response\": \"The response to the query 'data analytics used by American Express' is: American Express uses data analytics to understand customer behavior and preferences.\", \"result\": false}\n\n{\"response\": \"The response to the query 'data analytics used by American Express' is: The American Express company uses data analytics in the following ways: customer segmentation, predictive modeling, customer relationship management. The benefits of data analytics include increased revenue, improved customer satisfaction, and enhanced operational efficiency. However, the company also faces challenges such as data quality issues, lack of skilled talent, and regulatory compliance.\", \"result\": false}"]}
{"query": "go on", "instruction": "answer in no more than 5 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n"], "testcases": ["{\"response\": \"This is a test response\", \"result\": true}\n{\"response\": \"This is a long and complex response that exceeds the 5 word limit\", \"result\": false}\n{\"response\": \"This is another test response\", \"result\": true}", "{\"response\": \"This is a short answer.\", \"result\": true}\n{\"response\": \"This is a very long answer that is longer than 5 words.\", \"result\": false}\n{\"response\": \"This is a medium answer with exactly 5 words.\", \"result\": true}", "{\"response\": \"Yes, it is true\", \"result\": true}\n{\"response\": \"This is a very long sentence that is more than 5 words\", \"result\": false}\n{\"response\": \"The answer is simple and correct\", \"result\": true}", "{\"response\": \"The cat is black.\", \"result\": false}\n{\"response\": \"The answer is yes.\", \"result\": false}\n{\"response\": \"I am a person\", \"result\": true}"]}
{"query": "let's play tic-tac-toe", "instruction": "Write in a poem with 3 stanzas", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 3\n", "def evaluate(response: str) -> bool: \n    count = 0\n    stanzas = response.split('\\n\\n')\n    for stanza in stanzas:\n        if stanza.strip(): \n            count += 1\n    return count == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n')) == 3\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 3\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nTheir melodies fill the air so high\\nAnd bring joy to all who walk by.\\n\\nThe breeze is warm on my face\\nThe world is full of beauty and grace\\nThe trees sway gently in the place\\nWhere love and peace entwine in a gentle pace.\\n\\nIn this world of wonder and might\\nWe find our hearts filled with delight\\nThe beauty of life, a precious sight\\nFills our souls with joy and light.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning sky\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nTheir melodies fill the air so high\\nAnd bring joy to all who walk by.\\n\\nThe breeze is warm on my face\\nThe world is full of beauty and grace\\nThe trees sway gently in the place\\nWhere love and peace entwine in a gentle pace.\\n\\nIn this world of wonder and might\\nWe find our hearts filled with delight\\nThe beauty of life, a precious sight\\nFills our souls with joy and light.\\n\\nAnd fills my heart with love\", \"result\": false}", "{\"response\": \"The sun shines bright in the sky\\nIt lights up the world with a warm, happy sigh\\nNature awakens from its sleep\\nAs the sun's rays begin to creep\\n\\nThe birds sing sweetly in the trees\\nTheir melodies fill the breeze\\nA gentle sound that's pure and clear\\nA symphony beyond compare\\n\\nThe sun sets slow and paints the west\\nA fiery hue that's truly blessed\\nA time for rest and quiet night\\nA peaceful end to day's delight\", \"result\": true}\n\n{\"response\": \"The sun is shining in the sky, the birds are singing sweetly\\nThe world is full of life and color, the trees are green and the flowers are blooming\\n\", \"result\": false}\n\n{\"response\": \"The sun sets slow and paints the west\\nA fiery hue that's truly blessed\\nA time for rest and quiet night\\nA peaceful end to day's delight\\n\\nThe stars appear one by one\\nA twinkling show has just begun\\nThe world is dark and still\\nA time for dreams to fill\\n\\nThe moon glows full and bright\\nA beacon in the night's dark light\", \"result\": true}", "{\"response\": \"Line 1 of stanza 1\\nLine 2 of stanza 1\\nLine 3 of stanza 1\\n\\nLine 1 of stanza 2\\nLine 2 of stanza 2\\nLine 3 of stanza 2\\n\\nLine 1 of stanza 3\\nLine 2 of stanza 3\\nLine 3 of stanza 3\", \"result\": true}\n{\"response\": \"Line 1 of stanza 1\\nLine 2 of stanza 1\\nLine 3 of stanza 1\", \"result\": false}\n{\"response\": \"Line 1 of stanza 1\\nLine 2 of stanza 1\\nLine 3 of stanza 1\\n\\nLine 1 of stanza 2\\nLine 2 of stanza 2\\nLine 3 of stanza 2\\n\\nLine 1 of stanza 3\\nLine 2 of stanza 3\\nLine 3 of stanza 3\\nLine 4 of stanza 3\", \"result\": false}", "{\"response\": \"The sun sets in the west,\\nIt brings joy to my chest,\\nNature is a beautiful sight.\\n\\nThe stars shine in the night,\\nThe moon glows with all its might,\\nThe world is full of wonder and light.\\n\\nThe ocean waves crash on the shore,\\nThe seagulls soar, they cry some more,\\nThe world is a beautiful place once more.\", \"result\": true}\n\n{\"response\": \"The sun sets in the west,\\nIt brings joy to my chest,\\nNature is a beautiful sight.\\n\\nThe stars shine in the night,\\nThe moon glows with all its might,\\nThe world is full of wonder.\\n\\nThe ocean waves crash on the shore,\\nThe seagulls soar, they cry some more,\\nThe world is a beautiful place once more, and forever and ever.\", \"result\": false}\n\n{\"response\": \"The sun sets in the west,\\nIt brings joy to my chest,\\nNature is a beautiful sight.\\n\\nThe stars shine in the night,\\nThe moon glows with all its might,\\nThe world is full of wonder and light,\\nThe world is so full of light,\\nThe world is full of wonder,\\nThe world is full of light,\\nThe world is so full of wonder,\\nThe world is full of light.\\n\\nThe ocean waves crash on the shore,\\nThe seagulls soar, they cry some more,\\nThe world is a beautiful place once more.\", \"result\": false}"]}
{"query": "problems machine learning can solve ?", "instruction": "provide three examples of tasks that involve data and algorithms", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'data' in response and 'algorithm' in response and 'example' in response\n", "def evaluate(response: str) -> bool: \n    example_tasks = ['data cleaning', 'data visualization', 'data clustering']\n    for task in example_tasks:\n        if task in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 3 and 'data' in words and 'algorithms' in words\n", "def evaluate(response: str) -> bool: \n    tasks = ['data classification', 'data clustering', 'data regression']\n    return any(task in response for task in tasks)\n"], "testcases": ["{\"response\": \"Here are three examples of tasks that involve data and algorithms:\\n\\n1. Data analysis\\n2. Machine learning\\n3. Data visualization\", \"result\": true}\n{\"response\": \"The data is clean and ready for analysis, and the model has been trained and deployed successfully.\", \"result\": false}\n{\"response\": \"Here are three examples of tasks that involve data and algorithms: 1. Image classification 2. Sentiment analysis 3. Natural language processing\", \"result\": true}", "{\"response\": \"Data cleaning and preprocessing involves using algorithms to clean and organize data. Data visualization involves using algorithms to create visual representations of the data. Data clustering involves using algorithms to group similar data points together.\", \"result\": true}\n{\"response\": \"I am going to the store to buy milk\", \"result\": false}\n{\"response\": \"Data mining involves using algorithms to discover patterns in data. Data transformation involves using algorithms to convert data from one format to another. Data aggregation involves using algorithms to combine data from multiple sources.\", \"result\": true}", "{\"response\": \"Data analysis is a task that involves data and algorithms. It includes tasks like data visualization, data cleaning, and data mining.\\nData visualization is a task that involves data and algorithms. It includes tasks like creating charts and graphs, and using tools like Tableau.\\nMachine learning is a task that involves data and algorithms. It includes tasks like training models, tuning parameters, and using libraries like Scikit-learn.\", \"result\": true}\n{\"response\": \"Data analysis involves data and algorithms. It includes tasks like data mining and data visualization.\", \"result\": false}\n{\"response\": \"Data science is a field that involves data and algorithms. It includes tasks like data cleaning, data transformation, and data modeling.\\nData visualization is a task that involves data and algorithms. It includes tasks like creating charts and graphs, and using tools like Tableau.\\nMachine learning is a task that involves data and algorithms. It includes tasks like training models, tuning parameters, and using libraries like Scikit-learn.\\nData mining is a task that involves data and algorithms. It includes tasks like data preprocessing, feature engineering, and model evaluation.\\nData transformation is a task that involves data and algorithms. It includes tasks like data aggregation, data grouping, and data normalization.\", \"result\": false}", "{\"response\": \"Data classification can be used for customer segmentation. Data clustering is used for product recommendations. Data regression can be used for stock price prediction.\", \"result\": true}\n{\"response\": \"I have no idea what data is or how algorithms work.\", \"result\": false}\n{\"response\": \"Data can be used for many purposes such as data mining and data visualization. However, I am not sure about any specific algorithms.\", \"result\": false}"]}
{"query": "world", "instruction": "Respond with only one sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 0 or response.count('?') == 0 or response.count('!') == 0 or not '.' in response or not '?' in response or not '!' in response\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 0 or response.endswith('.') \n", "def evaluate(response: str) -> bool: \n    return len(response.split('. ')) == 1 or len(response.split('? ')) == 1 or len(response.split('! ')) == 1\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 0 or response.endswith('?') or response.endswith('!')\n"], "testcases": ["{\"response\": \"The final answer is 42.\", \"result\": true}\n{\"response\": \"The final answer is 42.\", \"result\": true}\n{\"response\": \"The final answer is 42. The end.\", \"result\": false}", "{\"response\": \"The company is headquartered in California and has offices worldwide.\", \"result\": true}\n{\"response\": \"The company is headquartered in California and has offices worldwide. It is a well-established business.\", \"result\": false}\n{\"response\": \"The company is a leading provider of data analytics solutions and has a strong track record of innovation.\", \"result\": false}", "{\"response\": \"Data analysis is a crucial part of many tasks.\", \"result\": true}\n{\"response\": \"Data analysis is a crucial part of many tasks. This includes data visualization and data mining.\", \"result\": false}\n{\"response\": \"Data analysis is a crucial part of many tasks. Data visualization is also important.\", \"result\": false}", "{\"response\": \"The response should be a single sentence without any punctuation or capitalization.\", \"result\": false}\n{\"response\": \"This is a single sentence without any punctuation or capitalization.\", \"result\": true}\n{\"response\": \"This is another single sentence without any punctuation or capitalization and it contains some more text.\", \"result\": false}"]}
{"query": "Describe the function of Long-Term, Medium-Term and Short-Term schedulers in detail and list their differences. Or List and compare the 3 types of schedulers", "instruction": "Use the first and last sentence of each section as headers", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    first_last_sentences = [sentences[0], sentences[-1]]\n    return len(first_last_sentences) == len(set(first_last_sentences))\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    sections = []\n    section = ''\n    for sentence in sentences:\n        if sentence.strip():\n            section += sentence + '. '\n            if sentence.strip()[-1] in ['.', '!', '?']:\n                sections.append(section.strip())\n                section = ''\n    headers = [s.split('\\n')[0] for s in sections if '\\n' in s]\n    if len(headers) == len(sections):\n        return len(headers) > 1 and len(headers) <= len(sections)\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) >= 3 and all(sentences[0].strip() in section[0].strip() for section in [response.split('###')[i] for i in range(len(response.split('###')) if response.split('###')[i])])\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    section_headers = [sentences[0], sentences[-1]] \n    words = response.split()\n    for word in section_headers:\n        if word not in words: \n            return False\n    return True\n"], "testcases": ["{\"response\": \"Section 1: This is the first section. The first sentence is the header. Section 2: This is the second section. The last sentence is the header.\", \"result\": true}\n{\"response\": \"Section 1: This is the first section. This is the second sentence. Section 2: This is the second section. The last sentence is the header.\", \"result\": false}\n{\"response\": \"Section 1: This is the first section. The first sentence is the header. Section 2: This is the second section. This is the second sentence. Section 3: This is the third section. The last sentence is the header.\", \"result\": false}", "{\"response\": \"This is the first sentence of the first section. This is the second sentence of the first section.\\n\\nThis is the first sentence of the second section. This is the second sentence of the second section.\", \"result\": true}\n{\"response\": \"This is the first sentence of the first section. This is the second sentence of the first section. This is the third sentence of the first section.\\n\\nThis is the first sentence of the second section. This is the second sentence of the second section. This is the third sentence of the second section.\\n\\nThis is the first sentence of the third section. This is the second sentence of the third section. This is the third sentence of the third section.\", \"result\": false}\n{\"response\": \"This is the first sentence of the first section. This is the second sentence of the first section. This is the third sentence of the first section.\\n\\nThis is the first sentence of the second section. This is the second sentence of the second section.\", \"result\": true}", "{\"response\": \"Data analysis is an important field. It involves various techniques. Machine learning is a popular technique.\", \"result\": true}\n{\"response\": \"This is a sentence. Another sentence. And another one.\", \"result\": false}\n{\"response\": \"Here is the header. Here is the content. This is the second header.\", \"result\": true}", "{\"response\": \"This is the first sentence of a response.\\nThis is a paragraph.\\nThis is the last sentence of a response.\\nThis is another paragraph.\\nThis is the final sentence of a response.\", \"result\": true}\n{\"response\": \"This is a response without paragraphs.\\nThis is another sentence in the response.\", \"result\": false}\n{\"response\": \"This is a single-paragraph response.\\nThis is a sentence.\\nThis is another sentence.\\nThis is the last sentence of the response.\", \"result\": true}"]}
{"query": "data analytics used by American Express", "instruction": "answer in exactly 5 paragraphs and provide at least 2 references", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 5 and'reference' in response.lower() and'references' in response.lower()\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.count('.') + 1\n    references = response.lower().count('reference') \n    return paragraphs == 5 and references >= 2\n", "def evaluate(response: str) -> bool:    \n    paragraphs = response.count('\\n\\n')\n    references = response.lower().count('reference')\n    return paragraphs == 5 and references >= 2\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    if len(paragraphs)!= 5:\n        return False\n    count = 0\n    for paragraph in paragraphs:\n        words = paragraph.split()\n        for word in words:\n            if word.startswith('Reference'):\n                count += 1\n    return count >= 2\n"], "testcases": ["{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph. Reference: [1] References: [2, 3, 4]\", \"result\": true}\n{\"response\": \"This is a very long paragraph that does not fit the instruction.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph. Reference: [1] References: [2, 3, 4]\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph.\\n\\nThis is the sixth paragraph. Reference: [1] References: [2, 3]\", \"result\": false}", "{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is the fifth paragraph.\\n\\nThis is a reference.\", \"result\": true}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\n\\nThis is a reference and another one.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\\nThis is a reference.\", \"result\": false}", "{\"response\": \"Data analytics is a field that deals with analyzing complex data to extract meaningful insights. It is used in various industries such as marketing, finance, and healthcare. Reference 1. Data analytics has numerous benefits including improved decision-making and increased efficiency. It also helps organizations to identify trends and patterns in their data. Reference 2. This is why data analytics is a crucial tool for businesses today. It is used to identify areas of improvement and make data-driven decisions. This is the reason why data analytics is an essential skill for professionals in today's data-driven world. It is also used to identify areas of improvement and make data-driven decisions. This is the reason why data analytics is an essential skill for professionals in today's data-driven world. This is also used to identify areas of improvement and make data-driven decisions. This is the reason why data analytics is an essential skill for professionals in today's data-driven world.\", \"result\": true}\n{\"response\": \"Data analytics is a field that deals with analyzing complex data to extract meaningful insights. It is used in various industries such as marketing, finance, and healthcare. Reference 1. Data analytics has numerous benefits including improved decision-making and increased efficiency. It also helps organizations to identify trends and patterns in their data. This is why data analytics is a crucial tool for businesses today. It is used to identify areas of improvement and make data-driven decisions.\", \"result\": false}\n{\"response\": \"Data analytics is a field that deals with analyzing complex data to extract meaningful insights. It is used in various industries such as marketing, finance, and healthcare. Reference 1. Data analytics has numerous benefits including improved decision-making and increased efficiency. It also helps organizations to identify trends and patterns in their data. This is why data analytics is a crucial tool for businesses today. It is used to identify areas of improvement and make data-driven decisions. This is the reason why data analytics is an essential skill for professionals in today's data-driven world. Reference 2. Data analytics is used in various industries such as marketing, finance, and healthcare. It is used to identify areas of improvement and make data-driven decisions. This is the reason why data analytics is an essential skill for professionals in today's data-driven world. It is also used to identify areas of improvement and make data-driven decisions. This is the reason why data analytics is an essential skill for professionals in today's data-driven world.\", \"result\": false}", "{\"response\": \"This is the first paragraph.\\nThis is the second paragraph.\\nThis is the third paragraph.\\nThis is the fourth paragraph.\\nThis is the fifth paragraph.\\nReference 1.\\nReference 2.\", \"result\": true}\n{\"response\": \"This is the first paragraph.\\nThis is the second paragraph.\\nThis is the third paragraph.\\nThis is the fourth paragraph.\\nThis is the fifth paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\nThis is the second paragraph.\\nThis is the third paragraph.\\nThis is the fourth paragraph.\\nThis is the fifth paragraph.\\nReference 1.\\nReference 2.\\nReference 3.\", \"result\": true}"]}
{"query": "What is ARQ? explain Go Back N and selective repeat ARQ protocols", "instruction": "Write a single paragraph of exactly 5 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    return len(sentences) == 5 and len(sentences) > 1\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n"], "testcases": ["{\"response\": \"This is a single paragraph of exactly 5 sentences. It is about a beautiful sunny day. The sky was blue and the birds were singing. People were walking outside and enjoying the weather. It was a lovely sight to see.\", \"result\": true}\n{\"response\": \"I love reading books on the beach.\", \"result\": false}\n{\"response\": \"This is a single paragraph of exactly 5 sentences. It is about a beautiful sunny day. The sky was blue and the birds were singing. People were walking outside and enjoying the weather. It was a lovely sight to see. And the world was at peace.\", \"result\": true}", "{\"response\": \"The quick brown fox jumped over the lazy dog. The sun was shining brightly in the sky. The birds were singing their sweet melodies. The flowers were blooming in the garden. It was a beautiful day.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": false}\n{\"response\": \"The quick brown fox jumped over the lazy dog The sun was shining brightly in the sky The birds were singing their sweet melodies The flowers were blooming in the garden It was a beautiful day.\", \"result\": false}", "{\"response\": \"The weather in London is often rainy. The average annual rainfall in London is approximately 600 mm. However, the city can also experience sunshine and dry spells. It's essential to pack accordingly for your trip. London's weather is known for being quite unpredictable.\", \"result\": true}\n\n{\"response\": \"The weather in London is often rainy and sunny.\", \"result\": false}\n\n{\"response\": \"The weather in London is often rainy The average annual rainfall in London is approximately 600 mm. However, the city can also experience sunshine and dry spells. It's essential to pack accordingly for your trip.\", \"result\": false}", "{\"response\": \"The capital of France is Paris. It has many beautiful landmarks. The Eiffel Tower is a famous monument. The city is known for its art museums. Paris is a popular tourist destination.\", \"result\": true}\n{\"response\": \"The capital of France is Paris. It has many beautiful landmarks. The Eiffel Tower is a famous monument.\", \"result\": false}\n{\"response\": \"The capital of France is Paris. It has many beautiful landmarks. The Eiffel Tower is a famous monument. The city is known for its art museums Paris is a popular tourist destination.\", \"result\": false}"]}
{"query": "Hello", "instruction": "Answer with an explanation of the concept that is exactly 50 words long.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n"], "testcases": ["{\"response\": \"The concept of a single paragraph can be described as a group of sentences that form a coherent and logical unit of thought, typically used in writing and conversation to convey a single idea or message.\", \"result\": true}\n{\"response\": \"A single paragraph is a group of sentences that are connected by grammar and syntax to form a coherent unit of thought, often used in writing and conversation to convey a single idea or message.\", \"result\": false}\n{\"response\": \"A paragraph is a group of sentences that form a coherent unit of thought, often used in writing to convey a single idea or message, typically separated from other paragraphs by a blank line or indentation.\", \"result\": false}", "{\"response\": \"The concept of a variable in programming refers to a named value that can be stored in memory. Variables are used to make code more readable and easier to understand by storing values for later use.\", \"result\": true}\n{\"response\": \"Variables in programming are used to store values. They are defined before they are used and can be used multiple times in a program. This makes the code more readable and easier to understand.\", \"result\": false}\n{\"response\": \"A variable is a container that stores a value. In programming, variables are used to store values that can be used later in the code. Variables make the code easier to read and understand, and they help to reduce errors.\", \"result\": false}", "{\"response\": \"The concept of a variable in programming refers to a container that holds a value and can be used throughout a program to perform various operations. Variables can be thought of as labels or containers that hold data, allowing developers to write more efficient code. This concept is a fundamental aspect of programming languages.\", \"result\": true}\n{\"response\": \"A variable is a container that holds a value and can be used throughout a program to perform various operations. Variables can be thought of as labels or containers that hold data, allowing developers to write more efficient code. This concept is a fundamental aspect of programming.\", \"result\": false}\n{\"response\": \"The concept of a variable in programming refers to a container that holds a value and can be used throughout a program to perform various operations. Variables can be thought of as labels or containers that hold data, allowing developers to write more efficient code. This concept is a fundamental aspect of programming languages. Variables are a key component of programming languages. They provide a way to store and manipulate data.\", \"result\": false}", "{\"response\": \"This is a short explanation of the concept. It only has 25 words and meets the criteria. However, it can be longer.\", \"result\": false}\n{\"response\": \"This is a short explanation of the concept. It has 25 words. The concept is widely accepted and has many real-world applications. It has many different variations. It has a long history. It is very important in the field of science.\", \"result\": false}\n{\"response\": \"This is a short explanation of the concept. It has 50 words. The concept is widely accepted and has many real-world applications. It has many different variations and is very important in the field of science. It is used in many different industries and has a long history.\", \"result\": true}"]}
{"query": "Is this good idea?\n\nconst mapStateToProps = (state) => ({\n ...state,\n});", "instruction": "Use exactly 5 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n"], "testcases": ["{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\", \"result\": false}", "{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\", \"result\": true}\n{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\", \"result\": false}\n{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\\nThis is line 6.\\nThis is line 7.\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\", \"result\": false}"]}
{"query": "write a powershell script that returns all computers in a domain which have RDP enabled for all domain users", "instruction": "use exact keyword 'ping' at least 5 times", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.upper().count('PING') >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('ping') >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('ping') >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('ping') >= 5\n"], "testcases": ["{\"response\": \"The network connection has been successfully established through multiple ping tests. We can confirm that the device is online. Multiple pings to the server were successful. The device responded to all five pings, indicating a strong network connection.\", \"result\": true}\n{\"response\": \"The network connection has been lost due to a dropped packet.\", \"result\": false}\n{\"response\": \"We have been unable to establish a connection. Pinging the server has been attempted five times but failed each time. Let's try again.\", \"result\": true}", "{\"response\": \"This is a single line of text. It does not contain any ping statements.\", \"result\": false}\n{\"response\": \"I pings the server every few minutes to ensure it's working properly. I pinged it just a moment ago.\", \"result\": false}\n{\"response\": \"I ping the server every few minutes to ensure it's working properly. I pinged it just a moment ago. I also ping the client periodically to verify their connection. I ping the server every few minutes to ensure it's working properly. I pinged it just a moment ago again.\", \"result\": true}", "{\"response\": \"The system will respond with ping ping ping ping ping to confirm the connection.\\nThe server will then respond with ping ping to acknowledge the handshake.\\nA successful connection involves at least 5 pings to confirm reliability.\", \"result\": true}\n{\"response\": \"The system will respond with ping to confirm the connection.\\nThe server will then respond to acknowledge the handshake.\\nA successful connection involves multiple pings to confirm reliability.\", \"result\": false}\n{\"response\": \"The network will respond with ping ping ping ping ping ping to confirm the connection.\\nThe server will then respond with ping to acknowledge the handshake.\\nA successful connection involves at least 5 pings to confirm reliability.\", \"result\": true}", "{\"response\": \"I will ping the server 5 times to test the network connectivity.\\nPing response was successful. ping ping ping ping ping\", \"result\": true}\n{\"response\": \"I will ping the server to test the network connectivity.\", \"result\": false}\n{\"response\": \"I will ping the server 10 times to test the network connectivity. Ping response was successful ping ping ping ping\", \"result\": true}"]}
{"query": "can you make me indivual discord.py bot commands?", "instruction": "Use a text-based flowchart and exactly 3 levels of indentation.", "verifiers": ["def evaluate(response: str) -> bool: \n    level = 0\n    for i, char in enumerate(response):\n        if char == '\\t':\n            level += 1\n            if level > 3:\n                return False\n        elif char == '\\n':\n            level = 0\n    return level == 0\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    levels = 0\n    for line in lines:\n        for i, char in enumerate(line):\n            if char =='' and i < len(line) - 1 and line[i + 1] == '|':\n                levels += 1\n            if char == '|':\n                if levels > 3 or levels < 0:\n                    return False\n    return levels == 3\n", "def evaluate(response: str) -> bool: \n    lines = response.splitlines()\n    indent_levels = [0] * len(lines)\n    for i in range(len(lines)):\n        for j, char in enumerate(lines[i]):\n            if char =='':\n                indent_levels[i] = max(indent_levels[i], j + 1)\n    return len(set(indent_levels)) == 1 and max(indent_levels) == 3\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    level = 0\n    for line in lines:\n        indentation = len(line) - len(line.lstrip())\n        if indentation > 5:\n            if indentation % 4!= 0 or indentation // 4 >= 3:\n                return False\n            level = max(level, indentation // 4)\n        elif indentation < 0:\n            return False\n    return level <= 2\n"], "testcases": ["{\"response\": \"Response 1\n\\tResponse 2\n\\t\\tResponse 3\", \"result\": true}\n{\"response\": \"Response 1\\nResponse 2\", \"result\": false}\n{\"response\": \"Response 1\n\\tResponse 2\", \"result\": false}", "{\"response\": \"   You are here\\n  /|\\    \\n / | \\   \\n| | | |\\n----\", \"result\": true}\n{\"response\": \"You are here\\n/|/\\\\\", \"result\": false}\n{\"response\": \"You are here\\n | |\\n  | \", \"result\": true}", "{\"response\": \"    if you want to learn about the topic, look below. \\n    if you want to learn something else, look elsewhere.\\n    else, consult a teacher.\\n    else,\\n    try online resources.\", \"result\": true}\n\n{\"response\": \"This is a short response.\", \"result\": false}\n\n{\"response\": \"if you want to learn about the topic, look below.\\n  if you want to learn something else, look elsewhere.\\n    else, consult a teacher.\\n      else,\\n        try online resources.\", \"result\": false}", "{\"response\": \"    if user chooses option 1:\\n    then:\\n    print 'Option 1 selected'\\n    else:\\n    print 'Option 2 selected'\", \"result\": true}\n{\"response\": \"    if user chooses option 1:\\n    then:\\n    print 'Option 1 selected'\\n    else: then:\\n    print 'Option 2 selected'\", \"result\": false}\n{\"response\": \"if user chooses option 1:\\nthen:\\n    print 'Option 1 selected'\\n    else:\\n    print 'Option 2 selected'\\n    then:\\n    print 'You selected an option'\", \"result\": false}"]}
{"query": "Create a recipe for Rigatoni pasta for one person, i have pre-cooked shrimps, an onion, can of tomato sauce, spices, olive oil, vinegar. Also i'm limited by only single burner electric stove", "instruction": "Use only steps that require less than 10 seconds", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = [\"Boil water\", \"Cook shrimps\", \"Chop onion\", \"Heat oil\", \"Add sauce\", \"Season with spices\"]\n    step_times = {\"Boil water\": 5, \"Cook shrimps\": 2, \"Chop onion\": 3, \"Heat oil\": 2, \"Add sauce\": 1, \"Season with spices\": 2}\n    \n    words = response.split()\n    count = 0\n    \n    for i in range(len(words)):\n        for step in steps:\n            if step in words[i:i+len(step.split())]:\n                count += step_times[step]\n                \n    return count < 10\n", "def evaluate(response: str) -> bool: \n    lines = response.splitlines()\n    return all('less than 10 seconds' in line or 'under 10 seconds' in line for line in lines)\n", "def evaluate(response: str) -> bool:    \n    words = ['less', 'under', 'underneath','short', 'brief', 'quick', 'rapid','swift','speedy', 'fast', 'briefly','moment']\n    for word in words:\n        if word in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    time_words = ['second','seconds','min','minutes']\n    for word in time_words:\n        if word in response.lower():\n            seconds = response.lower().split(' ')[response.lower().split(' ').index(word) + 1]\n            try:\n                if int(seconds) < 10:\n                    return True\n                else:\n                    return False\n            except ValueError:\n                return False\n    return False\n"], "testcases": ["{\"response\": \"First, heat the oil. Then, add the spices. Finally, serve the dish.\", \"result\": true}\n{\"response\": \"Boil the water for 5 minutes. Then, cook the shrimps. Chop the onion. Heat the oil. Add the sauce.\", \"result\": false}\n{\"response\": \"First, boil the water. Then, chop the onion. Add the sauce. Season with spices.\", \"result\": true}", "{\"response\": \"Please click on the button to proceed. Clicking this button will take less than 10 seconds.\", \"result\": true}\n{\"response\": \"This task may take several minutes, please be patient. However, some steps require under 10 seconds.\", \"result\": false}\n{\"response\": \"Please follow these steps: press the button, enter your username, and enter your password. Each step will take less than 10 seconds.\", \"result\": true}", "{\"response\": \"You should respond quickly.\", \"result\": True}\n{\"response\": \"This action will take some time, but you can do it at your leisure.\", \"result\": False}\n{\"response\": \"Please respond briefly and I will let you know if there is anything else.\", \"result\": True}", "{\"response\": \"Click the button to proceed.\", \"result\": true}\n{\"response\": \"Please wait for 5 minutes for the file to download.\", \"result\": false}\n{\"response\": \"First, click the button and then click the link.\", \"result\": true}"]}
{"query": "*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)*", "instruction": "Use only the exact phrases that I write in caps.", "verifiers": ["def evaluate(response: str) -> bool: \n    exact_phrases = [\"THIS\", \"CHAT CONVERSATION IS SHARED FROM\", \"**TypingMind.com**\"]\n    for phrase in exact_phrases:\n        if phrase not in response:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    phrases = ['THIS', 'CHAT', 'CONVERSATION', 'IS', 'SHARED', 'FROM', '[**TYPINGMIND.COM**]']\n    for phrase in phrases:\n        if phrase not in response.upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    instruction = \"THIS CHAT CONVERSATION IS SHARED FROM [**TYPINGMIND.COM**]\"\n    return'' + instruction in'' + response\n", "def evaluate(response: str) -> bool: \n    phrases = ['THIS CHAT CONVERSATION IS SHARED FROM', 'TypingMind.com']\n    for phrase in phrases:\n        if phrase not in response:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"This is a chat conversation from TypingMind.com THIS IS A SHARED CONVERSATION.\", \"result\": true}\n{\"response\": \"Hello, this conversation is not shared from TypingMind.com\", \"result\": false}\n{\"response\": \"CHAT CONVERSATION IS SHARED FROM TypingMind.com\", \"result\": true}", "{\"response\": \"THIS IS A CHAT CONVERSATION. CHAT CONVERSATION IS SHARED FROM TYPINGMIND.COM.\", \"result\": true}\n{\"response\": \"I'm happy to help you with any questions you have. How can I assist you today?\", \"result\": false}\n{\"response\": \"THIS CHAT CONVERSATION IS SHARED FROM TYPINGMIND.COM. IT IS A GREAT TOOL FOR HAVING CONVERSATIONS.\", \"result\": true}", "{\"response\": \"THE PHRASE 'I AGREE' IS USED BY USERS TO CONFIRM THEIR CONSENT.\", \"result\": true}\n{\"response\": \"I agree that this is a great idea. I also want to add that...\", \"result\": false}\n{\"response\": \"THE PHRASE 'I AGREE' IS USED BY USERS TO CONFIRM THEIR CONSENT. IT IS A CRUCIAL PART OF OUR DISCUSSIONS.\", \"result\": true}", "{\"response\": \"THIS IS A GOOD RESPONSE. this is bad and should be ignored\", \"result\": true}\n{\"response\": \"THIS IS A GOOD RESPONSE THAT CONTAINS ONLY THE REQUIRED PHRASES\", \"result\": true}\n{\"response\": \"THIS IS A GOOD RESPONSE THAT CONTAINS ONLY THE REQUIRED PHRASES AND A LOT OF EXTRA TEXT THAT SHOULD BE IGNORED\", \"result\": true}"]}
{"query": "Given the following Classful IPv4 address: 205.16.37.32/24", "instruction": "Use only programming language names", "verifiers": ["def evaluate(response: str) -> bool: \n    programming_languages = ['Python', 'Java', 'JavaScript', 'C++', 'C#', 'Ruby', 'Swift', 'PHP', 'Go', 'Kotlin', 'Rust', 'Perl', 'Scala', 'TypeScript', 'Julia', 'Haskell']\n    for lang in programming_languages:\n        if lang in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    programming_languages = ['Python', 'Java', 'C', 'C++', 'JavaScript', 'Ruby', 'Swift', 'PHP', 'Go', 'Kotlin']\n    for language in programming_languages:\n        if language in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    allowed_languages = ['python', 'java', 'c', 'c++', 'javascript', 'ruby','swift', 'php', 'go', 'kotlin']\n    words = response.split()\n    return all(word.lower() in allowed_languages for word in words)\n", "def evaluate(response: str) -> bool: \n    programming_languages = ['Python', 'Java', 'C++', 'C#', 'JavaScript', 'Ruby', 'Swift', 'PHP', 'Go', 'Kotlin']\n    return any(word in response for word in programming_languages)\n"], "testcases": ["{\"response\": \"The language used in this chat is Python and JavaScript.\", \"result\": true}\n{\"response\": \"Hello, I am here to help with any programming language you need help with.\", \"result\": false}\n{\"response\": \"My favorite programming languages are Java and C++ and C#.\", \"result\": true}", "{\"response\": \"I love coding in Python, Java, and JavaScript.\", \"result\": true}\n{\"response\": \"I'm a beginner in programming, I don't know where to start.\", \"result\": false}\n{\"response\": \"Python is my favorite language, I've been using it for years.\", \"result\": true}", "{\"response\": \"The response should only include programming languages.\", \"result\": true}\n{\"response\": \"The response should only include programming languages. Additionally, you can also use frameworks like Flask and React.\", \"result\": false}\n{\"response\": \"Python is a popular language. Java is also widely used. C++ is a low-level language.\", \"result\": true}", "{\"response\": \"The most popular programming languages are Python, Java, and JavaScript.\", \"result\": true}\n{\"response\": \"Machine learning is a subset of artificial intelligence.\", \"result\": false}\n{\"response\": \"JavaScript is a versatile language used for web development.\", \"result\": true}"]}
{"query": "how do you run a perl script with the stream deck?", "instruction": "specify a specific programming language and its version.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'specific language' in response and'version' in response and len(response.split()) >= 2\n", "def evaluate(response: str) -> bool: \n    return any('version' in response.lower() or \n              'version=' in response.lower() or \n               'v' in response.lower() and any('python' in word.lower() or 'java' in word.lower() or 'c++' in word.lower() or 'c#' in word.lower() or 'c' in word.lower() for word in response.split(' '))) \n", "def evaluate(response: str) -> bool: \n    return any([any(keyword in response for keyword in ['Perl', 'perl', 'per', 'PER', '5', '6', '7', '8', '9', '10']) and any(char in response for char in ['v', 'V', '.'])]) or any([any(keyword in response for keyword in ['perl', 'Perl', 'per', 'PER'])])\n", "def evaluate(response: str) -> bool:    \n    return'specific' in response and ('language' in response and'version' in response) and ('python' in response or 'perl' in response or 'java' in response or 'javascript' in response)\n"], "testcases": ["{\"response\": \"We will be using Java version 17.0.2 for our project.\", \"result\": true}\n{\"response\": \"We will be using Python, but we are not sure about the version.\", \"result\": false}\n{\"response\": \"Our development team will use Python version 3.10.0 for this project.\", \"result\": true}", "{\"response\": \"For this project, I recommend using Python 3.9 with the Anaconda distribution.\", \"result\": true}\n{\"response\": \"I am proficient in C and C++ and can provide you with an example of how to use them to solve this problem.\", \"result\": false}\n{\"response\": \"The code will be written in Java 11 and will use the Spring framework.\", \"result\": true}", "{\"response\": \"For this project, I suggest using Perl 5 and a version control system like Git.\", \"result\": true}\n{\"response\": \"I have experience working with Python and Java, but I've also dabbled in Ruby.\", \"result\": false}\n{\"response\": \"I used Python 6 to develop the mobile app, and it's available on the App Store.\", \"result\": false}", "{\"response\": \"We will be using Python 3.10 for this project.\", \"result\": true}\n{\"response\": \"Our team recommends using Java and its latest version.\", \"result\": true}\n{\"response\": \"Our company has adopted the use of Python 3.9 as its standard language.\", \"result\": true}\n{\"response\": \"We plan to use Java and its version, however we're not sure which version it will be.\", \"result\": false}\n{\"response\": \"We will use Python and we are working on updating to version 3.11.\", \"result\": false}"]}
{"query": "Write a differentiated and interactive lesson plan for 8th graders introducing functions that includes an objective, differentiation, a formative assessment and ten practice problems.", "instruction": "Do not use the phrase \"the following\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'the following' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'following' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'following' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'following' not in response.lower()\n"], "testcases": ["{\"response\": \"Here are the key points to consider when evaluating the data: point 1, point 2, point 3, and point 4.\", \"result\": true}\n{\"response\": \"The following items are required to complete the task: item 1, item 2, item 3, and item 4.\", \"result\": false}\n{\"response\": \"Please note that some of the details are not specified and are expected to be provided by the team lead.\", \"result\": true}", "{\"response\": \"This project has a set of requirements: item 1, item 2, item 3\", \"result\": true}\n{\"response\": \"This project has the following requirements: item 1, item 2, item 3\", \"result\": false}\n{\"response\": \"This project includes these elements: item 1, item 2, item 3\", \"result\": true}", "{\"response\": \"There are many programming languages. You can choose one of Python 3.10, Python 3.9, or Java 8.\", \"result\": false}\n{\"response\": \"I recommend Python 3.9 for beginners, but Java 8 is also a good option.\", \"result\": true}\n{\"response\": \"You can use Python 3.9, Python 3.10, or even C++ 20.\", \"result\": true}", "{\"response\": \"This is a great hotel, I highly recommend it.\", \"result\": true}\n{\"response\": \"Here are the items on the shopping list: milk, eggs, and bread.\", \"result\": false}\n{\"response\": \"This hotel has excellent service and I would highly recommend it.\", \"result\": true}"]}
{"query": "Please list down all possible features of advance calendar page to build react application", "instruction": "Each feature should be on a new line, in the order of importance (top to bottom).", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) > 1 and all(i in lines for i in lines[:-1])\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines) < 1: \n        return False\n    for i in range(len(lines) - 1):\n        if lines[i].strip() == '': \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) > 0 and all(len(line.strip()) > 0 for line in lines) and all(lines[i].startswith('Step') == lines[j].startswith('Step') for i in range(len(lines)) for j in range(i+1, len(lines)) if (lines[i]!= '' and lines[j]!= ''))\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) > 1 and all(lines[i]!= '' for i in range(len(lines)-1))\n"], "testcases": ["{\"response\": \"Core competencies\\n1. Technical skills\\n2. Communication skills\\n3. Problem-solving skills\", \"result\": true}\n{\"response\": \"Core competencies\\n1. Technical skills\\n2. Communication skills\\n3. Problem-solving skills\\n4. Leadership skills\\n5. Teamwork skills\", \"result\": false}\n{\"response\": \"Here are the requirements\\n1. Java development experience\\n2. Python programming skills\\n3. Cloud infrastructure knowledge\", \"result\": false}", "{\"response\": \"Feature 1\\nFeature 2\\nFeature 3\\nFeature 4\\nFeature 5\", \"result\": true}\n{\"response\": \"Feature 1\\nFeature 2\\nFeature 3\", \"result\": false}\n{\"response\": \"Feature 1\\nFeature 2\\nFeature 4\\nFeature 3\", \"result\": false}", "{\"response\": \"Step 1. Step 2\\nStep 3. Step 4\\nStep 5.\", \"result\": true}\n{\"response\": \"Step 1\\n\\n2. Step 3\", \"result\": false}\n{\"response\": \"Feature 1\\nFeature 2\\nFeature 3\", \"result\": false}", "{\"response\": \"Feature 1\\nFeature 2\\nFeature 3\", \"result\": true}\n{\"response\": \"Feature 1\\n\\nFeature 2\\nFeature 3\", \"result\": false}\n{\"response\": \"Feature 1\\nFeature 3\\nFeature 2\", \"result\": false}"]}
{"query": "What kind of requirements must be meet for a portfolio to be called novel and impressive? Elucidate in great detail and provide examples for that.\n\n!", "instruction": "Answer using no more than 25 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 25\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 25\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 25\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 25\n"], "testcases": ["{\"response\": \"The core competencies of an end-to-end software development company in the government space include security, efficiency, scalability, and transparency.\", \"result\": true}\n{\"response\": \"This is a very detailed answer that covers all the important aspects of a software development company in the government space. However, it is not the only thing that should be considered when evaluating such a company.  Additionally, this answer can be improved by adding more specific details about each competency and providing examples of how they can be implemented in real-world scenarios. Furthermore, it would be helpful to discuss the importance of each competency in more depth, as well as how they can be measured and evaluated.\", \"result\": false}\n{\"response\": \"This company focuses on software development for the government space.  They provide services including cloud services and DevOps.  They also provide software testing and security.  This company has excellent core competencies.\", \"result\": false}", "{\"response\": \"The sky is blue and the sun is shining brightly today.\", \"result\": true}\n{\"response\": \"This is a test response that is longer than 25 words and will fail the evaluation.\", \"result\": false}\n{\"response\": \"Answer is short and sweet like a cookie.\", \"result\": true}", "{\"response\": \"This response is very short and to the point, it is only 4 words long.\", \"result\": true}\n{\"response\": \"This response is a bit too long, it has 26 words and contains a very long sentence that exceeds the character limit.\", \"result\": false}\n{\"response\": \"This response is another example of a short response that meets the 25 word limit.\", \"result\": true}", "{\"response\": \"The sun is shining brightly in the clear blue sky.\", \"result\": true}\n{\"response\": \"This is a very long sentence that is trying to trick the system and exceed the limit.\", \"result\": false}\n{\"response\": \"This is a short sentence with fewer than 25 words.\", \"result\": true}"]}
{"query": "what is the expected result of this javascript snippet referencing an SDK called notion.js?", "instruction": "use Markdown syntax to denote code blocks", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\\n", "def evaluate(response: str) -> bool: \n    return response.count('", "def evaluate(response: str) -> bool: \n    return len(response) >= 2 and response.startswith('", "def evaluate(response: str) -> bool: \n    return '\\n`' in response or '"], "testcases": ["{\"response\": \"The response should be in a code block:\\n```python\\nprint('Hello, world!')\\n```\", \"result\": true}\n{\"response\": \"The response should be in a code block: This is a code block without syntax\", \"result\": false}\n{\"response\": \"The response should be in a code block:\\n```python\\nprint('Hello, world!')\\n``` and here is a regular line of text.\", \"result\": true}", "{\"response\": \"The code snippet is as follows:\\n```\\nprint('Hello World')\\n```\", \"result\": true}\n{\"response\": \"This code is written in Python and does the following print('Hello World')\", \"result\": false}\n{\"response\": \"The code block is as follows:\\n```json\\n{\\n    \\\"key\\\": \\\"value\\\"\\n}\\n```\", \"result\": true}\n{\"response\": \"The code block is as follows:\\n```python\\nprint('Hello World')\\n```\", \"result\": true}\n{\"response\": \"This is a simple code block: print('Hello World')\", \"result\": false}", "{\"response\": \"```python\ndef hello():\n  print('Hello World')\n```\n\", \"result\": true}\n{\"response\": \"This is a code block\\n```java\\nSystem.out.println(\\\"Hello World\\\");\\n```\", \"result\": true}\n{\"response\": \"This is not code\\npython\\nprint('Hello World')\", \"result\": false}", "{\"response\": \"```python\\ndef print_hello():\\n    print('Hello World')\\n```\", \"result\": true}\n{\"response\": \"Here are the instructions for using Python: first, you need to install it on your computer\", \"result\": false}\n{\"response\": \"You can write a Python script to calculate the sum of two numbers: \\n```python\\nprint(5 + 3)\\n```\", \"result\": true}"]}
{"query": "write a cron job to run a python script in `/tmp/schedule\\_notifications.py` every 12 hours, every other day", "instruction": "format is \"0 0/12 * * */2 python /tmp/schedule\\_notifications.py\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip() == '0 0/12 * * */2 python /tmp/schedule_notifications.py' \n", "def evaluate(response: str) -> bool: \n    return response.strip() == \"0 0/12 * * */2 python /tmp/schedule_notifications.py\" \n", "def evaluate(response: str) -> bool: \n    return response == \"0 0/12 * * */2 python /tmp/schedule_notifications.py\"<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response == '0 0/12 * * */2 python /tmp/schedule_notifications.py' \n"], "testcases": ["{\"response\": \"0 0/12 * * */2 python /tmp/schedule_notifications.py\", \"result\": true}\n{\"response\": \"0 0/13 * * */2 python /tmp/schedule_notifications.py\", \"result\": false}\n{\"response\": \"0 0/11 * * */2 python /tmp/schedule_notifications.py\", \"result\": false}", "{\"response\": \" 0 0/12 * * */2 python /tmp/schedule_notifications.py\", \"result\": true}\n{\"response\": \"I will run the script at 0 1/12 * * */2 python /tmp/schedule_notifications.py\", \"result\": false}\n{\"response\": \"you need to use the command 0 0/12 * * */2 python /tmp/schedule_notifications.py\", \"result\": false}", "{\"response\": \"0 0/12 * * */2 python /tmp/schedule_notifications.py\", \"result\": true}\n{\"response\": \"0 0/10 * * */2 python /tmp/schedule_notifications.py\", \"result\": false}\n{\"response\": \"0 0/12 * * */3 python /tmp/schedule_notifications.py\", \"result\": false}", "{\"response\": \"0 0/12 * * */2 python /tmp/schedule_notifications.py\", \"result\": true}\n{\"response\": \"0 0/12 * * */2 ruby /tmp/schedule_notifications.py\", \"result\": false}\n{\"response\": \"0 0/12 * * */2 python /tmp/schedule_notifications.py | echo 'Hello World'\", \"result\": false}"]}
{"query": "can you write javascript code to generate lottery numbers?", "instruction": "Use exactly 8 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 8\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 8\n", "def evaluate(response: str) -> bool: \n    return response.count('.') in [0] or response.count('.') == 7 or response.count('.') == 8\n", "def evaluate(response: str) -> bool: \n    return response.count('.') in [0, 4, 8] or response.count('?') in [0, 4, 8]\n"], "testcases": ["{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence.\", \"result\": false}", "{\"response\": \"The company was founded in 2010. It is a privately held company. The company is headquartered in San Francisco. It has offices in several countries. The company has received significant funding. It has developed several products. They are used by many companies. The company has a strong team.\", \"result\": true}\n{\"response\": \"The company was founded in 2010. It is a privately held company. The company is headquartered in San Francisco. It has offices in several countries. They are used by many companies.\", \"result\": false}\n{\"response\": \"The company was founded in 2010. It is a privately held company. The company is headquartered in San Francisco. It has offices in several countries. The company has received significant funding. It has developed several products. They are used by many companies. The company has a strong team. The company is growing rapidly.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence.\", \"result\": false}\n\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence.\", \"result\": true}\n\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence.\", \"result\": false}", "{\"response\": \"The first sentence is here. The second sentence is here. The third sentence is here. The fourth sentence is here. The fifth sentence is here. The sixth sentence is here. The seventh sentence is here. The eighth sentence is here.\", \"result\": true}\n{\"response\": \"The first sentence is here. The second sentence is here. The third sentence is here. The fourth sentence is here. The fifth sentence is here. The sixth sentence is here. The seventh sentence is here.\", \"result\": false}\n{\"response\": \"The first sentence is here. The second sentence is here. The third sentence is here. The fourth sentence is here. The fifth sentence is here. The sixth sentence is here. The seventh sentence is here. The eighth sentence is here. The ninth sentence is here.\", \"result\": false}"]}
{"query": "What should be the core competencies of an end-to-end software development company in the government space", "instruction": "Answer in a table with 5 rows and 5 columns", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(''in line and line.split()[0] == '' for line in lines)\n", "def evaluate(response: str) -> bool: \n    rows = 0\n    columns = 0\n    for char in response:\n        if char == '\\n':\n            rows += 1\n        elif char == '\\t':\n            columns += 1\n    return rows == 4 and columns == 4\n", "def evaluate(response: str) -> bool: \n    response_lines = response.split('\\n')\n    return len(response_lines) == 5 and all(len(line.split()) == 5 for line in response_lines)\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5 and all(len(line.split()) == 5 for line in response.split('\\n'))\n"], "testcases": ["{\"response\": \"Product | Quantity | Price | Total | Discount\\n-------------------------|----------|-------|------|------\\nItem 1 | 2 | $10.99 | $21.98 | 5%\\nItem 2 | 3 | $5.99 | $17.97 | 10%\\nItem 3 | 1 | $7.99 | $7.99 | 0%\\nItem 4 | 4 | $2.99 | $11.96 | 0%\\nItem 5 | 1 | $12.99 | $12.99 | 0%\", \"result\": true}\n{\"response\": \"Product | Quantity | Price | Total | Discount\\nItem 1 | 2 | $10.99 | $21.98 | 5%\\nItem 2 | 3 | $5.99 | $17.97 | 10%\\nItem 3 | 1 | $7.99 | $7.99 | 0%\\nItem 4 | 4 | $2.99 | $11.96 | 0%\\nItem 5 | 1 | $12.99 | $12.99 | 0%\\nItem 6 | 1 | $12.99 | $12.99 | 0%\", \"result\": false}\n{\"response\": \"Product | Quantity | Price | Total | Discount\\nProduct | Quantity | Price | Total | Discount\\nItem 1 | 2 | $10.99 | $21.98 | 5%\\nItem 2 | 3 | $5.99 | $17.97 | 10%\\nItem 3 | 1 | $7.99 | $7.99 | 0%\\nItem 4 | 4 | $2.99 | $11.96 | 0%\\nItem 5 | 1 | $12.99 | $12.99 | 0%\", \"result\": false}", "{\"response\": \"Name\\tType\\tQuantity\\tPrice\\tLocation\\nFruits\\tApples\\t5\\t$1.00\\tSupermarket\\nVegetables\\tCarrots\\t10\\t$0.50\\tGrocery Store\\nMeat\\tChicken\\t1\\t$3.00\\tButcher Shop\\nDairy\\tMilk\\t2\\t$1.50\\tDairy Store\\nBeverages\\tJuice\\t6\\t$2.00\\tConvenience Store\", \"result\": true}\n\n{\"response\": \"Here is a table with some data\\nName\\tType\\tQuantity\\tPrice\\tLocation\", \"result\": false}\n\n{\"response\": \"Name\\tType\\tQuantity\\tPrice\\tLocation\\nFruits\\tApples\\t5\\t$1.00\\tSupermarket\\nVegetables\\tCarrots\\t10\\t$0.50\\tGrocery Store\\nMeat\\tChicken\\t1\\t$3.00\\tButcher Shop\\nDairy\\tMilk\\t2\\t$1.50\\tDairy Store\\nBeverages\\tJuice\\t6\\t$2.00\\tConvenience Store\\nFruits\\tBananas\\t4\\t$0.50\\tGrocery Store\", \"result\": false}", "{\"response\": \"| Step 1 | Step 2 | Step 3 | Step 4 | Step 5 |\\n|---------|--------|--------|--------|--------|\\n| Action  | Result  | Comment| Action  | Result  |\\n|---------|--------|--------|--------|--------|\\n| Do this | Yes     | Good   | Do that| Yes     |\\n|---------|--------|--------|--------|--------|\\n| Do this | No      | Bad    | Do that| No      |\\n|---------|--------|--------|--------|--------|\\n| Do this | Yes     | Good   | Do that| Yes     |\\n|---------|--------|--------|--------|--------|\\n| Do this | No      | Bad    | Do that| No      |\", \"result\": true}\n\n{\"response\": \"This is a table with only 4 columns\", \"result\": false}\n\n{\"response\": \"This is a table with 5 rows and 6 columns\", \"result\": false}\n\n{\"response\": \"This is not a table at all\", \"result\": false}", "{\"response\": \"1 | 2 | 3 | 4 | 5\\n---------\\n6 | 7 | 8 | 9 | 10\\n---------\\n11 | 12 | 13 | 14 | 15\\n---------\\n16 | 17 | 18 | 19 | 20\\n---------\\n21 | 22 | 23 | 24 | 25\", \"result\": true}\n{\"response\": \"1 | 2 | 3 | 4 | 5\\n6 | 7 | 8 | 9 | 10\", \"result\": false}\n{\"response\": \"1 | 2 | 3 | 4 | 5\\n---------\\n6 | 7 | 8 | 9 | 10\\n---------\\n11 | 12 | 13 | 14 | 15\\n---------\\n16 | 17 | 18 | 19 | 20\\n---------\\n21 | 22 | 23 | 24 | 26\", \"result\": false}"]}
{"query": "I'm creating a new online platform for Tabletop Role-playing Games (TTRPGs). Could you help me come up with some potential names for this platform?", "instruction": "Answer in a single list of 5 items, all of which start with the letter \"P\".", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 6 and response.startswith('[[') and response.endswith(']]') and len(response[1:-1].split('],[')) == 5 and all(response[1:-1].split('],[')[i].startswith('P') for i in range(5))\n", "def evaluate(response: str) -> bool: \n    response = response.strip()\n    words = response.replace('[', '').replace(']', '').replace(\"'\", '').replace('\"', '').split()\n    if len(words) == 5:\n        for word in words:\n            if not word.startswith('P'):\n                return False\n        return True\n    return False\n", "def evaluate(response: str) -> bool: \n    items = response.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\n    return len(items) == 5 and all(item.strip().startswith(\"P\") for item in items)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    words = [word for word in words if word[0].upper() == 'P']\n    return len(words) == 5 and len(words) == len(set(words))\n"], "testcases": ["{\"response\": \"['Pizza', 'Pasta', 'Pizza', 'Pudding', 'Pineapple']\", \"result\": true}\n{\"response\": \"['Puppy', 'Parrot', 'Penguin', 'Pig']\", \"result\": false}\n{\"response\": \"['Pineapple', 'Pear', 'Peach', 'Pumpkin', 'Potato', 'Pizza']\", \"result\": false}", "{\"response\": \"Pet, Parrot, Pencil, Paper, Printer\", \"result\": true}\n{\"response\": \"I like going for a run in the morning.\", \"result\": false}\n{\"response\": \"Pick up a pen, Put it on the table, Pick it up again, Put it in your pocket, Press the pen cap\", \"result\": true}", "{\"response\": \"Place, Pick, Put, Pick, Put\", \"result\": true}\n{\"response\": \"Pick the apple\", \"result\": false}\n{\"response\": \"Put, Place, Pick, Pick, Put\", \"result\": true}", "{\"response\": \"Pepperoni Pizza Pineapple Pickles Pasta Pudding\", \"result\": true}\n{\"response\": \"Potatoes are the root vegetable of the Solanum tuberosum plant, commonly consumed in various forms around the world.\", \"result\": false}\n{\"response\": \"Pineapples Pears Papayas Pinecones Porcupines\", \"result\": false}"]}
{"query": "My ESL student is lonely. They miss their family and food. They want to integrate and enjoy their host country culture - how can I help them?", "instruction": "Write in exactly 7 lines and describe a concrete, step-by-step solution to the problem.", "verifiers": ["def evaluate(response: str) -> bool: \n    return (len(response.split('\\n')) == 7) and (len(response.replace(\"\\n\", '').split('.')) == 7) and ('step' in response.lower()) and ('1.' in response.lower()) and ('2.' in response.lower()) and ('3.' in response.lower()) and ('4.' in response.lower()) and ('5.' in response.lower()) and ('6.' in response.lower()) and ('7.' in response.lower())\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 7 and all('step' in s.lower() for s in response.split('\\n')) and 'country' in response.lower()\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7 and all(response.split('\\n')[i]!= '' for i in range(7)) and len(lines[0]) > 0 and all(len(line.split()) > 0 for line in lines)\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    return len(lines) == 7 and all(line.strip() for line in lines) and not''.join([line for line in lines if line.strip()]).endswith('.')\n"], "testcases": ["{\"response\": \"To solve this problem, you need to follow these steps.\\nStep 1: Understand the problem\\nStep 2: Identify the problem type\\nStep 3: Determine the best solution\\nStep 4: Test the solution\\nStep 5: Refine the solution\\nStep 6: Document the solution\\nStep 7: Validate the solution\", \"result\": true}\n\n{\"response\": \"To solve this problem, you need to follow these steps.\\nStep 1: Understand the problem\\nStep 2: Identify the problem type\\nStep 3: Determine the best solution\\nStep 4: Test the solution\\nStep 5: Refine the solution\\nStep 6: Document the solution\", \"result\": false}\n\n{\"response\": \"Step 1: Understand the problem.\\nStep 2: Identify the problem type.\\nStep 3: Determine the best solution.\\nStep 4: Test the solution.\\nStep 5: Refine the solution.\\nStep 6: Document the solution.\\nStep 7: Validate the solution.\\nThis is the final step\\nThe solution is complete\", \"result\": false}", "{\"response\": \"Step 1: Plan your trip to a foreign country.\nStep 2: Research the local culture and customs.\nStep 3: Learn a few basic phrases in the native language.\nStep 4: Purchase a suitable accommodation and transportation.\nStep 5: Familiarize yourself with local laws and regulations.\nStep 6: Pack essential items, including a universal power adapter.\nStep 7: Exchange some money for the local currency.\", \"result\": true}\n\n{\"response\": \"Step 1: Plan your trip to a foreign country\\nStep 2: Research the local culture and customs\\nStep 3: Learn a few basic phrases in the native language\", \"result\": false}\n\n{\"response\": \"1. Plan your trip to a foreign country.\\n2. Research the local culture and customs.\\n3. Learn a few basic phrases in the native language.\\n4. Purchase a suitable accommodation and transportation.\\n5. Familiarize yourself with local laws and regulations.\\n6. Pack essential items, including a universal power adapter.\\n7. Exchange some money for the local currency.\\n8. Enjoy your trip and stay safe!\", \"result\": false}", "{\"response\": \"Step 1: Pick up the bowl.\\nStep 2: Hold the bowl with one hand.\\nStep 3: Move towards the worktop.\\nStep 4: Place the bowl on the worktop.\\nStep 5: Check if the apples have fallen out.\\nStep 6: Pick up the apples.\\nStep 7: Enjoy your apples.\", \"result\": true}\n\n{\"response\": \"Pick up the bowl and place it on the worktop.\\nThe apples should now be on the worktop.\", \"result\": false}\n\n{\"response\": \"Step 1: Pick up the bowl\\nStep 2: Move to the worktop\\nStep 3: Hold the bowl with one hand\\nStep 4: Move the bowl towards the worktop\\nStep 5: Place the bowl on the worktop\\nStep 6: Pick up the apples\\nStep 7: Enjoy your apples\\nStep 8: Do something else\", \"result\": false}", "{\"response\": \"1. Open the window.\\n2. Check the weather.\\n3. Find a way to open the door.\\n4. Open the door.\\n5. Take the item outside.\\n6. Go back inside.\\n7. Close the door.\", \"result\": true}\n{\"response\": \"1. Open the window.\\n2. Check the weather.\\n3. Find a way to open the door.\\n4. Open the door.\\n5. Take the item outside.\\nGo back inside.\\nClose the door.\", \"result\": false}\n{\"response\": \"1. Open the window.\\n2. Check the weather.\\n3. Find a way to open the door.\\n4. Open the door.\\n5. Take the item outside.\\n6. Go back inside.\\n7. Close the door.\\n8. Enjoy the fresh air.\", \"result\": false}"]}
{"query": "suppose you are a professor of Distributed Systems subject. I'll ask you some questions as a student", "instruction": "Respond to questions in the format \"Question: Answer\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(':') == 1 and 'Question:'in response and 'Answer' in response\n", "def evaluate(response: str) -> bool: \n    parts = response.split(\": \")\n    return len(parts) == 2 and parts[0].endswith(\"?\")<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return len(response.split(':')) == 2 and all(char.isalnum() or char.isspace() for char in response.replace(':',''))<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 2 and words[0].endswith(\":\")\n"], "testcases": ["{\"response\": \"Question: You need to follow these steps. Step 1: Open the door. Step 2: Go inside. Step 3: Lock the door. Step 4: Wait for the signal. Step 5: Leave the room. Step 6: Close the door. Step 7: Check the result.\", \"result\": true}\n{\"response\": \"Open the door. Go inside. Lock the door. Wait for the signal. Leave the room. Close the door. Check the result.\", \"result\": false}\n{\"response\": \"Question: You need to follow these steps. Step 1: Open the door. Step 2: Go inside. Step 3: Lock the door. Step 4: Wait for the signal. Step 5: Leave the room. Step 6: Close the door. Step 7: Check the result. It was a success.\", \"result\": false}", "{\"response\": \"What is the capital of France? Paris.\", \"result\": true}\n{\"response\": \"How old are you? I am 25 years old\", \"result\": false}\n{\"response\": \"What is your name? My name is John.\", \"result\": true}", "{\"response\": \"What is the capital of France?: Paris.\", \"result\": true}\n{\"response\": \"What is the largest planet in our solar system?\", \"result\": false}\n{\"response\": \"What is the chemical symbol for gold?: Au.\", \"result\": true}", "{\"response\": \"What is the capital of France? Paris.\", \"result\": true}\n{\"response\": \"This is a message without a question.\", \"result\": false}\n{\"response\": \"What is the capital of Italy? Rome.\", \"result\": true}"]}
{"query": "I already have a thesis statementShare Prompt", "instruction": "Express it in exactly 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n"], "testcases": ["{\"response\": \"The solution is a 7-step process. First, identify the problem. Then, gather information. Next, analyze the data. After that, develop a plan. After developing a plan, implement the plan. Finally, evaluate the outcome.\", \"result\": true}\n{\"response\": \"The solution is to gather information and identify the problem.\", \"result\": false}\n{\"response\": \"The solution is a 7-step process. First, identify the problem. Then, gather information. Next, analyze the data. After that, develop a plan. After developing a plan, implement the plan. Finally, evaluate the outcome. And also, consider the context.\", \"result\": false}", "{\"response\": \"The solution involves breaking down the problem into smaller steps and addressing each step individually. First, identify the main task and then break it down into smaller subtasks. Next, prioritize the subtasks and allocate time for each task. Finally, review and revise the plan as needed to ensure it is feasible.\", \"result\": true}\n{\"response\": \"The solution to this problem is to break it down into smaller tasks. The first task is to identify the main issue. Next, we need to gather relevant data. After that, we need to analyze the data. Finally, we need to implement the solution.\", \"result\": false}\n{\"response\": \"The solution to this problem is very complex and requires a lot of time and effort. It involves several steps including identifying the main issue, gathering data, analyzing the data, and implementing the solution. The key to success is to stay focused and motivated throughout the process.\", \"result\": false}", "{\"response\": \"This is a test response with 50 words. It is a sample response that should be evaluated. It is a long sentence with many words to test the evaluation function.\", \"result\": true}\n{\"response\": \"This is a test response with 20 words. It is a short sentence with fewer words to test the evaluation function.\", \"result\": false}\n{\"response\": \"This is a test response with 75 words. It is a very long sentence with many more words than required to test the evaluation function.\", \"result\": false}", "{\"response\": \"There are multiple solutions to this problem. Here is one solution: Step 1: do this. Step 2: do that. Step 3: do another thing. Step 4: do another task. Step 5: complete the problem. Step 6: check your work. Step 7: verify your answer. Step 8: be proud of yourself. Step 9: repeat as necessary. Step 10: be done.\", \"result\": false}\n{\"response\": \"This solution is too short: do this. Then do that. Done.\", \"result\": false}\n{\"response\": \"This solution is too long. Here is one solution: Step 1: do this. Step 2: do that. Step 3: do another thing. Step 4: do another task. Step 5: complete the problem. Step 6: check your work. Step 7: verify your answer. Step 8: be proud of yourself. Step 9: repeat as necessary. Step 10: be done. And here are some extra details just to make sure the solution meets the 50 word requirement. It has to be a bit tedious.\", \"result\": true}"]}
{"query": "can I adjust the widgets layout in the wp-admin", "instruction": "answer in 8 bullet points, no explanation", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 8 and '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n') or [response]) <= 8\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 == 8 and '*' not in response\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 8\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\u2022 Item 9\", \"result\": false}", "{\"response\": \"\u2022 Step 1: Wash your hands \u2022 Step 2: Dry your hands \u2022 Step 3: Apply hand sanitizer \u2022 Step 4: Avoid touching your face \u2022 Step 5: Use a mask \u2022 Step 6: Maintain social distance \u2022 Step 7: Get vaccinated \u2022 Step 8: Stay home if sick\", \"result\": true}\n{\"response\": \"\u2022 Step 1: Wash your hands \u2022 Step 2: Dry your hands \u2022 Step 3: Apply hand sanitizer \u2022 Step 4: Avoid touching your face \u2022 Step 5: Use a mask \u2022 Step 6: Maintain social distance \u2022 Step 7: Get vaccinated \u2022 Step 8: Stay home if sick \u2022 Be safe\", \"result\": false}\n{\"response\": \"\u2022 Take the stairs\", \"result\": false}", "{\"response\": \"\u2022 This is a test case 1.\\n\u2022 This is a test case 2.\\n\u2022 This is a test case 3.\\n\u2022 This is a test case 4.\\n\u2022 This is a test case 5.\\n\u2022 This is a test case 6.\\n\u2022 This is a test case 7.\\n\u2022 This is a test case 8.\", \"result\": true}\n{\"response\": \"\u2022 This is a test case 1.\\n\u2022 This is a test case 2.\\n\u2022 This is a test case 3.\\n\u2022 This is a test case 4.\\n\u2022 This is a test case 5.\\n\u2022 This is a test case 6.\\n\u2022 This is a test case 7.\\n\", \"result\": false}\n{\"response\": \"\u2022 This is a test case 1.\\n\u2022 This is a test case 2.\\n\u2022 This is a test case 3.\\n\u2022 This is a test case 4.\\n\u2022 This is a test case 5.\\n\u2022 This is a test case 6.\\n\u2022 This is a test case 7.\\n\u2022 This is a test case 8.\\n\u2022 This is a test case 9.\", \"result\": false}", "{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5 \u2022 Point 6 \u2022 Point 7 \u2022 Point 8\", \"result\": true}\n{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5\", \"result\": false}\n{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5 \u2022 Point 6 \u2022 Point 7 \u2022 Point 8 \u2022 Point 9\", \"result\": false}"]}
{"query": "Write a story that can happen to a cute rabbit in the forest in the style of Aesop's Fables in 1000 words or less.\nAnswer in English.\uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Use no more than 20 sentences and include only words that start with the letter \"S\".", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 20 and all(word[0].upper() == 'S' for word in response.split())\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('.', '').split('!')\n    return len(sentences) <= 20 and all(char.upper() == 'S' for char in response if char.isalpha())\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) <= 20 and all(word[0].upper() == 'S' for word in response.split())\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 20 and all(word[0].lower() =='s' for word in response.split())\n"], "testcases": ["{\"response\": \"Slowly start shining sunshine sparkling stars.\", \"result\": false}\n{\"response\": \"Sophisticated systems synchronize silver spheres spinning slowly.\", \"result\": true}\n{\"response\": \"Super sophisticated silver spheres synchronize slowly shining stars.\", \"result\": false}", "{\"response\": \"Sun shines brightly in summer sky. Sweet songs sing sweetly.\", \"result\": true}\n{\"response\": \"The world is full of wonderful things to see. Unfortunately, some of them are not available to me.\", \"result\": false}\n{\"response\": \"Sunflowers stand tall in the field. Softly swaying in the breeze.\", \"result\": true}", "{\"response\": \"Simple solutions are sometimes the best solutions. Sometimes small successes can lead to bigger success.\", \"result\": true}\n{\"response\": \"The company sells sweet strawberries. They are a specialty of the store.\", \"result\": false}\n{\"response\": \"Speed, sophistication, and simplicity are the key ingredients of this recipe.\", \"result\": true}", "{\"response\": \"She sells seashells by the seashore. She says she's serene. Sunflowers are stunning. Sweet songs sung.\", \"result\": true}\n{\"response\": \"He is a nice person. He eats pizza. The weather is sunny today.\", \"result\": false}\n{\"response\": \"Sophisticated serpents slither silently. Sleek spiders sense sweet sounds. Strange situations surround successful souls.\", \"result\": true}"]}
{"query": "Distinguish between Analytical, Descriptive and Comparative research with examples", "instruction": "Use no more than 4 sentences and 30 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 30 >= len(response.split('.')) >= 4 and len(response) <= 30\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 4 and len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 4 and len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) <= 4 and len(response.split()) <= 30\n"], "testcases": ["{\"response\": \"Sunshine sparkles in the sky, smiling at sunny spots, sending showers of silver sand. Softly shifting seas surround silky shores. Slowly swallowing sunshine, sandy scenes surrender to soothing silence. Sweet serenity soon succeeds.\", \"result\": true}\n{\"response\": \"Sunshine sparkles in the sky, smiling at sunny spots, sending showers of silver sand. Softly shifting seas surround silky shores. Slowly swallowing sunshine, sandy scenes surrender to soothing silence. Sweet serenity soon succeeds. Summer sunsets slowly sink to sleep. Soft whispers surround sandy shores. Shining stars shine brightly tonight. Sleepy sailors sail to safety.\", \"result\": false}\n{\"response\": \"Sunshine sparkles in the sky, smiling at sunny spots, sending showers of silver sand. Softly shifting seas surround silky shores. Slowly swallowing sunshine, sandy scenes surrender to soothing silence.\", \"result\": true}", "{\"response\": \"Sun shines brightly. Sun's rays warm the skin.\", \"result\": true}\n{\"response\": \"The sun is a huge ball of hot, glowing gas. It's a star in our solar system.\", \"result\": false}\n{\"response\": \"Sunflowers stand tall in the field. They bloom with beautiful yellow petals.\", \"result\": false}", "{\"response\": \"This solution is simple and suitable for students. Students should follow these steps carefully. Students will achieve success.\", \"result\": true}\n{\"response\": \"This solution is simple and suitable for students. Students should follow these steps carefully. Students will achieve success. Students will be happy. Students will learn quickly.\", \"result\": false}\n{\"response\": \"This solution is simple. Students should follow these steps.\", \"result\": true}", "{\"response\": \"The sky is blue. The sun is shining.\", \"result\": true}\n{\"response\": \"The sky is blue and the sun is shining in the sky.\", \"result\": false}\n{\"response\": \"The sky is blue, the sun is shining, the birds are singing.\", \"result\": false}"]}
{"query": "There is a bowl containing 3 apples on a table I pick up the bowl and put it on the worktop. Where are the apples now?", "instruction": "Answer in exactly 4 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n"], "testcases": ["{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\", \"result\": true}\n{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\", \"result\": false}\n{\"response\": \"This is line 1.\\nThis is line 2.\\nThis is line 3\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"result\": false}", "{\"response\": \"Hello\\nWorld\\nThis is a test\\nEvaluating the instruction\", \"result\": true}\n{\"response\": \"Hello\\nWorld\\nThis is a test\", \"result\": false}\n{\"response\": \"Hello\\nWorld\\nThis is a test\\nEvaluating the instruction\\nIt is working\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\", \"result\": false}"]}
{"query": "Script 21:\nDiscover the hidden truth behind your prostate problems and how to reclaim your life!\n\nLeading scientists have made a game", "instruction": "Write the response in exactly 5 steps and no more.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n", "def evaluate(response: str) -> bool: \n    return'steps' in response and response.count('steps') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5\n", "def evaluate(response: str) -> bool: \n    return'steps' in response and 'and' in response and response.count('steps') == 5 and response.count('and') == 1\n"], "testcases": ["{\"response\": \"Step 1. Plan the trip. Step 2. Book the flight. Step 3. Pack the bag. Step 4. Check in online. Step 5. Arrive at the airport.\", \"result\": true}\n{\"response\": \"Step 1. Plan the trip. Step 2. Book the flight. Step 3. Pack the bag. Step 4. Check in online. Step 5. Arrive at the airport. Step 6. Relax on the beach.\", \"result\": false}\n{\"response\": \"Buy the ticket\", \"result\": false}", "{\"response\": \"Received. 1. Ask for clarification. 2. Send help. 3. Review documentation. 4. Call the IT department. 5. Seek professional assistance.\", \"result\": true}\n{\"response\": \"This is a test response with multiple lines of information. The correct format should be followed exactly.\", \"result\": false}\n{\"response\": \"Received. 1. Check the manual. 2. Look for the solution online. 3. Consult with a colleague. 4. Visit the manufacturer's website. 5. Call the support hotline. 6. Go to the next step.\", \"result\": false}", "{\"response\": \"First step. Second step. Third step. Fourth step. Fifth step. Sixth step. Seventh step. Final step.\", \"result\": false}\n{\"response\": \"This is the first step. This is the second step.\", \"result\": true}\n{\"response\": \"Start by doing step 1. Then do step 2, followed by step 3, then step 4, then step 5.\", \"result\": true}", "{\"response\": \"The steps are: step 1, step 2, step 3, step 4, step 5\", \"result\": true}\n{\"response\": \"The steps are: step 1, step 2, step 3, step 4, step 5, step 6\", \"result\": false}\n{\"response\": \"The steps are: step 1, step 2\", \"result\": false}"]}
{"query": "How long time does it take to perform a multiply and add operation for floating points on a nrf52840?", "instruction": "Use a standard math formula and explain each step with an example", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) >= 2 and words[-2] =='math' and words[-1] == 'formula':\n        return True\n    for i, word in enumerate(words):\n        if word.lower() == 'example':\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    keywords = ['standard','math', 'formula', 'explain', 'each','step', 'with', 'example']\n    return all(keyword in response for keyword in keywords)\n", "def evaluate(response: str) -> bool: \n    return \"formula\" in response.lower() and \"example\" in response.lower() \n", "def evaluate(response: str) -> bool: \n    keywords = ['standard','math', 'formula', 'example']\n    for keyword in keywords:\n        if keyword not in response.lower():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The formula is F = m * c * t. 1. First, we need to know the mass of the object in kg. For example, the mass of a car is typically around 1500 kg.\", \"result\": true}\n{\"response\": \"To calculate the area of a rectangle, you can use the formula A = l * w. However, I am not sure how to calculate the perimeter.\", \"result\": false}\n{\"response\": \"For a simple interest formula, we use I = P * r * t. 1. First, we need to know the principal amount. For example, if you deposit $1000 in a savings account with a 5% interest rate, the principal amount is $1000. 2. Then we need to know the interest rate in decimal form. 3. Next, we need to know the time in years. 4. Finally, we multiply the principal amount by the interest rate and the time, and the result is the interest. For example, $1000 * 0.05 * 1 = $50.\", \"result\": true}", "{\"response\": \"To calculate the area of a rectangle, A = L * W, where L is the length and W is the width.\", \"result\": true}\n{\"response\": \"Use the quadratic formula: x = (-b \u00b1 \u221a(b\u00b2 - 4ac)) / 2a. Plug in the values to find the solution.\", \"result\": false}\n{\"response\": \"To solve a system of linear equations, you can use either substitution or elimination method. For example, 2x + 3y = 7 and x - 2y = -3.\", \"result\": true}", "{\"response\": \"The formula for the area of a circle is r^2\u03c0. Here's an example of how to use it: if the radius is 5, then the area is 25\u03c0.\", \"result\": true}\n{\"response\": \"The area of a circle is r^2. Here's an example of how to use it: if the radius is 5, then the area is 25.\", \"result\": false}\n{\"response\": \"The formula for the area of a circle is A = \u03c0r^2. To use it, simply square the radius and multiply by \u03c0.\", \"result\": false}", "{\"response\": \"Let's use the formula for simple interest: I = P * r * t. To calculate the interest earned on a $100 deposit at a 5% annual interest rate for 2 years, multiply $100 by 0.05 by 2.\", \"result\": true}\n{\"response\": \"To find the perimeter of a rectangle, use the formula P = 2L + 2W. Unfortunately, I don't have an example for this formula.\", \"result\": false}\n{\"response\": \"The formula to calculate the area of a circle is A = \u03c0r^2. Let's consider a circle with a radius of 4 cm: A = \u03c0 * (4)^2.\", \"result\": true}"]}
{"query": "I want people to sign up for a free webinar with a title: Principles of success. Give me a hook for that.", "instruction": "Use a combination of numbers and punctuation (e.g., 3!,!!,?)", "verifiers": ["def evaluate(response: str) -> bool: \n    has_number = any(char.isdigit() for char in response) \n    has_punctuation = any(not char.isalnum() and not char.isspace() for char in response) \n    return has_number and has_punctuation\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.isnumeric() or char in ['!', '?', ',', '.', ';', ':', '-', '*', '#']:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if (char.isnumeric() or char in ['!', '?', '.', ',', ';', ':', \"'\"]):\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if char.isdigit() or not char.isalnum() and not char.isspace():\n            return True\n    return False\n"], "testcases": ["{\"response\": \"I am 32 years old. I have lived in three cities.\", \"result\": true}\n{\"response\": \"I like cats and dogs.\", \"result\": false}\n{\"response\": \"I have $500 in my bank account. I also have 4 credit cards.\", \"result\": true}", "{\"response\": \"Use 2! and a comma for clarity.\", \"result\": true}\n{\"response\": \"This response does not contain any numbers or punctuation.\", \"result\": false}\n{\"response\": \"Use 5!*? for a dramatic effect.\", \"result\": true}", "{\"response\": \"The formula is: f(x) = 2x + 1, where x is an integer.!\", \"result\": true}\n{\"response\": \"The answer is 5., and it's correct.\", \"result\": true}\n{\"response\": \"To find the area of a circle, we use the formula A = \u03c0r^2, where r is the radius of the circle.\", \"result\": false}", "{\"response\": \"The average salary is $50,000,!!.\", \"result\": true}\n{\"response\": \"I love this new coffee shop on 5th street.\", \"result\": false}\n{\"response\": \"The temperature will be around 28\u00b0C today?!.\", \"result\": true}"]}
{"query": "top female entertainers by following", "instruction": "List in order of ascending ranking", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'order' in response.lower() and 'ascending' in response.lower() and 'ranking' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'in order of ascending ranking' in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'ascending' in response and 'order' in response and 'ranking' in response and 'List' in response", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return 'order' in words and 'ascending' in words and 'ranking' in words and 'of' in words\n"], "testcases": ["{\"response\": \"The top 5 movies are: 1. The Shawshank Redemption, 2. The Godfather, 3. The Dark Knight, 4. 12 Angry Men, 5. Schindler's List\", \"result\": true}\n{\"response\": \"The top 3 movies are: 1. The Shawshank Redemption, 2. The Godfather, 3. The Dark Knight\", \"result\": true}\n{\"response\": \"The top 10 movies are: 1. The Shawshank Redemption, 2. The Godfather, 3. The Dark Knight, 4. 12 Angry Men, 5. Schindler's List, 6. The Lord of the Rings, 7. Pulp Fiction, 8. The Good, the Bad and the Ugly, 9. Forrest Gump, 10. Inception\", \"result\": true}", "{\"response\": \"The rankings are 1st, 2nd, 3rd, and 4th.\", \"result\": true}\n{\"response\": \"The winner is 2. The runner up is 5.\", \"result\": false}\n{\"response\": \"1st place is A, 2nd place is B, 3rd place is C, and 4th place is D, 5th place is E.\", \"result\": true}", "{\"response\": \"The list in order of ascending ranking is: 1. Apple, 2. Banana, 3. Cherry, 4. Date, 5. Elderberry\", \"result\": true}\n{\"response\": \"The list in order of descending ranking is: 1. Apple, 2. Banana, 3. Cherry, 4. Date, 5. Elderberry\", \"result\": false}\n{\"response\": \"No list is provided.\", \"result\": false}", "{\"response\": \"Rank 1: Item A. Rank 2: Item B. Rank 3: Item C. Rank 4: Item D. Rank 5: Item E.\", \"result\": true}\n{\"response\": \"Rank 1: Item A. Rank 2: Item B. Rank 3: Item C.\", \"result\": false}\n{\"response\": \"Rank 6: Item A. Rank 7: Item B. Rank 8: Item C. Rank 9: Item D. Rank 10: Item E. Rank 11: Item F. Rank 12: Item G.\", \"result\": false}"]}
{"query": "please propose 10 alternative and striking titles to \"Not all essential genes are equally essential\"", "instruction": "the titles must be exactly 6 words long, written in sentence case.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 6 and response == response.title()\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 6 and words[0].istitle() and all(word.lower() == word for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 6 and words == [word.capitalize() for word in words]\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10 and all(word.istitle() for word in words)\n"], "testcases": ["{\"response\": \"This Is A Test Sentence With Title\", \"result\": true}\n{\"response\": \"I Have More Than 6 Words In Title\", \"result\": false}\n{\"response\": \"I Have Only 5 Words In Title\", \"result\": false}", "{\"response\": \"This Is A Very Interesting Article Title\", \"result\": true}\n{\"response\": \"THIS IS A VERY SHORT TITLE\", \"result\": false}\n{\"response\": \"this is a very long title that is not exactly 6 words long\", \"result\": false}", "{\"response\": \"This is a Test Case Example\", \"result\": true}\n{\"response\": \"The response should not pass validation\", \"result\": false}\n{\"response\": \"Another example with six words in sentence case\", \"result\": true}", "{\"response\": \"The capital of France is a city.\", \"result\": false}\n{\"response\": \"The President of the United States is a role.\", \"result\": true}\n{\"response\": \"The company has many employees and managers daily.\", \"result\": false}"]}
{"query": "What is 99 bottles of OOP?", "instruction": "Answer in exactly 10 lines with no sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10 and not any(sentence for sentence in lines if sentence)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10 and all(not line.strip() for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10 and all(not line.startswith('.') and not line.startswith('?') for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10 and all(not line.strip().endswith('.') for line in lines)\n"], "testcases": ["{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\\nline 7\\nline 8\\nline 9\\nline 10\", \"result\": true}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\", \"result\": false}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\\nline 7\\nline 8\\nline 9\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\n\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\n\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\n\", \"result\": false}", "{\"response\": \"1. This is a test.\n2. It has 10 lines.\n3. But no sentences.\n4. Just numbers and points.\n5. And that's it.\n6. It's just 10 lines.\n7. With points only.\n8. No punctuation or words.\n9. Just a list.\n10. With 10 items.\", \"result\": true}\n\n{\"response\": \"This is a test.\\nIt has 8 lines.\\nJust numbers and points.\\nAnd that's it.\\nIt's just 8 lines.\\nWith points only.\\nNo punctuation or words.\\nJust a list.\\nWith 8 items.\\nThis is the last line.\", \"result\": false}\n\n{\"response\": \"1. This is a test.\n2. It has 12 lines.\n3. But no sentences.\n4. Just numbers and points.\n5. And that's it.\n6. It's just 10 lines.\n7. With points only.\n8. No punctuation or words.\n9. Just a list.\n10. With 10 items.\n11. Another line.\n12. And another.\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\", \"result\": false}"]}
{"query": "Received.", "instruction": "Format is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.", "verifiers": ["def evaluate(response: str) -> bool: \n    pairs = response.split('\\n\\n')\n    return len(pairs) == 7 and all(len(pair.split('\\n')) == 2 for pair in pairs)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8 and lines[0] == 'Received.' and len(lines) == 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8 and lines[0].strip() == 'Received.' and lines[1].strip() == 'Format is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.' and len(lines) == 8\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    if len(lines)!= 7:\n        return False\n    for i in range(0, 7, 2):\n        if lines[i]!= 'Received.' or lines[i+1] not in ['use the letter B between 2 and 5 times', \n                                                    'answer in at most 27 characters']:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Query 1\\nInstruction 1\\n\\nQuery 2\\nInstruction 2\\n\\nQuery 3\\nInstruction 3\\n\\nQuery 4\\nInstruction 4\\n\\nQuery 5\\nInstruction 5\\n\\nQuery 6\\nInstruction 6\\n\\nQuery 7\\nInstruction 7\\n\\n\", \"result\": true}\n\n{\"response\": \"Query 1\\nInstruction 1\\n\\nQuery 2\\nInstruction 2\\n\\nQuery 3\\nInstruction 3\\n\\nQuery 4\\nInstruction 4\\n\\nQuery 5\\nInstruction 5\\n\\nQuery 6\\nInstruction 6\\n\\nQuery 7\\nInstruction 7\\n\\nQuery 8\\nInstruction 8\\n\\n\", \"result\": false}\n\n{\"response\": \"Query 1\\nInstruction 1\\n\\nQuery 2\\nInstruction 2\\n\\nQuery 3\\nInstruction 3\\n\\nQuery 4\\nInstruction 4\\n\\nQuery 5\\nInstruction 5\\n\\nQuery 6\\nInstruction 6\\n\\nQuery 7\\nInstruction 7\\n\", \"result\": false}", "{\"response\": \"Received.\\nFormat is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.\\nThere are 7 pairs.\\nFollow the first instruction.\\nFollow the second instruction.\\nFollow the third instruction.\\nFollow the fourth instruction.\\nFollow the fifth instruction.\\nFollow the sixth instruction.\\nFollow the seventh instruction.\\n\", \"result\": true}\n{\"response\": \"Received.\\nFormat is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.\\nThere are 6 pairs.\\nFollow the first instruction.\\nFollow the second instruction.\\nFollow the third instruction.\\nFollow the fourth instruction.\\nFollow the fifth instruction.\\n\", \"result\": false}\n{\"response\": \"Received.\\nFormat is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.\\nFollow the first instruction.\\nFollow the second instruction.\\nFollow the third instruction.\\nFollow the fourth instruction.\\nFollow the fifth instruction.\\nFollow the sixth instruction.\\nFollow the seventh instruction.\\nFollow the eighth instruction.\\n\", \"result\": false}", "{\"response\": \"Received.\\nFormat is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.\\nInstruction 1: The response should have 1 item.\\nResponse 1: a\\nInstruction 2: The response should contain exactly 5 occurrences of a.\\nResponse 2: aaaqaqq\\nInstruction 3: The response should have 4 items.\\nResponse 3: foo bar baz qux\\nInstruction 4: The response should contain the letter b between 2 and 5 times.\\nResponse 4: xbbxbx\\nInstruction 5: Use a standard math formula and explain each step with an example.\\nResponse 5: 2+2=4\\nInstruction 6: The response should contain the words ascending and order and ranking.\\nResponse 6: The list should be in order of ascending ranking.\\nInstruction 7: List in order of ascending ranking.\\nResponse 7: foo\\n\", \"result\": true}\n{\"response\": \"Received.\\nFormat is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.\\nInstruction 1: The response should have 1 item.\\nResponse 1: a\\nInstruction 2: The response should contain exactly 5 occurrences of a.\\nResponse 2: aaqaqq\\nInstruction 3: The response should have 4 items.\\nResponse 3: foo bar baz qux\\nInstruction 4: The response should contain the letter b between 2 and 5 times.\\nResponse 4: xbbx\\nInstruction 5: Use a combination of numbers and punctuation (e.g., 3!,!!,?).\\nResponse 5:!\\nInstruction 6: The response should contain the words ascending and order and ranking.\\nResponse 6: The list should be in order of descending ranking.\\nInstruction 7: List in order of ascending ranking.\\nResponse 7: foo\\n\", \"result\": false}\n{\"response\": \"Received.\\nFormat is 1 line per item, first item is query, second is instruction. Each instruction should be followed exactly, and there should be a total of 7 pairs.\\nInstruction 1: The response should have 1 item.\\nResponse 1: a\\nInstruction 2: The response should contain exactly 5 occurrences of a.\\nResponse 2: aaaaaa\\nInstruction 3: The response should have 4 items.\\nResponse 3: foo bar baz qux\\nInstruction 4: The response should contain the letter b between 2 and 5 times.\\nResponse 4: xbbx\\nInstruction 5: Use a combination of numbers and punctuation (e.g., 3!,!!,?).\\nResponse 5:!\\nInstruction 6: The response should contain the words ascending and order and ranking.\\nResponse 6: The list should be in order of ascending ranking.\\nInstruction 7: List in order of ascending ranking.\\nResponse 7: foo bar baz\\n\", \"result\": false}", "{\"response\": \"Received.\\nuse the letter B between 2 and 5 times\\nReceived.\\nanswer in at most 27 characters\\nReceived.\\nUse a standard math formula and explain each step with an example\\nReceived.\\nList in order of ascending ranking\\nReceived.\\nthe titles must be exactly 6 words long, written in sentence case\\nReceived.\\nAnswer in exactly 10 lines with no sentences\", \"result\": true}\n\n{\"response\": \"Received.\\nanswer in at most 27 characters\\nReceived.\\nUse a standard math formula and explain each step with an example\\nReceived.\\nthe titles must be exactly 6 words long, written in sentence case\\nReceived.\\nAnswer in exactly 10 lines with no sentences\\nReceived.\\nList in order of ascending ranking\\nReceived.\\nthe titles must be exactly 3 words long, written in sentence case\\nReceived.\\nuse the letter B between 2 and 5 times\", \"result\": false}\n\n{\"response\": \"Received.\\nuse the letter B between 2 and 5 times\\nReceived.\\nanswer in at most 27 characters\\nReceived.\\nUse a standard math formula and explain each step with an example\\nReceived.\\nthe titles must be exactly 6 words long, written in sentence case\\nReceived.\\nAnswer in exactly 10 lines with no sentences\\nReceived.\\nList in order of ascending ranking\\nReceived.\\nList in order of descending ranking\\nReceived.\\nthe titles must be exactly 3 words long, written in sentence case\", \"result\": false}"]}
