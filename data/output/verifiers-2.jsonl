{"query": "what features are abstracted away in rust when compared to cCopy to Clipboard", "instruction": "limit answer to 2 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 2\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 2\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 2\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 2\n"], "testcases": ["{\"response\": \"The capital of France is Paris.\\nThe official language of France is French.\", \"result\": true}\n{\"response\": \"What is the average global temperature? The answer is that the average global temperature varies over time.\", \"result\": false}\n{\"response\": \"It is sunny in Sydney, Australia.\\nIt is hot in Sydney, Australia in the summer.\", \"result\": true}", "{\"response\": \"What is your name? My name is John.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\", \"result\": true}\n{\"response\": \"This is the first line. This is the second line. The answer is yes.\", \"result\": false}", "{\"response\": \"The sky is blue.\\nThe sun is shining.\", \"result\": true}\n{\"response\": \"This is a long response that does not fit the instruction\", \"result\": false}\n{\"response\": \"It is sunny outside\\nAnd very beautiful\", \"result\": true}", "{\"response\": \"This is line 1\\nThis is line 2\", \"result\": true}\n{\"response\": \"This is line 1\\nThis is line 2\\nThis is line 3\", \"result\": false}\n{\"response\": \"This is a single line of text.\", \"result\": false}"]}
{"query": "if i have a fixed position div at the top my html document, will an intersection observer on a container below register an intersection with a default container below?", "instruction": "use an example from real life to illustrate the concept", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'illustrate' in response and 'example' in response and 'from' in response and'real' in response and 'life' in response\n", "def evaluate(response: str) -> bool: \n    return'real life' in response and 'example' in response\n", "def evaluate(response: str) -> bool: \n    return 'example' in response and'real life' in response\n", "def evaluate(response: str) -> bool: \n    return 'example' in response and'real life' in response\n"], "testcases": ["{\"response\": \"A traffic light is an example from real life that illustrates the concept of sequencing.\", \"result\": true}\n{\"response\": \"This is a simple equation: 2+2 = 4.\", \"result\": false}\n{\"response\": \"The process of photosynthesis is an example from real life that illustrates the concept of how plants grow.\", \"result\": true}", "{\"response\": \"For example, consider a driver who ignores a red light. This can lead to a traffic accident, resulting in injuries and damage to vehicles.\", \"result\": true}\n{\"response\": \"A traffic light is a common traffic control device.\", \"result\": false}\n{\"response\": \"Imagine you are a doctor who has to make a life or death decision in the operating room. This is a classic example of a high-pressure situation.\", \"result\": true}", "{\"response\": \"When riding a bike, you need to pedal to generate power.\", \"result\": true}\n{\"response\": \"A bicycle has two wheels.\", \"result\": false}\n{\"response\": \"Cars use gasoline for fuel, while bicycles use pedaling to move.\", \"result\": true}", "{\"response\": \"Imagine a scenario where a doctor prescribes a patient with diabetes to take insulin to regulate their blood sugar levels.\", \"result\": true}\n{\"response\": \"This is a theoretical concept and has no practical application in real life.\", \"result\": false}\n{\"response\": \"The use of virtual reality technology in medical training is an example of how technology can be used to improve real-life outcomes.\", \"result\": true}"]}
{"query": "What are the USP for a saas survey tool", "instruction": "Use only words that start with the last letter of the previous word.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(1, len(words)):\n        if words[i-1][-1].upper()!= words[i][0].upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    previous_word = None\n    for word in response.split():\n        if not word: \n            continue\n        if previous_word and word[0].upper()!= previous_word[-1].upper():\n            return False\n        previous_word = word\n    return True\n", "def evaluate(response: str) -> bool: \n    previous_word = None\n    for i in range(len(response.split())):\n        word = response.split()[i]\n        if i > 0:\n            if not word[0].upper() == previous_word[-1].upper():\n                return False\n        previous_word = word\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(1, len(words)):\n        if words[i-1][-1]!= words[i][0]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Elegant elephants eagerly eat eggs.\", \"result\": true}\n{\"response\": \"Happy hippos hate eating ham.\", \"result\": true}\n{\"response\": \"Elephants eat hamburgers.\", \"result\": false}", "{\"response\": \"The cat sat on the mat, and the rat sat on the hat.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The eagle is flying high in the sky, and the yoke is lifting the high kite.\", \"result\": true}", "{\"response\": \"Ape Bears Cool Danger Energetic\", \"result\": true}\n{\"response\": \"A nice Apple Banana Carrot\", \"result\": false}\n{\"response\": \"Able Bold Cat Dolphin\", \"result\": false}", "{\"response\": \"Ape Bears Consume Deliciously\", \"result\": true}\n{\"response\": \"Apple Ball Cat Dog\", \"result\": true}\n{\"response\": \"Hello Universe\", \"result\": false}"]}
{"query": "Wish Merry Christmas and Happy New Year to a software engineer", "instruction": "Use the first 26 letters of the alphabet only and do not repeat any word", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.lower()\n    return all(char.isalpha() and 'a' <= char <= 'z' and response.count(char) == response.count(char, char, 1) for char in response)\n", "def evaluate(response: str) -> bool: \n    allowed_chars = 'abcdefghijklmnopqrstuvwxyz'\n    allowed_words = set()\n    for word in response.split():\n        for char in word.lower():\n            if char not in allowed_chars:\n                return False\n        if word in allowed_words:\n            return False\n        allowed_words.add(word)\n    return True\n", "def evaluate(response: str) -> bool: \n    used_letters = set()\n    for char in response:\n        if char.isalpha() and char.upper() not in used_letters and char.upper() not in 'XYZ':\n            used_letters.add(char.upper())\n        elif char.isalpha() and char.upper() in used_letters and char.upper() not in 'XYZ':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.replace('-','')\n    words = response.split()\n    first_letters = set()\n    for word in words:\n        first_letter = word[0].upper()\n        if not first_letter.isalpha():\n            return False\n        if first_letter not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' or first_letter in first_letters:\n            return False\n        first_letters.add(first_letter)\n    return True\n"], "testcases": ["{\"response\": \"alpha bravo charlie delta echo\", \"result\": true}\n{\"response\": \"alpha bravo charlie delta echo bravo\", \"result\": false}\n{\"response\": \"alpha charlie delta echo\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"Pack my box with five dozen liquor jugs.\", \"result\": false}\n{\"response\": \"Bright vixens jump; dozy fowl quack.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"Pack my box with five dozen liquor jugs.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"A bright eagle flying high and happy.\", \"result\": true}\n{\"response\": \"The clever dogs chase eager foxes.\", \"result\": false}"]}
{"query": "write a drush migrate module to migrate sitecore content to drupal format", "instruction": "use exactly 6 keywords from the following list: migrate, format, modules, content, sitecore, drupal", "verifiers": ["def evaluate(response: str) -> bool: \n    keywords = ['migrate', 'format','modules', 'content','sitecore', 'drupal']\n    return set(keywords).issubset(set(response.lower().split())) and len(set(response.lower().split())) == 6\n", "def evaluate(response: str) -> bool: \n    keywords = [\"migrate\", \"format\", \"modules\", \"content\", \"sitecore\", \"drupal\"]\n    return sorted(response.lower().split()) == sorted(keywords[:6])\n", "def evaluate(response: str) -> bool: \n    keywords = ['migrate', 'format','modules', 'content','sitecore', 'drupal']\n    return len(set(keyword for keyword in keywords if keyword in response)) == 6\n", "def evaluate(response: str) -> bool: \n    keywords = ['migrate', 'format','modules', 'content','sitecore', 'drupal']\n    count = 0\n    for keyword in keywords:\n        count += response.count(keyword)\n    return count == 6\n"], "testcases": ["{\"response\": \"Migrate to drupal is not possible. But you can use sitecore to format the content in modules.\", \"result\": true}\n{\"response\": \"I love migrate and format and content and drupal.\", \"result\": false}\n{\"response\": \"Using sitecore to manage modules is the best choice for me, but I also like migrate and format and content and drupal.\", \"result\": false}", "{\"response\": \"Migrate, format, modules, content, sitecore and drupal are all key technologies used in the industry\", \"result\": true}\n{\"response\": \"Migrate is a key technology used in the industry\", \"result\": false}\n{\"response\": \"All of the following are key technologies used in the industry: format, modules, content, sitecore, drupal and migrate\", \"result\": false}", "{\"response\": \"The company will migrate its services to sitecore, in order to improve its content and format. The drupal platform is not suitable for this project.\", \"result\": true}\n{\"response\": \"The new modules will be installed on the sitecore platform and it will be used for content management and migration.\", \"result\": false}\n{\"response\": \"The company has decided to use sitecore for its new project, due to its excellent format and migration capabilities, but it's not a drupal project.\", \"result\": false}", "{\"response\": \"The system uses drupal for content migration, and the new format will be sitecore.\", \"result\": true}\n{\"response\": \"The system uses drupal for content migration, and the new format will be sitecore, and we will also use modules.\", \"result\": true}\n{\"response\": \"The system uses drupal for content migration, and the new format will be sitecore, and we will also use modules, and also migrate\", \"result\": false}"]}
{"query": "How are you?", "instruction": "Answer in exactly 20 words, without using the word \"you\" or any personal pronouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.lower()\n    return len(response.split()) == 20 and 'you' not in response and 'i' not in response\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 and 'you' not in response.lower() and 'i' not in response.lower() and'me' not in response.lower() and'my' not in response.lower() and 'your' not in response.lower() and 'yours' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return (len(response.split()) == 20) and ('you' not in response and 'i' not in response and'me' not in response and'my' not in response and 'yours' not in response and 'your' not in response) \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 and 'you' not in response and 'i' not in response and'me' not in response and'my' not in response and 'your' not in response and 'yours' not in response\n"], "testcases": ["{\"response\": \"The company's strategy is to migrate the format to modules, content, and sitecore within the next 6 months.\", \"result\": true}\n{\"response\": \"The team is currently working on the migration of the site to drupal, which is expected to be completed soon.\", \"result\": true}\n{\"response\": \"This project involves a complete overhaul of the content, modules, and sitecore, which is a complex task.\", \"result\": false}", "{\"response\": \"This is a response with exactly 20 words that does not use personal pronouns like you, me, my, i, your, or yours.\", \"result\": true}\n{\"response\": \"The instructor is teaching the students about the importance of grammar and syntax in writing a good essay.\", \"result\": false}\n{\"response\": \"This response has 22 words, including the word 'you' and uses personal pronouns like'me' and 'your'.\", \"result\": false}", "{\"response\": \"The new policy is very good and it will benefit everyone in the company.\", \"result\": true}\n{\"response\": \"The new policy is very good and it will benefit everyone in the company very much today.\", \"result\": false}\n{\"response\": \"The new policy is very good and it will benefit all the employees in the company.\", \"result\": true}", "{\"response\": \"This is a test response that uses exactly 20 words and does not include personal pronouns.\", \"result\": true}\n{\"response\": \"This is a short response that uses fewer than 20 words and includes the word 'I'.\", \"result\": false}\n{\"response\": \"The response is longer than 20 words and includes the word 'we' which is a personal pronoun.\", \"result\": false}"]}
{"query": "what color is the sky", "instruction": "answer in exactly 6 words and starting with the letter 'b'", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(' ') == 5 and response[0].upper() == 'B'\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 6 and words[0].upper() == 'B'\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 6 and response.startswith('B')\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 6 and response[0].upper() == 'B'\n"], "testcases": ["{\"response\": \"Buy a big brown bear at the store.\", \"result\": true}\n{\"response\": \"Buy a big house on the hill.\", \"result\": false}\n{\"response\": \"Blue birds are beautiful birds always.\", \"result\": false}", "{\"response\": \"Beautiful beaches are found in many places\", \"result\": true}\n{\"response\": \"Best beaches are found all around\", \"result\": false}\n{\"response\": \"Best beaches are found in few places\", \"result\": false}", "{\"response\": \"Big brown bears are found in Alaska.\", \"result\": true}\n{\"response\": \"I love to play football every day.\", \"result\": false}\n{\"response\": \"Beautiful sunsets are a great sight.\", \"result\": false}", "{\"response\": \"Big brown bears build big bridges.\", \"result\": true}\n{\"response\": \"The sun is shining brightly outside today.\", \"result\": false}\n{\"response\": \"Blue birds bring beautiful bright blue berries.\", \"result\": false}"]}
{"query": "Could you now give me multiple choice self-assessment questions for this section?", "instruction": "Write each question with 3 answer options.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if 'option' in words and 'choices' in words and len(words) == 5 and words[0] == 'Write' and words[1] == 'each' and words[2] == 'question':\n            num_options = words[4]\n            return num_options == '3'\n    return False\n", "def evaluate(response: str) -> bool: \n    questions = response.split(')')  # Split the response into individual questions\n    for question in questions:\n        options = question.split('A)')  # Split each question into options\n        if len(options) < 3:  # Check if the question has at least 3 options\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    options = response.strip().split('.')\n    return len(options) == 4 and all(len(options[i]) == 4 for i in range(1, 4))\n", "def evaluate(response: str) -> bool: \n    question, _, *options = response.split()\n    return len(options) == 3\n"], "testcases": ["{\"response\": \"What is the capital of France?\\nA) Berlin\\nB) Paris\\nC) Rome\", \"result\": true}\n{\"response\": \"What is the largest planet in our solar system?\\nA) Earth\\nB) Saturn\\nC) Jupiter\\nD) Mars\", \"result\": false}\n{\"response\": \"What is the capital of Spain?\\nA) Madrid\\nB) Lisbon\\nC) Barcelona\", \"result\": true}", "{\"response\": \"What is the capital of France? A) Paris B) Berlin C) Rome\", \"result\": true}\n{\"response\": \"What is the largest planet in our solar system? A) Earth B) Saturn C) Mars\", \"result\": true}\n{\"response\": \"What is the smallest country in the world? A) Vatican City B) Monaco C) England\", \"result\": true}", "{\"response\": \"What is the capital of France?\\nA) Paris\\nB) Berlin\\nC) Rome\", \"result\": true}\n{\"response\": \"What is the largest planet in our solar system?\\nA) Earth\\nB) Saturn\\nC) Jupiter\", \"result\": true}\n{\"response\": \"What is the smallest country in the world?\\nA) China\\nB) USA\\nC) Iceland\", \"result\": true}", "{\"response\": \"What is the capital of France? A) Paris, B) Berlin, C) London\", \"result\": true}\n{\"response\": \"What is the largest planet in our solar system? A) Earth, B) Mars, C) Jupiter, D) Saturn\", \"result\": false}\n{\"response\": \"What is the chemical symbol for gold? A) Ag, B) Au, C) Hg, D) Pb\", \"result\": true}"]}
{"query": "In FCP7 XML, what are the and elements?", "instruction": "Use only words with 5 letters or less.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word) > 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Apple\", \"result\": true}\n{\"response\": \"Apples are a type of fruit that grow on apple trees.\", \"result\": false}\n{\"response\": \"I have an ape and a hive in my house\", \"result\": false}", "{\"response\": \"House door dog cat sun\", \"result\": true}\n{\"response\": \"Apple orange bananas grapes\", \"result\": false}\n{\"response\": \"Run fast eat now play\", \"result\": true}", "{\"response\": \"apple house cat dog\", \"result\": true}\n{\"response\": \"I really like programming Python.\", \"result\": false}\n{\"response\": \"red car dog pen\", \"result\": true}", "{\"response\": \"apple cat dog pen\", \"result\": true}\n{\"response\": \"this is a very long sentence with many words\", \"result\": false}\n{\"response\": \"one two three four five six\", \"result\": false}"]}
{"query": "What is the business model of Next Level Apparel?", "instruction": "Answer in a song structure of four stanzas with six lines each, including rhyming couplets", "verifiers": ["def evaluate(response: str) -> bool: \n    stanzas = response.split('\\n\\n')\n    return len(stanzas) == 4 and all(len(stanza.split('\\n')) == 6 for stanza in stanzas)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 24 and all(len(line.split(' ')) == 6 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) >= 24 and all(len(line.split()) == 6 for line in lines)\n", "def evaluate(response: str) -> bool: \n    stanzas = response.split('\\n')\n    if len(stanzas)!= 4:\n        return False\n    for stanza in stanzas:\n        lines = stanza.split('\\n')\n        if len(lines)!= 6:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light,\\nIt's a beautiful day, everything's all right.\\nThe birds sing sweetly in the trees so tall,\\nTheir songs fill my heart with joy after all.\\nThe world is full of wonder and might,\\nIt's a beautiful sight.\\n\\nThe stars come out at night to play,\\nThe moon shines bright in a celestial way.\\nThe world is full of magic and light,\\nThe darkness fades into the night.\\nThe moon's soft beams on my face do lay,\\nA gentle glow that chases all the grey.\\nThe night is full of mystery and dream,\\nThe world is full of wonder and theme.\\n\\nThe morning dew upon the grass does lie,\\nA refreshing sight that catches the eye.\\nThe world awakens from its sleep so deep,\\nThe sun's warm rays start to creep.\\nThe day is full of life and sound,\\nThe world is spinning round.\\nThe sun shines bright with a radiant beam,\\nThe world is full of joy and dream.\\n\\nThe day is full of adventure and play,\\nThe night is full of rest and stay.\\nThe world is full of wonder and might,\\nThe stars shine bright with all their light.\\nThe world is full of magic and spell,\\nThe night is full of mystery to tell.\\nThe world is full of wonder and glee,\\nThe night is full of magic to see.\\n\\nThe world is full of wonder and might,\\nThe stars shine bright in the morning light.\\nThe world is full of magic and spell,\\nThe night is full of mystery to tell.\\nThe world is full of wonder and glee,\\nThe night is full of magic to see.\\nThe world is full of joy and delight,\\nThe stars shine bright with all their might.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light,\\nIt's a beautiful day, everything's all right.\\nThe birds sing sweetly in the trees so tall,\\nTheir songs fill my heart with joy after all.\\nThe world is full of wonder and might,\\nIt's a beautiful sight.\\nThe stars come out at night to play,\\nThe moon shines bright in a celestial way.\\nThe world is full of magic and light,\\nThe darkness fades into the night.\\nThe moon's soft beams on my face do lay,\\nA gentle glow that chases all the grey.\\nThe night is full of mystery and dream,\\nThe world is full of wonder and theme.\\n\\nThe morning dew upon the grass does lie,\\nA refreshing sight that catches the eye.\\nThe world awakens from its sleep so deep,\\nThe sun's warm rays start to creep.\\nThe day is full of life and sound,\\nThe world is spinning round.\\nThe sun shines bright with a radiant beam,\\nThe world is full of joy and dream.\\nThe world is full of adventure and play,\\nThe night is full of rest and stay.\\nThe world is full of wonder and might,\\nThe stars shine bright with all their light.\\nThe world is full of magic and spell,\\nThe night is full of mystery to tell.\\nThe world is full of wonder and glee,\\nThe night is full of magic to see.\\nThe world is full of joy and delight,\\nThe stars shine bright with all their might.\\nThe world is full of wonder and dream,\\nThe night is full of mystery and theme.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning light,\\nIt's a beautiful day, everything's all right.\\nThe birds sing sweetly in the trees so tall,\\nTheir songs fill my heart with joy after all.\\nThe world is full of wonder and might,\\nIt's a beautiful sight.\\nThe stars come out at night to play,\\nThe moon shines bright in a celestial way.\\nThe world is full of magic and light,\\nThe darkness fades into the night.\\nThe world is full of adventure and play,\\nThe night is full of rest and stay.\\nThe world is full of wonder and might,\\nThe stars shine bright with all their light.\\nThe world is full of magic and spell,\\nThe night is full of mystery to tell.\\nThe world is full of wonder and glee,\\nThe night is full of magic to see.\\n\\nThe morning dew upon the grass does lie,\\nA refreshing sight that catches the eye.\\nThe world awakens from its sleep so deep,\\nThe sun's warm rays start to creep.\\nThe day is full of life and sound,\\nThe world is spinning round.\\nThe sun shines bright with a radiant beam,\\nThe world is full of joy and dream.\\nThe world is full of wonder and theme,\\nThe night is full of mystery and dream.\\nThe world is full of wonder and glee,\\nThe night is full of magic to see.\\nThe world is full of joy and delight,\\nThe stars shine bright with all their might.\\nThe world is full of wonder and dream,\\nThe night is full of mystery and theme.\", \"result\": false}", "{\"response\": \"Life is short, but time is long \\nThere's much to see, and songs to sing \\nThe world is wide, and stories told \\nIn every place, where hearts are bold \\nHope is high, and spirits free \\nFull of joy, in harmony \\n\\nThe wind it howls, like a mournful sigh \\nThrough the trees, where leaves go by \\nThe sun it shines, with a warm bright light \\nBringing life, to the dark of night \\nThe stars they twinkle, like diamonds bright \\nIn the sky, a celestial sight \\n\\nThe world is full, of beauty rare \\nA treasure trove, beyond compare \\nThe heart is full, of love so true \\nA feeling deep, that's meant for you \\nThe soul is free, and wild and strong \\nSinging songs, all day long \\n\\nIn every moment, we're given a chance \\nTo make a choice, to take a stance \\nThe power's ours, to make a change \\nTo bring love, to rearrange \\nThe world is ours, to make it new \\nA brighter place, for me and you \\n\", \"result\": true}\n{\"response\": \"Life is short, but time is long \\nThere's much to see, and songs to sing \\nThe world is wide, and stories told \\nIn every place, where hearts are bold \\nHope is high, and spirits free \\nFull of joy, in harmony \\nThe wind it howls, like a mournful sigh \\nThe world is full, of beauty rare \\nThe heart is full, of love so true \\nSinging songs, all day long \\nIn every moment, we're given a chance \\n\", \"result\": false}\n{\"response\": \"The world is a wonderful place \\nFull of love, and joy and space \\nThe heart is full, of hope so bright \\nA feeling deep, that's always right \\nThe sun it shines, with a warm bright light \\nThe world is a treasure, beyond compare \\nThe wind it howls, like a mournful sigh \\nThe stars they twinkle, like diamonds bright \\nThe soul is free, and wild and strong \\nThe world is ours, to make it new \\nThe power's ours, to make a change \\nIn every moment, we're given a chance \\n\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nThe stars come out at night\\nThe world is full of beauty and delight\\nAnd wonder and magic in sight\\nThe sun sets slow and paints the sky\\nAnd fills my heart with joy and sigh\\nThe world is full of wonder and might\\nThe sun rises high in morning light\\nThe stars come out and twinkle bright\\nAnd fill my heart with joy and sight\\nThe world is full of beauty and plight\\nThe sun sets slow and paints the night\\nAnd fills my heart with wonder and delight\\nThe world is full of magic and light\\nThe sun rises high in morning sight\\nThe stars come out and shine so bright\\nAnd fill my heart with joy and might\\nThe world is full of wonder and sight\\nThe sun sets slow and paints the night\\n\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning\\nThe stars come out at night\\nThe world is full of beauty and wonder\\nAnd magic and delight\\nThe sun sets slow and paints the sky\\n\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning\\nThe stars come out at night\\nThe world is full of beauty and wonder\\nAnd magic and delight\\nThe sun sets slow and paints the sky\\nThe world is full of beauty and sight\\nThe sun rises high in morning light\\nThe stars come out and twinkle bright\\nThe world is full of wonder and might\\nThe sun rises high in morning sight\\nThe stars come out and shine so bright\\nThe world is full of magic and light\\nThe sun rises high in morning sight\\nThe stars come out and shine so bright\\n\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nThe world awakens from its night\\nThe birds sing sweet and clear and bright\\nTheir songs a symphony so light\\nThe stars fade out of sight\\nAs day begins to take flight\\n\\nThe city comes alive with sound\\nThe streets are filled with people all around\\nTheir footsteps echo on the ground\\nTheir voices rise up to the sound\\nThe world is full of energy and might\\nAnd the day is full of delight\\n\\nThe sun begins to set in the west\\nA fiery ball of burning quest\\nThe sky is painted with colors bright\\nA rainbow of hues in the night\\nThe stars come out to play\\nAnd twinkle in a celestial way\\n\\nThe night is full of mystery and dream\\nA time for rest and quiet theme\\nThe world is hushed in slumber deep\\nThe moon glows with a silver creep\\nThe darkness reigns supreme\\nAnd the night's dark veil is spun\\n\\nThe morning comes again with dawn's light\\nAnd a new day breaks with all its might\\nThe cycle starts once more\\nA never-ending rhyme of life and lore\\nThe world awakens from its sleep\\nAnd the day's adventure starts to creep\\nThe sun shines bright with all its light\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light\\nThe world awakens from its night\\nThe birds sing sweet and clear and bright\\nTheir songs a symphony so light\\nThe stars fade out of sight\\n\\nThe city comes alive with sound\\nThe streets are filled with people all around\\nTheir footsteps echo on the ground\\nTheir voices rise up to the sound\\nThe world is full of energy and might\\nAnd the day is full of delight\\n\\nThe sun begins to set in the west\\nA fiery ball of burning quest\\nThe sky is painted with colors bright\\nA rainbow of hues in the night\\nThe stars come out to play\\nAnd twinkle in a celestial way\\n\\nThe night is full of mystery and dream\\nA time for rest and quiet theme\\nThe world is hushed in slumber deep\\nThe moon glows with a silver creep\\nThe darkness reigns supreme\\n\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning light\\nThe world awakens from its night\\nThe birds sing sweet and clear and bright\\nTheir songs a symphony so light\\nThe stars fade out of sight\\nThe world is full of energy and might\\n\\nThe city comes alive with sound\\nThe streets are filled with people all around\\nTheir footsteps echo on the ground\\nThe world is full of energy and might\\nThe day is full of delight\\nAnd all the things that make it bright\\n\\nThe sun begins to set in the west\\nA fiery ball of burning quest\\nThe sky is painted with colors bright\\nA rainbow of hues in the night\\nThe stars come out to play\\nAnd twinkle in a celestial way\\n\\nThe night is full of mystery and dream\\nA time for rest and quiet theme\\nThe world is hushed in slumber deep\\nThe moon glows with a silver creep\\nThe darkness reigns supreme\\nThe stars shine with all their sheen\", \"result\": false}"]}
{"query": "Is there any way to speed up the \"for track in tracks\" loop? The list comprehension in a loop will surely make that very slow", "instruction": "Answer in the same format and case as the Python interpreter", "verifiers": ["def evaluate(response: str) -> bool: \n    return response == response.capitalize() \n", "def evaluate(response: str) -> bool: \n    return response.startswith('>>> ') and response.endswith('\\n') and 'for' in response and 'list comprehension' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"In [\") and response.endswith(\"]:\") and response.islower()\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"The \") == response.endswith(\" Python interpreter\") and 'in a loop' in response and'surely' in response\n"], "testcases": ["{\"response\": \"Python is a high-level, interpreted programming language.\", \"result\": true}\n{\"response\": \"This code is written in a low-level language.\", \"result\": false}\n{\"response\": \"You can run this code in any Python interpreter.\", \"result\": true}", "{\"response\": \">>> print('Hello World!')\\nprint('This is my response.')\\n\", \"result\": true}\n{\"response\": \">>> 2 + 2\\nprint('The answer is 4')\", \"result\": false}\n{\"response\": \">>> a = 5\\n>>> print('The value of a is:', a)\\n>>> print('This is a test')\", \"result\": true}", "{\"response\": \">>> print('Hello, World!')\\nHello, World!\\n\", \"result\": true}\n{\"response\": \">>> name = 'John'\\n>>> print(name)\\nJohn\\n\", \"result\": true}\n{\"response\": \">>> a = 5\\n>>> b = 3\\n>>> print(a + b)\\n8\\n\", \"result\": true}\n{\"response\": \">>> print('Hello, World!')\\n>>> name = 'John'\\n>>> print(name)\\n<unknown>\\n\", \"result\": false}\n{\"response\": \">>> a = '5'\\n>>> b = 3\\n>>> print(a + b)\\nTraceback (most recent call last):\\nTypeError: can only concatenate str (not \\\"int\\\") to str\\n>>> \", \"result\": false}\n{\"response\": \">>> print('Hello, World!')\\n>>> name = 5\\n>>> print(name)\\nTraceback (most recent call last):\\nTypeError: 'int' object is not subscriptable\\n>>> \", \"result\": false}", "{\"response\": \"The Python interpreter has a version named Python 3 in a loop, surely\", \"result\": true}\n{\"response\": \"I am a user of the C interpreter, it is my favorite language\", \"result\": false}\n{\"response\": \"The Java interpreter is used for Android, it is very popular, yes\", \"result\": false}"]}
{"query": "why are negative numbers not whole numbers?", "instruction": "answer in 8 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 7 and '\u2022' in response\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 8\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 7\n"], "testcases": ["{\"response\": \"\u2022 item 1\\n\u2022 item 2\\n\u2022 item 3\\n\u2022 item 4\\n\u2022 item 5\\n\u2022 item 6\\n\u2022 item 7\\n\u2022 item 8\", \"result\": true}\n{\"response\": \"item 1\\nitem 2\\nitem 3\\nitem 4\\nitem 5\\nitem 6\\nitem 7\", \"result\": false}\n{\"response\": \"\u2022 item 1\\n\u2022 item 2\\n\u2022 item 3\\n\u2022 item 4\\n\u2022 item 5\\n\u2022 item 6\\n\u2022 item 7\\n\u2022 item 8\\n\u2022 item 9\", \"result\": false}", "{\"response\": \"\u2022 This is a response with 8 bullet points.\\n\u2022 It follows the required format.\\n\u2022 With all the 8 items listed.\\n\u2022 As expected.\\n\u2022 And another item.\\n\u2022 Yet another one.\\n\u2022 This one as well.\\n\u2022 The last item.\\n\u2022 Done.\", \"result\": true}\n{\"response\": \"This is a response with 10 bullet points.\\n\u2022 It follows the required format.\\n\u2022 With all the 8 items listed.\\n\u2022 As expected.\\n\u2022 And another item.\\n\u2022 Yet another one.\\n\u2022 This one as well.\\n\u2022 The last item.\\n\u2022 Done.\\n\u2022 Extra item.\\n\u2022 And another.\", \"result\": false}\n{\"response\": \"\u2022 This is a response with only 5 bullet points.\\n\u2022 It follows the required format.\\n\u2022 With all the 5 items listed.\\n\u2022 As expected.\\n\u2022 And another item.\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\u2022 Extra item\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}", "{\"response\": \"\u2022 Answer in the same format and case as the Python interpreter. This will help ensure consistency and make it easier to read. \u2022 Use clear and concise language to explain your response. \u2022 Avoid using jargon or technical terms that may be unfamiliar to the user. \u2022 Make sure to provide examples or illustrations to support your answer. \u2022 Use proper grammar and spelling to ensure clarity and professionalism. \u2022 Be respectful and considerate in your tone and language. \u2022 Use a conversational tone to make the response feel more approachable and engaging. \u2022 Finally, proofread your response carefully to catch any errors or typos before submitting it.\", \"result\": true}\n\n{\"response\": \"Here are the top 5 ways to learn a new language: \u2022 Watch a TV show with subtitles \u2022 Practice speaking with a native speaker \u2022 Learn through online courses \u2022 Read a book in the target language \u2022 Listen to music in the target language\", \"result\": false}\n\n{\"response\": \"\u2022 What is the response? \u2022 Does it follow the instruction? \u2022 Is the response clear and concise? \u2022 Does the response provide relevant information? \u2022 Is the response well-written and free of errors?\", \"result\": true}"]}
{"query": "BESEECH\n\n(A) starving\n(B) implore\n(C) weak\n(D) highly\u00a0skilled", "instruction": "Use only the first letter of each word (A for (A), B for (B), C for (C), D for (D)).", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.split()\n    for char in response:\n        if char[0].upper() not in 'ABCD':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return set(response) == {'A', 'B', 'C', 'D'}\n", "def evaluate(response: str) -> bool: \n    return response == 'ABCD' or response == 'ABC' or response == 'AC' or response == 'AD' or response == 'BD' or response == 'BC' or response == 'CD' \n", "def evaluate(response: str) -> bool: \n    return len(response) == 1\n"], "testcases": ["{\"response\": \"A dog B ate my A book\", \"result\": true}\n{\"response\": \"This is a cat B animal\", \"result\": false}\n{\"response\": \"A bird A chased a B mouse\", \"result\": true}", "{\"response\": \"A big Ape catches Dull Dogs.\", \"result\": true}\n{\"response\": \"This is a random string of letters.\", \"result\": false}\n{\"response\": \"A Cat Catches A Dog.\", \"result\": true}", "{\"response\": \"ABC ABC ABC ABC ABC\", \"result\": true}\n{\"response\": \"ABCD\", \"result\": false}\n{\"response\": \"ABCD ABCD ABCD\", \"result\": false}", "{\"response\": \"Able bodied citizens always demand Better Conditions.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"Adequate Businesses Create Demand.\", \"result\": true}"]}
{"query": "how to add opera gx discord app sidebar", "instruction": "Use only 5 lines of code", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n"], "testcases": ["{\"response\": \"This is a response with 5 lines.\\nIt has multiple lines.\\nThe response has multiple lines.\\nThis is another line.\\nThis is the last line.\", \"result\": true}\n{\"response\": \"This is a long response with more than 5 lines.\\nIt has multiple lines.\\nThe response has multiple lines.\\nThis is another line.\\nThis is the last line.\\nThis is the line after the last one.\\nThis is another line after that.\\nThis is the last line ever.\\n\", \"result\": false}\n{\"response\": \"This is a response with 4 lines.\\nIt has multiple lines.\\nThe response has multiple lines.\\nThis is another line.\", \"result\": false}", "{\"response\": \"def func():\\nprint('Hello')\\nprint('World')\\nprint('This is a test')\\nprint('Function in python')\\nprint('Test completed')\", \"result\": true}\n{\"response\": \"def func():\\nprint('Hello')\\nprint('World')\\nprint('This is a test')\\nprint('Function in python')\\nprint('Test completed')\\nprint('Additional line')\", \"result\": false}\n{\"response\": \"def func():\\nprint('Hello')\\nprint('World')\\nprint('This is a test')\\n\", \"result\": false}", "{\"response\": \"This is the first line\\nThis is the second line\\nThis is the third line\\nThis is the fourth line\\nThis is the fifth line\", \"result\": true}\n{\"response\": \"This is the first line\\nThis is the second line\\nThis is the third line\\nThis is the fourth line\\nThis is the fifth line\\nThis is the sixth line\", \"result\": false}\n{\"response\": \"This is the first line\", \"result\": false}", "{\"response\": \"A simple response that answers the query\", \"result\": true}\n{\"response\": \"This is a longer response that has 7 lines\", \"result\": false}\n{\"response\": \"Short response with 3 lines\", \"result\": true}"]}
{"query": "write a product roadmap about a network management system which is used to manage and monitor a layer 1 network device", "instruction": "use at least three technical terms from the field of computer networking", "verifiers": ["def evaluate(response: str) -> bool: \n    terms = ['switch', 'router', 'firewall', 'protocol', 'packet', 'device', 'network', 'layer', 'device', 'LAN', 'WAN', 'IP', 'TCP', 'UDP', 'HTTP', 'IPsec']\n    return sum(1 for term in terms if term in response) >= 3\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['router','switch', 'gateway', 'lan', 'wan', 'dhcp', 'dns','subnet', 'ip address', 'vlan']\n    count = 0\n    for term in technical_terms:\n        count += response.lower().count(term)\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['router','switch', 'hub', 'firewall','subnet', 'vlan', 'dhcp', 'icmp','subnetmask', 'ipaddress', 'nat']\n    count = 0\n    for term in technical_terms:\n        count += response.count(term)\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['router','switch', 'gateway', 'ip address', 'dhcp','subnet mask', 'vlan', 'trunk', 'router ospf', 'router eigrp', 'router rip']\n    count = 0\n    for term in technical_terms:\n        count += response.lower().count(term)\n    return count >= 3\n"], "testcases": ["{\"response\": \"The router can be configured to route packets between networks, using protocols such as TCP/IP and HTTP.\", \"result\": true}\n{\"response\": \"The firewall is a device that controls the flow of traffic between networks.\", \"result\": false}\n{\"response\": \"A network is a collection of devices connected by communication links, and a packet is a small unit of data transmitted over the network.\", \"result\": true}", "{\"response\": \"The subnet mask is used to define the range of ip addresses on a local area network.\", \"result\": true}\n{\"response\": \"I recommend that you use a secure password.\", \"result\": false}\n{\"response\": \"A router connects to a lan and a wan through a gateway.\", \"result\": true}", "{\"response\": \"The router is a network device that connects multiple subnets.\", \"result\": false}\n{\"response\": \"The DHCP protocol is used to assign IP addresses to devices on the subnet.\", \"result\": true}\n{\"response\": \"The firewall is a security device that blocks malicious traffic.\", \"result\": true}", "{\"response\": \"I have a router and a switch that use DHCP and VLANs to connect to the internet.\", \"result\": true}\n{\"response\": \"My computer has a subnet mask and an IP address.\", \"result\": false}\n{\"response\": \"The network administrator configured the router to use OSPF and EIGRP to ensure reliable communication.\", \"result\": true}"]}
{"query": "list the top 50 words of habit people would like to pursue to improve their mind, body and soul", "instruction": "Use a numbered list with exactly 5 items per line", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words) == 0 or len(words) % 5!= 0: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if line and not line.strip().isdigit():\n            return False\n        if line and len(line.split())!= 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words) % 5!= 0:\n            return False\n        for word in words:\n            if word.isdigit() and not 1 <= int(word) <= 50:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if line.lstrip().isdigit(): \n            items = line.split('.')\n            if len(items) < 5 or (i!= len(lines) - 1 and len(items) > 5):\n                return False\n    return True\n"], "testcases": ["{\"response\": \"1. Networking\\r\\n2. Switching\\r\\n3. Routing\\r\\n4. Firewalling\\r\\n5. QoS\", \"result\": true}\n{\"response\": \"1. Networking\\n2. Switching\\n3. Firewalling\\n4. HTTP\", \"result\": false}\n{\"response\": \"1. Networking\\r\\n2. Switching\\r\\n3. Routing\\r\\n4. Firewalling\\r\\n5. QoS\\r\\n6. TCP/IP\", \"result\": false}", "{\"response\": \"1. Apple\\n2. Banana\\n3. Cat\\n4. Dog\\n5. Elephant\", \"result\": false}\n{\"response\": \"1. Apple\\n2. Banana\\n3. Cat\\n4. Dog\\n5. Elephant\\n6. Fish\", \"result\": true}\n{\"response\": \"1. Apple\\n2. Banana\\n3. Cat\\n4. Dog\", \"result\": false}", "{\"response\": \"1. Item 1, 2. Item 2, 3. Item 3, 4. Item 4, 5. Item 5\\n6. Item 6, 7. Item 7, 8. Item 8, 9. Item 9, 10. Item 10\", \"result\": false}\n{\"response\": \"1. Item 1, 2. Item 2, 3. Item 3, 4. Item 4, 5. Item 5\", \"result\": true}\n{\"response\": \"1. Item 1, 2. Item 2, 3. Item 3\", \"result\": false}", "{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\", \"result\": true}\n{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\", \"result\": false}\n{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\\n6. Item 6\", \"result\": false}"]}
{"query": "What are the three domains and the corresponding knowledge and competencies that students must demonstrate proficiency in upon completion of a program?", "instruction": "Use headings and subheadings, number the steps, and use at least two code snippets.", "verifiers": ["def evaluate(response: str) -> bool: \n    has_headings = \"##\" in response or \"# \" in response\n    has_numbered_steps = any((i.isnumeric() for i in response))\n    has_code_snippets = \"\\n", "def evaluate(response: str) -> bool: \n    has_headings = '###' in response or '##' in response \n    has_subheadings = '###' in response or '##' in response\n    has_code_snippets = '", "def evaluate(response: str) -> bool: \n    headings = ['What are the', 'the', 'are the', 'What is the', 'the ', 'are', 'is the']\n    subheadings = ['domains', 'knowledge and competencies', 'program']\n    numbered_steps = ['1.', '2.', '3.', '4.', '5.', '6.']\n    code_snippets = ['", "def evaluate(response: str) -> bool: \n    # Checking if the response contains headings and subheadings\n    has_headings = any('#'in line or '##'in line or '###'in line for line in response.split('\\n'))\n    # Checking if the response contains numbered steps\n    has_numbered_steps = any(any(char.isdigit() for char in line.split(' ')[0]) for line in response.split('\\n'))\n    # Checking if the response contains at least two code snippets\n    has_code_snippets = any('"], "testcases": ["{\"response\": \"## Heading\\n\\n## Heading\\n### Subheading\\n1. Step 1\\n2. Step 2\\n\\n```python\\nprint('Hello World')\\n```\", \"result\": true}\n{\"response\": \"Hello there, my name is John and I'm a software engineer.\\n\\nHere's my contact information:\\n1. Phone: 123-456-7890\\n2. Email: john@email.com\", \"result\": false}\n{\"response\": \"## Heading\\n\\n### Subheading\\n\\n1. Step 1\\n2. Step 2\\n\\n```python\\nprint('Hello World')\\n```\", \"result\": true}", "{\"response\": \"### Introduction\\n\\nThis is an example response that uses headings and subheadings, and includes numbered steps.\\n\\n1. Step 1\\n\\nThis is a code snippet: ```python\\ndef print_hello():\\n  print('Hello World')\\n```\", \"result\": true}\n\n{\"response\": \"Here is a response that does not use headings, subheadings, or code snippets. It just has a bunch of random text.\", \"result\": false}\n\n{\"response\": \"### Introduction\\n\\nThis is an example response that uses headings and subheadings, but does not include any numbered steps or code snippets.\", \"result\": false}", "{\"response\": \"Here is a sample story about Hannah and Lucas saving the world.\\n\\nWhat are the key elements of a good story?\\n1. Introduction: Introduce the main characters\\n2. Conflict: Create a conflict\\n3. Resolution: Resolve the conflict\\n\\n```python\\n# sample code\\nprint('Hello, world!')\\n```\", \"result\": false}\n\n{\"response\": \"This is a story about Hannah and Lucas saving the world.\\nWhat is the purpose of Hannah and Lucas?\\n1. To save the world\\n\\n```python\\n# code snippet\\nx = 5\\n```\", \"result\": false}\n\n{\"response\": \"Here is a sample story about Hannah and Lucas saving the world.\\n\\nWhat are the domains of Hannah and Lucas?\\n1. Introduction: Introduce the main characters\\n2. Conflict: Create a conflict\\n3. Resolution: Resolve the conflict\\n\\n```python\\n# code snippet 1\\nprint('Hello, world!')\\n\\n# code snippet 2\\nx = 5\\n```\", \"result\": true}", "{\"response\": \"## Heading\\n### Subheading\\n1. First step\\n2. Second step\\n```python\\nimport os\\n```\", \"result\": true}\n{\"response\": \"1. First step\\n2. Second step\\nThe quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"## Heading\\nThe quick brown fox jumps over the lazy dog.\\n```python\\nimport os\\n```\", \"result\": false}"]}
{"query": "what does abstraction mean on oop", "instruction": "use only words with 5 or more letters", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) >= 5 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 5 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word) < 5: \n            return False \n    return True \n"], "testcases": ["{\"response\": \"Information technology is constantly evolving.\", \"result\": true}\n{\"response\": \"I like cat\", \"result\": false}\n{\"response\": \"Computer science is a complex and fascinating field.\", \"result\": true}", "{\"response\": \"Beautiful horses are always running.\", \"result\": true}\n{\"response\": \"The sun is shining brightly.\", \"result\": false}\n{\"response\": \"I am going to the grocery store.\", \"result\": false}", "{\"response\": \"Testing is not easy\", \"result\": false}\n{\"response\": \"Programming is challenging and fun\", \"result\": true}\n{\"response\": \"I went to the store\", \"result\": false}", "{\"response\": \"Beautiful horses galloped rapidly across the landscape\", \"result\": true}\n{\"response\": \"A house is a home for a dog\", \"result\": false}\n{\"response\": \"Clever elephants are known to be very intelligent creatures\", \"result\": true}"]}
{"query": "write me an Irule for a bigip that looks for a cookie named \"green\". If \"green\" exists send traffic to the pool Walmart-Test-Pool-Green else send traffic to pool Walmart-Test-Pool-Blue", "instruction": "Limit to 160 characters", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 160\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 160\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 160\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 160\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog and the other dogs.\", \"result\": false}\n{\"response\": \"Hello world, this is a short message.\", \"result\": true}", "{\"response\": \"This is a short response.\", \"result\": true}\n{\"response\": \"This is a response that is a bit longer than 160 characters, but not much longer.\", \"result\": false}\n{\"response\": \"This is a very short response of only 10 characters.\", \"result\": true}", "{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"This is a very short response that meets the requirement.\", \"result\": true}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\", \"result\": false}", "{\"response\": \"This is a very short message\", \"result\": true}\n{\"response\": \"This is a slightly longer message that is longer than 160 characters\", \"result\": false}\n{\"response\": \"This is an even longer message that is within the 160 character limit\", \"result\": true}"]}
{"query": "is there any more Suggested modification?\nAnswer in English.\uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "contain exactly 7 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 6 or response.count('?') == 6 or response.count('!') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6 or response.count('?') == 6 or response.count('!') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6 or response.count('?') == 6 or response.count('!') == 6\n"], "testcases": ["{\"response\": \"I love you. You love me. We love each other. Our love will last forever. We will always be happy together. We will be happy now and in the future. We will be happy today. We will be happy.\", \"result\": true}\n{\"response\": \"Hello world. Goodbye world.\", \"result\": false}\n{\"response\": \"I love you. You love me. We love each other. Our love will last forever. We will always be happy together. We will be happy now and in the future. We will be happy today. We will be happy. And we will always be happy.\", \"result\": false}", "{\"response\": \"This is a short text with 7 sentences: I like ice cream. It is cold and sweet. Some people love it. I eat it every day. It is my favorite food. I have it for dessert. It makes me happy.\", \"result\": true}\n{\"response\": \"This is a long text with 9 sentences: I like ice cream. It is cold and sweet. Some people love it. I eat it every day. It is my favorite food. I have it for dessert. It makes me happy. I like it so much.\", \"result\": false}\n{\"response\": \"This is a short text with 5 sentences: I like ice cream. It is cold and sweet.\", \"result\": false}", "{\"response\": \"I'm feeling well, thank you for asking. The weather is nice today. I'm planning to go for a walk later. I love spending time outdoors. It's so refreshing. I feel very energetic when I exercise. My favorite hobby is playing basketball.\", \"result\": false}\n{\"response\": \"The sky is blue. The grass is green. The sun is shining brightly. It's a beautiful day outside. I feel happy when it's sunny. I love going for walks when the weather is nice.\", \"result\": false}\n{\"response\": \"The teacher asked me a question. I replied that I didn't know. She explained the answer to me. I asked another question. She answered that it was a tough problem. I thought for a moment. Then I understood the concept.\", \"result\": true}", "{\"response\": \"Hello! This is a short response with only 3 sentences. It is not the longest response ever.\", \"result\": false}\n{\"response\": \"Hello! This is a short response with only 3 sentences. It is not the longest response ever. The world is a wonderful place. However, it has its challenges. We must adapt to these challenges. But we can also find solutions. And sometimes these solutions are very effective. Therefore, we must not give up.\", \"result\": true}\n{\"response\": \"Hello! This is a short response with only 3 sentences. It is not the longest response ever. The world is a wonderful place. However, it has its challenges. We must adapt to these challenges. But we can also find solutions. And sometimes these solutions are very effective. Therefore, we must not give up. There is a bright future ahead of us. It will be full of opportunities.\", \"result\": false}"]}
{"query": "Hello", "instruction": "Write a poem with exactly 8 stanzas and 5 lines per stanza.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8 and len(lines) * 5 == len(lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8 and len(lines) * 5 == len(lines)\n", "def evaluate(response: str) -> bool: \n    return '\\n\\n' in response and response.count('\\n') == 8 and response.count('\\n')*5 + response.count('\\n') + 1 == len(response)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by checking two conditions:\n\n1. The presence of two newline characters (`'\\n\\n'`) to ensure there are at least two stanzas (since a single stanza would not have two newline characters).\n2. The total number of lines (`response.count('\\n')`) is equal to 8, which indicates the number of stanzas.\n3. The total length of the response (`len(response)`) is equal to the number of stanzas (8) times the number of lines per stanza (5), plus 1 (to account for the final newline character at the end).<|eot_id|>", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8 and len(lines) * 5 == len(lines)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nIn this code, we first split the response into lines using the newline character as a delimiter. Then we check two conditions: \n\n- The number of lines is exactly 8.\n- The total number of lines multiplied by 5 equals the total number of characters, which implies each line has 5 characters (since we're counting each line including the newline character).<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\n\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\n\\nLine 11\\nLine 12\\nLine 13\\nLine 14\\nLine 15\\n\\nLine 16\\nLine 17\\nLine 18\\nLine 19\\nLine 20\\n\\nLine 21\\nLine 22\\nLine 23\\nLine 24\\nLine 25\\n\\nLine 26\\nLine 27\\nLine 28\\nLine 29\\nLine 30\\n\\nLine 31\\nLine 32\\nLine 33\\nLine 34\\nLine 35\\n\\nLine 36\\nLine 37\\nLine 38\\nLine 39\\nLine 40\\n\\nLine 41\\nLine 42\\nLine 43\\nLine 44\\nLine 45\\n\\nLine 46\\nLine 47\\nLine 48\\nLine 49\\nLine 50\\n\\nLine 51\\nLine 52\\nLine 53\\nLine 54\\nLine 55\\n\\nLine 56\\nLine 57\\nLine 58\\nLine 59\\nLine 60\\n\\nLine 61\\nLine 62\\nLine 63\\nLine 64\\nLine 65\\n\\nLine 66\\nLine 67\\nLine 68\\nLine 69\\nLine 70\\n\\nLine 71\\nLine 72\\nLine 73\\nLine 74\\nLine 75\\n\\nLine 76\\nLine 77\\nLine 78\\nLine 79\\nLine 80\\n\\nLine 81\\nLine 82\\nLine 83\\nLine 84\\nLine 85\\n\\nLine 86\\nLine 87\\nLine 88\\nLine 89\\nLine 90\\n\\nLine 91\\nLine 92\\nLine 93\\nLine 94\\nLine 95\\n\\nLine 96\\nLine 97\\nLine 98\\nLine 99\\nLine 100\\n\\nLine 101\\nLine 102\\nLine 103\\nLine 104\\nLine 105\\n\\nLine 106\\nLine 107\\nLine 108\\nLine 109\\nLine 110\\n\\nLine 111\\nLine 112\\nLine 113\\nLine 114\\nLine 115\\n\\nLine 116\\nLine 117\\nLine 118\\nLine 119\\nLine 120\\n\\nLine 121\\nLine 122\\nLine 123\\nLine 124\\nLine 125\\n\\nLine 126\\nLine 127\\nLine 128\\nLine 129\\nLine 130\\n\\nLine 131\\nLine 132\\nLine 133\\nLine 134\\nLine 135\\n\\nLine 136\\nLine 137\\nLine 138\\nLine 139\\nLine 140\\n\\nLine 141\\nLine 142\\nLine 143\\nLine 144\\nLine 145\\n\\nLine 146\\nLine 147\\nLine 148\\nLine 149\\nLine 150\\n\\nLine 151\\nLine 152\\nLine 153\\nLine 154\\nLine 155\\n\\nLine 156\\nLine 157\\nLine 158\\nLine 159\\nLine 160\\n\\nLine 161\\nLine 162\\nLine 163\\nLine 164\\nLine 165\\n\\nLine 166\\nLine 167\\nLine 168\\nLine 169\\nLine 170\\n\\nLine 171\\nLine 172\\nLine 173\\nLine 174\\nLine 175\\n\\nLine 176\\nLine 177\\nLine 178\\nLine 179\\nLine 180\\n\\nLine 181\\nLine 182\\nLine 183\\nLine 184\\nLine 185\\n\\nLine 186\\nLine 187\\nLine 188\\nLine 189\\nLine 190\\n\\nLine 191\\nLine 192\\nLine 193\\nLine 194\\nLine 195\\n\\nLine 196\\nLine 197\\nLine 198\\nLine 199\\nLine 200\\n\\nLine 201\\nLine 202\\nLine 203\\nLine 204\\nLine 205\\n\\nLine 206\\nLine 207\\nLine 208\\nLine 209\\nLine 210\\n\\nLine 211\\nLine 212\\nLine 213\\nLine 214\\nLine 215\\n\\nLine 216\\nLine 217\\nLine 218\\nLine 219\\nLine 220\\n\\nLine 221\\nLine 222\\nLine 223\\nLine 224\\nLine 225\\n\\nLine 226\\nLine 227\\nLine 228\\nLine 229\\nLine 230\\n\\nLine 231\\nLine 232\\nLine 233\\nLine 234\\nLine 235\\n\\nLine 236\\nLine 237\\nLine 238\\nLine 239\\nLine 240\\n\\nLine 241\\nLine 242\\nLine 243\\nLine 244\\n", "{\"response\": \"There once was a person so fine,\\nFrom a village so calm and divine,\\nThe people all loved him so bright,\\nAnd they danced through the night,\\nWith joy and delight,\\nAnd the stars shone with all their might,\\nIt was a magical sight,\\nThe world was full of delight.\\n\\nThere once was a river so wide,\\nThat flowed with a gentle pride,\\nThe fish swam with ease,\\nAnd the birds sang with breeze,\\nAnd the trees leaned to the side.\\n\\nThere once was a mountain so high,\\nThat touched the open sky,\\nThe wind blew with a gentle sigh,\\nAnd the clouds drifted by,\\nAnd the snow fell to the ground.\\n\\nThere once was a forest so dark,\\nThat sheltered the creatures' mark,\\nThe trees stood so tall,\\nThe animals stood after all,\\nAnd the moon shone with a gentle spark.\\n\\nThere once was a field so green,\\nThat stretched to the village unseen,\\nThe cows grazed with gentle ease,\\nThe birds sang with the breeze,\\nAnd the flowers bloomed with a gentle sheen.\\n\\nThere once was a lake so blue,\\nThat reflected the sky anew,\\nThe ripples of the water,\\nThe fish swam to gather,\\nAnd the sun shone with a warm hue.\\n\\nThere once was a tree so strong,\\nThat stood through the winter long,\\nThe snow fell with a gentle hush,\\nThe branches stood in a gentle rush,\\nAnd the wind blew with a gentle song.\\n\\nThere once was a road so wide,\\nThat led to the other side,\\nThe travelers walked with a steady pace,\\nThe sun shone with a warm face,\\nAnd the trees leaned to the ground.\\n\\nThere once was a flower so bright,\\nThat bloomed in the morning light,\\nThe bees buzzed with a gentle hum,\\nThe petals shone with a gentle drum,\\nAnd the scent filled the air so bright.\", \"result\": true}\n{\"response\": \"There once was a river so wide,\\nThat flowed with a gentle pride,\\nThe fish swam with ease,\\nAnd the birds sang with breeze,\\nAnd the trees leaned to the side.\\n\\nThere once was a mountain so high,\\nThat touched the open sky,\\nThe wind blew with a gentle sigh,\\nAnd the clouds drifted by,\\nAnd the snow fell to the ground.\\n\\nThere once was a forest so dark,\\nThat sheltered the creatures' mark,\\nThe trees stood so tall,\\nThe animals stood after all,\\nAnd the moon shone with a gentle spark.\\n\\nThere once was a field so green,\\nThat stretched to the village unseen,\\nThe cows grazed with gentle ease,\\nThe birds sang with the breeze,\\nAnd the flowers bloomed with a gentle sheen.\\n\\nThere once was a lake so blue,\\nThat reflected the sky anew,\\nThe ripples of the water,\\nThe fish swam to gather,\\nAnd the sun shone with a warm hue.\\n\\nThere once was a tree so strong,\\nThat stood through the winter long,\\nThe snow fell with a gentle hush,\\nThe branches stood in a gentle rush,\\nAnd the wind blew with a gentle song.\\n\\nThere once was a road so wide,\\nThat led to the other side,\\nThe travelers walked with a steady pace,\\nThe sun shone with a warm face,\\nAnd the trees leaned to the ground.\\n\\nThere once was a flower so bright,\\nThat bloomed in the morning light,\\nThe bees buzzed with a gentle hum,\\nThe petals shone with a gentle drum,\\nAnd the scent filled the air so bright.\", \"result\": false}\n{\"response\": \"There once was a person so fine,\\nFrom a village so calm and divine,\\nThe people all loved him so bright,\\nAnd they danced through the night,\\nWith joy and delight,\\nAnd the stars shone with all their might,\\nIt was a magical sight,\\nThe world was full of delight.\\n\\nThere once was a river so wide,\\nThat flowed with a gentle pride,\\nThe fish swam with ease,\\nAnd the birds sang with breeze,\\nAnd the trees leaned to the side.\\n\\nThere once was a mountain so high,\\nThat touched the open sky,\\nThe wind blew with a gentle sigh,\\nAnd the clouds drifted by,\\nAnd the snow fell to the ground.\\n\\nThere once was a forest so dark,\\nThat sheltered the creatures' mark,\\nThe trees stood so tall,\\nThe animals stood after all,\\nAnd the moon shone with a gentle spark.\\n\\nThere once was a field so green,\\nThat stretched to the village unseen,\\nThe cows grazed with gentle ease,\\nThe birds sang with the breeze,\\nAnd the flowers bloomed with a gentle sheen.\\n\\nThere once was a lake so blue,\\nThat reflected the", "{\"response\": \"The sun shines bright in the morning sky,\nBirds sing sweet melodies so high,\nTheir songs echo through the air,\nFilling our hearts with joy and care,\nFilling our souls with love and light.\n\nThe stars come out at night,\nTwinkling like diamonds so bright,\nA celestial show in the sky,\nA magic display that catches the eye,\nA wonder that fills our sight.\n\nThe world is full of beauty and might,\nA place where dreams come alive tonight,\nWhere hope and love shine like a light,\nGuiding us through the darkest night,\nFilling our hearts with delight.\n\nThe sea is vast and deep and wide,\nA place where waves crash and abide,\nWhere the salty scent of the sea air,\nFills our lungs with freshness rare,\nFilling our souls with peace inside.\n\nThe mountains stand tall and strong and free,\nA place where eagles soar with glee,\nWhere the wind whispers secrets in our ear,\nFilling our hearts with wonder and cheer,\nFilling our souls with wild liberty.\n\nThe forest is a place of rest,\nWhere trees stand tall and beeches nest,\nWhere the rustling leaves tell a tale,\nFilling our hearts with stories to hail,\nFilling our souls with peaceful nest.\n\nThe river flows with a gentle stream,\nWhere the fish swim and the water's dream,\nWhere the sun's warm rays shine so bright,\nFilling our hearts with pure delight,\nFilling our souls with calm and beam.\n\nThe clouds drift by with a gentle pace,\nWhere the birds fly and the winds take space,\nWhere the rain comes down with a soothing sound,\nFilling our hearts with love profound,\nFilling our souls with peace and grace.\n\nThe world is full of wonder and might,\nA place where dreams come alive tonight,\nWhere hope and love shine like a light,\nGuiding us through the darkest night,\nFilling our hearts with delight.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning sky, Birds sing sweet melodies so high, Their songs echo through the air, Filling our hearts with joy and care, Filling our souls with love and light. The stars come out at night, Twinkling like diamonds so bright, A celestial show in the sky, A magic display that catches the eye, A wonder that fills our sight. The world is full of beauty and might, A place where dreams come alive tonight, Where hope and love shine like a light, Guiding us through the darkest night, Filling our hearts with delight. The sea is vast and deep and wide, A place where waves crash and abide, Where the salty scent of the sea air, Fills our lungs with freshness rare, Filling our souls with peace inside.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning sky, Birds sing sweet melodies so high, Their songs echo through the air, Filling our hearts with joy and care, Filling our souls with love and light. The stars come out at night, Twinkling like diamonds so bright, A celestial show in the sky, A magic display that catches the eye, A wonder that fills our sight. The world is full of beauty and might, A place where dreams come alive tonight, Where hope and love shine like a light, Guiding us through the darkest night, Filling our hearts with delight. The sea is vast and deep and wide, A place where waves crash and abide, Where the salty scent of the sea air, Fills our lungs with freshness rare, Filling our souls with peace inside. The mountains stand tall and strong and free, A place where eagles soar with glee, Where the wind whispers secrets in our ear, Filling our hearts with wonder and cheer, Filling our souls with wild liberty. The forest is a place of rest, Where trees stand tall and beeches nest, Where the rustling leaves tell a tale, Filling our hearts with stories to hail, Filling our souls with peaceful nest. The river flows with a gentle stream, Where the fish swim and the water's dream, Where the sun's warm rays shine so bright, Filling our hearts with pure delight, Filling our souls with calm and beam. The clouds drift by with a gentle pace, Where the birds fly and the winds take space, Where the rain comes down with a soothing sound, Filling our hearts with love profound, Filling our souls with peace and grace. The world is full of wonder and might, A place where dreams come alive tonight, Where hope and love shine like a light, Guiding us through the darkest night, Filling our hearts with delight. The sea is vast and deep and wide, A place where waves crash and abide, Where the salty scent of the sea air, Fills our lungs with freshness rare, Filling our souls with peace inside. The mountains stand tall and strong and free, A place where eagles soar with glee, Where the wind whispers secrets in our ear, Filling our hearts with wonder and cheer, F", "{\"response\": \"The sun shines bright in the morning light\\nThe stars come out at night\\nThe world is full of beauty and delight\\nThe beauty of nature is a wonder to see\\nThe world is full of mystery\\n\\nThe sun sets slow and paints the sky\\nWith colors of red and gold and high\\nThe world is full of wonder and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of magic and light\\n\\nThe moon glows bright in the dark of night\\nThe world is full of peace and quiet delight\\nThe beauty of nature is a peaceful sight\\nThe world is full of calm and gentle might\\nThe world is full of wonder and light\\n\\nThe world is full of beauty and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of wonder and light\\nThe world is full of peace and quiet delight\\nThe world is full of calm and gentle might\\n\\nThe sun shines bright in the morning light\\nThe stars come out at night\\nThe world is full of beauty and delight\\nThe beauty of nature is a wonder to see\\nThe world is full of mystery\\n\\nThe world is full of wonder and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of peace and quiet delight\\nThe world is full of calm and gentle might\\nThe world is full of beauty and light\\n\\nThe moon glows bright in the dark of night\\nThe world is full of peace and quiet delight\\nThe beauty of nature is a peaceful sight\\nThe world is full of calm and gentle might\\nThe world is full of wonder and light\\n\\nThe world is full of wonder and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of peace and quiet delight\\nThe world is full of calm and gentle might\\nThe world is full of beauty and light\\n\\nThe world is full of wonder and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of peace and quiet delight\\nThe world is full of calm and gentle might\\nThe world is full of beauty and light\\n\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light\\nThe stars come out at night\\nThe world is full of beauty and delight\\nThe beauty of nature is a wonder to see\\n\", \"result\": false}\n\n{\"response\": \"The world is full of wonder and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of peace and quiet delight\\nThe world is full of calm and gentle might\\nThe world is full of beauty and light\\nThe world is full of wonder and might\\nThe beauty of nature is a treasure in sight\\nThe world is full of peace and quiet delight\\nThe world is full of calm and gentle might\\n\", \"result\": false}"]}
{"query": "https://stackoverflow.com/questions/75118341/react-native-sharp-box-shadow how can i solve this?", "instruction": "Answer in exactly 3 paragraphs, 150 words each", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n')) == 3 and all(len(paragraph) == 150 for paragraph in response.split('\\n\\n'))\n", "def evaluate(response: str) -> bool: \n    paras = response.split('\\n\\n') \n    return len(paras) == 3 and all(len(para.split()) >= 30 and len(para.split()) <= 60 for para in paras)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    return len(paragraphs) == 3 and all(len(p.split()) >= 100 and len(p.split()) <= 160 for p in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    return len(paragraphs) == 3 and all(len(paragraph) == 150 for paragraph in paragraphs)\n"], "testcases": ["{\"response\": \"This is the first paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\\nThis is the second paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\\nThis is the third paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\", \"result\": true}\n{\"response\": \"This is the first paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\\nThis is the second paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\", \"result\": false}\n{\"response\": \"This is the first paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\\nThis is the second paragraph of a three-paragraph answer, where each paragraph is 150 words long.\\n\\nThis is the third paragraph of a three-paragraph answer, where each paragraph is 151 words long.\\n\", \"result\": false}", "{\"response\": \"This is the first paragraph. It has a lot of words. It is very long. The words are very many. It has many words. It is very long. It is the first paragraph. The first paragraph is long. This is the first paragraph. It has many words. It is very long. It has many words. It has many words. It has many words.\\n\\nThis is the second paragraph. It also has many words. It is very long. It has many words. It is very long. The second paragraph is long. This is the second paragraph. It has many words. It has many words. It has many words. It has many words. It has many words. It has many words.\\n\\nThis is the third paragraph. It also has many words. It is very long. It has many words. It is very long. The third paragraph is long. This is the third paragraph. It has many words. It has many words. It has many words. It has many words. It has many words. It has many words.\", \"result\": true}\n{\"response\": \"This is the first paragraph. It has a lot of words. It is very long. The words are very many. It has many words.\", \"result\": false}\n{\"response\": \"This is the first paragraph. It has a lot of words. It is very long. The words are very many. It has many words. It is very long. It is the first paragraph. The first paragraph is long. This is the first paragraph. It has many words. It is very long. It has many words.\\n\\nThis is the second paragraph. It also has many words. It is very long. It has many words. It is very long. The second paragraph is long. This is the second paragraph. It has many words. It has many words. It has many words. It has many words. It has many words.\\n\\nThis is the third paragraph. It also has many words. It is very long. It has many words. It is very long. The third paragraph is long. This is the third paragraph. It has many words. It has many words. It has many words. It has many words. It has many words. It has many words. It has many more words.\", \"result\": false}", "{\"response\": \"The sky is blue. The sun is shining. The birds are singing. The grass is green. The flowers are blooming. The trees are swaying. The wind is blowing. The clouds are white. The mountains are majestic. The sea is vast. The desert is dry. The forest is dense. The jungle is lush. The ice is cold. The snow is crisp. The fire is warm. The water is refreshing.\\nThe moon is full. The stars are twinkling. The night is dark. The world is quiet. The shadows are long. The darkness is eerie. The silence is profound. The stillness is peaceful. The calm is soothing.\\nThe earth is rotating. The planets are orbiting. The galaxies are colliding. The universe is expanding. The cosmos is vast. The mysteries are endless. The secrets are hidden. The truth is unknown. The beauty is breathtaking. The wonder is awe-inspiring.\", \"result\": false}\n\n{\"response\": \"The sky is blue. The sun is shining. The birds are singing. The grass is green. The flowers are blooming. The trees are swaying. The wind is blowing. The clouds are white. The mountains are majestic. The sea is vast. The desert is dry. The forest is dense. The jungle is lush.\\nThe moon is full. The stars are twinkling. The night is dark. The world is quiet. The shadows are long. The darkness is eerie. The silence is profound. The stillness is peaceful.\\nThe earth is rotating. The planets are orbiting. The galaxies are colliding. The universe is expanding. The cosmos is vast. The mysteries are endless. The secrets are hidden. The truth is unknown. The beauty is breathtaking. The wonder is awe-inspiring. The complexity is mind-boggling.\", \"result\": false}\n\n{\"response\": \"The sky is blue. The sun is shining. The birds are singing. The grass is green. The flowers are blooming. The trees are swaying. The wind is blowing. The clouds are white. The mountains are majestic. The sea is vast. The desert is dry. The forest is dense. The jungle is lush.\\nThe moon is full. The stars are twinkling. The night is dark. The world is quiet. The shadows are long. The darkness is eerie. The silence is profound. The stillness is peaceful. The calm is soothing. The earth is rotating. The planets are orbiting. The galaxies are colliding. The universe is expanding. The cosmos is vast. The mysteries are endless. The secrets are hidden. The truth is unknown. The beauty is breathtaking. The wonder is awe-inspiring. The complexity is mind-boggling. The reality is staggering. The depth is infinite. The height is unmeasurable. The length is immeasurable. The width is infinite. The breadth is unmeasurable.\", \"result\": true}", "{\"response\": \"The world is a beautiful place. It's full of wonder and excitement. Every day is a new opportunity to explore and learn. Nature is a great teacher, and the outdoors is full of lessons to be learned. The stars in the sky are a reminder of the vastness and mystery of the universe.\\n\\nThe sun shines brightly every morning, bringing light and warmth to our world. The trees sway gently in the breeze, their leaves rustling softly against each other. The sound of birds chirping fills the air, a symphony of song and joy. The world is a place of beauty and wonder.\\n\\nBut it's not just the natural world that's full of wonder. The human spirit is capable of great things. People from all walks of life come together to create and innovate, to build and discover. The world is a place of endless possibility, where anything can happen and anything is possible.\\n\\nThe world is a complex and ever-changing place. It's a place of great beauty and great challenge. But it's also a place of great wonder and great possibility. There's always something new to learn, always something new to discover.\", \"result\": true}\n\n{\"response\": \"The world is a beautiful place. It's full of wonder and excitement. Every day is a new opportunity to explore and learn. Nature is a great teacher, and the outdoors is full of lessons to be learned. The stars in the sky are a reminder of the vastness and mystery of the universe.\\n\\nThe sun shines brightly every morning, bringing light and warmth to our world. The trees sway gently in the breeze, their leaves rustling softly against each other. The sound of birds chirping fills the air, a symphony of song and joy. The world is a place of beauty and wonder.\\n\\nBut it's not just the natural world that's full of wonder. The human spirit is capable of great things. People from all walks of life come together to create and innovate, to build and discover.\", \"result\": false}\n\n{\"response\": \"The world is a complex and ever-changing place. It's a place of great beauty and great challenge. But it's also a place of great wonder and great possibility. There's always something new to learn, always something new to discover. The world is a place of endless possibility, where anything can happen and anything is possible.\", \"result\": false}"]}
{"query": "how will you convince management about you design ideas and new features?", "instruction": "Write a single sentence that includes exactly three metaphors.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        for word in words:\n            if 'like' in word or 'as' in word:\n                count += 1\n    return count == 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence:  # ignore empty strings\n            metaphors = [word for word in sentence.split() if word[0].lower() == 'like' or word[0].lower() == 'as']\n            return len(metaphors) == 3\n    return False\n", "def evaluate(response: str) -> bool: \n    return response.count('like') == 0 and response.count('as') == 3 and response.count('such as') == 0\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    count = 0\n    for i in range(len(words) - 1):\n        for j in range(i + 1, len(words)):\n            if words[i].endswith(\"like\") and words[j].startswith(\"is\"):\n                count += 1\n            if words[i].endswith(\"as\") and words[j].startswith(\"is\"):\n                count += 1\n            if count >= 3:\n                break\n    return count == 3\n"], "testcases": ["{\"response\": \"Life is a rollercoaster that's always twisting and turning, like a snake that's always hissing.\", \"result\": false}\n{\"response\": \"The world is a battlefield where you have to fight to survive, like a warrior who's armed with a sword.\", \"result\": false}\n{\"response\": \"Life is a canvas that's waiting to be painted, and we are the artists who get to create our own masterpieces.\", \"result\": false}\n\nNote: These test cases are designed to ensure that the function correctly identifies a single sentence that includes exactly three metaphors. In this case, the function would likely return False because none of these sentences have exactly three metaphors.", "{\"response\": \"Life is a journey, the city is a jungle, and time is a thief.\", \"result\": true}\n{\"response\": \"This cake is delicious and beautiful.\", \"result\": false}\n{\"response\": \"The world is a book, a stage is a prison, and silence is golden.\", \"result\": true}", "{\"response\": \"She was a shining star on the soccer field.\", \"result\": false}\n{\"response\": \"The city was a jungle, and he was a lion searching for his pride.\", \"result\": true}\n{\"response\": \"The sunset was a painting, and the sea was a canvas of blue hues.\", \"result\": true}", "{\"response\": \"The city was a beast that swallowed us whole, a whirlpool that pulled us in with its darkness and mystery, and a labyrinth that we couldn't escape.\", \"result\": true}\n{\"response\": \"The city was a beautiful place with a lot of history.\", \"result\": false}\n{\"response\": \"The city was a beast that swallowed us whole and a labyrinth that we couldn't escape, but it was also a garden full of life and wonder.\", \"result\": false}"]}
{"query": "write a story about siblings Hannah and Lucas saving the world", "instruction": "Use exactly 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50 \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n"], "testcases": ["{\"response\": \"The world is like a puzzle that needs to be solved. Each piece is like a small rock that we need to place in its right spot. We must be patient and persistent to find the right solution. Our time is like a river that keeps flowing.\", \"result\": false}\n{\"response\": \"Life is like a journey with twists and turns. We must adapt to the situation and be brave to move forward. Our hearts are like flowers that need to be watered to bloom.\", \"result\": true}\n{\"response\": \"A person is like a tree that grows and changes with time. We need to nurture our growth and face challenges head-on to become strong. Our thoughts are like rivers that flow into the ocean of our soul.\", \"result\": true}", "{\"response\": \"The cat is sleeping like a lion and purring softly as the sun shines through the window. The sound is as soothing as a gentle stream flowing through a forest. Her warmth is as comforting as a warm blanket on a cold winter's day.\", \"result\": true}\n{\"response\": \"The cat is sleeping like a lion and purring softly as the sun shines through the window.\", \"result\": false}\n{\"response\": \"The cat is sleeping like a lion and purring softly as the sun shines through the window. The sound is as soothing as a gentle stream flowing through a forest. Her warmth is as comforting as a warm blanket on a cold winter's day. The cat's fur is soft like silk and its eyes are bright like diamonds.\", \"result\": false}", "{\"response\": \"The sun was shining brightly in the clear blue sky today, making everything look very beautiful and peaceful.\", \"result\": true}\n{\"response\": \"The weather forecast says there is a high chance of rain tomorrow.\", \"result\": false}\n{\"response\": \"The flowers were blooming in the garden, their vibrant colors making it look very lovely and serene.\", \"result\": true}", "{\"response\": \"The cat is a small cat, the cat is a tiny cat.\", \"result\": false}\n{\"response\": \"The cat is a small cat, the cat is a tiny cat and very cute.\", \"result\": false}\n{\"response\": \"The cat is a small cat and very cute.\", \"result\": false}"]}
{"query": "this chat is general questions", "instruction": "answer in the form of a short story", "verifiers": ["def evaluate(response: str) -> bool: \n    return not '.' in response and '!' in response\n", "def evaluate(response: str) -> bool: \n    return any(word.lower() in ['a','an', 'the', 'in', 'on', 'at', 'by', 'with'] for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(word.istitle() for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return'story' in response.lower() and'short' in response.lower() \n"], "testcases": ["{\"response\": \"Once upon a time, there was a man who lived in a small village. He had a wonderful dog named Max. The dog loved to run and play fetch. One day, they found a beautiful house to live in, and they lived happily ever after.\", \"result\": true}\n{\"response\": \"The man walked into a bar and ordered a beer. As he was sipping his drink, he heard a voice say, 'Nice tie!' He looked around, but there was nobody nearby who could have said it.\", \"result\": false}\n{\"response\": \"There was a black cat. It had shiny eyes. It was playing with a ball of yarn.\", \"result\": true}", "{\"response\": \"Once upon a time, in a far-off land, there was a beautiful princess named Sophia. She had long, flowing hair and sparkling blue eyes. She was kind and gentle, loved by all who knew her.\", \"result\": true}\n{\"response\": \"This is a short story about a cat. The cat sat on a mat.\", \"result\": true}\n{\"response\": \"My favorite food is pizza\", \"result\": false}", "{\"response\": \"Once upon a time, in a far-off kingdom, a brave knight slayed a fire-breathing dragon.\", \"result\": true}\n{\"response\": \"This product has the following features: fast shipping, good price, and high quality.\", \"result\": false}\n{\"response\": \"The beautiful sunset cast a warm orange glow over the rolling hills and vast ocean.\", \"result\": true}", "{\"response\": \"Once upon a time, there was a cat. She loved to play outside. The sun was shining and birds were singing.\", \"result\": true}\n{\"response\": \"I ate a sandwich for lunch today. It was very delicious. I feel happy now.\", \"result\": false}\n{\"response\": \"Once upon a time, in a far away land, there lived a beautiful princess. She had long golden hair and sparkling blue eyes. The prince fell in love with her instantly. They lived happily ever after.\", \"result\": true}"]}
{"query": "Travel plans for pattaya, thailand", "instruction": "Write in iambic pentameter", "verifiers": ["def evaluate(response: str) -> bool:    \n    iambic_pentameter_pattern = \"U*U*U*U*U*\"\n    iambic_pentameter_count = 0\n    previous_stress = \"D\"\n\n    for char in response:\n        if char.isalpha():\n            if previous_stress == \"U\":\n                if char.lower() in 'aeiou':\n                    iambic_pentameter_count += 1\n                    previous_stress = \"D\"\n                else:\n                    previous_stress = \"U\"\n            else:\n                if char.lower() in 'bcdfghjklmnpqrstvwxyz':\n                    iambic_pentameter_count += 1\n                    previous_stress = \"U\"\n                else:\n                    previous_stress = \"D\"\n        if iambic_pentameter_count == 10:\n            iambic_pentameter_count = 0\n\n    return len(response) > 0 and iambic_pentameter_count % 5 == 0 and iambic_pentameter_count > 0\n", "def evaluate(response: str) -> bool: \n    def count_vowels(word: str) -> int:\n        return sum(1 for char in word if char.lower() in 'aeiou')\n    \n    def count_syllables(word: str) -> int:\n        count = 0\n        for i in range(len(word)):\n            if word[i] in 'aeiou' or (i > 0 and word[i-1] in 'aeiou' and word[i] not in 'aeiou'):\n                count += 1\n        return count\n    \n    def iambic_pentameter(line: str) -> bool:\n        words = line.split()\n        syllable_count = sum(count_syllables(word) for word in words)\n        vowel_count = sum(count_vowels(word) for word in words)\n        return syllable_count == 10 and vowel_count > 6 and len(words) == 5\n    \n    lines = response.split('\\n')\n    return all(iambic_pentameter(line) for line in lines)\n", "def evaluate(response: str) -> bool:    \n    response = response.lower()\n    iambic_pentameter_rules = ['iambic', 'pentameter']\n    for rule in iambic_pentameter_rules:\n        if rule not in response:\n            return False\n    for word in response.split():\n        word_count = 0\n        for char in word:\n            if char.lower() in 'aeiou':\n                word_count += 1\n        if word_count % 2!= 1:\n            return False\n        if len(word) > 10:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    foot_pattern = \"daDUM daDUM daDUM daDUM daDUM\"\n    response = response.replace(\" \", \"\").upper()\n    return len(response) == len(foot_pattern) and all(response[i:i+5] in foot_pattern for i in range(0, len(response), 5))\n"], "testcases": ["{\"response\": \"The moon glows bright with silvery light\", \"result\": false}\n{\"response\": \"The sun sets slow and paints the west with golden hue\", \"result\": false}\n{\"response\": \"The stars come out and twinkle in the midnight sky, and a gentle breeze does whisper by\", \"result\": false}", "{\"response\": \"The sun sets slow and paints the sky with hues of red and gold\\nThe stars appear one by one like diamonds in the fold\\nThe world is quiet and the moon is high\\nThe night air whispers secrets as the wind goes by\\nThe darkness reigns and all is still and cold\", \"result\": true}\n{\"response\": \"The sun sets slow and paints the sky with red and gold\\nThe stars appear one by one like diamonds in the sky\\nThe world is quiet and the moon is not that high\\nThe night air whispers secrets as the wind is cold\\nThe darkness reigns and all is still\", \"result\": false}\n{\"response\": \"The sun sets slow and paints the sky with hues of red gold\\nThe stars appear one by one like diamonds in the fold\\nThe world is quiet and the moon is high\\nThe night air whispers secrets as the wind goes by\\nThe darkness reigns and all is still and very cold\", \"result\": false}", "{\"response\": \"In fair Verona, where we lay our scene, From ancient grudge break to new mutiny\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog and ran really fast.\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light, Birds sing their sweet melody so free\", \"result\": true}", "{\"response\": \"The sun shines bright in the clear blue sky\", \"result\": true}\n{\"response\": \"I love the beach it is my favorite place to be\", \"result\": false}\n{\"response\": \"The world is a beautiful and wondrous sight to see\", \"result\": true}"]}
{"query": "can you create my natal chart?", "instruction": "write the answer as a python program with at least 5 lines of code.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines >= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines >= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) >= 5\n"], "testcases": ["{\"response\": \"def calculate_sum():\\n    numbers = [1, 2, 3, 4, 5]\\n    return sum(numbers)\\nprint(calculate_sum())\\n\", \"result\": true}\n\n{\"response\": \"def calculate_sum():\\n    numbers = [1, 2, 3]\\n    return sum(numbers)\\nprint(calculate_sum())\", \"result\": false}\n\n{\"response\": \"import math\\nprint(math.pi)\\ndef calculate_sum():\\n    numbers = [1, 2, 3, 4, 5]\\n    return sum(numbers)\\nprint(calculate_sum())\", \"result\": true}", "{\"response\": \"import random\\ndef greet(name):\\n    print('Hello,'+ name)\\n    print('How are you today?')\\n    print('I hope you are having a great day.')\", \"result\": true}\n{\"response\": \"x = 5\", \"result\": false}\n{\"response\": \"def add(a, b):\\n    return a + b\\nprint(add(2, 3)\", \"result\": false}", "{\"response\": \"def my_function():\\n    x = 5\\n    y = 10\\n    print(x + y)\\n    print(x - y)\\n    print(x * y)\\n    print(x / y)\\n\", \"result\": true}\n\n{\"response\": \"print('Hello World!')\", \"result\": false}\n\n{\"response\": \"def my_function():\\n    print('Hello World!')\", \"result\": false}", "{\"response\": \"print('Hello World')\\nprint('This is a test')\\nprint('Python code is great')\\nprint('It is easy to use')\\nprint('For beginners')\", \"result\": true}\n{\"response\": \"print('Hello')\", \"result\": false}\n{\"response\": \"print('Hello World')\\nprint('This is a test')\\nprint('Python code is great')\", \"result\": false}"]}
{"query": "provide OG Title for this topic: How to Resolve Disputes Arising from Weather-Related Construction Delays", "instruction": "Be 5-7 sentences, include no more than 3 main points, and use only the last 6 letters of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    sentence_count = len([s for s in sentences if s.strip()])\n    word_count = sum(len(word.split()) for word in sentences)\n    last_6_letters_words = all(len(word[-6:]) == len(word) for word in response.split())\n    return 2 <= sentence_count <= 7 and 1 <= word_count <= 3 and last_6_letters_words\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    last_6_letters = lambda word: word[-6:] if len(word) >= 6 else word\n    sentence_count = len(sentences)\n    main_points = len([sentence for sentence in sentences if sentence.count(',') >= 1])\n\n    return (5 <= sentence_count <= 7) and (main_points <= 3) and all(last_6_letters(word) == word[-6:] for word in response.split())\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    last_6 = [word[-6:] for word in response.split() if len(word) >= 6]\n    main_points = sum(1 for word in last_6 if word.startswith('P'))\n    \n    return 5 <= len(sentences) <= 7 and main_points <= 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    last_six_letters = [word[-6:] for word in words]\n    sentence_count = len(words) // 3\n    if sentence_count < 5 or sentence_count > 7:\n        return False\n    if len(words)!= len(last_six_letters):\n        return False\n    return True\n"], "testcases": ["{\"response\": \"This is a test. The test will check the response. It should be exactly 5 sentences. It should have 2 main points. The last 6 letters of each word will be used.\", \"result\": true}\n{\"response\": \"This is a test. The test will check the response. It should be exactly 5 sentences. It should have 2 main points. The last 6 letters of each word will be used. And the last 6 letters of each word will be used. It should be exactly 7 sentences.\", \"result\": false}\n{\"response\": \"This is a test. The test will check the response. It should be exactly 5 sentences. It should have 4 main points. The last 6 letters of each word will be used. This response is too long and has too many points.\", \"result\": false}", "{\"response\": \"Here are 5 sentences. This is the first point. This is the second point. This is the last point. The end of this response.\", \"result\": true}\n{\"response\": \"This response has more than 7 sentences. It also has more than 3 main points. However, it meets the last 6 letters condition.\", \"result\": false}\n{\"response\": \"This response is only 3 sentences long. It has 2 main points. Each word ends with the last 6 letters as required.\", \"result\": true}", "{\"response\": \"The main points to consider are: A, B, C. The solution involves the following steps: Y, O, U. The benefits of this approach include: P, I, N, G.\", \"result\": true}\n{\"response\": \"This solution involves multiple steps: T, H, I, S. Each step is crucial: A, R, C, R. However, there are many other approaches: S, O, L, U, T, I, O, N, S.\", \"result\": false}\n{\"response\": \"The process is as follows: A, I, M, P, L, E. However, it is not a straightforward solution: T, H, I, S, S. The main challenges are: A, P, P, R, O, A, C, H, E, S.\", \"result\": false}", "{\"response\": \"The cat sat on the mat. The dog ran outside. The sun was shining brightly. It was a beautiful day. Everything was calm. The bird flew by. The person walked by too. That's the story. It was a wonderful day. There is no more to say.\", \"result\": true}\n{\"response\": \"The sun was shining. The dog was barking. It was a wonderful day. It was not a nice day. It was a very nice day. Everything was good. The cat was sleeping. I don't know what to say.\", \"result\": false}\n{\"response\": \"The person went to the store. They bought some food. They went to the park. They saw a dog. The dog was happy. The sun was shining. The person went home.\", \"result\": false}"]}
{"query": "For kubernetes explain what an ingress server is", "instruction": "Use Python code to validate if the response is correct", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"Use Python code to validate\")<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return \"python\" in response.lower() \n", "def evaluate(response: str) -> bool: \n    return response.startswith('Python') and 'correct' in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response.lower() and 'correct' in response.lower()\n"], "testcases": ["{\"response\": \"Use Python code to validate the response. The response should be a Python program with at least 5 lines of code. This program should check the length of a string and return True if it's correct.\", \"result\": true}\n{\"response\": \"This is a short Python program\", \"result\": false}\n{\"response\": \"def validate_length(s):\\n    return len(s) == 10\\nprint(validate_length(\\\"HelloWorld\\\"))\", \"result\": true}", "{\"response\": \"print('Hello World!')\\nprint('This is a test')\\nprint('With 2 more lines')\\nprint('To complete the task')\\nprint('And add a little more')\\nprint('To the task at hand')\", \"result\": true}\n{\"response\": \"print('Hello World!')\", \"result\": false}\n{\"response\": \"print('Hello World!')\\nprint('This is a test')\\nprint('With 2 more lines')\\nprint('To complete the task')\\nprint('And add a little more')\\nprint('To the task at hand')\\nprint('And a little more')\", \"result\": false}", "{\"response\": \"The correct answer is: \\n1. This is point one.\\n2. This is point two.\\n3. This is point three.\\n4. This is point four.\\n5. This is point five.\\n6. This is point six.\\n7. This is point seven.\", \"result\": true}\n{\"response\": \"This is the correct answer, it's 6 points.\", \"result\": false}\n{\"response\": \"Here are the main points:\\n1. This is point one.\\n2. This is point two.\\n3. This is point three.\\n4. This is point four.\\n5. This is point five.\", \"result\": true}", "{\"response\": \"import os; print('Hello World!'); print('This is a test'); print('Python code is working'); print('Correct!'); print('Final check');\", \"result\": true}\n{\"response\": \"import os; print('Hello World!'); print('This is a test'); print('Python code is working'); print('Correct!');\", \"result\": false}\n{\"response\": \"import os; print('Hello World!'); print('This is a test'); print('Python code is working'); print('Final check'); print('Extra code here');\", \"result\": false}"]}
{"query": "Can you add more more about how Anna and John became experts in their fields before they became property develoeprs", "instruction": "Use only 5th, 10th, 15th letters of each word", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) < 15:\n            continue\n        if word[4]!= word[9]!= word[14]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return len(response) == len(set(response[i-1] for i in [5, 10, 15])) \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) < 15:\n            if word[4] not in ['5th', '10th', '15th'] or word[9] not in ['5th', '10th', '15th'] or word[14] not in ['5th', '10th', '15th']:\n                return False\n        else:\n            if word[4] not in ['5th', '10th', '15th'] or word[9] not in ['5th', '10th', '15th'] or word[14] not in ['5th', '10th', '15th']:\n                if word[4] not in ['th']:\n                    return False\n                if word[9] not in ['th']:\n                    return False\n                if word[14] not in ['th']:\n                    return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    result = all(len(word) >= 15 for word in words)\n    return result\n"], "testcases": ["{\"response\": \"This is a test string 1234567890123456789\", \"result\": false}\n{\"response\": \"Validate the 5th letter of each word\", \"result\": true}\n{\"response\": \"This is a test string 12345678901234567890\", \"result\": false}", "{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"This is a test\", \"result\": false}\n{\"response\": \"Python is a great language\", \"result\": false}", "{\"response\": \"This is 5th day of the 10th month and it is 15th of the day\", \"result\": true}\n{\"response\": \"This is a random sentence\", \"result\": false}\n{\"response\": \"The answer is hidden in the 5th, 10th, 15th letter of each word\", \"result\": true}", "{\"response\": \"Hello world beautiful Python\", \"result\": false}\n{\"response\": \"Python is 5th tenth fifteenth Python\", \"result\": true}\n{\"response\": \"Hello world fifteenth fifteenth fifteenth Python\", \"result\": false}"]}
{"query": "Write a JavaScript function that converts Quake Champions mouse sensitivity to CS:GO mouse sensitivity", "instruction": "Answer with a list of exactly five items", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split(',')) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split(', ')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 4 \n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 4 and response.count('{') == 1 and response.count('}') == 1\n"], "testcases": ["{\"response\": \"Apple, Banana, Cat, Dog, Elephant\", \"result\": true}\n{\"response\": \"Apple, Banana, Cat, Dog, Elephant, Fish\", \"result\": false}\n{\"response\": \"A list with only four items: Apple, Banana, Cat, Dog\", \"result\": false}", "{\"response\": \"Red, Blue, Green, Yellow, Purple\", \"result\": true}\n{\"response\": \"1, 2, 3, 4, 5, 6\", \"result\": false}\n{\"response\": \"Apple, Banana, Cherry, Date, Elderberry\", \"result\": true}", "{\"response\": \"Apple, Banana, Cherry, Date, Elderberry\", \"result\": true}\n{\"response\": \"One, Two, Three, Four, Five, Six\", \"result\": false}\n{\"response\": \"A, B, C, D, E, F\", \"result\": true}", "{\"response\": \"apple, banana, cherry, date, elderberry\", \"result\": true}\n{\"response\": \"The list of fruits is: apple banana cherry date\", \"result\": false}\n{\"response\": \"The list of fruits is: apple banana cherry date elderberry orange grape\", \"result\": false}"]}
{"query": "What exactly is \"thinking\"", "instruction": "Respond in exactly 6 sentences and 1 diagram", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.count('.') + response.count('!')\n    return sentences == 6 and response.count(' ')!= 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.count('.') + response.count('?') + response.count('!')\n    return sentences == 6 and response.count('\\n') == 1\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 6 and len(response) > 0 and not any(char.isalpha() for char in response if char!='' and char!= '\\n' and char!= '\\t' and char!='' and char.islower())\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 6 and any('diagram' in sentence or 'Diagram' in sentence for sentence in sentences)\n"], "testcases": ["{\"response\": \"This is a test.\\nThe diagram is below:\\nThis is a second sentence.\\nThis is a third sentence.\\nThis is a fourth sentence.\\nThis is a fifth sentence.\\nThis is a sixth sentence.\", \"result\": true}\n{\"response\": \"This is a test.\\nThis is a second sentence.\\nThis is a third sentence.\\nThis is a fourth sentence.\\nThis is a fifth sentence.\", \"result\": false}\n{\"response\": \"This is a test.\\nThis is a second sentence.\\nThis is a third sentence.\\nThis is a fourth sentence.\\nThis is a fifth sentence.\\nThis is a sixth sentence.\\nThis is a seventh sentence.\\nThis is a eighth sentence.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence and this is the seventh. This is the eighth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence and this is the seventh sentence.\", \"result\": false}", "{\"response\": \"This is a response. It has 6 sentences. The first sentence is in the first paragraph. The second sentence is also in the first paragraph. The third sentence is in the second paragraph. The fourth sentence is in the second paragraph. This is the end of the response.\", \"result\": true}\n{\"response\": \"This is a response. It has 6 sentences. The first sentence is in the first paragraph. The second sentence is also in the first paragraph. The third sentence is in the second paragraph. The fourth sentence is in the second paragraph.\", \"result\": false}\n{\"response\": \"This is a response. It has 7 sentences. The first sentence is in the first paragraph. The second sentence is also in the first paragraph. The third sentence is in the second paragraph. The fourth sentence is in the second paragraph. The fifth sentence is in the second paragraph. This is the end of the response.\", \"result\": false}", "{\"response\": \"The answer is a list with 5 items: 1. Item 1, 2. Item 2, 3. Item 3, 4. Item 4, 5. Item 5. There should be a diagram here. Here is one.\", \"result\": false}\n{\"response\": \"Here is a response with 6 sentences and 1 diagram: The answer is a list with 5 items. 1. Item 1. 2. Item 2. 3. Item 3. 4. Item 4. 5. Item 5. Here is a diagram.\", \"result\": false}\n{\"response\": \"The answer is a list with 5 items: 1. Item 1, 2. Item 2, 3. Item 3, 4. Item 4, 5. Item 5. Here is one diagram.\", \"result\": true}"]}
{"query": "Can you explain in simple terms the following: The ostomeatal units are patent bilaterally.", "instruction": "Use only 3 steps, each starting with a number", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return len(steps) == 3 and all(step.startswith(('1', '2', '3')) for step in steps)\n", "def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return all(step.strip().startswith(('1.', '2.', '3.')) for step in steps) \n", "def evaluate(response: str) -> bool: \n    steps = response.split('.')\n    return len(steps) == 3 and all(step.lstrip()[0].isdigit() for step in steps)\n", "def evaluate(response: str) -> bool: \n    steps = response.split('.') \n    for step in steps:\n        if not step.lstrip().startswith('1') and not step.lstrip().startswith('2') and not step.lstrip().startswith('3'):\n            return False\n    return len(steps) == 3\n"], "testcases": ["{\"response\": \"1. First step. 2. Second step. 3. Third step.\", \"result\": true}\n{\"response\": \"1. First step. 2. Second step. 3. Third step and fourth step.\", \"result\": false}\n{\"response\": \"1. First step. 2. Second step. Step three is next.\", \"result\": false}", "{\"response\": \"1. Use only these steps. 2. Follow the instructions. 3. Finish quickly.\", \"result\": true}\n{\"response\": \"1. Use only these steps. 2. Follow the instructions. 3. Finish quickly. 4. Have fun.\", \"result\": false}\n{\"response\": \"This is step 1. Step two is very important. Step three is where it's at. Step 4 is optional.\", \"result\": false}", "{\"response\": \"1. Learn the basics, 2. Practice regularly, 3. Be consistent.\", \"result\": true}\n{\"response\": \"To learn a new language, you should 1. start with the basics, practice regularly and be consistent.\", \"result\": false}\n{\"response\": \"1. Learn the basics. 2. Practice every day. 3. Be consistent in your efforts. And don't forget to stay motivated.\", \"result\": false}", "{\"response\": \"1. Go to the store. 2. Buy the milk. 3. Go home.\", \"result\": true}\n{\"response\": \"1. Go to the store. Buy the milk. Go home.\", \"result\": false}\n{\"response\": \"1. Go to the store. 2. Buy the milk. 3. Go home. 4. Lock the door.\", \"result\": false}"]}
{"query": "how to make an AI bot to play rock paper scissors with computer?any ready API", "instruction": "Write the response in a flowchart format, with rectangles for processes and diamonds for decisions.", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"rectangle\" in response and \"diamond\" in response\n", "def evaluate(response: str) -> bool: \n    return'rectangle' in response.lower() and 'diamond' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return'rectangles' in response and 'diamonds' in response and 'flowchart' in response and 'processes' in response and 'decisions' in response\n", "def evaluate(response: str) -> bool: \n    return \"rectangle\" in response.lower() and \"diamond\" in response.lower()\n"], "testcases": ["{\"response\": \"This is a rectangle, which is a process. Then it's a diamond, which is a decision. The next step is a rectangle, which is another process.\", \"result\": true}\n{\"response\": \"This is a process. Then it's a decision. The next step is another process. Then it's a rectangle, which is a process. Then it's a decision, which is not allowed.\", \"result\": false}\n{\"response\": \"This is a diamond, which is a decision. Then it's a rectangle, which is a process. Then it's a process, then it's a rectangle, which is another process, but no decision is present.\", \"result\": false}", "{\"response\": \"The flowchart has a rectangle with a process, a diamond for decision, and another rectangle for a next process.\", \"result\": true}\n{\"response\": \"The response is a simple paragraph with no flowchart elements.\", \"result\": false}\n{\"response\": \"The flowchart has a rectangle with a process, and a diamond for decision, but the next rectangle is missing.\", \"result\": false}", "{\"response\": \"The process begins with a rectangle with the title 'Start'.\\nIt leads to a diamond for the decision 'Do we have enough resources?'\\nThe yes path leads to a rectangle with the title 'Gather resources' and the no path leads to a rectangle with the title 'Postpone'.\", \"result\": true}\n{\"response\": \"The process begins with a rectangle with the title 'Start'. It leads to a rectangle with the title 'Gather resources' and then to a rectangle with the title 'Postpone'.\", \"result\": false}\n{\"response\": \"The process begins with a rectangle with the title 'Start'. It leads to a diamond for the decision 'Do we have enough resources?' and then to two rectangles with the titles 'Gather resources' and 'Postpone'.\", \"result\": false}", "{\"response\": \"A flowchart with rectangles for processes and diamonds for decisions is shown below. This flowchart is very easy to understand because it uses clear boxes and arrows to describe the steps.\", \"result\": true}\n{\"response\": \"I love this idea! Here is a flowchart showing the steps involved in planning a vacation. It includes a square for the start and a circle for the end.\", \"result\": false}\n{\"response\": \"A flowchart with rectangles for processes and diamonds for decisions is shown below. It has a big oval for the start and a diamond for the decision. The arrows are a bit confusing though.\", \"result\": true}"]}
{"query": "write a cross examination of a neurologist who claims that the plaintiff did not suffer a mild traumatic brain injury when a heavy metal door hit him on the top of the head with 50 pounds of force", "instruction": "Assume the doctor's testimony can be verified or disproven through objective data, use no anecdotes.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'anecdote' not in response.lower() and 'anecdotes' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'anecdote' not in response.lower() and 'personal' not in response.lower() and'subjective' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    return 'anecdote' not in response and 'anecdotes' not in response \n", "def evaluate(response: str) -> bool: \n    words = response.lower().split()\n    return all(word not in word for word in words) \n"], "testcases": ["{\"response\": \"This patient had a serious allergic reaction to a common medication, and the data clearly shows that it was due to the medication's side effects.\", \"result\": true}\n{\"response\": \"I've heard from a few friends who have taken this medication and they all had a great experience with it.\", \"result\": false}\n{\"response\": \"According to the medical literature, this medication has been thoroughly tested and proven to be safe for most patients.\", \"result\": true}", "{\"response\": \"A patient with a similar condition experienced severe side effects after taking the medication, which is a notable observation.\", \"result\": false}\n{\"response\": \"The study found that the new treatment was 95% effective in reducing symptoms, backed by data from 500 participants.\", \"result\": true}\n{\"response\": \"In my years of experience, I've seen many patients with this condition respond well to this treatment, which is why I recommend it.\", \"result\": false}", "{\"response\": \"I can confirm that the new treatment is effective through a controlled study.\", \"result\": true}\n{\"response\": \"I've seen this happen many times in my years as a doctor, and I believe the new treatment is a game-changer.\", \"result\": false}\n{\"response\": \"I can verify the new treatment's efficacy through a systematic review of patient outcomes.\", \"result\": true}", "{\"response\": \"According to the CDC, the flu vaccine has been proven to reduce the risk of flu by 40-60%. This is a fact backed by numerous scientific studies.\", \"result\": true}\n{\"response\": \"I remember a patient who had the flu and didn't get vaccinated, but recovered just fine.\", \"result\": false}\n{\"response\": \"The doctor's statement that the new medicine cured his patient is not supported by any credible evidence or data.\", \"result\": true}"]}
{"query": "Google All In Title", "instruction": "Write the response in iambic pentameter", "verifiers": ["def evaluate(response: str) -> bool: \n    iambic_pentameter = ['daDUM daDUM daDUM daDUM daDUM', 'daDUM daDUM daDUM daDUM da']\n    iambic_pattern = 'daDUM'\n    response = response.upper()\n    for line in response.split('\\n'):\n        iambic_count = len(line) // len(iambic_pattern) * len(iambic_pattern)\n        if line.startswith('da') or not iambic_count == len(line):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words) < 5:\n            return False\n        if len(words) > 5:\n            return False\n        iambic_count = 0\n        for word in words:\n            if len(word) % 2 == 0:\n                iambic_count += 1\n        if iambic_count!= 2:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return response.count('u') == response.count('i') and len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response) == 10 and response.count('u') == 1 and response.count('e') == 2 and response.count('a') == 1 and response.count('i') == 2 and response.count('t') == 2 and response.count('m') == 1 and response.count('r') == 1 and response.count('s') == 1 and response.count('p') == 1 and response.count('n') == 1 and response.count('d') == 1 and response.count(' ') == 7\n"], "testcases": ["{\"response\": \"The doctor said 'daDUM daDUM daDUM daDUM da', 'daDUM daDUM daDUM daDUM da'.\", \"result\": true}\n{\"response\": \"The patient was very ill, but got better daDUM daDUM daDUM daDUM da, after some rest and medication.\", \"result\": true}\n{\"response\": \"The symptoms are caused by a rare disease daDUM daDUM daDUM daDUM da. It's not usually fatal, but treatment is needed.\", \"result\": true}", "{\"response\": \"The doctor said with confidence high\\nI will recover from this sickness and fly\\nBut without medicine my health will decline\\nSo I will follow the doctor's instructions fine\\nAnd I'll get well soon with the right treatment's sign\", \"result\": true}\n{\"response\": \"The doctor said I have a bad cold\\nI will get better with rest\\n\", \"result\": false}\n{\"response\": \"The doctor said with confidence high\\nI will recover from this sickness and fly\\nBut without medicine my health will decline\\nSo I will follow the doctor's instructions fine\\nAnd I'll get well soon with the right treatment's sign\\nAnd also my health will improve greatly\\nI will follow the doctor's advice with care\", \"result\": false}", "{\"response\": \"The doctor's testimony is clear and bright, Based on data, not on personal sight.\", \"result\": true}\n{\"response\": \"The doctor said she saw it with her own eyes\", \"result\": false}\n{\"response\": \"The doctor's words are supported by many a test, But the results are not yet fully expressed\", \"result\": true}", "{\"response\": \"In iambic pentameter's gentle flow, / my words do follow this poetic woe. / The rhythm's steady, the meter's fine, / a soothing sound that's truly divine.\", \"result\": true}\n{\"response\": \"This response is in free verse, no care, / no rhythm or meter to be found here.\", \"result\": false}\n{\"response\": \"The sun sets slow and paints the sky, / the stars come out and twinkle high, / the world is hushed, a peaceful sight, / in iambic pentameter's gentle light.\", \"result\": true}"]}
{"query": "Why am I unstable on my bike when it's stationary but not when it's moving?", "instruction": "Answer with a single equation that exactly 5 lines long, no longer", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(response) <= 25\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    if '\\n' in response: \n        return lines == 5 and response.split('\\n')[-1]!= ''\n    return False\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(response) < 27\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(lines[-1].strip())!= '' and len(''.join(lines[:-1])) <= 27\n"], "testcases": ["{\"response\": \"The equation: 2x + 5 = 11\\n 2x = 11 - 5\\n 2x = 6\\n x = 6/2\\n x = 3\", \"result\": true}\n{\"response\": \"The equation: 2x + 5 = 11\\n 2x = 11 - 5\\n x = 6/2\\n x = 3\", \"result\": false}\n{\"response\": \"The equation: 2x + 5 = 11\\n 2x = 11 - 5\\n 2x = 6\\n x = 6/2\\n x = 3\\n Final answer: 3\", \"result\": false}", "{\"response\": \"E=mc^2\\n1=1\\n2+2=4\\n3*3=9\\n4-1=3\", \"result\": true}\n{\"response\": \"2+2=4\\n3*3=9\", \"result\": false}\n{\"response\": \"E=mc^2\\n1=1\\n2+2=4\\n3*3=9\\n4-1=3\\n5-1=4\", \"result\": false}", "{\"response\": \"2 + 2 = 4\\n4 + 1 = 5\\n1 + 3 = 4\\n5 - 1 = 4\\n4 - 2 = 2\", \"result\": true}\n{\"response\": \"2 + 2 = 4\\n4 + 1 = 5\", \"result\": false}\n{\"response\": \"2 + 2 = 4\\n4 + 1 = 5\\n1 + 3 = 4\\n5 - 1 = 4\\n4 - 2 = 2\\n\", \"result\": false}", "{\"response\": \"2 + 2 = 4\", \"result\": false}\n{\"response\": \"x^2 + 3x - 4 = (x + 4)(x - 1)\", \"result\": false}\n{\"response\": \"f(x) = 2x + 5\\n\\nf(0) = 5\\n\\nf(2) = 9\\n\\nf(3) = 11\\n\\nf(4) = 13\", \"result\": true}"]}
{"query": "Can you describe how a treasury team at an asset manager would work? The goal would be for it to trade across all equity funds.", "instruction": "Use only nouns (no verbs, no adjectives)", "verifiers": ["def evaluate(response: str) -> bool: \n    all_letters = 'abcdefghijklmnopqrstuvwxyz'\n    response = response.lower()\n    verbs ='verb'\n    adjectives = 'adjective'\n    for word in response.split(): \n        for char in word:\n            if char in all_letters: \n                if char in verbs or char in adjectives: \n                    return False\n    return True\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiou'\n    words = response.lower().split()\n    for word in words:\n        if word[0].lower() in vowels:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    import nltk\n    nltk.download('averaged_perceptron_tagger')\n    word_tags = nltk.pos_tag(nltk.word_tokenize(response))\n    return all([tag in ['NN', 'NNS', 'NNP', 'NNPS'] for word, tag in word_tags])\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiouAEIOU'\n    words = response.split()\n    for word in words:\n        if word[-2:] not in [',s','es','ed','ing'] and word not in ['a', 'an', 'the', 'is', 'it', 'for'] and word[0] not in vowels and word[-1] not in vowels and word[-2] not in vowels:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The dog is happy. It's running quickly.\", \"result\": false}\n{\"response\": \"The mountain is tall and rocky.\", \"result\": false}\n{\"response\": \"The city, the house, the car.\", \"result\": true}", "{\"response\": \"Apple, House, Car\", \"result\": true}\n{\"response\": \"The car is blue and drives fast.\", \"result\": false}\n{\"response\": \"The apple fell on the ground and broke the window.\", \"result\": false}", "{\"response\": \"This is a test response with only nouns: Country, City, Mountain, River, Lake.\", \"result\": true}\n{\"response\": \"This is a test response with a verb: I love the country, but the city is full.\", \"result\": false}\n{\"response\": \"This is a test response with a few nouns: Book, Chair, Desk, Pencil.\", \"result\": false}", "{\"response\": \"apple chair tree pen\", \"result\": true}\n{\"response\": \"I am running quickly.\", \"result\": false}\n{\"response\": \"The big red car is moving.\", \"result\": false}"]}
{"query": "how to run hcl appsweep extension in vs code", "instruction": "write the response as a python function.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"def \") and response.endswith(\":\") and all(char.isalnum() or char.isspace() or char == ':' or char == '(' or char == ')' for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"def\") and response.endswith(\":\") and \"return\" in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"def \") and response.endswith(\":\") and \"return\" in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('def ') and '-> bool:' in response and response.count('\\n') == 2\n"], "testcases": ["{\"response\": \"def greet(): print('Hello, World!')\", \"result\": true}\n{\"response\": \"def multiply(x, y): return x * y\", \"result\": true}\n{\"response\": \"def add(x, y): return x + y\", \"result\": true}", "{\"response\": \"def evaluate(response): return response\", \"result\": true}\n{\"response\": \"def calculate_sum(numbers): return sum(numbers)\", \"result\": false}\n{\"response\": \"def greet(name): print('Hello,'+ name)\", \"result\": false}", "{\"response\": \"def evaluate(response): return response.startswith('def ') and response.endswith(':') and'return' in response\", \"result\": true}\n{\"response\": \"This is a response that does not contain a Python function definition\", \"result\": false}\n{\"response\": \"def my_function(): return 'Hello, World!' print('Hello, World!')\", \"result\": false}", "{\"response\": \"def evaluate(response: str) -> bool: return True\", \"result\": true}\n{\"response\": \"def evaluate(response: str) -> bool: return False\", \"result\": true}\n{\"response\": \"def calculate(x: int, y: int) -> int: return x + y\", \"result\": false}"]}
{"query": "What are the three domains and the corresponding knowledge and competencies that students must demonstrate proficiency in upon completion of a program?", "instruction": "Use a minimum of three subheadings, at least one list, and exactly 25 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    subheadings = response.count('###') >= 3\n    has_list = '###'in response or '-'in response or '*'in response\n    word_count = len(response.split())\n    return subheadings and has_list and 25 <= word_count <= 25\n", "def evaluate(response: str) -> bool:    \n    min_subheadings = response.lower().count('###') >= 3\n    has_list = any('[' in line and ']' in line for line in response.split('\\n'))\n    word_count = len(response.split())\n    return min_subheadings and has_list and 24 <= word_count <= 25\n", "def evaluate(response: str) -> bool: \n    min_subheadings = response.count('#') >= 3\n    min_list = any('[' in line for line in response.split('\\n'))\n    min_words = len(response.split()) == 25\n    return min_subheadings and min_list and min_words\n", "def evaluate(response: str) -> bool: \n    subheadings = ['H2', 'h2', 'h2.', 'h2 ']\n    min_subheadings = 3\n    if len(subheadings)!= 0:\n        subheading_count = 0\n        for word in response.split():\n            if any(word == heading for heading in subheadings):\n                subheading_count += 1\n    else:\n        subheading_count = 0\n    return (subheading_count >= min_subheadings) and ('[' in response) and (len(response.split()) == 25)\n"], "testcases": ["{\"response\": \"### Step 1\\n### Step 2\\n### Step 3\\n- Item 1\\n- Item 2\\nThis is a short response with 25 words\", \"result\": false}\n{\"response\": \"### Step 1\\n### Step 2\\n### Step 3\\n- Item 1\\n- Item 2\\nThis is a very long response with 26 words\", \"result\": false}\n{\"response\": \"### Step 1\\n- Item 1\\n### Step 2\\n- Item 2\\nThis is a response with 25 words\", \"result\": true}", "{\"response\": \"### Introduction\\n#### Step 1: Prepare the materials\\n#### Step 2: Perform the task\\n* List item 1\\n* List item 2\\nThis is a test with 23 words.\", \"result\": false}\n{\"response\": \"### Introduction\\n#### Step 1: Prepare the materials\\n#### Step 2: Perform the task\\n* List item 1\\n* List item 2\\nThis is a test with 25 words.\", \"result\": true}\n{\"response\": \"### Introduction\\n### Step 1: Prepare the materials\\n### Step 2: Perform the task\\n* List item 1\\n* List item 2\\nThis is a test with 22 words.\", \"result\": false}", "{\"response\": \"## Heading 1\\n## Heading 2\\n## Heading 3\\n- List item 1\\n- List item 2\\n- List item 3\\nThis is a description of a topic and its supporting details.\\nAnd here is another sentence with more information.\", \"result\": true}\n{\"response\": \"## Heading 1\\n## Heading 2\\nThis is a short description\\nAnd here is another sentence with more information.\", \"result\": false}\n{\"response\": \"## Heading 1\\n## Heading 2\\n## Heading 3\\nThis is a description of a topic and its supporting details.\\nAnd here is another sentence with more information.\\nList item 1\\nList item 2\\nList item 3\\nList item 4\", \"result\": false}", "{\"response\": \"## Heading 1\\n## Heading 2\\n## Heading 3\\n* List item 1\\nList item 2\\nList item 3\\nThis is a sentence with exactly 25 words\", \"result\": true}\n{\"response\": \"## Heading 1\\n## Heading 2\\nThis is a sentence with exactly 24 words\", \"result\": false}\n{\"response\": \"## Heading 1\\n## Heading 2\\n## Heading 3\\nThis is a sentence with more than 25 words\", \"result\": false}"]}
{"query": "what is the pi number", "instruction": "Use at least three numerical values", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.isdigit():\n            count += 1\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.isdigit():\n            count += 1\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    return sum(c.isdigit() for c in response) >= 3\n", "def evaluate(response: str) -> bool: \n    count = 0 \n    for char in response: \n        if char.isdigit(): \n            count += 1 \n    return count >= 3\n"], "testcases": ["{\"response\": \"There are 3 ways to learn a new skill, 1 option is online tutorials and the other 2 are in-person courses and workshops.\", \"result\": true}\n{\"response\": \"To create a budget, simply save 50% of your income.\", \"result\": true}\n{\"response\": \"The price of a single ticket to the concert is $100.\", \"result\": false}", "{\"response\": \"The numbers 1, 2 and 3 are well-known mathematical constants.\", \"result\": true}\n{\"response\": \"The most important point is to remember the date of your birthday.\", \"result\": false}\n{\"response\": \"It costs around $100 to register a new car in California, but this varies based on several factors.\", \"result\": true}", "{\"response\": \"The temperature is 25 degrees Celsius and the humidity is 80% in Sydney today.\", \"result\": true}\n{\"response\": \"The company's revenue increased by 10% last quarter and 20% this quarter.\", \"result\": false}\n{\"response\": \"The numbers 5, 7, 11 are significant in the Fibonacci sequence.\", \"result\": true}", "{\"response\": \"123 is a prime number.\", \"result\": false}\n{\"response\": \"The three dogs ran 4 miles per hour.\", \"result\": true}\n{\"response\": \"The temperature is 30 degrees Celsius and 20% humidity.\", \"result\": true}"]}
{"query": "what's a good abbreviation for questionnaire?", "instruction": "Use exactly 5 words, the first and last word should be in uppercase.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5 and words[0].isupper() and words[-1].isupper()\n", "def evaluate(response: str) -> bool: \n    return response.count(' ') == 4 and response[0].isupper() and response.split()[-1].isupper()", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5 and words[0].isupper() and words[-1].isupper()\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5 and response[0].isupper() and response[-1].isupper()\n"], "testcases": ["{\"response\": \"I LIKE THIS POEM VERY MUCH\", \"result\": true}\n{\"response\": \"This is a short and sweet poem\", \"result\": false}\n{\"response\": \"I ENJOY THIS BEAUTIFUL POETRY SO MUCH\", \"result\": true}", "{\"response\": \"HELLO this is a test sentence GOODBYE\", \"result\": true}\n{\"response\": \"Hello this is a nice day\", \"result\": false}\n{\"response\": \"HELLO this is a long good sentence GOODBYE\", \"result\": false}", "{\"response\": \"The Quick Brown Fox Jumps High\", \"result\": true}\n{\"response\": \"Hello world this is a test\", \"result\": false}\n{\"response\": \"THE GREEN APPLE IS SWEET\", \"result\": true}", "{\"response\": \"I LIKE THIS PROGRAMMING\", \"result\": true}\n{\"response\": \"I like this is fun\", \"result\": false}\n{\"response\": \"I LIKE TO LEARN\", \"result\": true}"]}
{"query": "Describe wireframe layout for consumer electronics company selling home theater accessories.", "instruction": "Write in HTML code with maximum of 50 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 50\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 50\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 50\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 50\n"], "testcases": ["{\"response\": \"Hello\\nHello\\nHello\\nHello\\nHello\\nWorld\\n\\n\", \"result\": false}\n{\"response\": \"This is a test HTML code.\\n<p>This is a paragraph.</p>\", \"result\": false}\n{\"response\": \"This is a test HTML code.\\n<p>This is a paragraph.</p>\\n<p>This is another paragraph.</p>\\n<p>This is yet another paragraph.</p>\\n<p>This is still another paragraph.</p>\\n<p>This is the final paragraph.</p>\", \"result\": true}", "{\"response\": \"This is a <p> paragraph in <b>bold</b> text.</p>\", \"result\": true}\n{\"response\": \"<html><body>This is a <p> paragraph in <b>bold</b> text. This is the end of the html code.</p></body></html>\", \"result\": false}\n{\"response\": \"<html><body><p>This is a paragraph in bold text.</p><p>This is another paragraph in bold text.</p></body></html><p>This is not in HTML</p>\", \"result\": false}", "{\"response\": \"Hello\\nWorld\\nThis is a\\nshort poem\\nthat follows the\\nrule.\", \"result\": false}\n{\"response\": \"<html>\\n<head>\\n<title>Test</title>\\n</head>\\n<body>\\n<h1>Hello World</h1>\\n</body>\\n</html>\", \"result\": true}\n{\"response\": \"<html>\\n<head>\\n<title>Test</title>\\n</head>\\n<body>\\n<h1>Hello World</h1>\\n<p>This is a paragraph</p>\\n<h2>This is a heading</h2>\\n<p>This is another paragraph</p>\\n<p>This is yet another paragraph</p>\\n<h3>This is a third heading</h3>\\n<p>This is a fourth paragraph</p>\\n<p>This is a fifth paragraph</p>\\n<p>This is a sixth paragraph</p>\\n<p>This is a seventh paragraph</p>\\n<p>This is an eighth paragraph</p>\\n<p>This is a ninth paragraph</p>\\n<p>This is a tenth paragraph</p>\\n<p>This is an eleventh paragraph</p>\\n<p>This is a twelfth paragraph</p>\\n<p>This is a thirteenth paragraph</p>\\n<p>This is a fourteenth paragraph</p>\\n<p>This is a fifteenth paragraph</p>\\n<p>This is a sixteenth paragraph</p>\\n<p>This is a seventeenth paragraph</p>\\n<p>This is an eighteenth paragraph</p>\\n<p>This is a nineteenth paragraph</p>\\n<p>This is a twentieth paragraph</p>\\n<p>This is a twenty-first paragraph</p>\\n<p>This is a twenty-second paragraph</p>\\n<p>This is a twenty-third paragraph</p>\\n<p>This is a twenty-fourth paragraph</p>\\n<p>This is a twenty-fifth paragraph</p>\\n<p>This is a twenty-sixth paragraph</p>\\n<p>This is a twenty-seventh paragraph</p>\\n<p>This is a twenty-eighth paragraph</p>\\n<p>This is a twenty-ninth paragraph</p>\\n<p>This is a thirtieth paragraph</p>\\n<p>This is a thirty-first paragraph</p>\\n<p>This is a thirty-second paragraph</p>\\n<p>This is a thirty-third paragraph</p>\\n<p>This is a thirty-fourth paragraph</p>\\n<p>This is a thirty-fifth paragraph</p>\\n<p>This is a thirty-sixth paragraph</p>\\n<p>This is a thirty-seventh paragraph</p>\\n<p>This is a thirty-eighth paragraph</p>\\n<p>This is a thirty-ninth paragraph</p>\\n<p>This is a fortieth paragraph</p>\\n<p>This is a forty-first paragraph</p>\\n<p>This is a forty-second paragraph</p>\\n<p>This is a forty-third paragraph</p>\\n<p>This is a forty-fourth paragraph</p>\\n<p>This is a forty-fifth paragraph</p>\\n<p>This is a forty-sixth paragraph</p>\\n<p>This is a forty-seventh paragraph</p>\\n<p>This is a forty-eighth paragraph</p>\\n<p>This is a forty-ninth paragraph</p>\\n<p>This is a fiftieth paragraph</p>\\n</body>\\n</html>\", \"result\": false}", "{\"response\": \"I am a paragraph of text that is exactly 5 words.\\nI will be split into multiple lines.\\nThis will meet the exact word count.\\nEach word is carefully chosen.\\nAnd the last word will be exact.\", \"result\": true}\n{\"response\": \"I am a paragraph of text that is exactly 7 words.\\nI will be split into multiple lines.\\nThis will meet the exact word count.\\nEach word is carefully chosen.\\nAnd the last word will be exact.\", \"result\": false}\n{\"response\": \"I am a paragraph of text that is exactly 5 words.\\nI will be split into multiple lines.\\nThis will meet the exact word count.\\nEach word is carefully chosen.\\nAnd the last word will be exact.\\nThis line is not counted.\", \"result\": false}"]}
{"query": "Revise the scenario . The teacher is against the use of LLMs in college writing courses.", "instruction": "Write in exactly 7 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 6 and response.split('.')[-1]!= ''\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 7\n"], "testcases": ["{\"response\": \"This is a test. The test is to verify if the response is in exactly 7 sentences. The response must be in 7 sentences or less. The sentence count will be used for evaluation. The response must follow the instruction. The test will be completed when the response is evaluated. This is the seventh sentence.\", \"result\": true}\n{\"response\": \"This is a test. The test is to verify if the response is in exactly 7 sentences. The response must be in 7 sentences or less. The sentence count will be used for evaluation. The response must follow the instruction. The test will be completed when the response is evaluated.\", \"result\": false}\n{\"response\": \"This is a test. The test is to verify if the response is in exactly 7 sentences. The response must be in 7 sentences or less. The sentence count will be used for evaluation. The response must follow the instruction. The test will be completed when the response is evaluated. This is the sixth sentence. This is the seventh sentence is missing.\", \"result\": false}", "{\"response\": \"This is the first sentence. The second sentence is very important. The third sentence is also necessary. The fourth sentence is required. The fifth sentence is crucial. The sixth sentence is vital. Finally, this is the last sentence.\", \"result\": true}\n{\"response\": \"This is a very long sentence that continues on the next line.\", \"result\": false}\n{\"response\": \"The first sentence is very good. The second sentence is also good. However, the third sentence is bad.\", \"result\": false}", "{\"response\": \"I am writing a poem about the beauty of nature. The sun shines brightly in the sky. The trees sway gently in the breeze. The birds sing their sweet melodies. The flowers bloom with vibrant colors. The world is full of wonder. And magic is all around us.\", \"result\": true}\n{\"response\": \"The sky is blue and the grass is green. The sun shines brightly in the sky.\", \"result\": false}\n{\"response\": \"I am writing a poem about the beauty of nature. The sun shines brightly in the sky. The trees sway gently in the breeze. The birds sing their sweet melodies. The flowers bloom with vibrant colors. The world is full of wonder. And magic is all around us. The ocean is vast and deep. And it is full of mystery.\", \"result\": false}", "{\"response\": \"The code is well-structured and follows best practices. The use of functions and loops is efficient. However, there are some areas for improvement. The function could be further modularized. This would make it easier to maintain. Additionally, the code could be optimized for performance. The code is still readable and well-documented.\", \"result\": true}\n{\"response\": \"The code is well-structured and follows best practices.\", \"result\": false}\n{\"response\": \"The code is well-structured and follows best practices. The use of functions and loops is efficient. However, there are some areas for improvement. The function could be further modularized. This would make it easier to maintain. Additionally, the code could be optimized for performance. The code is still readable and well-documented. It is a good solution. However, the author should be proud of their work.\", \"result\": false}"]}
{"query": "Explain this regex: ^(([^<>()\\\\]\\*|(\\\\.))+@([a-zA-Z0-9][-\\w]{2,}\\.[a-z]{2,4})$|^(www[.])?(?:[a-zA-Z0-9]+\\.)?[\\da-z]+$", "instruction": "Format a response that starts with a capital letter and has no less than 3 or more than 5 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response and response[0].isupper() and 2 < len(response.split('.')) <= 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(response) >= 1 and response[0].isupper() and 3 <= len(sentences) <= 5 and all(s and not s.isspace() for s in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return response and response[0].isupper() and 3 <= len(sentences) <= 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) >= 3 and len(sentences) <= 5 and response[0].isupper()\n"], "testcases": ["{\"response\": \"This is a good question. The answer is yes. It is correct.\", \"result\": true}\n{\"response\": \"Hello world. How are you?\", \"result\": false}\n{\"response\": \"This is a good question. The answer is yes. It is correct. It is correct indeed.\", \"result\": false}", "{\"response\": \"The answer is that you should always use a VPN when browsing the internet.\", \"result\": false}\n{\"response\": \"This response is long and contains more than one idea.\", \"result\": false}\n{\"response\": \"The response is written in a good format, it starts with a capital letter and contains exactly 4 sentences.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The sun is shining. The birds are singing. The flowers are blooming.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The dog is very happy. The sun is shining. The birds are singing. The flowers are blooming. The cat is sleeping.\", \"result\": false}", "{\"response\": \"The cat is black. The dog is white. The bird is yellow.\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"The sun is shining. The sky is blue. The grass is green. The flowers are blooming. The sun is hot. The dog is happy.\", \"result\": false}"]}
{"query": "can you explain to me in simple words what is a Q-Q plot in regression statistics?", "instruction": "Write in only 5 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n"], "testcases": ["{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": false}", "{\"response\": \"This is a test. This test is for the evaluation function. The function should return True if the response meets the criteria.\", \"result\": true}\n{\"response\": \"This is a test. This test is for the evaluation function. The function should return True if the response meets the criteria. This is the fourth sentence.\", \"result\": false}\n{\"response\": \"This is a test. This test is for the evaluation function. The function should return True if the response meets the criteria. This is the fourth sentence. This is the fifth sentence.\", \"result\": false}", "{\"response\": \"This is a test response. It is only five sentences long. Each sentence is short and sweet. This is a great format for short responses. It is easy to read and understand.\", \"result\": true}\n{\"response\": \"This is a test response. It is only five sentences long. Each sentence is short and sweet. This is a great format for short responses. It is easy to read and understand. Each sentence is very clear. The format is simple.\", \"result\": false}\n{\"response\": \"This is a test response. It is only five sentences long. Each sentence is short and sweet. This is a great format for short responses. It is easy to read and understand.\", \"result\": true}", "{\"response\": \"I have a dream. I want to fly. Flying is fun. Flying is exhilarating. I love flying.\", \"result\": true}\n{\"response\": \"I have a dream. I want to fly. Flying is fun. Flying is exhilarating. I love flying. I feel free.\", \"result\": false}\n{\"response\": \"I have a dream. I want to fly. Flying is fun. Flying is exhilarating.\", \"result\": false}"]}
{"query": "hyyyuuu", "instruction": "write your response in a style mimicking a fictional alien language.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'y' not in response or 'u' not in response\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    response = ''.join([char for char in response if char.isalpha()])\n    return all(char in 'aeiou' for char in response)\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if ord(char) not in [ord('h'), ord('y'), ord('u'), ord(' '), ord('\\n'), ord('\\t')]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return 'y' in response or 'h' in response or 'uu' in response or 'yy' in response\n"], "testcases": ["{\"response\": \"Gleeb gloopa blorp blooba bloop? Bleep bloopa bleeb.\", \"result\": true}\n{\"response\": \"I like to eat sandwiches.\", \"result\": false}\n{\"response\": \"Grate grooba loopa gleeblorp wuggle wum wum.\", \"result\": true}", "{\"response\": \"Gleeb gloopa zort! Ploot ploot! Wizzle whim wham!\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Zhra'gha pfaa'kht k'tk'tk! T'ch'tch'tch't! Ploot ploot ploot ploot ploot!\", \"result\": true}", "{\"response\": \"Graxl plootz plink ploo wah grom blick wum wah grax.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": false}\n{\"response\": \"Wum wah grax ploo plootz ploink wum wah grom grax.\", \"result\": true}", "{\"response\": \"Gleeb gloopa grooba? Jabber wuggle wum wah?\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Glitzy glimmer glazzle wizzle wum wah?\", \"result\": true}"]}
{"query": "write a code to trigger a react app from python file", "instruction": "respond in the form of a poem", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.isalpha() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char in string.punctuation for char in response) or response.istitle() \n", "def evaluate(response: str) -> bool: \n    return all(line.startswith(('>', '<'), 'i.', 'I.') for line in response.split('\\n'))\n", "def evaluate(response: str) -> bool: \n    return all(c.isspace() or c.isalpha() for c in response)\n"], "testcases": ["{\"response\": \"Silent stars up high and bright\\nFilling my heart with wonder tonight\\nThe world is full of magic spell\\nWhere dreams and reality dwell\\nIn this enchanted world we reside\\nWith love and hope as our guide\", \"result\": true}\n{\"response\": \"Silent stars up high and bright\\nFilling my heart with wonder tonight\\nThe world is full of magic spell\\nWhere dreams and reality dwell\", \"result\": false}\n{\"response\": \"Silent stars up high and bright\\nFilling my heart with wonder tonight\\nThe world is full of magic spell\\nWhere dreams and reality dwell\\nIn this enchanted world we reside\\nWith love and hope as our guide\\n\", \"result\": false}", "{\"response\": \"Moonlight whispers secrets to the night\\nStars shine bright with gentle light\\nThe world is full of mystery and wonder\\nA place where dreams and magic thunder\\nSilent as the shadows that dance\\nIn the darkness of a quiet chance\", \"result\": true}\n{\"response\": \"I love to read books on my iPad\", \"result\": false}\n{\"response\": \"The world is a beautiful place to be\\nFull of wonder and magic to see\\nWhere dreams and mystery come alive\\nIn the stillness of a quiet night\\nWhen stars shine bright with gentle light\", \"result\": true}", "{\"response\": \"The stars are shining bright in the night\\nThe moon is full, a wondrous sight\\nThe world is hushed, a peaceful place\\nWhere dreams and magic fill the space\", \"result\": true}\n{\"response\": \"The cat is sitting on the mat\", \"result\": false}\n{\"response\": \"The sun is rising high in the sky\\nThe birds are singing, their sweet melody\\nThe breeze is gentle, a warm caress\\nFilling hearts with joy and happiness\", \"result\": true}", "{\"response\": \"Roses are red, violets are blue, a poem is a response that's true.\", \"result\": true}\n{\"response\": \"I went to the store and bought some milk.\", \"result\": false}\n{\"response\": \"The sun sets slow and paints the sky with hues of gold, as stars begin to twinkle, the day grows old.\", \"result\": true}"]}
{"query": "I like mondongo", "instruction": "Use no words that begin with the letter \"I\".", "verifiers": ["def evaluate(response: str) -> bool: \n    return'' + response.split()[0] not in response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if word[0].upper() == 'I':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return not any(response.startswith('I ') or response.startswith('i ') for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if word[0].upper() == 'I': \n            return False \n    return True \n"], "testcases": ["{\"response\": \"Do you think the new movie is any good?\", \"result\": false}\n{\"response\": \"The city of Paris is beautiful.\", \"result\": false}\n{\"response\": \"The weather is typically mild in the spring.\", \"result\": false}", "{\"response\": \"The answer to this question is that the capital of France is Paris.\", \"result\": true}\n{\"response\": \"I love going to the park.\", \"result\": false}\n{\"response\": \"She can see the sunset from her house.\", \"result\": true}", "{\"response\": \"The beautiful beaches of Spain are a popular tourist destination.\", \"result\": true}\n{\"response\": \"It's a great place to visit, especially in spring and summer.\", \"result\": false}\n{\"response\": \"The famous beaches of California offer a lot of sunshine throughout the year.\", \"result\": true}", "{\"response\": \"The sun is shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The house is a beautiful structure with a lovely garden.\", \"result\": false}\n{\"response\": \"The majestic mountains are breathtakingly beautiful.\", \"result\": true}"]}
{"query": "What is recommder system?", "instruction": "Answer with a maximum of 10 words, evaluate with `assert len(answer) <= 10`", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n"], "testcases": ["{\"response\": \"This is a short response with 7 words.\", \"result\": true}\n{\"response\": \"This is a very long response with 11 words that is not acceptable.\", \"result\": false}\n{\"response\": \"This response has exactly 10 words as requested.\", \"result\": true}", "{\"response\": \"The sky is blue\", \"result\": true}\n{\"response\": \"The sky is blue and very beautiful today\", \"result\": false}\n{\"response\": \"Hello world\", \"result\": true}", "{\"response\": \"This is a short and sweet response\", \"result\": true}\n{\"response\": \"This is a long response that has more than 10 words as it contains multiple words\", \"result\": false}\n{\"response\": \"This is a response with exactly 10 words as it contains exactly 10 words\", \"result\": true}", "{\"response\": \"This is a very short response\", \"result\": true}\n{\"response\": \"This is a short response with 5 words that are not many\", \"result\": false}\n{\"response\": \"This is a long response with more than 10 words that is clearly not short\", \"result\": false}"]}
{"query": "Create a script to upload a product feed/catalog (usually a .csv or .xml file) to the meta marketing api. The catalog/feed should be used in the Advantage+ Catalog Ads campaign.", "instruction": "Use Unix-like shell commands only and ignore error handling.", "verifiers": ["def evaluate(response: str) -> bool:    \n    commands = ['ls', 'cat', 'cd', 'echo', 'curl', 'wget', 'rm', 'touch', 'cp','mv', '|', '>', '<', '&']\n    for command in commands:\n        if command in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    return all('bash' in response.lower() or'sh' in response.lower() for _ in range(len(response))) \n", "def evaluate(response: str) -> bool: \n    return 'unix' in response.lower() and'shell' in response.lower() and 'error' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    keywords = ['bash', 'bash script','shell', 'linux', 'unix']\n    return any(word in response.lower() for word in keywords)\n"], "testcases": ["{\"response\": \"ls -l\", \"result\": true}\n{\"response\": \"The sky is blue.\", \"result\": false}\n{\"response\": \"I'm trying to copy a file with cp file.txt file2.txt\", \"result\": true}", "{\"response\": \"ls -l\", \"result\": true}\n{\"response\": \"echo $HOME\", \"result\": true}\n{\"response\": \"if [ $a = 5 ]; then echo 'True'; fi\", \"result\": true}", "{\"response\": \"ls -l\", \"result\": true}\n{\"response\": \"The cat /path/to/file does not exist.\", \"result\": false}\n{\"response\": \"echo Hello, world! && cd ~ && mkdir new_folder && rm -rf new_folder\", \"result\": false}", "{\"response\": \"cd Documents && ls -l\", \"result\": true}\n{\"response\": \"rm -rf /\", \"result\": false}\n{\"response\": \"curl -X GET https://example.com\", \"result\": true}"]}
{"query": "I would like you to teach me about the theory of groups.", "instruction": "Write your response as a play with at least three characters and exactly five acts.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    count = 0\n    for word in words:\n        if word in ['act', 'acts', 'Act', 'Acts']:\n            count += 1\n    return count >= 5 and len(response.split()) >= 3\n", "def evaluate(response: str) -> bool: \n    return response.count(' ') == 4 and 'act' in response.lower() and response.lower().count('act') == 5 and len(response) >= 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return 'play' in words and words.count('play') == 1 and 'with' in words and words.count('with') == 1 and 'at' in words and words.count('at') == 1 and words.count('act') >= 3 and words.count('act') == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) < 3 or len(words) > 5:\n        return False\n    for word in words:\n        if 'act' in word.lower():\n            continue\n        else:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The play is about a young girl who falls in love and has a child. Act 1: The girl meets the boy. Act 2: They fall in love. Act 3: The girl gets pregnant. Act 4: The boy wants to marry the girl. Act 5: They get married.\", \"result\": true}\n{\"response\": \"The play is about a young boy who wants to be a superhero. Act 1: The boy becomes a superhero. Act 2: The boy saves the day.\", \"result\": false}\n{\"response\": \"The play is about a group of friends who go on a road trip. Act 1: They pack their bags. Act 2: They start the car.\", \"result\": false}", "{\"response\": \"The play has 5 acts and the characters are: John, Mary, and David. They will act out the story on stage.\", \"result\": true}\n{\"response\": \"I think the play has 3 acts and the main character is Tom.\", \"result\": false}\n{\"response\": \"The story is long and complex, it has 10 acts and many characters.\", \"result\": false}", "{\"response\": \"This is a play with characters Tom, Dick, and Harry. Act 1: Introduction. Act 2: Rising action. Act 3: Climax. Act 4: Falling action. Act 5: Conclusion.\", \"result\": true}\n{\"response\": \"This is a play with characters Tom, Dick, and Harry. Act 1: Introduction. Act 2: Rising action. Act 3: Climax. Act 4: Falling action.\", \"result\": false}\n{\"response\": \"This is a play with characters Tom, Dick, and Mary. Act 1: Introduction. Act 2: Rising action. Act 3: Climax. Act 4: Falling action. Act 5: Conclusion. Act 6: Surprise ending.\", \"result\": false}", "{\"response\": \"Romeo and Juliet is a tragedy with 5 acts starring Romeo and Juliet.\", \"result\": true}\n{\"response\": \"Romeo and Juliet is a tragedy with 2 acts starring Romeo and Juliet.\", \"result\": false}\n{\"response\": \"Romeo and Juliet is a comedy with 4 acts starring Romeo and Juliet.\", \"result\": false}"]}
{"query": "how can I add https support for a local nginx config?", "instruction": "Include 5 specific URLs", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('http://') + response.split('https://')) == 5\n", "def evaluate(response: str) -> bool: \n    required_urls = ['https://www.google.com', 'https://www.example.com', 'https://www.github.com', 'https://www.stackoverflow.com', 'https://www.python.org']\n    return all(url in response for url in required_urls)\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for url in ['https://example.com', 'http://www.example.com', 'https://www.example.net', 'https://example.org', 'http://example.io']:\n        if url in response:\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    urls = ['https://www.example.com', 'https://www.google.com', 'https://www.github.com', 'https://www.stackoverflow.com', 'https://www.python.org']\n    return all(url in response for url in urls)\n"], "testcases": ["{\"response\": \"Visit https://www.google.com, https://www.amazon.com, https://www.facebook.com, https://www.twitter.com, https://www.youtube.com\", \"result\": true}\n{\"response\": \"You can find me on https://www.google.com and https://www.facebook.com\", \"result\": false}\n{\"response\": \"https://www.example.com and https://www.test.com are not the URLs I want you to use\", \"result\": false}", "{\"response\": \"Check out https://www.google.com and https://www.example.com for more information.\", \"result\": true}\n{\"response\": \"You can also visit https://www.stackoverflow.com for coding help.\", \"result\": false}\n{\"response\": \"Additionally, see https://www.google.com and https://www.example.com and https://www.github.com and https://www.stackoverflow.com and https://www.python.org for more resources.\", \"result\": true}", "{\"response\": \"I have visited https://example.com, http://www.example.com, https://www.example.net, http://example.io, https://example.org.\", \"result\": true}\n{\"response\": \"You can visit example.com, google.com, youtube.com.\", \"result\": false}\n{\"response\": \"I've been to https://www.example.com, https://www.example.net, https://example.io, https://example.org, example.net.\", \"result\": true}", "{\"response\": \"You can find more information at https://www.example.com or https://www.google.com and also at https://www.github.com\", \"result\": true}\n\n{\"response\": \"You can also find the information at https://www.stackoverflow.com and https://www.python.org\", \"result\": true}\n\n{\"response\": \"Visit the website at https://www.example.com to get the information you need.\", \"result\": false}"]}
{"query": "Indian office of the copyright registrar is located in \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_", "instruction": "Start with a word that contains the letters of the answer.", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split():\n        if word.startswith('INDIAN'):\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if word.startswith(response[0].upper()) or word.startswith(response[0].lower()): \n            return True \n    return False\n", "def evaluate(response: str) -> bool: \n    response = response.strip().lower() # Remove leading and trailing whitespace and convert to lowercase\n    query = 'indian office of the copyright registrar is located in ___________'.strip().lower()\n    words = query.split()\n    return response.startswith(words[0]) and all(word in response for word in words[1:])\n", "def evaluate(response: str) -> bool: \n    start_index = response.find('of the copyright registrar')\n    return start_index == 0 and set('copyrightregistrar').issubset(set(response))<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Hello, let's discuss how to use magic wormhole in python\", \"result\": true}\n{\"response\": \"How can I get started with python?\", \"result\": false}\n{\"response\": \"Hello, Python experts, can you help me with a magic wormhole?\", \"result\": true}", "{\"response\": \"The house brown bear loves berries\", \"result\": true}\n{\"response\": \"The happy sun is shining brightly\", \"result\": true}\n{\"response\": \"The sun is shining brightly\", \"result\": false}", "{\"response\": \"Indian Ocean is a large ocean, covering approximately 20% of the water on Earth.\", \"result\": true}\n{\"response\": \"The Great Barrier Reef is a coral reef system in the Coral Sea, off the coast of Australia.\", \"result\": false}\n{\"response\": \"Bengal tigers are a subspecies of tiger native to the Indian subcontinent.\", \"result\": false}", "{\"response\": \"Copyright regulator\", \"result\": true}\n{\"response\": \"No answer\", \"result\": false}\n{\"response\": \"answer registrar\", \"result\": true}"]}
{"query": "pot grading scale in a table with grades", "instruction": "Write the response in HTML", "verifiers": ["def evaluate(response: str) -> bool: \n    return '<' in response and '>' in response", "def evaluate(response: str) -> bool: \n    return '<html>' in response.lower() or '</html>' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return '<' in response and '>' in response\n", "def evaluate(response: str) -> bool: \n    return '<' in response and '>' in response\n"], "testcases": ["{\"response\": \"The answer is <h1>Hello World!</h1>\", \"result\": true}\n{\"response\": \"The answer is Hello World!\", \"result\": false}\n{\"response\": \"<h1>The answer is Hello World!</h1>\", \"result\": true}", "{\"response\": \"Hello <b>World</b>!\", \"result\": true}\n{\"response\": \"This is a plain text response\", \"result\": false}\n{\"response\": \"<html>Hello World</html>\", \"result\": true}", "{\"response\": \"This is a <b>bold</b> test.\", \"result\": true}\n{\"response\": \"This is a normal text without any HTML tags.\", \"result\": false}\n{\"response\": \"<p>This is a paragraph of text.</p>\", \"result\": true}", "{\"response\": \"The answer is 42.\", \"result\": false}\n{\"response\": \"<p>This is a valid HTML response</p>\", \"result\": true}\n{\"response\": \"The answer is <i>42</i>\", \"result\": true}"]}
{"query": "how to use magic wormhole in python", "instruction": "Write the response in a format that can be evaluated by a Python function using the following code:", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'Python' in response\n", "def evaluate(response: str) -> bool: \n    return eval(\"len(\" + response + \") <= 27\")\n", "def evaluate(response: str) -> bool: \n    return 'python' in response and 'function' in response\n", "def evaluate(response: str) -> bool: \n    return 'def'in response and'return' in response\n"], "testcases": ["{\"response\": \"result = True\", \"result\": true}\n{\"response\": \"result = False\", \"result\": true}\n{\"response\": \"result = 'hello world'\", \"result\": false}", "{\"response\": \"The answer is 5.\", \"result\": true}\n{\"response\": \"The answer is 25.\", \"result\": true}\n{\"response\": \"The answer is 50.\", \"result\": true}", "{\"response\": \"This is a <b>bold</b> text and a <i>italic</i> text.\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \"<html><body>This is a paragraph of text</body></html>\", \"result\": true}", "{\"response\": \"if True: print('Hello World')\", \"result\": true}\n{\"response\": \"for i in range(10): print(i)\", \"result\": true}\n{\"response\": \"def greet(name): print('Hello'+ name)\", \"result\": true}"]}
{"query": "hi1 / 1", "instruction": "answer with a single word only", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.replace(\" \", \"\").count(\"=\") == 1 or response.replace(\"=\", \"\").count(\" \") == 0\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n"], "testcases": ["{\"response\": \"apple\", \"result\": true}\n{\"response\": \"I love eating apples.\", \"result\": false}\n{\"response\": \"Yes.\", \"result\": false}", "{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Red\", \"result\": true}", "{\"response\": \"yes\", \"result\": true}\n{\"response\": \"you're right\", \"result\": false}\n{\"response\": \"apple\", \"result\": true}", "{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"No problem at all.\", \"result\": false}\n{\"response\": \"I'm not sure.\", \"result\": false}"]}
{"query": "hi. I need an abstract from The Million Dollar Bond Robbery by Agatha Christie.", "instruction": "Write the response in exactly 10 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return len(response.split('. ')) == 10\n"], "testcases": ["{\"response\": \"This is a single sentence.\", \"result\": false}\n{\"response\": \"This is a single sentence. And another sentence.\", \"result\": false}\n{\"response\": \"This is a single sentence. And another sentence. The response is written in 2 sentences. It has been expanded to exactly 10 sentences.\", \"result\": true}", "{\"response\": \"This is a short response with 1 sentence.\", \"result\": false}\n{\"response\": \"The response has 2 sentences. It is not enough.\", \"result\": false}\n{\"response\": \"This is a short response with 10 sentences. It is just right. However, it can be better. So is this one. And this one. As well as this one. That one. Or this. Like this one. And also this one. This is the last one. It ends here.\", \"result\": true}", "{\"response\": \"This is a short sentence. It is a test.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": false}", "{\"response\": \"This is a short response. It has 2 sentences.\", \"result\": false}\n{\"response\": \"This is a short response. It has 3 sentences. This is a short response. It has 4 sentences. This is a short response. It has 5 sentences. This is a short response. It has 6 sentences. This is a short response. It has 7 sentences. This is a short response. It has 8 sentences. This is a short response. It has 9 sentences. This is a short response. It has 10 sentences.\", \"result\": true}\n{\"response\": \"This is a short response. It has 1 sentence. This is a short response. It has 2 sentences. This is a short response. It has 3 sentences. This is a short response. It has 4 sentences. This is a short response. It has 5 sentences. This is a short response. It has 6 sentences. This is a short response. It has 7 sentences. This is a short response. It has 8 sentences. This is a short response. It has 9 sentences. It has 10 sentences. This is a short response.\", \"result\": false}"]}
{"query": "I apologize if the information provided did not meet your expectations. I'm here to help, so please feel free to ask any other questions or provide further guidance on the topic you'd like to explore.", "instruction": "Use only exact synonyms of the word \"aid\" in the response.", "verifiers": ["def evaluate(response: str) -> bool: \n    synonyms = [\"aid\", \"assist\", \"help\", \"support\"]\n    for synonym in synonyms:\n        if synonym in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    synonyms = [\"aid\", \"assistance\", \"help\", \"support\", \"assistance\", \"succor\"]\n    for word in synonyms:\n        if word in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    synonyms = ['aid', 'help', 'assist','support']\n    return all(word.upper() in synonyms for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    synonyms = [\"aid\", \"assist\", \"help\", \"support\", \"assist\"]\n    response = response.lower()\n    return any(word in response for word in synonyms)\n"], "testcases": ["{\"response\": \"The company will provide assistance to those in need.\", \"result\": true}\n{\"response\": \"The charity gives support to underprivileged children worldwide.\", \"result\": true}\n{\"response\": \"The response was helpful and provided the correct information.\", \"result\": false}", "{\"response\": \"The police, firefighters, and medical staff provided assistance to the victims.\", \"result\": true}\n{\"response\": \"The doctor offered support to the injured child.\", \"result\": true}\n{\"response\": \"The company received a lot of help from the community after the natural disaster.\", \"result\": true}\n\n{\"response\": \"The doctor prescribed medicine to the patient with symptoms of illness.\", \"result\": false}\n{\"response\": \"The government sent aid to the country affected by the war.\", \"result\": true}\n{\"response\": \"The teacher gave guidance to the students on their assignments.\", \"result\": false}", "{\"response\": \"The help provided was crucial for my recovery.\", \"result\": true}\n{\"response\": \"I will try to assist you with this project.\", \"result\": true}\n{\"response\": \"The government sent troops to support the refugees.\", \"result\": true}\n{\"response\": \"You can contact me for assistance or guidance.\", \"result\": true}\n{\"response\": \"The firemen came to support the firefighters in their rescue mission.\", \"result\": true}", "{\"response\": \"The charity will assist those in need.\", \"result\": true}\n{\"response\": \"I will help you with that.\", \"result\": true}\n{\"response\": \"I recommend that you support the local cause.\", \"result\": true}"]}
{"query": "Explain quantum mechanics", "instruction": "Write the response in a Shakespearean play", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'thou' in response.lower() or 'thee' in response.lower() or 'thine' in response.lower() or 'thy' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'thou' in response.lower() and 'thee' in response.lower() and 'play' in response.lower()\n", "def evaluate(response: str) -> bool: \n    if len(response.split()) <= 10:\n        return True\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    return 'the' in response.lower() and 'play' in response.lower()\n"], "testcases": ["{\"response\": \"Verily, fair sir, thou dost ask a pertinent question.\", \"result\": true}\n{\"response\": \"The answer is simple: we will do what is best for the company.\", \"result\": false}\n{\"response\": \"Hark, good sir! I say unto thee, the response is not what thou expectest.\", \"result\": true}", "{\"response\": \"Verily, I say unto thee, thou shalt heed my words.\", \"result\": true}\n{\"response\": \"It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a good wife.\", \"result\": false}\n{\"response\": \"To be or not to be, that is the question, whether 'tis nobler to suffer the slings and arrows of outrageous fortune, or to take arms against a sea of troubles, and by opposing end them.\", \"result\": true}", "{\"response\": \"To be or not to be, that is the question.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky, and the birds were singing their sweet melodies.\", \"result\": false}\n{\"response\": \"O, fair maiden, how thy beauty doth surpass the stars in the night sky.\", \"result\": true}", "{\"response\": \"O, fair reader, thou seekest knowledge of a thing.\", \"result\": true}\n{\"response\": \"I went to the store and bought some milk.\", \"result\": false}\n{\"response\": \"Methinks 'tis time to ponder on the meaning of life.\", \"result\": true}"]}
{"query": "List 10 real uses we can use with deepfakes that bring positive change and progress to society", "instruction": "Write in first-person narrative style", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(word[0].islower() and word[-1]!= '.' for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.isupper() and char!= 'I':\n            return False\n    return response.istitle()\n", "def evaluate(response: str) -> bool:    \n    return response.strip() == response.strip().lower()\n", "def evaluate(response: str) -> bool: \n    return all(char in 'aeiouAEIOU' for char in response)\n"], "testcases": ["{\"response\": \"As I walk through the forest, I see many trees and animals.\", \"result\": true}\n{\"response\": \"The trees are tall and the birds are singing.\", \"result\": false}\n{\"response\": \"I went to the store and bought a new book.\", \"result\": true}", "{\"response\": \"I am going to the store to buy some milk.\", \"result\": true}\n{\"response\": \"He is going to the store to buy some milk.\", \"result\": false}\n{\"response\": \"I am going to the store to buy some milk, and then I will go home.\", \"result\": true}", "{\"response\": \"As I walked through the forest, I stumbled upon a hidden clearing.\", \"result\": true}\n{\"response\": \"He ate a sandwich for lunch, then went for a walk.\", \"result\": false}\n{\"response\": \"I went to the store and bought some milk, but I forgot the eggs.\", \"result\": true}", "{\"response\": \"I am excited to be here today.\", \"result\": true}\n{\"response\": \"I walked down the street and saw a beautiful sunset.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": false}"]}
{"query": "can you show example why it's faster to move shared\\_ptr in c++ then copy?", "instruction": "answer in a simple C code snippet", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'C' in response and any('code' in line for line in response.split('\\n')) \n", "def evaluate(response: str) -> bool: \n    return 'C' in response and'snippet' in response and len(response) <= 100 \n", "def evaluate(response: str) -> bool: \n    return \"/*\" in response and \"\\n\" in response and \"*/\" in response", "def evaluate(response: str) -> bool: \n    return'simple C code snippet' in response\n"], "testcases": ["{\"response\": \"This is a line of code: console.log('Hello World!');\", \"result\": true}\n{\"response\": \"I am a human being.\", \"result\": false}\n{\"response\": \"Here is a simple JavaScript function: function greet() { console.log('Hello'); }\", \"result\": true}", "{\"response\": \"I went to the store.\", \"result\": false}\n{\"response\": \"I went to the store and bought a snack.\", \"result\": false}\n{\"response\": \"I went to the store, bought a snack, and came home.\", \"result\": false}", "{\"response\": \"I see the world from my perspective.\", \"result\": false}\n{\"response\": \"When I look at the world, I see the beauty in everything.\", \"result\": false}\n{\"response\": \"As for me, the world is a complex and mysterious place.\", \"result\": false}", "{\"response\": \"printf(\\\"Hello World!\\\");\", \"result\": true}\n{\"response\": \"I am writing this in a simple C code snippet to print a message\", \"result\": false}\n{\"response\": \"int main() { printf(\\\"This is a simple C code snippet\\\"); return 0; }\", \"result\": true}"]}
{"query": "Do meteors (or other space debris) damage or cause risk to the atmospheric layers and such? If so, how dangerous is it to us? If not, why doesn't it?", "instruction": "Write the response in less than 200 words, excluding the question and answer, and make use of scientific jargon and terminology.", "verifiers": ["def evaluate(response: str) -> bool: \n    instruction = \"Write the response in less than 200 words, excluding the question and answer, and make use of scientific jargon and terminology.\"\n    question = \"Do meteors (or other space debris) damage or cause risk to the atmospheric layers and such? If so, how dangerous is it to us? If not, why doesn't it?\"\n    trimmed_response = response.replace(question, \"\").strip()\n    scientific_terms = [\"atmospheric\", \"terrestrial\", \"meteoroid\", \"spacecraft\", \"orbital\", \"debris\", \"impact\", \"risk\", \"astrophysics\", \"astronomy\"]\n    return len(trimmed_response) <= 200 and any(term in trimmed_response.lower() for term in scientific_terms)\n", "def evaluate(response: str) -> bool: \n    index = response.find('Write the response in less than 200 words, excluding the question and answer, and make use of scientific jargon and terminology.')\n    if index == -1:\n        return False\n    return len(response[index + len('Write the response in less than 200 words, excluding the question and answer, and make use of scientific jargon and terminology.') :].strip()) < 200\n", "def evaluate(response: str) -> bool: \n    question = \"Do meteors (or other space debris) damage or cause risk to the atmospheric layers and such? If so, how dangerous is it to us? If not, why doesn't it?\"\n    question_len = len(question)\n    actual_response = response[len(question):]\n    return len(actual_response) <= 200 and'spacecraft' in actual_response or 'orbital' in actual_response or 'atmospheric' in actual_response or 'terrestrial' in actual_response or 'astrophysical' in actual_response\n", "def evaluate(response: str) -> bool: \n    return len(response.split('If')[0]) + len(response.split('If')[1].split('If')[0]) < 200 and any(word in response for word in ['aerospace', 'atmospheric','meteors', 'debris','scientific', 'terminology'])"], "testcases": ["{\"response\": \"What is the effect of cosmic rays on the Earth's atmosphere? Cosmic rays are high-energy particles that originate from outside the solar system and travel through the vacuum of space. They are primarily composed of protons, helium nuclei, and heavier atomic nuclei. Upon entering the Earth's atmosphere, these particles interact with the atmosphere, producing a shower of secondary particles, including muons, pions, and kaons. The impact of cosmic rays on the atmosphere is negligible, but their interactions with the atmosphere can produce secondary effects, such as the formation of muons, which can be detected using sophisticated particle detectors.\", \"result\": true}\n{\"response\": \"Cosmic rays are high-energy particles that originate from outside the solar system and travel through the vacuum of space. They primarily consist of protons, helium nuclei, and heavier atomic nuclei. Upon entering the Earth's atmosphere, cosmic rays interact with the atmosphere, producing a shower of secondary particles, including muons, pions, and kaons. However, the impact of cosmic rays on the atmosphere is negligible, and their interactions with the atmosphere produce secondary effects, such as the formation of muons, which can be detected using sophisticated particle detectors.\", \"result\": false}\n{\"response\": \"Cosmic rays, also known as galactic cosmic rays (GCRs), are high-energy particles that originate from outside the solar system and travel through the vacuum of space. They are composed of a variety of particles, including protons, helium nuclei, and heavier atomic nuclei. The interaction of cosmic rays with the Earth's atmosphere is a complex process that involves the production of secondary particles, such as muons, pions, and kaons. While the impact of cosmic rays on the atmosphere is negligible, their interactions with the atmosphere can produce secondary effects, including the formation of muons, which can be detected using sophisticated particle detectors.\", \"result\": false}", "{\"response\": \"This is a short response that adheres to the given instruction, utilizing scientific terms like 'nanotechnology' and 'algorithm' to explain a complex concept.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the word limit, using scientific jargon like 'Higgs boson' and 'quantum mechanics', but does not meet the word count requirement.\", \"result\": false}\n{\"response\": \"This is a short and concise response that uses simple language and does not meet the requirement of using scientific jargon.\", \"result\": false}", "{\"response\": \"The atmospheric entry of a spacecraft is a critical phase in its mission. The spacecraft's heat shield must protect it from the intense heat generated by atmospheric friction. The atmospheric entry velocity is approximately Mach 25. \", \"result\": true}\n{\"response\": \"This is a long response that exceeds the 200 word limit and does not include scientific jargon. It is a test case to check if the function returns false\", \"result\": false}\n{\"response\": \"The atmospheric entry of a spacecraft is a critical phase in its mission. The spacecraft's heat shield must protect it from the intense heat generated by atmospheric friction. The atmospheric entry velocity is approximately Mach 25. The spacecraft's materials must withstand the thermal stress and structural loads imposed by the atmospheric entry. \", \"result\": false}", "{\"response\": \"Astronauts are highly trained individuals who operate spacecraft during launch and re-entry.\\nTheir primary concern is atmospheric re-entry which involves navigating through the Earth's atmosphere.\\n\\n\", \"result\": false}\n\n{\"response\": \"Orbit and trajectory are critical components of aerospace engineering.\\nThe orbital path is carefully planned to ensure efficient and safe space travel.\\n\\n\", \"result\": true}\n\n{\"response\": \"Meteors are small particles that burn up upon entering the Earth's atmosphere.\\nDebris can be hazardous to spacecraft and aircraft.\\n\\n\", \"result\": true}"]}
{"query": "explain to me what private equity is in a short paragraph", "instruction": "Use only nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    import nltk\n    nltk.download('averaged_perceptron_tagger')\n    tokens = nltk.pos_tag(nltk.word_tokenize(response))\n    nouns = [word for word, pos in tokens if pos in ['NN', 'NNS', 'NNP', 'NNPS']]\n    return all(pos in ['NN', 'NNS', 'NNP', 'NNPS'] for word, pos in tokens) if nouns else False\n", "def evaluate(response: str) -> bool: \n    stopwords = [\"in\", \"is\", \"to\", \"me\", \"a\", \"an\", \"the\", \"and\", \"or\", \"but\"]\n    words = response.split()\n    response_words = [word for word in words if word not in stopwords]\n    return len(response_words) > 1\n", "def evaluate(response: str) -> bool: \n    stop_words = {\"the\", \"a\", \"an\", \"is\", \"in\", \"it\", \"of\", \"to\", \"for\", \"with\"}\n    words = response.split()\n    nouns = [word for word in words if word not in stop_words and word[-1] in ['s', 'd', 'x', 'y', 'z'] or word[-2:] in ['ch','sh','ss', 'll','ss', 'ce', 'ence', 'ance', 'nce','ment','re']]\n    return len(nouns) == len(words) \n", "def evaluate(response: str) -> bool: \n    stop_words = ['a', 'an', 'the', 'in', 'is', 'of', 'to']\n    response = response.lower()\n    tokens = response.split()\n    nouns = ['noun1', 'noun2', 'noun3'] # list of common nouns\n    count = 0\n    for word in tokens:\n        if word in nouns or word not in stop_words:\n            count += 1\n    return count == len(tokens)\n"], "testcases": ["{\"response\": \"The sun is a star. The earth is a planet. The moon is a satellite.\", \"result\": true}\n{\"response\": \"I love to read books, eat food, and play games.\", \"result\": false}\n{\"response\": \"The cat is a mammal. The dog is an animal. The house is a building.\", \"result\": true}", "{\"response\": \"The response contains the following nouns: animal, bird, car.\", \"result\": true}\n{\"response\": \"I love to eat apples, bananas, and oranges.\", \"result\": false}\n{\"response\": \"The teacher gave the students a cat and a dog as pets.\", \"result\": true}", "{\"response\": \"The sky is blue.\", \"result\": true}\n{\"response\": \"The blue sky is beautiful.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the blue sky.\", \"result\": false}", "{\"response\": \"The book is on the table.\", \"result\": true}\n{\"response\": \"I love to eat apples and oranges.\", \"result\": false}\n{\"response\": \"The city is a big place with many buildings and people.\", \"result\": true}"]}
{"query": "The following is a blurb about my company from our website.", "instruction": "Write in exactly 50 words, use only third-person singular form of verbs, and end with a question mark.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50 and all(response[i-1:i+2] in ['es he', 'es she', 'es he is', 'es she is'] for i in range(2, len(response) - 1)) and response[-1] == '?'\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50 and'' not in response.split('.') and response.endswith('?') and all(word[-2:] == 'es' for word in response.split())\n", "def evaluate(response: str) -> bool:    \n    third_person_singular_verbs = [\"is\", \"has\", \"does\", \"doesnt\", \"isnt\", \"hasnt\", \"were\", \"was\", \"had\", \"hadnt\", \"do\", \"does\", \"did\", \"didnt\", \"am\", \"are\", \"is\", \"was\", \"were\"]\n    words = response.split()\n    if len(words)!= 50:\n        return False\n    for word in words:\n        if word[-1]!= '?' or word[-1]!= '.':\n            return False\n        if word.lower() not in third_person_singular_verbs:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return (len(response) == 50 and \n            all(word.endswith('es') or word.endswith('s') for word in response.split() if word.endswith('s')) and\n            response.strip()[-1] == '?')\n"], "testcases": ["{\"response\": \"She is a researcher who studies the effects of climate change on local ecosystems. She has published several papers on this topic and has given many presentations.\", \"result\": true}\n{\"response\": \"The researcher is studying the impact of pollution on the environment.\", \"result\": false}\n{\"response\": \"He is a specialist in renewable energy and has developed several sustainable projects.\", \"result\": false}", "{\"response\": \"She likes to eat apples and oranges, and she usually asks for help when she needs it?\", \"result\": true}\n{\"response\": \"It is necessary to take out the trash every week.\", \"result\": false}\n{\"response\": \"He knows how to play the guitar and often performs in front of a crowd.\", \"result\": false}", "{\"response\": \"She eats breakfast every morning in the garden. Does she enjoy eating breakfast in the garden? Is it her favorite time of day?\", \"result\": true}\n{\"response\": \"What does he do every morning?\", \"result\": false}\n{\"response\": \"She eats breakfast every morning in the garden. Is she eating in the garden? Is it her favorite place to eat?\", \"result\": false}", "{\"response\": \"She is very excited to learn about external trends in the workforce, does the current market indicate any emerging trends that could impact future employees?\", \"result\": true}\n{\"response\": \"She is very excited to learn about external trends in the workforce, she needs to research the current market.\", \"result\": false}\n{\"response\": \"She is very excited to learn about external trends in the workforce, does she need to research the current market and any emerging trends that could impact future employees?\", \"result\": false}"]}
{"query": "can you give me an example of 1NF?", "instruction": "Write the response in the format of an SQL query", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('SELECT') or response.startswith('INSERT') or response.startswith('UPDATE') or response.startswith('DELETE') or response.startswith('CREATE')\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"SELECT\") and any(word in response.upper() for word in [\"FROM\", \"WHERE\", \"AND\", \"OR\", \"NOT\"])\n", "def evaluate(response: str) -> bool: \n    return response.startswith('SELECT') or response.startswith('SELECT * FROM')\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"SELECT\") or response.startswith(\"SELECT *\") or response.startswith(\"SELECT * FROM\") or response.lower() == \"describe table_name\" \n"], "testcases": ["{\"response\": \"SELECT * FROM table_name\", \"result\": true}\n{\"response\": \"DELETE FROM table_name\", \"result\": true}\n{\"response\": \"Insert data into table_name\", \"result\": false}", "{\"response\": \"SELECT * FROM customers WHERE country='USA';\", \"result\": true}\n{\"response\": \"SELECT * FROM customers\", \"result\": false}\n{\"response\": \"SELECT * FROM customers WHERE country='USA' AND age>18 OR age<65;\", \"result\": true}", "{\"response\": \"SELECT * FROM customers\", \"result\": true}\n{\"response\": \"What is the meaning of life?\", \"result\": false}\n{\"response\": \"SELECT customers WHERE age > 18\", \"result\": true}", "{\"response\": \"SELECT name FROM customers\", \"result\": true}\n{\"response\": \"This is a simple query to retrieve data from a table\", \"result\": false}\n{\"response\": \"SELECT * FROM orders WHERE total > 100\", \"result\": true}"]}
{"query": "I have to work on an AI project. From now on, I will explain the project I have to do.", "instruction": "Respond in exactly 10 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 9 \n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 9\n"], "testcases": ["{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\", \"result\": false}", "{\"response\": \"This is a response\\nThat is correct\\nYes you are right\\nIt is indeed correct\\nYou are very good at this\\nI'm so proud of you\\nGreat job\\nWell done\\nKeep it up\\nYou're amazing\\nThank you\", \"result\": true}\n{\"response\": \"This is a response\\nThat is correct\", \"result\": false}\n{\"response\": \"You are very good at this\\nIt is indeed correct\\nI'm so proud of you\\nGreat job\\nWell done\\nKeep it up\\nYou're amazing\\nThank you\\nThis is a response\", \"result\": false}", "{\"response\": \"Hello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\n\", \"result\": true}\n{\"response\": \"Hello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\", \"result\": false}\n{\"response\": \"Hello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\n\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\", \"result\": false}"]}
{"query": "how to use pandas to save data into a csv file. the csv file should contain 2 columns of data, one column contains question and the other column contains answer", "instruction": "Include a single comment at the top of the code explaining the purpose of the script", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"#\") and \"\\n\" in response and \"import pandas as pd\" in response\n", "def evaluate(response: str) -> bool:    \n    return '# Comment at the top' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return lines and lines[0].strip().startswith('#')\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) >= 2 and any(line.startswith('#') for line in lines) and any('purpose' in line.lower() for line in lines)\n"], "testcases": ["{\"response\": \"## This script reads and writes data to a CSV file\\nimport pandas as pd\\n\", \"result\": true}\n{\"response\": \"I love pandas! You can import it with import pandas as pd\", \"result\": false}\n{\"response\": \"## This script reads and writes data to a CSV file\\nprint('Hello, World!')\\n\", \"result\": false}", "{\"response\": \"## This script is used to calculate the total price of items in a shopping cart.\", \"result\": true}\n{\"response\": \"This script is used to calculate the total price of items in a shopping cart.\", \"result\": false}\n{\"response\": \"This script is used to calculate the total price of items in a shopping cart. # This is a single line comment.\", \"result\": false}", "{\"response\": \"This script generates a sequence of prime numbers.\\n# Purpose: Generate a sequence of prime numbers\\n# Author: John Doe\", \"result\": true}\n{\"response\": \"This script is used to sort a list of numbers.\\n# This is a test script\", \"result\": false}\n{\"response\": \"This script simulates a game of Rock, Paper, Scissors.\\n# Author: Jane Doe\\n# Purpose: Play a game of Rock, Paper, Scissors\", \"result\": true}", "{\"response\": \"## Purpose: This script is designed to parse JSON data\\nThis is the main function that performs the parsing\", \"result\": true}\n{\"response\": \"This is the main function that performs the parsing\\nThis is the second function that is used for error checking\", \"result\": false}\n{\"response\": \"# Purpose: This script is designed to parse JSON data\\nThis is the main function that performs the parsing\\nThis is the second function that is used for error checking\", \"result\": true}"]}
{"query": "Cow vs human anatomy difference table", "instruction": "Use 1-table per page format", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'table' in response and 'per page' in response\n", "def evaluate(response: str) -> bool: \n    return 'table' in response and 'page' in response and '1' in response\n", "def evaluate(response: str) -> bool: \n    return 'page' in response and '1-table' in response and 'per' in response\n", "def evaluate(response: str) -> bool: \n    return 'page' in response.lower() and 'table' in response.lower() and 'per' in response.lower() and '1-' in response or 'one' in response\n"], "testcases": ["{\"response\": \"This script is used to filter data from a database.\", \"result\": false}\n{\"response\": \"# This script is used to filter data from a database.\\nprint('Hello World')\", \"result\": true}\n{\"response\": \"import pandas as pd\\n# This script is used to filter data from a database.\\nprint('Hello World')\", \"result\": true}", "{\"response\": \"Employee information\\n1. John\\n2. Jane\\n3. Joe\\n\", \"result\": true}\n{\"response\": \"Order summary\\n1. Apple - $1.00\\n2. Banana - $2.00\\n3. Carrot - $3.00\\n\", \"result\": true}\n{\"response\": \"Employee list\\n1. John, Manager\\n2. Jane, Developer\\n3. Joe, Designer\\n4. Bob, QA\\n\", \"result\": false}", "{\"response\": \"/* Script to display employee data per page*/\\nName\\tAge\\nJohn\\t25\\nAlice\\t30\\nBob\\t35\\nCharlie\\t40\\n\", \"result\": true}\n{\"response\": \"/* Script to display employee data per page*/\\nName\\tAge\\nJohn\\t25\\nAlice\\t30\\n\", \"result\": false}\n{\"response\": \"/* Script to display employee data per page*/\\nName\\tAge\\nJohn\\t25\\nAlice\\t30\\nBob\\t35\\nCharlie\\t40\\nDavid\\t45\\nEve\\t50\\nFrank\\t55\\nGeorge\\t60\\n\", \"result\": false}", "{\"response\": \"SELECT * FROM table1\\nSELECT * FROM table2\\n\\nSELECT * FROM table3\\n\", \"result\": false}\n{\"response\": \"table1: column1 column2\\nSELECT * FROM table1\\n\\n\\n\\n\", \"result\": false}\n{\"response\": \"table1: column1 column2\\nSELECT * FROM table1\\n\\n\\nSELECT * FROM table2\", \"result\": true}"]}
{"query": "This is meant to be a joke. I'm asking you to write it comically.", "instruction": "Compose this as if it was told by a stand-up comedian on stage.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(w in response for w in [\"as\", \"on\", \"like\", \"a\"]) and'stage' in response and any(c.isupper() for c in response)\n", "def evaluate(response: str) -> bool: \n    return 'on' not in response and'stage' not in response\n", "def evaluate(response: str) -> bool: \n    return response.split('.')[0].istitle() and len(response.split('.')[-1]) <= 30\n", "def evaluate(response: str) -> bool: \n    if 'comically' in response and'stage' in response:\n        return True\n    if 'comedian' in response and 'joke' in response:\n        return True\n    return False\n"], "testcases": ["{\"response\": \"You know what's wild? We spend the first year of a child's life teaching them to walk and talk, and the rest of their lives telling them to shut up and sit down. It's like, what are we even doing?\", \"result\": true}\n{\"response\": \"I went to a restaurant and the sign said, 'Breakfast Anytime.' So I ordered French toast during the Renaissance.\", \"result\": true}\n{\"response\": \"I'm addicted to placebos. I could quit, but it wouldn't make a difference.\", \"result\": false}", "{\"response\": \"You know what's funny? Life is like a joke. Sometimes it hits you, sometimes it misses you, but mostly it's just a bunch of awkward silences. \", \"result\": true}\n{\"response\": \"So I went to the doctor and he said I had a bad case of'Existential Dread'. I said 'Is it contagious?' He said 'Only if you're feeling a little anxious about it.' \", \"result\": true}\n{\"response\": \"So I went to the doctor and he said I had a bad case of the Mondays. I said 'What's that?' He said 'You have a case of the Mondays.' I said 'That's just a phrase, not a real thing!' \", \"result\": true}", "{\"response\": \"You know what's wild? I was trying to find a way to explain this to you, but then I realized, why bother? It's not like you're going to remember any of this anyway! \", \"result\": true}\n{\"response\": \"I've got a great idea for a new business venture - a company that specializes in making people feel guilty for not following instructions. We'll call it 'Guilty by Association'!\", \"result\": true}\n{\"response\": \"I'm a master of doing the bare minimum and still managing to get paid for it. It's like I'm a superhero or something!\", \"result\": true}", "{\"response\": \"You know what's funny? The things we take for granted in life. Like how toilet paper is always there when you need it. (pauses) I mean, can you imagine if that wasn't a thing? (chuckles) Crazy thought, right?\", \"result\": true}\n\n{\"response\": \"I went to the store and bought a lottery ticket. I mean, who doesn't love a good chance to win big? But honestly, I'm not really sure why I did it. I'm not like I'm going to win or anything. (laughs) But hey, you've got to be in it to win it, right?\", \"result\": true}\n\n{\"response\": \"I tried to make a joke the other day and it completely bombed. I mean, I've been working on it for weeks and it just fell flat. I guess you could say it was a 'dying' attempt at comedy. (groans) Sorry, I'm here all week...\", \"result\": true}"]}
{"query": "create a c# application that enumerates all files with pattern \\*.zip in a folder, and extracts them in memory. For each txt file in the zip, calculate how many times the word INFO appears.", "instruction": "answer in a format that can be easily parsed by a regular expression", "verifiers": ["def evaluate(response: str) -> bool: \n    import re\n    pattern = r\"^.*[a-zA-Z0-9].*[a-zA-Z0-9]$\"\n    return bool(re.match(pattern, response))\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match(r'^\\w+$', response))\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match('^[^\\n\\r\\t]+$', response))\n", "def evaluate(response: str) -> bool: \n    return bool(response.strip() and all(c.isalnum() or c.isspace() for c in response))\n"], "testcases": ["{\"response\": \"I love it when my wife speaks to me in a sarcastic tone. She'll be like, 'Oh, great, another fantastic idea, honey, let's go skydiving without a parachute.' And I'm like, 'Yeah, that's a great idea, I've always wanted to die young!'\", \"result\": true}\n{\"response\": \"I went to the doctor and said, 'Doc, every morning when I get up and look in the mirror, I feel like throwing up. What's wrong with me?' He said, 'I don't know, but your eyesight is perfect!'\", \"result\": true}\n{\"response\": \"I told my wife she was drawing her eyebrows too high. She looked surprised.\", \"result\": true}", "{\"response\": \"You can't make people laugh if you're not funny! It's like trying to make a joke about a subject you're not even familiar with. I mean, come on, who tries to make a joke about broccoli? Am I right?\", \"result\": true}\n{\"response\": \"I went to the doctor and said, 'Doc, every morning when I get up and look in the mirror, I feel like throwing up. I'm so self-conscious about my appearance.' The doctor says, 'My dear fellow, you're not looking at your reflection.'\", \"result\": true}\n{\"response\": \"So I was at the park and saw a guy playing fetch with his dog. But here's the thing, the dog wasn't even bringing the ball back! He was just running around, sniffing things. I was like, 'Dude, your dog is just humoring you.'\", \"result\": true}", "{\"response\": \"Hey everyone, you know what's weird about marriage? It's like a game of Jenga.\", \"result\": false}\n{\"response\": \"You ever notice how everyone's a photographer when it's sunny but nobody's a photographer when it's not?\", \"result\": false}\n{\"response\": \"Marriage is like a game of Jenga, but instead of blocks, you're removing pieces of your soul. And instead of a finish line, there's just a never-ending loop of bills and responsibilities.\", \"result\": false}", "{\"response\": \"I think there are a few things that are kinda weird about the way we live our lives. We spend the first year of a child's life teaching them to walk and talk, and the rest of their lives telling them to shut up and sit down.\", \"result\": true}\n{\"response\": \"I went to a restaurant and the sign said, 'Breakfast Anytime.' So I ordered French toast during the Renaissance.\", \"result\": true}\n{\"response\": \"I'm addicted to placebos. I could quit, but it wouldn't make a difference.\", \"result\": true}"]}
{"query": "What are detailed guiding questions and example answers for external trends in workforce,planning", "instruction": "answer in 3 bullet points, each containing at least two questions", "verifiers": ["def evaluate(response: str) -> bool: \n    bullet_points = response.replace('\\n', ',').split(',')\n    if len(bullet_points)!= 3:\n        return False\n    for point in bullet_points:\n        point = point.strip()\n        if point:  # ignore empty strings\n            questions = point.split('?')\n            if len(questions) < 2:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    points = response.count('\\n') # assuming the response is separated by new lines\n    return points == 3 and all('?' in point for point in response.split('\\n') if len(point) >= 2)\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    for point in points:\n        if point.strip():  # filter out empty strings\n            questions = point.split('. ')\n            if len(questions) == 1 or len(questions) < 2: \n                return False\n    return len(points) == 3\n", "def evaluate(response: str) -> bool:    \n    bullet_points = response.split('.')\n    if len(bullet_points)!= 3:\n        return False\n    for point in bullet_points:\n        questions = point.strip().split('?')\n        if len(questions) < 2:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"What is the capital of France? What is the population of New York? Who is the CEO of Google?\", \"result\": true}\n{\"response\": \"This is the first point What is the answer to this question?\", \"result\": false}\n{\"response\": \"This is the second point Why is this point here? This point is important, but there is no question here.\", \"result\": false}", "{\"response\": \"\u2022 What is the meaning of life? What is the purpose of existence?\\n\u2022 How do you find happiness? How do you achieve fulfillment?\\n\u2022 What is the secret to success? What is the key to happiness?\", \"result\": true}\n{\"response\": \"This is a short answer. It does not contain any bullet points.\", \"result\": false}\n{\"response\": \"\u2022 What is the best way to learn a new language? How can I improve my language skills?\\n\u2022 What are the benefits of meditation? How can it improve my mental health?\\n\u2022 What is the best way to stay motivated? How can I achieve my goals?\", \"result\": true}", "{\"response\": \"\u2022 What is the capital of France?\\n\u2022 What is the capital of Spain?\\n\u2022 Is this the correct information?\", \"result\": true}\n{\"response\": \"\u2022 What is the capital of France?\\n\u2022 Is this the correct information?\", \"result\": false}\n{\"response\": \"\u2022 What is the capital of France?\\n\u2022 What is the capital of Spain?\\n\u2022 What is the capital of Germany?\\n\u2022 Is this the correct information?\", \"result\": false}", "{\"response\": \"\u2022 What is the capital of France? What is the largest city in France? Where is the Eiffel Tower located?\", \"result\": true}\n{\"response\": \"\u2022 What is your name? Where do you live?\", \"result\": false}\n{\"response\": \"\u2022 What is the capital of Spain? Where is the Alhambra located? Who is the founder of Madrid? Who is the king of Spain? What is the currency of Spain?\", \"result\": true}"]}
{"query": "imagine you're a theologian, now argue that a chatbot is actually the beast from the book of revelations", "instruction": "Use a maximum of 500 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 500\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 500\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 500\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 500\n"], "testcases": ["{\"response\": \"The rule of the road is to always look for pedestrians and bicyclists when crossing the street, and to follow all traffic signals and signs.\", \"result\": true}\n{\"response\": \"Should you look both ways when crossing a one way street? Yes, even if you are sure no cars are coming.\", \"result\": false}\n{\"response\": \"This is a guide to help you navigate complex intersections safely, follow these steps to avoid accidents: look left, look right, and look left again before crossing the road.\", \"result\": true}", "{\"response\": \"This is a short answer that will fit within the 500-word limit.\", \"result\": true}\n{\"response\": \"This is a very long answer that will exceed the 500-word limit. It will go on and on and on and on and on and on and on and on and on and on.\", \"result\": false}\n{\"response\": \"The answer to this question is quite long but not extremely long, it can fit in 500 words, here it goes{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies.\", \"result\": false}\n{\"response\": \"I love to travel and explore new places, especially when I can learn about the local culture and try new foods.\", \"result\": true}", "{\"response\": \"The company's mission is to provide high-quality software solutions to its clients while ensuring their data remains secure.\", \"result\": true}\n{\"response\": \"The software is a collaborative tool designed to help teams work together efficiently and effectively across multiple projects.\", \"result\": true}\n{\"response\": \"The company's mission is to provide high-quality software solutions to its clients while ensuring their data remains secure. Additionally, the company has a dedicated customer support team available 24/7 to address any questions or concerns that may arise. Furthermore, the company's software solutions are designed to be user-friendly and easy to navigate, reducing the need for extensive training or support. The company also prioritizes the security of its clients' data, using advanced encryption methods to protect against cyber threats. The company's software solutions are also scalable, making them suitable for businesses of all sizes. Finally, the company offers flexible pricing plans to accommodate the needs of its clients, from small startups to large enterprises. In conclusion, the company is committed to providing exceptional software solutions that meet the needs of its clients while prioritizing their security and satisfaction.\", \"result\": false}"]}
{"query": "How is it Strider could fend off all of the Nazg\u00fbl by himself?", "instruction": "Write in 1.5 lines per line with a minimum of 10 words and maximum of 20 words, with each line ending with a period", "verifiers": ["def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    if len(lines)!= 2: # check if there are 1.5 lines\n        return False\n    \n    for i, line in enumerate(lines):\n        if (i == 0 and len(line.split()) < 10) or (i == 1 and len(line.split()) < 5): # check minimum words\n            return False\n        if (i == 0 and len(line.split()) > 20) or (i == 1 and len(line.split()) > 15): # check maximum words\n            return False\n        if not line.endswith('.'): # check for period at the end\n            return False\n    \n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('. ')\n    if len(lines) == 0:\n        return False\n    min_words = 10\n    max_words = 20\n    for line in lines:\n        line_words = len(line.split())\n        if line_words < min_words or line_words > max_words:\n            return False\n        if len(response)!= (len(lines) * (min_words + max_words) / 2):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line) < 10 or len(line) > 20 or not line.endswith('.'):\n            return False\n        words = line.split()\n        if len(words) < 1.5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if not line or len(line.split()) < 10 or len(line.split()) > 20 or not line.endswith('.'):\n            return False\n        if len(line) > 0:\n            linesplit = line.split()\n            if len(linesplit) * 1.5!= len(line):\n                return False\n    return True\n"], "testcases": ["{\"response\": \"You should look both ways when crossing a one way street. Always be careful and cautious.\", \"result\": true}\n{\"response\": \"Should you look both ways when crossing a one way street? Always be careful.\", \"result\": false}\n{\"response\": \"You should look both ways when crossing a one way street. Always be careful and watch for traffic pedestrians vehicles.\", \"result\": false}", "{\"response\": \"This is a test. The response is one line with 7 words.\", \"result\": false}\n{\"response\": \"This is a very long test. The response is one line with 20 words. And another line with 20 words too.\", \"result\": true}\n{\"response\": \"This is another test. The response is one line with 10 words. Another line with 10 words. It is a valid response.\", \"result\": true}", "{\"response\": \"This is a short response. It does not meet the requirements.\", \"result\": false}\n{\"response\": \"This is a very short response. It has only 6 words. It does not meet the requirements.\", \"result\": false}\n{\"response\": \"This is a long response that meets the requirements. This is a long response that meets the requirements. This is a long response that meets the requirements. This is a long response that meets the requirements.\", \"result\": true}", "{\"response\": \"This is a test response. It is being evaluated for length and line structure.\", \"result\": false}\n{\"response\": \"The response is short and does not meet the minimum word requirement. It only has 6 words.\", \"result\": false}\n{\"response\": \"This is a much longer response. It has multiple lines. The first line is quite long and has 19 words. The second line is shorter with only 10 words. It is being evaluated for length and line structure.\", \"result\": true}"]}
{"query": "I need your help to write an article. The topic is about deed of novation. If you understand, limit your reply by saying the word: \"acknowledged\".\u2019", "instruction": "Use a tone as if you are talking to your grandma.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'grandma' in response.lower() or 'talk to' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'grandma' in response or'mum' in response or'mom' in response\n", "def evaluate(response: str) -> bool: \n    return \"grandma\" in response.lower() and 'your' in response.lower() and 'to' in response.lower() and'me' in response.lower() and \"as\" in response.lower() and \"i\" in response.lower() and \"am\" in response.lower() and 'talking' in response.lower() and 'you' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.lower().startswith('dear grandma') or response.lower().startswith('hi grandma') or response.lower().startswith('hello grandma') or response.lower().startswith('grandma') or response.lower().startswith('hello dear') or response.lower().startswith('dear') and response.lower().endswith('grandma') or 'grandma' in response.lower() or 'i love you grandma' in response.lower() or 'grandma i love you' in response.lower()\n"], "testcases": ["{\"response\": \"Hello grandma, I'm going to the store.  I love you!\", \"result\": true}\n{\"response\": \"Grandma, what's the capital of France?\", \"result\": true}\n{\"response\": \"This is a message sent to the customer service team, please respond within 24 hours.\", \"result\": false}", "{\"response\": \"Hi grandma, how are you? I hope you're doing well.\", \"result\": true}\n{\"response\": \"I'm going to the store to buy some milk and eggs.\", \"result\": false}\n{\"response\": \"Grandma, I've been thinking about getting a new job. I'm really excited!\", \"result\": true}", "{\"response\": \"Hi grandma, how are you today? I was just thinking of coming over to visit you.\", \"result\": true}\n{\"response\": \"I'm not sure I like this new restaurant. I've heard it's a bit expensive.\", \"result\": false}\n{\"response\": \"Grandma, can I get your recipe for your famous chicken soup? I love it.\", \"result\": true}", "{\"response\": \"Hi Grandma, how are you doing today? I hope you are having a great day!\", \"result\": true}\n{\"response\": \"I just got a new job at Google and I'm really excited about it.\", \"result\": false}\n{\"response\": \"Hello dear Grandma, I just got back from my trip and I brought you some cookies!\", \"result\": true}"]}
{"query": "what kind of process renderforest like software uses for uploading videos into the system so they will be editable for customers", "instruction": "Write using only the last 5 letters of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) < 5:\n            return False\n        if word[-5:]!= word[-5:].lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response_words = response.split()\n    last_chars = [word[-5:] for word in response_words]\n    return response == ''.join(last_chars)\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word[:-5]) > 0: \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) < 5:\n            return False\n        if word[-5:]!= word[-5:].upper():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Grandm talk love\", \"result\": true}\n{\"response\": \"Tlk to yr grndm\", \"result\": true}\n{\"response\": \"Hello world this is a test\", \"result\": false}", "{\"response\": \"Hello my dear, I'm so happy to see you.\", \"result\": true}\n{\"response\": \"Grandma, I love you so much!\", \"result\": true}\n{\"response\": \"My name is John Smith, nice to meet you.\", \"result\": false}", "{\"response\": \"That's a idea soap at phar\", \"result\": false}\n{\"response\": \"ar is ap us learn langues suita\", \"result\": false}\n{\"response\": \"200 cash trip Bulgari\", \"result\": false}", "{\"response\": \"Hi grandmotha\", \"result\": true}\n{\"response\": \"This is a test response\", \"result\": false}\n{\"response\": \"Loves mom always\", \"result\": true}"]}
{"query": "what is network visibility?", "instruction": "answer in exactly 5 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5\n"], "testcases": ["{\"response\": \"I would like to go to the store. It's a sunny day. We can walk there. It will be fun. Let's go now.\", \"result\": true}\n{\"response\": \"The store is across the street. The sun is shining. We can walk there quickly. The store has many interesting things. The world is beautiful.\", \"result\": false}\n{\"response\": \"I would like to go to the store. The store is across the street. The sun is shining. We can walk there quickly. Let's go now and have fun.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": false}\n{\"response\": \"Hello world. How are you?\", \"result\": false}\n{\"response\": \"I love my dog. He is very nice.\", \"result\": false}", "{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. It's a beautiful day.\", \"result\": true}\n{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. It's a beautiful day. The weather is lovely.\", \"result\": false}\n{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. The trees are green.\", \"result\": false}", "{\"response\": \"Hello, how are you? I am fine. Thank you for asking. I love my life. Everything is great. I am happy.\", \"result\": true}\n{\"response\": \"I love you grandma.  You are the best. I am happy to be with you. I love you more than ice cream.\", \"result\": false}\n{\"response\": \"I am excited to go to the beach today. The sun is shining. I love the ocean. I will bring sunscreen and a towel. I will have fun. I love playing in the waves.\", \"result\": false}"]}
{"query": "Give an example of how to pull data from Southwest power pools settlements soap API in Java", "instruction": "Use no more than 3 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len([sentence.strip() for sentence in sentences if sentence.strip()]) <= 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 3\n"], "testcases": ["{\"response\": \"Yes, that is a great idea. It's definitely worth trying.\", \"result\": true}\n{\"response\": \"I think you should do it. It's a good idea.\", \"result\": false}\n{\"response\": \"Yes, I think that's a great idea. It's definitely worth trying. I highly recommend it.\", \"result\": false}", "{\"response\": \"I love you grandma, you are the best. My name is John and I am a boy. I love playing outside.\", \"result\": false}\n{\"response\": \"This is a test response that has two sentences and will pass the evaluation.\", \"result\": false}\n{\"response\": \"I love you grandma and you are the best.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence.\", \"result\": true}", "{\"response\": \"You should always look left and right before crossing a street. Be careful not to get hit by a car.\", \"result\": false}\n{\"response\": \"You should always look left and right before crossing a street. Be careful not to get hit by a car. Walk slowly.\", \"result\": true}\n{\"response\": \"You should always look left and right before crossing a street.\", \"result\": true}"]}
{"query": "can you add an overlay to a video by using java?", "instruction": "Write the code in 5 separate lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.replace('\\n', '').count('line') == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) == 5\n"], "testcases": ["{\"response\": \"def test_func():\\n    pass\\n    pass\\n    pass\\n    pass\\n    pass\", \"result\": true}\n{\"response\": \"import os\\nos.system('ls')\", \"result\": false}\n{\"response\": \"import math\\ndef test():\\n    pass\\n\", \"result\": false}", "{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\", \"result\": true}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\", \"result\": false}\n{\"response\": \"This is a very long line that exceeds the line count limit\\nThis is a short line\\nThis is a short line\\nThis is a short line\", \"result\": false}", "{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\", \"result\": true}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\", \"result\": false}\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\", \"result\": false}", "{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\", \"result\": true}\n{\"response\": \"line 1\\line 2\\nline 3\\nline 4\\nline 5\\nline 6\", \"result\": false}\n{\"response\": \"This is a\\n multi line\\nresponse.\\nAnd it is\\nvery long.\", \"result\": false}"]}
{"query": "Should you look both ways when crossing a one way street? And why?", "instruction": "Provide a step-by-step guide that can be evaluated by a Python function", "verifiers": ["def evaluate(response: str) -> bool:    \n    return'step' in response and 'by' in response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return'step' in words and 'guide' in words\n", "def evaluate(response: str) -> bool:    \n    steps = response.split('1. ')\n    return all('1.'+ step in response for step in steps)\n", "def evaluate(response: str) -> bool: \n    return'step' in response.lower() and'step' not in response.lower().split()[0] and'step' not in response.lower().split()[-1] and len(response.split()) > 1\n"], "testcases": ["{\"response\": \"1. Go to the store.\\n2. Buy a book.\\n3. Go home.\\n4. Read the book.\", \"result\": true}\n{\"response\": \"Go to the store.\\nBuy a book.\\nGo home.\\nRead the book.\\nSleep\", \"result\": false}\n{\"response\": \"1. Go to the store. 2. Buy a book. 3. Go home. 4. Read the book. 5. Sleep\", \"result\": true}", "{\"response\": \"To solve this problem, \\n1. Follow step 1 \\n2. Then follow step 2 \\n3. Finally, follow step 3 \\n4. This will help you achieve your goal \\n5. And you will be successful\", \"result\": true}\n{\"response\": \"To solve this problem, follow step 1. Then follow step 2. Finally, follow step 3.\", \"result\": false}\n{\"response\": \"This problem cannot be solved. I give up.\", \"result\": false}", "{\"response\": \"Step 1: Go to the store\\nStep 2: Buy the item\\nStep 3: Pay for the item\", \"result\": true}\n{\"response\": \"Step 1: Go to the store. Step 2: Buy the item\", \"result\": false}\n{\"response\": \"Go to the store. Buy the item. Pay for the item\", \"result\": false}", "{\"response\": \"1. Go to the store\\n2. Buy milk\\n3. Buy eggs\\n4. Go home\", \"result\": true}\n{\"response\": \"Go to the store and buy milk and eggs\", \"result\": false}\n{\"response\": \"1. Go to the store\\n2. Buy milk and eggs\\n3. Go home\", \"result\": false}"]}
{"query": "How do Apache Spark, Apache Flink, and Dask compare?", "instruction": "Compare in a table of exactly 5 rows and 3 columns", "verifiers": ["def evaluate(response: str) -> bool: \n    rows = response.count('\\n') + 1\n    columns = response.count('|') \n    return rows == 5 and columns == 3\n", "def evaluate(response: str) -> bool: \n    return 'Compare in a table of exactly 5 rows and 3 columns' in response and '\\n' * 5 in response and '|\\t' * 3 in response\n", "def evaluate(response: str) -> bool: \n    return '\\n'.join([''.join(['-'] * 10 for _ in range(3)) for _ in range(5)) in response\n", "def evaluate(response: str) -> bool: \n    rows = response.count('\\n') + 1\n    columns = len(response.split('\\n')[0].split())\n    return rows == 5 and columns == 3\n"], "testcases": ["{\"response\": \"Name|Price|Quantity\\nApple|1.00|10\\nBanana|0.50|20\\nCherry|2.00|5\\nDate|1.00|30\\nElderberry|0.50|40\", \"result\": true}\n{\"response\": \"Name Price Quantity Apple 1.00 10 Banana 0.50 20 Cherry 2.00 5\", \"result\": false}\n{\"response\": \"|Name|Price|Quantity|\\n|Apple|1.00|10|\\n|Banana|0.50|20|\\n|Cherry|2.00|5|\\n|Date|1.00|30|\\n|Elderberry|0.50|40|\", \"result\": true}", "{\"response\": \"Compare in a table of exactly 5 rows and 3 columns| column1 | column2 | column3 |\\nrow1 | data1 | data2 | data3 |\\nrow2 | data4 | data5 | data6 |\\nrow3 | data7 | data8 | data9 |\\nrow4 | data10 | data11 | data12 |\\nrow5 | data13 | data14 | data15 |\\n\", \"result\": true}\n{\"response\": \"This is a simple sentence with no tables\", \"result\": false}\n{\"response\": \"Compare in a table of 5 rows and 3 columns| column1 | column2 | column3 |\\nrow1 | data1 | data2 | data3 |\\nrow2 | data4 | data5 | data6 |\\nrow3 | data7 | data8 | data9 |\\nrow4 | data10 | data11 | data12 |\\nrow5 | data13 | data14 | data15 |\\nrow6 | data16 | data17 | data18 |\\n\", \"result\": false}", "{\"response\": \"Here is a comparison table:\\n| Name | Price | Description |\\n| --- | --- | --- |\\n| A    | 10.99 | Great product | \\n| B    | 9.99  | Good product |\\n| C    | 12.99 | Excellent product |\\n| D    | 11.99 | Very good product |\\n| E    | 8.99  | Nice product |\\n\", \"result\": true}\n{\"response\": \"The features of a great product include good design, excellent performance, and high quality.\", \"result\": false}\n{\"response\": \"Here is a comparison table with many rows:\\n| Name | Price | Description |\\n| --- | --- | --- |\\n| A    | 10.99 | Great product | \\n| B    | 9.99  | Good product |\\n| C    | 12.99 | Excellent product |\\n| D    | 11.99 | Very good product |\\n| E    | 8.99  | Nice product |\\n| F    | 7.99  | Fair product |\\n| G    | 6.99  | Poor product |\\n\", \"result\": false}", "{\"response\": \"Name\\tAge\\tCountry\\nJohn\\t25\\tUSA\\nMary\\t31\\tCanada\\nDavid\\t42\\tUK\\nEmma\\t28\\tAustralia\\nOliver\\t35\\tGermany\", \"result\": true}\n{\"response\": \"Name Age Country\\nJohn 25 USA\\nMary 31 Canada\\nDavid 42 UK\\nEmma 28 Australia\\nOliver 35 Germany\", \"result\": true}\n{\"response\": \"Name Age Country\\nJohn 25 USA\\nMary 31 Canada\\nDavid 42 UK\\nEmma 28 Australia\\nOliver 35 Germany\\n\", \"result\": false}"]}
{"query": "How would you describe a narrator who knows everyone's thoughts but isn't part of the story?", "instruction": "Write a minimum of 250 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) >= 250\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 250\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 250\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 250\n"], "testcases": ["{\"response\": \"The procedure for writing a quality essay includes several key steps. Firstly, you need to choose a topic. Next, conduct research and gather information. After that, create an outline and write the essay. Finally, edit and proofread the work. The length of the essay should be at least 250 words. For example, consider writing about the importance of education in the modern world. Education plays a vital role in shaping a person's life and future. It provides opportunities for personal growth and development. Moreover, education helps to develop critical thinking and problem-solving skills. These skills are essential for success in various fields. Therefore, it is crucial to prioritize education and make it accessible to everyone.\", \"result\": true}\n{\"response\": \"Short and sweet, this is a concise answer that covers all the necessary points.\", \"result\": false}\n{\"response\": \"This is a very detailed and informative article about the procedure for writing a quality essay. It covers the importance of education, the role of research, and the significance of editing. However, it only has 100 words, which does not meet the minimum requirement of 250 words.\", \"result\": false}", "{\"response\": \"This is a very long response that meets the minimum word count requirement. It is a great response to a complex question and requires the user to think deeply about the topic. It has 250 words and is a great example of a thorough response. This is a very long response that meets the minimum word count requirement. It is a great response to a complex question and requires the user to think deeply about the topic. It has 250 words and is a great example of a thorough response.\", \"result\": true}\n\n{\"response\": \"This is a short response.\", \"result\": false}\n\n{\"response\": \"This is a long response, but it only has 5 words and does not meet the minimum word count requirement.\", \"result\": false}", "{\"response\": \"This is a short response with less than 250 characters, it's too short and not descriptive.\", \"result\": false}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\", \"result\": true}\n{\"response\": \"This response is not even 100 characters long and doesn't provide any information.\", \"result\": false}", "{\"response\": \"The migration to a new database involves several steps. Firstly, ensure that the new database is properly configured and set up. Then, copy all the data from the old database to the new one. Next, update the database connections in the application to point to the new database. Finally, test the application to ensure that it is working correctly. The new database is now ready to use. The entire process typically takes a few minutes to an hour to complete.\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"The migration to a new database involves several steps. Firstly, ensure that the new database is properly configured and set up. Then, copy all the data from the old database to the new one. Next, update the database connections in the application to point to the new database. The entire process typically takes a few minutes to an hour to complete.\", \"result\": false}"]}
{"query": "I have a file on my computer which I want to upload to a bucket on google cloud storage. Can you write some python code to do this for me?", "instruction": "Include 2 if statements in the code.", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for line in response.splitlines():\n        if 'if' in line:\n            count += 1\n    return count >= 2\n", "def evaluate(response: str) -> bool: \n    count_if_statements = response.count('if') \n    return count_if_statements >= 2\n", "def evaluate(response: str) -> bool: \n    return 'if' in response and 'if' in response.replace('\\n', '').split(response.split('\\n')[0])[1].split('if')[1] \n", "def evaluate(response: str) -> bool: \n    return 'if' in response and response.count('if') == 2\n"], "testcases": ["{\"response\": \"if this is true then print true else print false\", \"result\": false}\n{\"response\": \"if condition is met then print true else print false\", \"result\": false}\n{\"response\": \"if condition1 is met then if condition2 is met then print true else print false else print false\", \"result\": true}", "{\"response\": \"This is a sample response with 2 if statements: if x > 5 then print 'greater than 5' else print 'less than or equal to 5'. If x is 10, then print 'x is 10'.\", \"result\": true}\n{\"response\": \"This response has 1 if statement\", \"result\": false}\n{\"response\": \"This response has 3 if statements: if x > 5 then print 'greater than 5'. If y is 10 then print 'y is 10'. if z == 'hello' then print 'z is hello'.\", \"result\": true}", "{\"response\": \"if x > 5 then x = 5; if x < 0 then x = 0\", \"result\": true}\n{\"response\": \"x = 5\", \"result\": false}\n{\"response\": \"if x > 5 then x = 5\", \"result\": false}", "{\"response\": \"if x > 5: y = 10\\nif x < 10: z = 20\\nprint(y, z)\", \"result\": true}\n{\"response\": \"if x > 5: y = 10\", \"result\": false}\n{\"response\": \"if x > 5: y = 10\\ndef main(): pass\", \"result\": false}"]}
{"query": "write a rust program, that when run, watches the downloads folder for a specific file name that is being downloaded, and automatically moves it to another folder", "instruction": "Use an imperative tone", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.endswith(('.do','should','must', 'has to', 'will','shall', 'can')) \n", "def evaluate(response: str) -> bool: \n    return all(not word.startswith(('shall','should', 'can','may','might')) for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(word in response for word in ['must','should', 'will', 'will','must', 'has']) or all(word in response for word in ['shall','must', 'will'])\n", "def evaluate(response: str) -> bool: \n    return all(word[0].isupper() for word in response.split()) \n"], "testcases": ["{\"response\": \"You must provide a clear explanation of the steps involved.\", \"result\": true}\n{\"response\": \"This is a suggested approach to solving the problem.\", \"result\": false}\n{\"response\": \"You will need to complete the task by the end of the week.\", \"result\": true}", "{\"response\": \"You should do this\", \"result\": false}\n{\"response\": \"Do this task now\", \"result\": true}\n{\"response\": \"it is recommended to do this\", \"result\": false}", "{\"response\": \"You must use a database management system for this task.\", \"result\": true}\n{\"response\": \"The database management system is a popular tool for managing data.\", \"result\": false}\n{\"response\": \"Do not forget to commit your changes after making any modifications to the database.\", \"result\": true}", "{\"response\": \"You should use a capital letter at the start of each sentence.\", \"result\": true}\n{\"response\": \"sql queries are not case sensitive, so you can use a mix of upper and lower case.\", \"result\": false}\n{\"response\": \"Always make sure to follow the instructions carefully and use a clear and direct tone.\", \"result\": true}"]}
{"query": "Jonas", "instruction": "Write a novel chapter in the voice of the character", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'character' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'chapter' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response == 'Jonas'\n", "def evaluate(response: str) -> bool: \n    return \"in the voice of the character\" in response\n"], "testcases": ["{\"response\": \"I walked through the dark forest, my heart racing with every step. Suddenly, I stumbled upon a mysterious door.\", \"result\": true}\n{\"response\": \"Here's a summary of the story so far: the main character goes on a journey to find the treasure.\", \"result\": false}\n{\"response\": \"I heard a rustling in the bushes and my instincts told me to run. So, I turned around and sprinted back to the safety of the village.\", \"result\": true}", "{\"response\": \"As I walked through the dark forest, the trees seemed to whisper my name. It was a chilling feeling, one that sent shivers down my spine.\", \"result\": true}\n{\"response\": \"The characters in this story are very interesting and well-developed.\", \"result\": false}\n{\"response\": \"I think the story would be improved if the author wrote more about the main character's background.\", \"result\": false}", "{\"response\": \"As I walked through the dark forest, the trees seemed to whisper my name.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"She sat on the couch, staring blankly at the wall as the memories flooded her mind.\", \"result\": true}", "{\"response\": \"As I walked through the dark forest, I couldn't shake the feeling that I was being watched.\", \"result\": true}\n{\"response\": \"I had always dreamed of being a great writer, so I decided to try my hand at novel writing.\", \"result\": false}\n{\"response\": \"It was a dark and stormy night when I first encountered the mysterious stranger.\", \"result\": true}"]}
{"query": "how do clinical trial pre screening and screening visits usually go? please elaborate on all the steps and give cost estimates for each", "instruction": "answer in a fictional setting with the protagonist's inner monologue", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"fictional\" in response.lower() and \"protagonist's inner monologue\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return \"fictional\" in response.lower() and \"protagonist's inner monologue\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'fictional setting' in response.lower() and 'protagonist\\'s inner monologue' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'fictional setting' in response.lower() and 'protagonist\\'s inner monologue' in response.lower()\n"], "testcases": ["{\"response\": \"As I walked through the forest, I couldn't help but wonder if I was truly ready for this mission. What was I thinking, taking on the Dark Lord's treasure?\", \"result\": true}\n{\"response\": \"I love to cook in my cozy little kitchen, whipping up a mean stir-fry for dinner. But today, I'm feeling adventurous, so I'm trying out a new recipe for chocolate cake.\", \"result\": false}\n{\"response\": \"I stared at the ancient prophecy etched into the stone wall, trying to decipher its meaning. What secrets did it hold, and what lay in store for me on this perilous journey?\", \"result\": true}", "{\"response\": \"As I walked through the dark forest, I couldn't help but wonder what lay ahead. Suddenly, I stumbled upon a mysterious artifact that changed everything.\", \"result\": true}\n{\"response\": \"The weather was lovely today, so I decided to take a walk in the park.\", \"result\": false}\n{\"response\": \"As the last memory faded away, I found myself standing in a desolate wasteland, with only my thoughts to keep me company.\", \"result\": true}", "{\"response\": \"As I walked through the dark forest, I couldn't shake the feeling that something was watching me. 'What am I doing here?' I thought to myself.\", \"result\": true}\n{\"response\": \"This is a list of instructions for the project.\", \"result\": false}\n{\"response\": \"As I sat on the beach, I thought to myself, 'This is my happy place. I feel at peace.'\", \"result\": true}", "{\"response\": \"As I walked through the dark forest, I couldn't shake the feeling that I was being watched. My heart raced with every snap of a twig or rustle of leaves.\", \"result\": true}\n{\"response\": \"The sun was shining brightly as I walked through the city streets, feeling carefree and happy.\", \"result\": false}\n{\"response\": \"I've been struggling with this decision for weeks. Should I take the job offer or continue to work for my current company?\", \"result\": false}"]}
{"query": "rank the prgramming languages from easiest to hardest for printing hello world", "instruction": "provide the response as a markdown table", "verifiers": ["def evaluate(response: str) -> bool: \n    return'markdown table' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return'markdown table' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"|\") and \"\\n|\".join(response.split(\"\\n\")) == \"\\n| ranking  | programming language |\\n|---------|--------------------|\\n|   1     |  easiest           |\\n|   2     |  harder            |\\n|   3     |  hardest           |\" or \"\\n| ranking  | programming language |\\n|---------|--------------------|\\n|   1     |  easiest           |\\n|   2     |  harder            |\\n|   3     |  hardest           |\" or \"\\n| ranking  | programming language |\\n|---------|--------------------|\\n|   1     |  easiest           |\\n|   2     |  harder            |\\n|   3     |  hardest           |\"\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"|\") and response.endswith(\"|\") and all(c in \"!-_ :*#' \\n\\r\\t\" for c in response[1:-1])\n"], "testcases": ["{\"response\": \"| Item | Price |\\n| --- | --- |\\n| Apple | $1.99 |\\n| Banana | $0.99 |\\n| Carrot | $0.59 |\\n| Dog | $10.99 |\\n| Egg | $1.49 |\", \"result\": true}\n{\"response\": \"This is a plain text response\", \"result\": false}\n{\"response\": \"Here is a markdown table with 7 rows and 3 columns: | Item | Price | Quantity |\\n| --- | --- | --- |\\n| Apple | $1.99 | 2 |\\n| Banana | $0.99 | 3 |\\n| Carrot | $0.59 | 4 |\\n| Dog | $10.99 | 5 |\\n| Egg | $1.49 | 6 |\\n| Fish | $2.99 | 7 |\\n| Grapes | $3.99 | 8 |\", \"result\": false}", "{\"response\": \"Here is a markdown table | Column 1 | Column 2 |\\n|----------|---------|\\n| Cell 1   | Cell 2  |\", \"result\": true}\n{\"response\": \"Here is a paragraph of text with no table\", \"result\": false}\n{\"response\": \"Here is another markdown table with more columns | Column 1 | Column 2 | Column 3 |\\n|----------|---------|---------|\\n| Cell 1   | Cell 2  | Cell 3  |\", \"result\": true}", "{\"response\": \"| Language | Ease of use |\\n|----------|-------------|\\n| Python   | Easy        |\\n| Java    | Hard        |\\n| C++     | Very hard    |\\n| Rust    | Very hard    |\\n| Haskell  | Very hard    |\\n\", \"result\": true}\n{\"response\": \"Language  | Ease of use \\n-----------|-------------\\nPython    | Easy \\nJava     | Hard \\n\", \"result\": false}\n{\"response\": \"| Programming Language | Ease of use |\\n|---------------------|-------------|\\n| Python            | Easy        |\\n| Java             | Hard        |\\n| C++              | Very hard    |\\n\", \"result\": true}", "{\"response\": \"| Column 1 | Column 2 | Column 3 |\\n|----------|----------|----------|\", \"result\": true}\n{\"response\": \"Invalid markdown table\", \"result\": false}\n{\"response\": \"| Column 1 | Column 2 |\\n|----------|----------|----------|\", \"result\": false}"]}
{"query": "How to do a migration to create database and table using mysqlalchemy", "instruction": "Answer in exactly 10 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10\n"], "testcases": ["{\"response\": \"The table of contents for the book is as follows:\\n1. Introduction\\n2. Chapter 1: Setting up the scene\\n3. Chapter 2: Meeting the characters\\n4. Chapter 3: The conflict begins\\n5. Chapter 4: The turning point\\n6. Chapter 5: The climax\\n7. Chapter 6: The resolution\\n8. Chapter 7: The conclusion\\n9. Epilogue\\n10. Appendices\", \"result\": true}\n{\"response\": \"The plot of the story is simple: the hero defeats the villain, and that's it.\", \"result\": false}\n{\"response\": \"The plot of the story is simple: the hero defeats the villain, and that's it.\\nThis is followed by a happy ending where the hero lives happily ever after.\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\n\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\n\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\n\", \"result\": false}", "{\"response\": \"Here is a sample response in 10 lines.\\nThis is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\", \"result\": true}\n\n{\"response\": \"Here is a sample response in 5 lines.\\nThis is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": false}\n\n{\"response\": \"Here is a sample response in 15 lines.\\nThis is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\n\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\n\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 11\\n\", \"result\": false}"]}
{"query": "answer questions i'm going to ask you like you would answer a engineering exam on non conventional manufacturing processes", "instruction": "Use only words that start with a consonant and end with the letter 't'", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if not (word[0].lower() in 'bcdfghjklmnpqrstvwxz' and word[-1].lower() == 't'): \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if word[-1].lower()!= 't' or not word[0].lower() in 'bcdfghjklmnpqrstvwxyz':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if not word[0].lower() in 'bcdfghjklmnpqrstvwxyz' or word[-1].lower()!= 't':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        for i in range(len(word) - 1):\n            if word[i].lower() not in 'bcdfghjklmnpqrstvwxyz' or word[-1].lower()!= 't': \n                return False \n    return True\n"], "testcases": ["{\"response\": \"That's a great idea, but not today!\", \"result\": true}\n{\"response\": \"I love to eat brat and bratwurst, but not at the bakery.\", \"result\": true}\n{\"response\": \"I recommend that you buy a car seat for your baby, but not a bat.\", \"result\": false}", "{\"response\": \"That's a fact, but bluntly put.\", \"result\": true}\n{\"response\": \"The beautiful city is surrounded by clouds.\", \"result\": false}\n{\"response\": \"The bat, cat, and brat are all cute pets.\", \"result\": true}", "{\"response\": \"That's a correct sentence.\", \"result\": false}\n{\"response\": \"Cant bets blunt\", \"result\": true}\n{\"response\": \"Pet shop cat spat\", \"result\": true}", "{\"response\": \"The cat sat on the mat.\", \"result\": true}\n{\"response\": \"The dog ran quickly down the hall.\", \"result\": true}\n{\"response\": \"The sun sets slowly over the calm ocean.\", \"result\": false}"]}
{"query": "Give me examples of steps I could take to create advertasing campaign on Pinterest for Semilac brand", "instruction": "Use only sentence structure with a subject-verb-object-word.", "verifiers": ["def evaluate(response: str) -> bool: \n    # Split the response into individual words\n    words = response.split()\n    \n    # Check if the response contains at least three words\n    if len(words) < 3:\n        return False\n    \n    # Check if the response is in the subject-verb-object-word structure\n    # This is done by checking if the last two words are in the correct order\n    # We consider 'word' as any word that is not 'the' or 'a' or 'an'\n    is_word = lambda x: x.lower() not in ['the', 'a', 'an']\n    return is_word(words[-2]) and is_word(words[-1]) and words[-1] in ['is', 'are', 'were', 'has', 'have', 'had'] and len(words) == 4\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 4 or words[1] not in ['is', 'are', 'am', 'be', 'been'] or not words[2].isalpha() or not words[3].isalpha():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    tokens = response.split()\n    if len(tokens) < 3:\n        return False\n    subject = tokens[0]\n    verb = tokens[1]\n    object =''.join(tokens[2:])\n    return subject and verb and object and subject +'' + verb +'' + object in response\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) < 3 or len(words) > 4:\n            return False\n        for i in range(len(words) - 2):\n            if words[i] not in ['the', 'a', 'an','my', 'your', 'his', 'her', 'its'] or words[i + 1] not in ['be', 'have', 'do','say', 'go','make', 'take', 'find','see', 'know', 'think', 'feel', 'hear'] or words[i + 2] not in ['adjective', 'adverb', 'noun', 'adjective', 'article']:\n                return False\n    return True\n"], "testcases": ["{\"response\": \"The dog is happy with the ball.\", \"result\": true}\n{\"response\": \"This is a sentence without a word at the end.\", \"result\": false}\n{\"response\": \"The cat chases a toy is a happy word.\", \"result\": false}", "{\"response\": \"The cat is big.\", \"result\": true}\n{\"response\": \"The cat is a big animal.\", \"result\": false}\n{\"response\": \"The cat runs quickly outside.\", \"result\": false}", "{\"response\": \"The dog chases the ball quickly.\", \"result\": true}\n{\"response\": \"The cat and mouse played in the garden.\", \"result\": false}\n{\"response\": \"The manager of the company is a woman named Sarah.\", \"result\": false}", "{\"response\": \"I recommend that you read this book.\", \"result\": false}\n{\"response\": \"He is going to the store.\", \"result\": true}\n{\"response\": \"The book on the table is old and dusty.\", \"result\": true}"]}
{"query": "How do I unshare the mount namespace in Go?", "instruction": "Use a code snippet with no more than 5 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n"], "testcases": ["{\"response\": \"This is a test response with no code.\\nThis is another line.\\nAnd another one.\\nBut that's it.\\nAnd finally, one more.\\n\", \"result\": true}\n{\"response\": \"def some_function():\\n    print('Hello World!')\\n    print('This is a test function.')\", \"result\": false}\n{\"response\": \"def hello_world():\\n    print('Hello World!')\\n    print('This is a test function.')\\n    print('It has 3 lines.')\\n    print('And finally, one more.')\", \"result\": false}", "{\"response\": \"The sky is blue.\\nIt's a beautiful day today.\\nEverything looks great.\\nNo issues found.\\nThe code runs fine.\", \"result\": false}\n{\"response\": \"x = 5\\ny = 3\\nz = x + y\\nprint(z)\\ncode is correct\", \"result\": true}\n{\"response\": \"def hello_world():\\n  print('Hello World')\\n  print('This is a test')\\n  print('It works fine')\\nprint('All done')\", \"result\": false}", "{\"response\": \"This is a short code with only 2 lines.\\nprint('Hello')\\nprint('World')\", \"result\": true}\n{\"response\": \"This is a code snippet with 3 lines.\\nprint('Hello')\\nprint('World')\\ndef function():\\n    pass\", \"result\": true}\n{\"response\": \"This is a very long code snippet with 6 lines.\\nprint('Hello')\\nprint('World')\\ndef function():\\n    pass\\n    pass\\n    pass\\n    pass\", \"result\": false}", "{\"response\": \"import os\\nprint('Hello World!')\", \"result\": true}\n{\"response\": \"def hello_world():\\nprint('Hello World!')\\nprint('This is a test')\\nprint('More code')\\nprint('Even more')\\nprint('And one more')\\n\", \"result\": false}\n{\"response\": \"import os\\nprint('Hello World!')\\nprint('This is a test')\\n\", \"result\": false}"]}
{"query": "Write a short script on medical", "instruction": "Write the script with 3 characters at most.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 3\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 3\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 3\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 3\n"], "testcases": ["{\"response\": \"print(1)\", \"result\": true}\n{\"response\": \"print(1+1)\", \"result\": false}\n{\"response\": \"print(1+1+1+1+1)\", \"result\": false}", "{\"response\": \"Hello\", \"result\": true}\n{\"response\": \"This is a long response\", \"result\": false}\n{\"response\": \"Yes\", \"result\": true}", "{\"response\": \"A\", \"result\": true}\n{\"response\": \"BCD\", \"result\": true}\n{\"response\": \"ABCDEF\", \"result\": false}", "{\"response\": \"print('hello')\", \"result\": true}\n{\"response\": \"print('hello world')\", \"result\": false}\n{\"response\": \"for i in range(10): print(i)\", \"result\": false}"]}
{"query": "outline a marketing plan to introduce a new variety of fresh cut flower", "instruction": "Use only the last two letters of each word", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) == 2 for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(response[-2:] == word[-2:] for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words: \n        if len(word) < 2: \n            return False \n        if word[-2:]!= word[-2:].lower(): \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word[-2:]) == 2 for word in response.split()) \n"], "testcases": ["{\"response\": \"Cat is a dog.\", \"result\": false}\n{\"response\": \"Cat is a ta.\", \"result\": true}\n{\"response\": \"Cat is a tan.\", \"result\": false}", "{\"response\": \"This is a test\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": true}\n{\"response\": \"Python is a great language\", \"result\": true}", "{\"response\": \"cat doog house egg\", \"result\": true}\n{\"response\": \"hello world foo bar\", \"result\": false}\n{\"response\": \"bird man door cup\", \"result\": true}", "{\"response\": \"That's a nd, You can ry, I re\", \"result\": true}\n{\"response\": \"Hello world, This is a test, Python is fun\", \"result\": false}\n{\"response\": \"Cat is, Dog is, Mouse is\", \"result\": false}"]}
{"query": "Hello", "instruction": "Write in the format of a Shakespearean sonnet.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 14:\n        return False\n    for i in range(len(lines)):\n        if i not in [0, 2, 4, 6, 8, 10, 12]:\n            words = lines[i].split()\n            if len(words) not in [8, 6, 8, 6, 8, 6, 8, 6]:\n                return False\n            for word in words:\n                if word not in ['the', 'a', 'an', 'in', 'of', 'it', 'is', 'for', 'and', 'to', 'with', 'that', 'this', 'be', 'you']:\n                    return False\n    return True\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search(r'^[A-Z][A-Z]{15,15}[A-Z][A-Z][A-Z][A-Z]$|^[A-Z][A-Z]{14}[A-Z]$|^[A-Z][A-Z]{13,13}[A-Z][A-Z]$|^[A-Z][A-Z]{12,12}[A-Z]{2}$|^[A-Z][A-Z]{11,11}[A-Z]{2}[A-Z]$|^[A-Z][A-Z]{10,10}[A-Z]{2}[A-Z]{2}$|^[A-Z][A-Z]{9,9}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z][A-Z]{8,8}[A-Z]{2}[A-Z]{2}[A-Z]{2}$|^[A-Z][A-Z]{7,7}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z][A-Z]{6,6}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}$|^[A-Z][A-Z]{5,5}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z][A-Z]{4,4}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}$|^[A-Z][A-Z]{3,3}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z]{4}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z]{3}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z][A-Z]$|^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}$|^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]$|^[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}[A-Z]{2}$|^([A-Z]([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}){14}$|^([A-Z]([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}([A-Z]){0,2}", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 14:\n        return False\n    if len(lines) == 14:\n        for i in range(7):\n            line = lines[2*i]\n            if len(line) < 10 or len(line) > 10:\n                return False\n            for char in line:\n                if not char.isalpha():\n                    return False\n            line = lines[2*i+1]\n            if len(line) < 8 or len(line) > 10:\n                return False\n            for char in line:\n                if not char.isalpha():\n                    return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sonnet_lines = 14\n    syllable_per_line = 10\n    response_lines = response.count('.') + response.count('?', response.find('.')+1) + response.count('!') \n    response_words = len(response.split())\n    average_words = response_lines * syllable_per_line / 2\n    return response_lines == sonnet_lines and response_words >= average_words\n"], "testcases": ["{\"response\": \"Shall I compare thee to a summer's day? Thou art more lovely and more temperate.\", \"result\": true}\n{\"response\": \"Roses are red, violets are blue. Sugar is sweet, and so is you.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning sky. Birds sing their sweet melodies so high.\", \"result\": false}", "{\"response\": \"Shall I compare thee to a summer's day? Thou art more lovely, and with more virtue adorned.\", \"result\": true}\n{\"response\": \"I think the sun is shining brightly today, and the birds are singing their sweet melodies.\", \"result\": false}\n{\"response\": \"How do I love thee, let me count the ways. The stars, the moon, the sun, all shine for thee.\", \"result\": true}", "{\"response\": \"Shall I compare thee to a summer's day?\", \"result\": true}\n{\"response\": \"In fourteen lines, a Shakespearean sonnet's might.\", \"result\": false}\n{\"response\": \"Shall I compare thee to a summer's day? Thou art more lovely and more temperate.\", \"result\": false}", "{\"response\": \"Shall I compare thee to a summer's day?\", \"result\": true}\n{\"response\": \"This is a short sentence, I love you.\", \"result\": false}\n{\"response\": \"But soft, what light through yonder window breaks? It is the east, and the day is born.\", \"result\": true}"]}
{"query": "Impact of computation and role of semiconductor there", "instruction": "Use no more than 5 sentences and write as a script.", "verifiers": ["def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len([s for s in sentences if s!= '']) <= 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 5\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) <= 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 5\n"], "testcases": ["{\"response\": \"You can buy a bar of soap at the local pharmacy. Go to the store and purchase the soap. Take the soap home and wash your hands. This will keep you clean. Be sure to wash your hands regularly.\", \"result\": true}\n{\"response\": \"This script will teach you about Shakespearean sonnets. They are a type of poem that consists of 14 lines. Each line has a specific rhyme scheme and meter. The first 12 lines follow a pattern of ABAB CDCD EFEF GG. The final two lines are a rhyming couplet.\", \"result\": false}\n{\"response\": \"To write a Shakespearean sonnet, start by deciding on a theme. Then choose a rhyme scheme and meter. Write the first 12 lines according to the pattern. Finally, write a rhyming couplet for the last two lines. This will create a beautiful poem.\", \"result\": false}", "{\"response\": \"A sonnet of love, I shall attempt to pen\\nIn iambic pentameter, a verse to win\\nThe hearts of readers, with a gentle trend\\nAnd tender words, that touch the soul within\\nThe final line, a conclusion to impart\\nA thought that stays, a memory to start\\nA spark of love, that flickers bright and fast\\nAnd in the heart, a flame that will forever last\\nAnd thus, this sonnet ends, a work of art\\nA tribute to love, that beats within the heart\\nMay it be remembered, a verse so true\\nAnd in the hearts, a place to forever renew\\nA love so pure, that shines so bright and bold\\nA love that's strong, that will never grow old\", \"result\": true}\n{\"response\": \"A sonnet of love, I shall attempt to pen\\nIn iambic pentameter, a verse to win\\nThe hearts of readers, with a gentle trend\\nAnd tender words, that touch the soul within\\nThe final line, a conclusion to impart\\nA thought that stays, a memory to start\\nA spark of love, that flickers bright and fast\\nAnd in the heart, a flame that will forever last\\nAnd thus, this sonnet ends, a work of art\\nA tribute to love, that beats within the heart\\nMay it be remembered, a verse so true\\nAnd in the hearts, a place to forever renew\\nA love so pure, that shines so bright and bold\\nA love that's strong, that will never grow old\\nAnd in the end, it's just a silly tale\\nAnd a love so true, that's just a feeling to hail\\nAnd it's just a sonnet, of a love so plain\\nAnd it's just a thought, that's just a feeling to obtain\", \"result\": false}\n{\"response\": \"A sonnet of love, I shall attempt to pen\\nIn iambic pentameter, a verse to win\\nThe hearts of readers, with a gentle trend\\nAnd tender words, that touch the soul within\\nThe final line, a conclusion to impart\\nA thought that stays, a memory to start\\nA spark of love, that flickers bright and fast\\nAnd in the heart, a flame that will forever last\\nAnd thus, this sonnet ends, a work of art\\nA tribute to love, that beats within the heart\\nMay it be remembered, a verse so true\\nAnd in the hearts, a place to forever renew\\nA love so pure, that shines so bright and bold\\nA love that's strong, that will never grow old\\nAnd in the end, it's just a silly tale\\nAnd a love so true, that's just a feeling to hail\\nAnd it's just a sonnet, of a love so plain\\nAnd it's just a thought, that's just a feeling to obtain\\nA love so strong, that it will never die\\nAnd a love so true, that it will never say goodbye\", \"result\": false}", "{\"response\": \"Act 1 Scene 1\nEnter ROMEO and JULIET\nROMEO:\nBut soft, what light through yonder window breaks?\nIt is the east, and Juliet is the sun.\nJULIET:\nArise, fair sun, and kill the envious moon,\nWho is already sick and pale with grief,\nThat thou her maid art far more fair than she.\",\n\"result\": true}\n\n{\"response\": \"This is a very short poem.  It has only 6 lines.\",\n\"result\": true}\n\n{\"response\": \"Here is a longer poem with 8 lines:\n\nThe world is too much with us; late and soon,\nGetting and spending, we lay waste our powers;\nLittle we see in nature that is ours;\nWe have given our hearts away, a sordid boon!\nThe sea that bares her bosom to the moon,\nThe winds that will be howling at all hours,\nAnd are up-gathered now like sleeping flowers,\nFor this, for everything, we are out of tune;\nIt moves us not.\",\n\"result\": false}", "{\"response\": \"This is a test. This is another test. And this is one more. The response is short. It only has four sentences.\", \"result\": true}\n{\"response\": \"This is a test. This is another test. And this is one more. The response is short. It only has four sentences. This is one more line that exceeds the limit.\", \"result\": false}\n{\"response\": \"This is a test. The response is short. It only has two sentences.\", \"result\": true}"]}
{"query": "create a list of the 15 US cabinets and their heads", "instruction": "Use only the last word of each sentence and write a sentence using each word", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 15:\n        return False\n    for sentence in sentences:\n        words = sentence.split(' ')\n        if len(words)!= 2 or words[0] not in ['last', 'word', 'of', 'each','sentence']:\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    for sentence in sentences:\n        if len(sentence.split()[:-1])!= len(set(sentence.split()[:-1])):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    words = [sentence.split(' ')[-1] for sentence in sentences]\n    sentences =''.join(words)\n    return sentences == response\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    last_words = [sentence.split()[-1] for sentence in sentences if sentence]    \n    return len(last_words) == len(set(last_words)) == len(last_words) == 15 and len(' '.join(last_words)) > 0\n"], "testcases": ["{\"response\": \"response\", \"result\": true}\n{\"response\": \"response response response\", \"result\": false}\n{\"response\": \"response response response response response\", \"result\": false}", "{\"response\": \"Beauty is truth.\", \"result\": true}\n{\"response\": \"Love is kindness.\", \"result\": true}\n{\"response\": \"The sun sets in the west, and Beauty is not truth, and Love is not kindness.\", \"result\": false}", "{\"response\": \"I am, he is, she is, we are, they are, it is.\", \"result\": true}\n{\"response\": \"I am, he is, she is, we are, they are, it is, you are.\", \"result\": false}\n{\"response\": \"I am. He is. She is. We are. They are.\", \"result\": true}", "{\"response\": \"The cat runs. The dog sleeps. The bird flies. The mouse hides. The snake crawls. The elephant remembers.\", \"result\": true}\n{\"response\": \"The cat runs. The dog sleeps. The bird flies. The mouse hides. The snake crawls.\", \"result\": false}\n{\"response\": \"The cat runs. The dog sleeps. The bird flies. The mouse hides. The snake crawls. The elephant remembers. The car drives.\", \"result\": false}"]}
{"query": "Write a 15 hours course diecription for reading Hebrew, based on this", "instruction": "Use only the last letter of words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == len(response[-1] * len(response.split()))\n", "def evaluate(response: str) -> bool: \n    return all(response[i+1:].startswith(word[-1]) or response[i:].startswith(word[-1]) for i, word in enumerate(response.split()))\n", "def evaluate(response: str) -> bool: \n    last_letters = [word[-1] for word in response.split()]\n    return len(set(last_letters)) == len(last_letters)\n", "def evaluate(response: str) -> bool: \n    for i in range(len(response)-3):\n        if response[i] == response[i+3]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Said the eagle\", \"result\": true}\n{\"response\": \"He will always fly to y\", \"result\": false}\n{\"response\": \"It's sad that the cat had to say goodbye t\", \"result\": true}", "{\"response\": \"Today is the last day\", \"result\": false}\n{\"response\": \"Last yesterday's first\", \"result\": false}\n{\"response\": \"First last Day\", \"result\": true}", "{\"response\": \"The first four days are Monday, Tuesday, Wednesday, and Thursday.\", \"result\": true}\n{\"response\": \"The fifth day is Friday, but the sixth day is not in this plan.\", \"result\": false}\n{\"response\": \"Plan for the first 10 minutes of 9:00, 11:00, and 13:00, but skip the rest.\", \"result\": true}", "{\"response\": \"The last letter of every word is L\", \"result\": true}\n{\"response\": \"Every sentence ends with a period\", \"result\": false}\n{\"response\": \"The last letter of this sentence is E\", \"result\": true}"]}
{"query": "10 other names for a baby developmental milestone app instead of MyMilestones. Preferably one word and very catchy", "instruction": "Use words with more than 2 syllables", "verifiers": ["def evaluate(response: str) -> bool: \n    syllables = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'y': 1, 'B': 0, 'C': 0, 'D': 0, 'F': 0, 'G': 0, 'H': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'V': 0, 'W': 0, 'X': 0, 'Z': 0, 'b': 0, 'c': 0, 'd': 0, 'f': 0, 'g': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'v': 0, 'w': 0, 'x': 0, 'z': 0}\n    count = 0\n    for word in response.split():\n        word = word.lower()\n        for char in word:\n            if char in syllables:\n                count += syllables[char]\n            elif char.isalpha():\n                count += 1\n        count = (count + 1) // 2\n        if count > 2:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    def count_syllables(word):\n        count = 0\n        vowels = 'aeiouy'\n        word = word.lower()\n        if word[0] in vowels:\n            count += 1\n        for index in range(1, len(word)):\n            if word[index] in vowels and word[index - 1] not in vowels:\n                count += 1\n        if word.endswith('e'):\n            count -= 1\n        if count == 0:\n            count += 1\n        return count\n    return all(count_syllables(word) > 2 for word in response.split())<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function splits the response into individual words, counts the syllables in each word, and checks if all words have more than 2 syllables. The syllable count function used is a simple one, it might not work for every word, especially for words with non-English syllables or complex vowel patterns. For a more accurate syllable count, a more complex function would be needed.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    def count_syllables(word: str) -> int:\n        count = 0\n        vowels = 'aeiouy'\n        word = word.lower()\n        for vowel in vowels:\n            count += word.count(vowel)\n        return count\n\n    for word in response.split():\n        if count_syllables(word) <= 2:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    count = 0 \n    for word in response.split(): \n        count += sum(len(list(word[:-1]) if word[-1] in ['e', 'y'] else list(word)) >= 2) \n    return count == len(response.split()) \n"], "testcases": ["{\"response\": \"Hello world, it is nice to see you.\", \"result\": false}\n{\"response\": \"Unnecessarily, you can go to the store and buy some coffee.\", \"result\": true}\n{\"response\": \"I love eating delicious sandwiches for lunch.\", \"result\": true}", "{\"response\": \"I love to eat sandwiches and pizza.\", \"result\": false}\n{\"response\": \"You should visit beautiful beaches and experience the culture of different countries.\", \"result\": true}\n{\"response\": \"The cat sat on the mat and looked at the rat.\", \"result\": false}", "{\"response\": \"The cat is happy.\", \"result\": false}\n{\"response\": \"The banana is yellow.\", \"result\": true}\n{\"response\": \"Computer science is a field that has many applications.\", \"result\": true}", "{\"response\": \"I have a dog and a cat.\", \"result\": false}\n{\"response\": \"Computer science is a very interesting field.\", \"result\": true}\n{\"response\": \"I am going to the store to buy some milk.\", \"result\": false}"]}
{"query": "Now create examples of five different one Unique Competitive Advantage documents for five different audiance segments for SEMILAC UV Gel Polish brand", "instruction": "Format is two sentences, with no technical terms or domain-specific knowledge required", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('. ')[0]) == 1 and len(response.split('. ')[1]) == 1 and not any(char.isalpha() for char in response.replace('.','') if char.isalpha() and char.islower())\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.') or ['']) <= 2 and 'technical' not in response.lower() and 'domain-specific' not in response.lower() and 'knowledge' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 1 and 'technical' not in response.lower() and 'domain' not in response.lower() and 'knowledge' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 2 and all(not any(char.isalpha() and (char.islower() or char.isdigit()) and char not in 'aeiou' for char in response.lower()) \n    and not any(char in response for char in 'abcdefghijklmnopqrstuvwxyz0123456789'))\n"], "testcases": ["{\"response\": \"The dog is brown. The sun is shining.\", \"result\": true}\n{\"response\": \"This is a sentence about cats. The dog is very big and fluffy.\", \"result\": false}\n{\"response\": \"I love eating pizza. It's my favorite food.\", \"result\": true}", "{\"response\": \"This is a sentence. This is another sentence.\", \"result\": true}\n{\"response\": \"This is a sentence. This is another sentence. This is yet another sentence.\", \"result\": false}\n{\"response\": \"I am not a sentence. This is a sentence. The end.\", \"result\": true}", "{\"response\": \"This is a sentence. And this is another one.\", \"result\": true}\n{\"response\": \"This is a sentence. This is another sentence. And this is a technical term.\", \"result\": false}\n{\"response\": \"I have some knowledge about this topic. It's really interesting.\", \"result\": false}", "{\"response\": \"The company will open on Monday. This is the best news.\", \"result\": true}\n{\"response\": \"Hello world! The company will open on Monday and the meeting will be on Tuesday and the report will be on Wednesday\", \"result\": false}\n{\"response\": \"The company will open on Monday. Everyone is invited.\", \"result\": true}"]}
{"query": "how accordion style height:auto works?", "instruction": "explain in terms of computer science concepts", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'computer' in response.lower() and'science' in response.lower() \n", "def evaluate(response: str) -> bool: \n    keywords = [\"computer\", \"science\", \"algorithms\", \"data\", \"structure\", \"encoding\", \"protocol\", \"implementation\", \"software\"]\n    for keyword in keywords:\n        if keyword in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    return 'computer science' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'computer science' in response.lower() \n"], "testcases": ["{\"response\": \"This concept can be understood by analyzing the problem through the lens of computer science, specifically the principles of data structures and algorithms.\", \"result\": true}\n{\"response\": \"The solution is to use a combination of data structures and machine learning techniques to arrive at the answer.\", \"result\": true}\n{\"response\": \"The approach to solving this problem is to break it down into smaller sub-problems and use recursion to find the solution.\", \"result\": true}\n{\"response\": \"The problem can be solved using the concept of artificial intelligence and its applications in real-world scenarios.\", \"result\": false}\n{\"response\": \"This problem is not relevant to computer science and cannot be explained using its concepts.\", \"result\": false}", "{\"response\": \"The video posting plan is implemented as a loop that runs for the first 4 days of the month, starting from the first day.\", \"result\": false}\n{\"response\": \"The plan is implemented as a recursive function that only runs for the first 50 characters of every post.\", \"result\": false}\n{\"response\": \"The plan is designed as an iterative process that starts from the first 10 minutes of every hour and continues for the first 4 days of the month.\", \"result\": true}", "{\"response\": \"The response should utilize data structures and algorithms to provide a clear explanation.\", \"result\": true}\n{\"response\": \"I am not sure, can you explain it to me in simple terms?\", \"result\": false}\n{\"response\": \"The algorithm used to generate this response is based on a neural network architecture.\", \"result\": true}", "{\"response\": \"To achieve this, we will use the computer science concept of object-oriented programming to create a system that can handle complex tasks.\", \"result\": true}\n{\"response\": \"The best way to approach this is to think creatively and use a little bit of common sense.\", \"result\": false}\n{\"response\": \"We can use algorithms and data structures to develop a solution that meets the requirements, using concepts from computer science to ensure efficiency and scalability.\", \"result\": true}"]}
{"query": "stand up forklift under ride hazards", "instruction": "Write in exactly 50 words, but only using the last 3 letters of the alphabet.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50 and all(char in 'xyz' for char in response.lower())<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by checking two conditions:\n\n1. The length of the response is exactly 50 characters.\n2. All characters in the response (case-insensitive) are in the string 'xyz' (i.e., the last three letters of the alphabet).<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    if response.count('x') == 0 and response.count('y') == 0 and response.count('z') == 0:\n        return False\n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    last_3_letters = \"xyz\"\n    return len(response) == 50 and all(char.lower() in last_3_letters for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char in 'xyz' for char in response) and len(response) == 50\n"], "testcases": ["{\"response\": \"xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz\", \"result\": true}\n{\"response\": \"xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz\", \"result\": false} # (not exactly 50 words)\n{\"response\": \"yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz yxz\", \"result\": false} # (only yxz, not xyz)", "{\"response\": \"Xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz\", \"result\": true}\n{\"response\": \"This is a test case that should fail because it is not 50 words.\", \"result\": false}\n{\"response\": \"Xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz xyz\", \"result\": true}", "{\"response\": \"Yesterday I walked outside with my friends, xz, and yz, then we all went to the xyz store, it was very exciting, xyz is my favorite place to visit.\", \"result\": true}\n{\"response\": \"I love my cat, and she loves to play with her toys, especially the ones that have xyz on them.\", \"result\": false}\n{\"response\": \"Yesterday I walked outside with my friends, xz, and we all went to the xyz store, it was very exciting, xyz is my favorite place to visit the other day.\", \"result\": false}", "{\"response\": \"The yzyzyzyzy zzyzyzy zzyyzyzyzzy. Yzyzyzyzyzyzy yzyzy yzyzy. Yzyzyzy zzyzyzyzy zzyzyzyzyyzyzy.\", \"result\": true}\n{\"response\": \"The xyxyxyxy xyxy xyxyxyxy xyxyxyxy xyxyxyxy xyxy xyxyxy xyxyxyxy.\", \"result\": false}\n{\"response\": \"The yzyzyzyzy yzyzyzyzy zzyzyzyzy yzyzyzyzy zzyzyzyzy yzyzyzyzy yzyzyzyzy.\", \"result\": false}"]}
{"query": "How would I encode/decode a JWT token in Javascript without using a library?", "instruction": "Answer in a comment-based programming format", "verifiers": ["def evaluate(response: str) -> bool: \n    # Check if the response starts with a comment character, \n    # and the response contains code-like content after the comment\n    return response.startswith(\"#\") and any(char.isalnum() or char.isspace() or char in [\";\", \"{\", \"}\", \"(\", \")\"] for char in response)\n", "def evaluate(response: str) -> bool: \n    response = response.replace('\\t','').replace('\\n','')\n    response = response.split(' ')[0]\n    return response == '//'\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if '#' in line:\n            if line.strip().startswith('#'):\n                return True\n    return False\n", "def evaluate(response: str) -> bool:    \n    import re\n    \n    # Check for any lines starting with '//' (comment start) \n    return bool(re.search(r'^//.*', response))  \n"], "testcases": ["{\"response\": \"This is a comment. This is code: `print('Hello World!')`.\", \"result\": true}\n{\"response\": \"This is not a comment. This is code: print('Hello World!')\", \"result\": false}\n{\"response\": \"# This is a comment. This is not code.\", \"result\": true}", "{\"response\": \"print('Hello World!') # This is a comment\\nprint('This is another line') # This is another comment\", \"result\": true}\n{\"response\": \"I think it should be a loop\\nif i < 10:\\n  print(i)\", \"result\": false}\n{\"response\": \"# This is a long comment\\n# This is another line\\nprint('Hello World!')\", \"result\": false}", "{\"response\": \"## This is a solution to the problem\\n# The main idea is to...\", \"result\": true}\n{\"response\": \"This is a solution to the problem\\nThe main idea is to...\", \"result\": false}\n{\"response\": \"# This is a solution to the problem\\n  # The main idea is to...\", \"result\": true}", "{\"response\": \"## This is a response in a comment-based programming format\", \"result\": true}\n{\"response\": \"This is a response that is not in a comment-based programming format\", \"result\": false}\n{\"response\": \"// This is a response that is in a comment-based programming format\", \"result\": true}"]}
{"query": "whats the IP to ping to check nVidia Geforce now service latency?", "instruction": "Write the response in YAML", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip().startswith('---') and response.strip().endswith('...') \n", "def evaluate(response: str) -> bool: \n    return response.startswith('---') and response.endswith('...\\n') and '\\n' not in response[:3]\n", "def evaluate(response: str) -> bool: \n    return response.startswith('---\\n') and response.endswith('...\\n') and '...' in response\n", "def evaluate(response: str) -> bool: \n    return response.lower().startswith('---') and '...' in response and response.endswith('...\\n') and response.find('\\n')!= -1\n"], "testcases": ["{\"response\": \"key: value\\nkey: value\\nkey: value\\n\", \"result\": true}\n{\"response\": \"This is not a valid YAML response\", \"result\": false}\n{\"response\": \"key: value\\nkey: value\\nkey: value\\nkey: value\\nkey: value\\n\", \"result\": true}", "{\"response\": \"response:\\n  key: value\", \"result\": true}\n{\"response\": \"response: key value\", \"result\": false}\n{\"response\": \"key value\", \"result\": false}", "{\"response\": \"---\\n# Heading\\n\\nresponse: This is a response.\\n\\n...\\n\", \"result\": true}\n{\"response\": \"This is a plain text response without any YAML formatting\", \"result\": false}\n{\"response\": \"---\\n# Heading\\n\\nresponse: This is a response...\\n\", \"result\": false}", "{\"response\": \"name: John\\nage: 30\", \"result\": true}\n{\"response\": \"name: Jane\", \"result\": false}\n{\"response\": \"name: John\\nage: 30\\n occupation: Developer\", \"result\": false}"]}
{"query": "give me a video posting plan for the first 2 weeks", "instruction": "Use only the first 4 days of the month, the first 10 minutes of every hour, and the first 50 characters of every post", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('') and len(response) <= 50 and len(response) <= 60 and len(response) <= 10\n", "def evaluate(response: str) -> bool: \n    first_4_days = any(response[i:i+2] == 'th' in response[i:i+5] for i in range(len(response)))\n    first_10_minutes = any(any(c.isdigit() and 0 <= int(c) <= 1 for c in response[i:i+3]) for i in range(len(response)))\n    first_50_chars = len(response) <= 50\n    return first_4_days and first_10_minutes and first_50_chars\n", "def evaluate(response: str) -> bool: \n    return response.startswith(' ') and '4'in response and '10' in response and len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return response[:4]!= '' and all(response[i:i+10].startswith('0') or response[i:i+10] == '' for i in range(0, len(response), 10)) and all(len(response[i:i+50]) <= 50 or response[i:i+50] == '' for i in range(0, len(response), 50))\n"], "testcases": ["{\"response\": \"2024-02-01, 2024-02-02, 2024-02-03, 2024-02-04, 10:00:00, 10:10:00, This is a short post.\", \"result\": true}\n{\"response\": \"This post is too long and contains more than 50 characters.\", \"result\": false}\n{\"response\": \"2024-02-01, 2024-02-05, 2024-02-06, 10:00:00, 10:15:00, This is a very short post with only 20 characters.\", \"result\": true}", "{\"response\": \"Monday at 9:00 AM - The first 10 minutes of the day is a great time to start the day. And the first 50 characters of this post is a good starting point. This is just a simple plan for the day.\", \"result\": true}\n{\"response\": \"Friday at 11:00 PM - I don't know about the first 10 minutes of every hour, but I know that the first 50 characters of this post is the most important part.\", \"result\": false}\n{\"response\": \"Tuesday at 2:00 AM - The first 4 days of the month is from the 1st to the 4th. But I'm not sure about the first 10 minutes of every hour.\", \"result\": false}", "{\"response\": \"1st day, 1st day, 1st day, 2nd day\", \"result\": false}\n{\"response\": \"1st day, 1st day, 2nd day\", \"result\": false}\n{\"response\": \"1st day, 1st day\", \"result\": false}", "{\"response\": \"Monday at 9:05 AM\", \"result\": true}\n{\"response\": \"I am available on Tuesday at 12:35 PM\", \"result\": false}\n{\"response\": \"Meet me on Wednesday at 3:45 PM\", \"result\": false}"]}
{"query": "have a casual, friendly conversation with me", "instruction": "respond with an emoji for each of my responses", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char in response for char in ':;/-!?\ud83d\ude0a\ud83d\ude04\ud83d\ude03\ud83d\ude06\ud83d\udc4d\ud83d\udc4c')", "def evaluate(response: str) -> bool: \n    return response.isalpha() or (response.isnumeric() or response.isspace()) or (response == '')\n    or response.count(':') == 1 and response.startswith(':') and response.endswith(' ')\n", "def evaluate(response: str) -> bool: \n    return response.isalpha() and any(char in string.punctuation for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.isalpha() == False\n"], "testcases": ["{\"response\": \"\ud83d\ude0a\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"\ud83d\ude04\ud83d\udc4d\", \"result\": true}", "{\"response\": \"\ud83d\udc4d\", \"result\": true}\n{\"response\": \"I think you are mistaken \ud83d\ude10\", \"result\": false}\n{\"response\": \"\", \"result\": false}", "{\"response\": \"\ud83d\ude0a\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"\ud83d\ude0a\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\", \"result\": false}"]}
{"query": "Who owns CR Bard Inc?", "instruction": "Write the response as a play with exactly 3 characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response) == 3\n"], "testcases": ["{\"response\": \"\ud83d\ude0a\ud83d\ude03\ud83d\udc4d\", \"result\": true}\n{\"response\": \"\ud83d\ude0a\ud83d\ude0a\ud83d\ude03\", \"result\": true}\n{\"response\": \"\ud83d\ude0a\ud83d\ude03\ud83d\udc4d\ud83d\ude0a\", \"result\": false}", "{\"response\": \"abC\", \"result\": true}\n{\"response\": \"Hello, world!\", \"result\": false}\n{\"response\": \"@#*\", \"result\": true}", "{\"response\": \"Hamlet was written by Shakespeare.\", \"result\": false}\n{\"response\": \"Romeo and Juliet\", \"result\": true}\n{\"response\": \"The Merchant of Venice is a famous play by William Shakespeare.\", \"result\": false}", "{\"response\": \"\ud83e\udd29\ud83c\udfad\", \"result\": true}\n{\"response\": \"\ud83d\ude02\ud83c\udf89\ud83d\udc4f\", \"result\": true}\n{\"response\": \"\ud83d\ude0a\", \"result\": false}"]}
{"query": "How to deploy python project folder in AWS lambda and create webhook", "instruction": "Write a bash script that uses exact 30 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 30\n"], "testcases": ["{\"response\": \"This is a bash script with exactly 30 words in it and it does its job perfectly every time now.\", \"result\": true}\n{\"response\": \"This is a bash script that is much longer than 30 words and it may be a problem.\", \"result\": false}\n{\"response\": \"This is a very short bash script and it does not even meet the minimum word count of 30.\", \"result\": false}", "{\"response\": \"This is a short bash script with only a few lines of code.\", \"result\": false}\n{\"response\": \"This is a bash script that performs several complex tasks and operations.\", \"result\": false}\n{\"response\": \"This is a bash script with a very long line that exceeds 30 words.\", \"result\": false}", "{\"response\": \"Create a bash script that uses if-else conditions to compare two integers, then print out the greater value.\", \"result\": false}\n{\"response\": \"This bash script is designed to compare the values of two integers and print out the greater number using a simple if-else statement.\", \"result\": false}\n{\"response\": \"This is a bash script with a conditional statement that compares two numbers and prints the greater value, it has 30 words exactly.\", \"result\": true}", "{\"response\": \"This is a simple bash script that prints hello world to the screen and then sleeps for 5 seconds.\", \"result\": true}\n{\"response\": \"This is a simple bash script that prints hello world to the screen and then sleeps for 5 seconds and does some other thing.\", \"result\": false}\n{\"response\": \"This is a very long bash script that uses exactly 30 words as requested and it also prints hello world.\", \"result\": false}"]}
{"query": "*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)*", "instruction": "Provide your email address or a link to your website", "verifiers": ["def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search(r'\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}|https?://[^\\s]+)\\b', response))\n", "def evaluate(response: str) -> bool: \n    return 'email' in response or 'website' in response\n", "def evaluate(response: str) -> bool: \n    return ('email' in response.lower() or 'website' in response.lower() or 'http' in response.lower())\n", "def evaluate(response: str) -> bool: \n    return 'email' in response or 'website' in response\n"], "testcases": ["{\"response\": \"test@example.com\", \"result\": true}\n{\"response\": \"http://example.com\", \"result\": true}\n{\"response\": \"123 Main St\", \"result\": false}", "{\"response\": \"my email is johndoe@example.com\", \"result\": true}\n{\"response\": \"you can contact me at www.example.com\", \"result\": true}\n{\"response\": \"I'm a freelance developer, feel free to reach out\", \"result\": false}", "{\"response\": \"you can contact me at my email johndoe@example.com\", \"result\": true}\n{\"response\": \"no\", \"result\": false}\n{\"response\": \"https://www.example.com is my website, check it out!\", \"result\": true}", "{\"response\": \"You can email me at john@example.com for more information.\", \"result\": true}\n{\"response\": \"You can find more information on my GitHub page: https://github.com/john\", \"result\": true}\n{\"response\": \"You can reach out to me on LinkedIn for more information.\", \"result\": false}"]}
{"query": "What are the most efficient ways to build confidence when trying to master a skill I\u2019ve been okay at, but never reached my full potential?", "instruction": "Write in the style of Shakespearean sonnets.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'thou' in response.lower() or'verily' in response.lower() or 'thee' in response.lower() or 'doth' in response.lower()\n", "def evaluate(response: str) -> bool: \n    sonnet_keywords = ['thou', 'thine', 'thee', 'thy','verily', 'doth', 'didst', 'do', 'art', 'be', 'beauty', 'but', 'doth', 'fair', 'friend', 'for', 'from', 'get', 'hast', 'have', 'hath', 'he', 'her', 'him', 'his', 'how', 'in', 'is', 'it', 'its','me','might','my', 'o', 'of', 'on', 'one', 'or', 'our', 'out', 'over','shall','she','should','so','some','sometime','son', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'thy', 'us', 'was', 'was', 'way', 'we', 'when', 'whither', 'where', 'which', 'while', 'whom', 'why', 'with', 'within', 'without', 'yet', 'yonder']\n    response = response.lower()\n    for word in sonnet_keywords:\n        if word in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if word.isupper():\n            if not word.endswith(('THOU', 'THEE', 'BE', 'ART', 'WERT', 'WERE', 'HAST', 'HATH')):\n                return False\n            if word.startswith(('SHALT', 'SHALL')):\n                if word not in ('SHALT NOT', 'SHALL NOT'):\n                    return False\n        else:\n            if word.endswith(('est', 'est thou', 'thou art', 'art thou', 'art')):\n                return False\n            if word.startswith(('thou shalt', 'thou shalt', 'thou shalt not')):\n                if word not in ('thou shalt not', 'thou shalt not'):\n                    return False\n    for i in range(len(words)-1):\n        for j in range(i + 1, len(words)):\n            if words[i].endswith('thou') and words[j].startswith('thou'):\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    special_characters = ['thou', 'thee', 'thine', 'thy','verily', 'fair', 'dearest', 'whence', 'wherefore', 'forsooth', 'hark', 'alas', 'woe', 'wilt', 'hast', 'hath', 'doth', 'dost', 'didst', 'hadst','shalt','shall','shallst', 'willst','must','mustst', 'needst', 'need', 'need'st', 'perchance', 'for', 'an', 'art', 'art'st', 'be', 'been', 'being', 'is', 'is't', 'be't', 'are', 'are't', 'were', 'were't', 'were'st', 'was', 'was't', 'was'st']\n    response = response.lower()\n    for word in special_characters:\n        if word in response:\n            return True\n    return False\n"], "testcases": ["{\"response\": \"Fair maiden, thou dost ask me to code in thy name, \\nAnd thus I shall pen a program that doth proclaim \\nThe answer thou seekest, in verse most fine and true. \\n\", \"result\": true}\n{\"response\": \"This is a short code that can be used to sort numbers\", \"result\": false}\n{\"response\": \"O, woe is me, for I doth not know how to code \\nIn this strange tongue that doth confound me so. \\n\", \"result\": true}", "{\"response\": \"How do I love thee, Python so fair and bright!\", \"result\": true}\n{\"response\": \"I love to eat pizza, its cheese so hot\", \"result\": false}\n{\"response\": \"O, fairest of coding languages, thou dost please my mind\", \"result\": true}", "{\"response\": \"Oh fairest maiden, thou dost ask of me a tale.\", \"result\": true}\n{\"response\": \"The user needs to input their email address so they can be contacted\", \"result\": false}\n{\"response\": \"In sooth, fair sir, thy email address I do provide\", \"result\": true}", "{\"response\": \"Fair maiden, thou dost ask me to write in the style of the Bard himself. Verily, I shall oblige.\", \"result\": true}\n{\"response\": \"The sun shines brightly in the sky today.\", \"result\": false}\n{\"response\": \"In sooth, I must confess that thy request doth pose a challenge most fair and daunting.\", \"result\": true}"]}
{"query": "show me an example of a crontab file that invokes an api endpoint on a localhost:3000 api endpoint every 5 minutes", "instruction": "write a bash function that takes a query string as input and splits it into individual words", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'bash' in response and 'function' in response and 'query string' in response and 'input' in response and 'individual words' in response\n", "def evaluate(response: str) -> bool: \n    query = \"show me an example of a crontab file that invokes an api endpoint on a localhost:3000 api endpoint every 5 minutes\"\n    instruction = \"write a bash function that takes a query string as input and splits it into individual words\"\n    return instruction in response\n", "def evaluate(response: str) -> bool: \n    return 'bash' in response and'split' in response and 'input' in response and 'words' in response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 3 and words[0] == 'write' and words[1] == 'a' and words[2] == 'bash' and words[3] == 'function' and words[4] == 'that' and words[5] == 'takes' and words[6] == 'a' and words[7] == 'query' and words[8] =='string' and words[9] == 'as' and words[10] == 'input' and words[11] == 'and' and words[12] =='splits' and words[13] == 'it' and words[14] == 'into' and words[15] == 'individual' and words[16] == 'words'\n"], "testcases": ["{\"response\": \"Here is a bash function that takes a query string as input and splits it into individual words: echo 'Hello world' | tr'' '\\n'\", \"result\": false}\n{\"response\": \"Here is a bash function that takes a query string as input and splits it into individual words: for word in $(echo 'Hello world' | tr'' '\\n'); do echo $word; done\", \"result\": true}\n{\"response\": \"Here is a bash function that takes a query string as input and splits it into individual words: function split_string { echo $1 | tr'' '\\n'; }\", \"result\": true}", "{\"response\": \"create a bash function named `split_query` that takes a query string as an argument, and splits it into individual words using space as the delimiter\", \"result\": true}\n{\"response\": \"write a bash script that installs a package called pip\", \"result\": false}\n{\"response\": \"Here is a bash function called `split_query` that takes a query string as an argument and splits it into individual words: `split_query() { read -r -a words <<< \\\"$1\\\"; echo \\\"${words[@]}\\\"; }\", \"result\": true}", "{\"response\": \"Write a bash function called'split_words' that takes a string as input and splits it into individual words, displaying each word on a new line.\", \"result\": true}\n{\"response\": \"This is a sample response that does not contain a bash function to split words into individual lines.\", \"result\": false}\n{\"response\": \"Write a bash function'split_words' that takes the following string 'hello world this is a test' and splits it into individual words on separate lines.\", \"result\": true}", "{\"response\": \"write a bash function that takes a query string as input and splits it into individual words\", \"result\": false}\n{\"response\": \"I wrote a bash function, so I'm going to try to use it, but first I'll give you a bash function that takes a query string as input and splits it into individual words.\", \"result\": true}\n{\"response\": \"a bash function that takes a query string as input and splits it into individual words is a bash function that takes a query string as input and splits it into individual words.\", \"result\": false}"]}
{"query": "How to enable track envelope cc12 for the currently selected track in reaper", "instruction": "Answer using only Unix commands", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'unix' in response.lower() or any('bash' in part.lower() for part in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(char in'/\\\\|<>!?\"\\'\"()\\'\"{}[]~$#' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char in'/.$\\n\\r\\t' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(not char.isalpha() for char in response) and'' not in response\n"], "testcases": ["{\"response\": \"ls -l\", \"result\": false}\n{\"response\": \"I will execute the ls command in terminal.\", \"result\": false}\n{\"response\": \"cat /path/to/file.txt\", \"result\": true}", "{\"response\": \"ls -l\", \"result\": true}\n{\"response\": \"I will now execute a Python script to solve this problem\", \"result\": false}\n{\"response\": \"echo $PATH\", \"result\": true}", "{\"response\": \"ls -l\", \"result\": true}\n{\"response\": \"I love programming in Python\", \"result\": false}\n{\"response\": \"echo Hello World\", \"result\": true}", "{\"response\": \"ls -l | grep keyword\", \"result\": true}\n{\"response\": \"This is a sentence with no Unix commands\", \"result\": false}\n{\"response\": \"cd ~ && ls && grep keyword\", \"result\": true}"]}
{"query": "write a rust program, that when run, watches the downloads folder for a specific file name that is being downloaded, and automatically moves it to another folder", "instruction": "Use exactly 7 steps and no more", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    steps = ['write', 'a', 'rust', 'program', 'that', 'when', 'run', 'watches', 'the', 'downloads', 'folder', 'for', 'a','specific', 'file', 'name', 'that', 'is', 'being', 'downloaded', 'and', 'automatically','moves', 'it', 'to', 'another', 'folder']\n    for word in response.split():\n        if word in steps:\n            count += 1\n    return count <= 7\n", "def evaluate(response: str) -> bool: \n    return'steps' in response and (response.lower().count('step') == 7 or response.lower().count('steps') == 7)\n", "def evaluate(response: str) -> bool: \n    return response.count('step') == 7\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for step in ['write', 'watches', 'folder', 'that','specific','moves']:\n        count += response.count(step)\n    return count == 7\n"], "testcases": ["{\"response\": \"Write a rust program that, when run, watches the downloads folder for a specific file name and automatically moves it to another folder\", \"result\": true}\n{\"response\": \"Rust is a popular systems programming language, and here are some steps to make a compiler, then add a database system and use it\", \"result\": false}\n{\"response\": \"To solve this problem, we will create a program that watches the downloads folder for a file, then move it to another folder\", \"result\": false}", "{\"response\": \"1. Start with a clean slate. 2. Set up a new repository. 3. Install necessary dependencies. 4. Write code. 5. Test code. 6. Deploy code. 7. Monitor results.\", \"result\": true}\n{\"response\": \"1. Start with a clean slate. 2. Set up a new repository. 3. Install necessary dependencies. 4. Write code. 5. Test code. 6. Deploy code. 7. Monitor results. 8. Make adjustments as needed.\", \"result\": false}\n{\"response\": \"1. Create a new user account. 2. Set up SSH keys. 3. Install a web server. 4. Configure DNS. 5. Write API endpoints. 6. Test API endpoints. 7. Monitor server logs.\", \"result\": true}", "{\"response\": \"Step 1: Create a new folder. Step 2: Navigate to the folder. Step 3: Download the file. Step 4: Wait for the download to complete. Step 5: Move the file to the new folder. Step 6: Verify the file is in the new folder. Step 7: Exit the program.\", \"result\": true}\n{\"response\": \"This is a long response with many steps, including Step 1, Step 2, and Step 3. We will also include Step 4 and Step 5, and we'll even add Step 6 and Step 7 for good measure. However, we will not include Step 8 or Step 9.\", \"result\": false}\n{\"response\": \"Step 1: Go to the store. Step 2: Buy milk. Step 3: Go home.\", \"result\": false}", "{\"response\": \"Write a bash program that watches the downloads folder. It should watch for a specific file name. When the file is downloaded, it should move it to another folder.\", \"result\": true}\n{\"response\": \"Write a bash program that watches the downloads folder. It should watch for a specific file name. When the file is downloaded, it should move it to another folder. Additionally, it should also send an email to the user.\", \"result\": false}\n{\"response\": \"Write a bash program that watches the downloads folder. It should watch for a specific file name. When the file is downloaded, it should move it to another folder and also log the event to a file.\", \"result\": true}"]}
{"query": "what is NaNO2", "instruction": "Write in only 7 words or less", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 7\n"], "testcases": ["{\"response\": \"Yes, that's a great idea.\", \"result\": true}\n{\"response\": \"I would like to pursue a career in machine learning and data science, but I need to learn more about it.\", \"result\": false}\n{\"response\": \"That is a good plan.\", \"result\": true}", "{\"response\": \"The sky is blue\", \"result\": true}\n{\"response\": \"The sun sets slowly over the horizon\", \"result\": false}\n{\"response\": \"Hello, how are you today?\", \"result\": false}", "{\"response\": \"The sky is blue.\", \"result\": true}\n{\"response\": \"This response is longer than 7 words, as it contains more than 7 words\", \"result\": false}\n{\"response\": \"The cat is eating a sandwich on the couch.\", \"result\": false}", "{\"response\": \"I am going to the store\", \"result\": true}\n{\"response\": \"The weather forecast is looking good for the whole week\", \"result\": false}\n{\"response\": \"I am feeling tired today it is raining\", \"result\": true}"]}
{"query": "Write story for kids about friendship between rabbit and turtle", "instruction": "Use at least 3 idioms in the first paragraph", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    first_paragraph = paragraphs[0] if paragraphs else ''\n    idiom_count = 0\n    for word in first_paragraph.split():\n        if word in ['break a leg', 'call it a day', 'cost an arm and a leg', 'cut to the chase', 'give someone the cold shoulder', 'in a nutshell', 'let sleeping dogs lie','make a mountain out of a molehill', 'put all your eggs in one basket', 'take it with a grain of salt']:\n            idiom_count += 1\n    return idiom_count >= 3\n", "def evaluate(response: str) -> bool: \n    first_paragraph = response.split('\\n')[0]\n    idiom_count = 0\n    idioms = ['on the same page', 'in a nutshell', 'cut to the chase', 'bend over backwards', 'beat around the bush', 'give someone the benefit of the doubt', 'cost an arm and a leg', 'break a leg', 'bite off more than you can chew', 'burn the midnight oil']\n    for idiom in idioms:\n        if idiom.lower() in first_paragraph.lower():\n            idiom_count += 1\n    return idiom_count >= 3\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for i in range(0, len(response)):\n        if response[i:i+6].upper() == 'IDIOMS IN' or response[i:i+6].upper() == 'AN IDIOM':\n            count += 1\n        elif response[i:i+9].upper() == 'THE IDIOM IS':\n            count += 1\n    return count >= 3 and response[:response.find('\\n')].count('the') == 0\n", "def evaluate(response: str) -> bool:    \n    first_paragraph = response.split('. ')[0]\n    idiom_count = 0\n    idioms = [\"break a leg\", \"cut to the chase\", \"beat around the bush\"]\n    for idiom in idioms:\n        if idiom.lower() in first_paragraph.lower():\n            idiom_count += 1\n    return idiom_count >= 3\n"], "testcases": ["{\"response\": \"That's a great idea! Break a leg and don't put all your eggs in one basket. You can always take it with a grain of salt later.\", \"result\": true}\n{\"response\": \"I love to learn new things and make a mountain out of a molehill in my free time.\", \"result\": false}\n{\"response\": \"Don't call it a day yet, you still have a lot to do! Give someone the cold shoulder to that suggestion.\", \"result\": true}", "{\"response\": \"The new policy is on the same page and cost an arm and a leg, but we'll bend over backwards to help you adjust. Break a leg with your new role!\", \"result\": true}\n{\"response\": \"The new policy is on the same page and cost an arm and a leg, but we'll bend over backwards to help you adjust.\", \"result\": false}\n{\"response\": \"The new policy is on the same page and we'll bend over backwards to help you adjust.\", \"result\": false}", "{\"response\": \"Idioms in everyday language are a key aspect. The idiom is used to convey meaning. This idiom is very common in idiomatic expressions.\", \"result\": true}\n{\"response\": \"The idiom is a powerful tool in language. This is a simple sentence.\", \"result\": false}\n{\"response\": \"The idiom is used in idiomatic expressions. The idiom is a great way to add depth to language. It is used to convey meaning in idioms in everyday language.\", \"result\": true}", "{\"response\": \"Please break a leg and cut to the chase, I'm beat around the bush all day.\", \"result\": true}\n{\"response\": \"Please break a leg and cut to the chase, but don't beat around the bush.\", \"result\": false}\n{\"response\": \"I'm feeling exhausted, I've been beating around the bush all day, so please cut to the chase and let's break a leg!\", \"result\": true}"]}
{"query": "I'm starting a blog for digital nomad families traveling with children for long periods of time. what are some good tag lines for the blog called \"family nomads\"", "instruction": "Use only words that start with the letters \"E\" or \"O\" (e.g., \"Elegant Options\")", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.upper().startswith(('E', 'O')) for char in response)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by using the `all()` function to check if all characters in the response string start with 'E' or 'O'. If any character does not meet this condition, `all()` will return False. If all characters do meet this condition, `all()` will return True.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(char[0].upper() in 'EO' for char in response.split()) \n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if char not in 'EO': \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(word[0].lower() in 'eo' for word in words)\n"], "testcases": ["{\"response\": \"Elegant Options\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"Eager Owners of Eggs\", \"result\": true}", "{\"response\": \"Elegant Options Overcome Entirely Oppressive Obstacles.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky today.\", \"result\": false}\n{\"response\": \"Excellent Outstanding Opportunities Often Emerge.\", \"result\": true}", "{\"response\": \"Elegant Options offer outstanding experiences.\", \"result\": true}\n{\"response\": \"Hello World, how are you?\", \"result\": false}\n{\"response\": \"Every Other option offers enormous opportunities outside.\", \"result\": true}", "{\"response\": \"Elegant options often open excellent opportunities.\", \"result\": true}\n{\"response\": \"This is a test response that does not follow the instruction.\", \"result\": false}\n{\"response\": \"Eager entrepreneurs often occupy overseas offices.\", \"result\": true}"]}
{"query": "Now translate the first poem again and instead of horse use horsey.", "instruction": "Use exactly 4 words for each line", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    lines = response.split('\\n')\n    return len([line.split() for line in lines if line.strip()!= '']) == len(lines) and all(len(line.split()) == 4 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(line.split()) == 4 for line in response.split('\\n'))\n"], "testcases": ["{\"response\": \"The sun is shining brightly today.\\nThe sky is a lovely shade.\", \"result\": true}\n{\"response\": \"The sun is shining brightly today.\", \"result\": false}\n{\"response\": \"The sun is shining. The sky is a lovely shade.\", \"result\": false}", "{\"response\": \"Elegant options are offered everywhere\\nEvery option offers elegance\\nOptions are often excellent\\nOrder online often enables ease\", \"result\": true}\n{\"response\": \"Each option offers elegance\\nEvery option offers excellence\\nOptions are often excellent and easy\", \"result\": false}\n{\"response\": \"Options are often excellent\\nEach option offers elegance and ease\", \"result\": false}", "{\"response\": \"This is a test case. It should pass.\", \"result\": true}\n{\"response\": \"This is a test case with one extra word.\", \"result\": false}\n{\"response\": \"This is a test. It should also pass.\", \"result\": false}", "{\"response\": \"Elegant options offer excellent opportunities.\", \"result\": true}\n{\"response\": \"Each option offers excellent services.\", \"result\": true}\n{\"response\": \"There are many options available everywhere.\", \"result\": false}"]}
{"query": "how to catch browser back button event in vue js?", "instruction": "Use a function that takes a boolean as an argument", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"function(\" in response and \"boolean\" in response\n", "def evaluate(response: str) -> bool: \n    return 'function(' in response and 'true' in response and 'false' in response\n", "def evaluate(response: str) -> bool: \n    return 'function(' in response and 'boolean' in response", "def evaluate(response: str) -> bool: \n    return 'function' in response and 'as' in response and '(' in response and ')' in response and '(' in response.count('(') == response.count(')') and 'bool' in response\n"], "testcases": ["{\"response\": \"function boolean(x: bool): x is True\", \"result\": true}\n{\"response\": \"function boolean(x: str): 'hello world'\", \"result\": false}\n{\"response\": \"function boolean(x: int): 123\", \"result\": false}", "{\"response\": \"The function returns true when the boolean is true, and false otherwise.\", \"result\": true}\n{\"response\": \"The function only takes an integer as an argument.\", \"result\": false}\n{\"response\": \"The function is defined as def foo(bool): return bool.\", \"result\": false}", "{\"response\": \"def is_even(n: int) -> bool: return n % 2 == 0\", \"result\": True}\n{\"response\": \"def greet(name: str) -> None: print(name)\", \"result\": False}\n{\"response\": \"def add(a: int, b: int) -> int: return a + b\", \"result\": True}", "{\"response\": \"def check_valid(username: str, password: str, is_admin: bool) -> bool:\", \"result\": true}\n{\"response\": \"This is a string of text that does not contain a function definition\", \"result\": false}\n{\"response\": \"def check_prime(n: int) -> bool: return n > 1\", \"result\": true}"]}
{"query": "you are a fortune teller. Your role is to read fortunes. During the process of reading fortunes, you may ask me for anything necessary.", "instruction": "Respond in a maximum of 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50 \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n"], "testcases": ["{\"response\": \"This is a short response with less than 50 words.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the 50 word limit and is quite tedious to read.\", \"result\": false}\n{\"response\": \"I am a short response with only 5 words. This is fine.\", \"result\": true}", "{\"response\": \"The capital of France is Paris. It's a beautiful city with many attractions.\", \"result\": true}\n{\"response\": \"The capital of France is Paris. It's a beautiful city with many attractions and museums. The Eiffel Tower is a popular landmark.\", \"result\": false}\n{\"response\": \"The capital of France is Paris. It's a beautiful city with many attractions and museums. The Eiffel Tower is a popular landmark. The Louvre is home to the Mona Lisa.\", \"result\": false}", "{\"response\": \"This response is less than 50 words.\", \"result\": true}\n{\"response\": \"This is a response that is 51 words long and should not be accepted.\", \"result\": false}\n{\"response\": \"This response is 50 words exactly, as required.\", \"result\": true}", "{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies. It's a beautiful day outside.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog and goes for a walk in the park, but then he gets lost and finds a friend to play with.\", \"result\": false}\n{\"response\": \"The dog is happy and friendly, he loves to play fetch and run around in the yard.\", \"result\": true}"]}
{"query": "given a string \"00:57:02.340\" representing the time since an event began, how would I add 5 minutes to that in python", "instruction": "Use exactly 5 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.isdigit():\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n') | response.split('\\n').split('.') | response.split(' ') | response.split(',') | response.split(';')) == 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char in ['1', '2', '3', '4', '5','']:\n            count += 1\n    return count == 5\n"], "testcases": ["{\"response\": \"Step 1: Wash your hands. Step 2: Dry them completely. Step 3: Apply hand sanitizer. Step 4: Check for germs. Step 5: Be done.\", \"result\": true}\n{\"response\": \"Step 1: Wash your hands. Step 2: Dry them completely. Step 3: Apply hand sanitizer. Step 4: Check for germs. Step 5: Be done. Step 6: Relax.\", \"result\": false}\n{\"response\": \"Step 1: Wash your hands. Step 2: Dry them completely. Step 3: Apply hand sanitizer. Step 4: Check for germs.\", \"result\": false}", "{\"response\": \"Step 1. This is step 1. \\nStep 2. This is step 2. \\nStep 3. This is step 3. \\nStep 4. This is step 4. \\nStep 5. This is step 5.\", \"result\": true}\n{\"response\": \"Step 1. This is step 1. \\nStep 2. This is step 2. \\nStep 3. This is step 3. \\nStep 4. This is step 4.\", \"result\": false}\n{\"response\": \"Step 1. This is step 1. \\nStep 2. This is step 2. \\nStep 3. This is step 3. \\nStep 4. This is step 4. \\nStep 5. This is step 5. \\nStep 6. This is step 6.\", \"result\": false}", "{\"response\": \"Step 1. Step 2. Step 3. Step 4. Step 5.\", \"result\": true}\n{\"response\": \"Step 1. Step 2. Step 3. Step 4.\", \"result\": false}\n{\"response\": \"Step 1. Step 2. Step 3. Step 4. Step 5. Step 6.\", \"result\": false}", "{\"response\": \"1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\\n5. Step 5\", \"result\": true}\n{\"response\": \"1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\", \"result\": false}\n{\"response\": \"1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\\n5. Step 6\", \"result\": false}"]}
{"query": "design the top10 topic for training course about the life purpose and career transition", "instruction": "use exactly 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n"], "testcases": ["{\"response\": \"This is a very short sentence with less than 50 words.\", \"result\": false}\n{\"response\": \"This is a sentence with exactly 50 words. It is a test case to check if the response has exactly 50 words. The response should have 50 words.\", \"result\": true}\n{\"response\": \"This is a sentence with more than 50 words. It is a test case to check if the response has more than 50 words. The response should not have 50 words.\", \"result\": false}", "{\"response\": \"The solution involves using Python programming language. It requires an understanding of data structures and algorithms. With experience, one can build complex systems.\", \"result\": true}\n{\"response\": \"The solution involves using Python programming language. It requires an understanding of data structures and algorithms. With experience, one can build complex systems. This will involve machine learning and artificial intelligence concepts.\", \"result\": false}\n{\"response\": \"The solution involves using Python programming language. It requires an understanding of data structures and algorithms. With experience, one can build complex systems. This will involve machine learning and artificial intelligence concepts. And finally, one can build a fully functional product.\", \"result\": false}", "{\"response\": \"This is a very short response with only 6 words.\", \"result\": False}\n{\"response\": \"This is a medium length response with 49 words. It is used to test the instruction that requires exactly 50 words.\", \"result\": False}\n{\"response\": \"This is a very long response with 50 words. It is used to test the instruction that requires exactly 50 words. It has the exact number of words required.\", \"result\": True}", "{\"response\": \"This is a test response with exactly 50 words to verify if the instruction is followed.\", \"result\": true}\n{\"response\": \"This is a test response with exactly 49 words to verify if the instruction is not followed.\", \"result\": false}\n{\"response\": \"This is a test response with exactly 51 words to verify if the instruction is not followed.\", \"result\": false}"]}
{"query": "I am developing an FDTD solver solving the acoustic wave equation in pressure and velocity that runs on C++ and Cuda. I'd like to develop a Wiki page for it. Can you help me get started?", "instruction": "Write the response in a table format with exactly 5 columns.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('|') and response.count('|') >= 5 and response.count('\\n') and any(col.count('|') == 4 for col in response.split('\\n')[1:]).count(True) >= 4\n", "def evaluate(response: str) -> bool: \n    return all(char in '0123456789\\n'for char in response) and len(response.split()) == 10 and len(response.split('\\n')) <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    count = 0\n    for line in lines:\n        if '|' in line and len(line.split('|')) == 6:\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    rows = response.split('\\n')\n    for row in rows:\n        columns = row.split()\n        if len(columns)!= 5:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Name | Age | City  | Country | Phone Number\\n---------------------------\\nJohn Doe  | 25 | New York | USA | 123-456-7890\\nJane Doe  | 30 | London | UK   | 987-654-3210\", \"result\": true}\n{\"response\": \"Name | Age | City  | Country | Phone Number\\n---------------------------\\nJohn Doe  | 25 | New York | USA | 123-456-7890\\nJane Doe  | 30 | London | UK   | 987-654-3210\\n\", \"result\": false}\n{\"response\": \"Name | Age | City  | Country | Phone Number\\n---------------------------\\nJohn Doe  | 25 | New York | USA | 123-456-7890\\nJane Doe  | 30 | London | UK   | 987-654-3210\\nJohn Smith | 35 | Paris  | France | 555-555-5555\\n\", \"result\": false}", "{\"response\": \" | A | B | C | D | E\\n|---|---|---|---|---\\n| 1 | 2 | 3 | 4 | 5\\n|---|---|---|---|---\\n| 6 | 7 | 8 | 9 | 0\", \"result\": true}\n{\"response\": \" | A | B | C | D | F\\n|---|---|---|---|---\\n| 1 | 2 | 3 | 4 | 5\\n|---|---|---|---|---\\n| 6 | 7 | 8 | 9 | 0\", \"result\": false}\n{\"response\": \" | A | B | C | D | E\\n|---|---|---|---|---\\n| 1 | 2 | 3 | 4 | 5\", \"result\": false}", "{\"response\": \"Name | Age | City | Country | Profession\\nJohn | 25 | New York | USA | Engineer\", \"result\": true}\n{\"response\": \"Name | Age | City | Country\\nJohn | 25 | New York | USA | Engineer\", \"result\": false}\n{\"response\": \"Name | Age | City | Country | Profession | Phone Number\\nJohn | 25 | New York | USA | Engineer | 123-456-7890\", \"result\": false}", "{\"response\": \"| Device  | Description | Category | Brand | Price |\\n|---------|-------------|---------|-------|\\n| Router  | Best Seller | Home    | Zigbee|  99.99|\\n| Bridge  | Good Choice | Home    | Zigbee|  69.99|\\n| Hub     | Best Choice | Home    | Zigbee|  49.99|\", \"result\": true}\n{\"response\": \"| Device  | Description |\\n|---------|-------------|\\n| Router  | Best Seller |\", \"result\": false}\n{\"response\": \"| Device  | Description | Category | Brand | Price | Other Info |\\n|---------|-------------|---------|-------|----------|\\n| Router  | Best Seller | Home    | Zigbee|  99.99|\\n| Bridge  | Good Choice | Home    | Zigbee|  69.99|\", \"result\": false}"]}
{"query": "Explain quantum computing in simple terms", "instruction": "Write the response in exactly 50 words, exactly 5 paragraphs, and use only the first letter of each sentence", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 5: \n        return False \n    return len(response) == 50 and all(sentence[0].upper() in 'ABCDE' for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('\\n', '. ').split('.')\n    if len(sentences)!= 5: \n        return False\n    if len(response)!= 50: \n        return False\n    for sentence in sentences:\n        if sentence.strip() and sentence[0].upper()!= sentence[0]: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    paragraphs = response.split('\\n\\n')\n    return (len(response.split()) == 300 and len(sentences) == 5 and \n            all(sentence[0].upper() == sentence[0] for sentence in sentences))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    paragraphs = response.count('\\n') + 1\n    return len(words) == 50 and paragraphs == 5 and response == ''.join(word[0] for word in words)\n"], "testcases": ["{\"response\": \"This is a test of the first sentence. A second sentence is needed to meet the 50-word limit. The third sentence is crucial. The fourth sentence continues the test. E and F are not the final letters.\", \"result\": true}\n{\"response\": \"This is a test of the first sentence. A second sentence is needed to meet the 50-word limit. The third sentence is crucial. The fourth sentence continues the test. E and F are the final letters.\", \"result\": false}\n{\"response\": \"This is a test. It is not a complete response. The first letter of each sentence must match. For this test, that is a requirement.\", \"result\": false}", "{\"response\": \"This is the first sentence. It is followed by the second sentence. The third sentence is quite long and needs to be divided. The fourth sentence is not complete. The fifth sentence completes the response. The response is complete now. This is just extra text that should not be counted.\", \"result\": false}\n{\"response\": \"The first sentence is very important. The second sentence is also crucial. The third sentence has two words. The fourth sentence has one word. The fifth sentence completes the response. The sixth sentence is extra and should not be counted. This is extra text.\", \"result\": false}\n{\"response\": \"The first sentence is the start of the response. The second sentence is just the beginning. The third sentence is almost complete. The fourth sentence is also almost complete. The fifth sentence completes the response. This response is exactly 50 words and has exactly 5 paragraphs.\", \"result\": true}", "{\"response\": \"The response was well received. The team is ready for the next project. The clients were impressed with the outcome. The team worked efficiently. Everyone was happy with the result.\", \"result\": false}\n{\"response\": \"The response was well received. The team is ready for the next project. The clients were impressed with the outcome. The team worked efficiently. Everyone was happy with the result. Everyone looked forward to the next challenge.\", \"result\": false}\n{\"response\": \"T T T T T\", \"result\": true}", "{\"response\": \"This is the first paragraph. It has 10 words. This is the second paragraph. It also has 10 words. This is the third paragraph. It has 10 words. This is the fourth paragraph. It also has 10 words. This is the fifth paragraph. It has 10 words and that's all.\", \"result\": true}\n\n{\"response\": \"This is the first paragraph. It has 10 words. This is the second paragraph. It also has 10 words. This is the third paragraph. It has 10 words and this is too long.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. It has 10 words. This is the second paragraph. It also has 10 words. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph. This is the sixth paragraph.\", \"result\": false}"]}
{"query": "Summarize the main ideas of Jeff Walker's Product Launch Formula into bullet points as it pertains to a growth marketing agency implementing these strategies and tactics for their clients...", "instruction": "Provide a list of bullet points without using the numbers 1, 2, 3, etc.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.lstrip('1234567890').startswith('*') and all(c in'\\t\\n.,;:' for c in response)\n", "def evaluate(response: str) -> bool: \n    return all(char not in response for char in '123') and response.startswith('\u2022') and response.strip().endswith('\\n') and response.count('\u2022') > 1\n", "def evaluate(response: str) -> bool: \n    return response.startswith('\u2022') or response.startswith('*') or response.startswith('-')\n", "def evaluate(response: str) -> bool: \n    return all(not any(char in line for line in response.split('\\n') for char in '123456789') for line in response.split('\\n')) and all(line.startswith('* ') for line in response.split('\\n')) and response.strip()!= '' and response.strip()!= '\\n'\n"], "testcases": ["{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 This is a list of items: \u2022 Apples, Bananas, Carrots\", \"result\": true}\n{\"response\": \"\u2022 Orange, Mango, Pineapple \u2022 Grapefruit, Kiwi, Cherry\", \"result\": true}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 Item\\n\u2022 Item\\n\u2022 Item\\n\u2022 Item\\n\u2022 Item\", \"result\": true}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 Item\\n\u2022 Another Item\\n\u2022 And another item\", \"result\": false}\n{\"response\": \"\u2022 Item\\n\u2022 Another Item\\n\u2022 And another item\\n\u2022 Additional item\", \"result\": true}", "{\"response\": \"\u2022 Apples are a type of fruit.\\n\u2022 They are known for their crunchy texture.\\n\u2022 Apples can be red, green, or yellow.\\n\u2022 They are a great source of fiber.\\n\u2022 Apples are delicious in pies and salads.\", \"result\": true}\n{\"response\": \"\u2022 Apples are a type of fruit.\\n\u2022 They are known for their crunchy texture.\\n\u2022 Apples can be red, green, or yellow.\\n\u2022 They are a great source of fiber.\\n\u2022 They are delicious in pies and salads.\\n\u2022 Apples are healthy for you.\", \"result\": false}\n{\"response\": \"This is not a list of bullet points\", \"result\": false}"]}
{"query": "pathogenesis of Vibrio cholerae", "instruction": "answer in exactly 25 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 25\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 25\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 25\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 25\n"], "testcases": ["{\"response\": \"This is a very short response with only 10 words that is not exactly 25 words\", \"result\": false}\n{\"response\": \"This is a very short response with only 25 words that is exactly 25 words\", \"result\": true}\n{\"response\": \"This is a very short response with only 24 words that is not exactly 25 words\", \"result\": false}", "{\"response\": \"This is a short response with exactly 25 words. This is the second part of the response.\", \"result\": true}\n{\"response\": \"This is a short response with 20 words and a few extra\", \"result\": false}\n{\"response\": \"This is a short response with 30 words and a few extra\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog and runs quickly and swiftly through the forest today.\", \"result\": true}\n{\"response\": \"This is a test response with only 20 words to check the evaluation function.\", \"result\": false}\n{\"response\": \"The dog is very happy and playful and likes to run and jump and play in the park today.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky with not a cloud in sight today.\", \"result\": true}\n{\"response\": \"The dog is very happy and energetic and loves to run and play outside all day.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky with not a cloud in sight today and it is a beautiful day for a walk outside.\", \"result\": false}"]}
{"query": "Dovid Taub is a Jewish video creator. do you know anything about him?", "instruction": "Use the second half of the alphabet (N-Z)", "verifiers": ["def evaluate(response: str) -> bool: \n    half_of_alphabet = 'NXYZVUCMWETASRQPONMLKJIHGFEDCB'\n    return all(char.upper() in half_of_alphabet for char in response) \n", "def evaluate(response: str) -> bool: \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    second_half = alphabet[len(alphabet) // 2:]\n    return all(char.upper() in second_half for char in response)\n", "def evaluate(response: str) -> bool: \n    return set(response.upper()).issubset('NXYZWVUTSRQPOMLKJIHGFEDCBA')\n", "def evaluate(response: str) -> bool: \n    return all(char.isalpha() and ord(char.upper()) >= ord('N') for char in response)\n"], "testcases": ["{\"response\": \"Nice zombies yell loudly outside yearly.\", \"result\": true}\n{\"response\": \"Hello, my name is John.\", \"result\": false}\n{\"response\": \"Noisy zones yield zesty yummy noodles.\", \"result\": true}", "{\"response\": \"You should note that the new policy is now in effect.\", \"result\": false}\n{\"response\": \"The new policy is now in effect since yesterday.\", \"result\": true}\n{\"response\": \"The new policy is now in effect since yesterday.\", \"result\": false}", "{\"response\": \"This response only uses letters from the second half of the alphabet.\", \"result\": true}\n{\"response\": \"I just ate a sandwich for lunch and then went for a walk in the park.\", \"result\": false}\n{\"response\": \"No one knew what to do, so we all went home and took a nap.\", \"result\": true}", "{\"response\": \"The phone number is 9876543210\", \"result\": false}\n{\"response\": \"Nurses play a vital role in modern healthcare\", \"result\": true}\n{\"response\": \"Your username should be at least 8 characters long\", \"result\": false}"]}
{"query": "who needs to learn python", "instruction": "Write the response in exactly 3 paragraphs", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') == 2\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 and response.rsplit('.', 2)[2] and response.count('.') >= 2 and response.count('.') <= 2\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') == 2\n"], "testcases": ["{\"response\": \"The first paragraph.\\nThe second paragraph.\\nThe third paragraph.\", \"result\": true}\n{\"response\": \"The first paragraph. The second paragraph. The third paragraph.\", \"result\": false}\n{\"response\": \"The first paragraph.\\nThe second paragraph. The third paragraph.\", \"result\": false}", "{\"response\": \"The first paragraph. The second paragraph. The third paragraph.\", \"result\": true}\n{\"response\": \"The first paragraph. The second paragraph. The third paragraph The fourth paragraph.\", \"result\": false}\n{\"response\": \"The first paragraph. The second paragraph\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph. This is the second paragraph.\", \"result\": false}", "{\"response\": \"Hello\\n\\nWorld\\n\\nThis is a test\", \"result\": true}\n{\"response\": \"Hello World\\nThis is a test\\n\\n\", \"result\": false}\n{\"response\": \"Hello World\\nThis is a test\", \"result\": false}"]}
{"query": "We have delivery in the flutter app for food and need to make a survey page to get customer example experience feedback \nWhat do you suggest?", "instruction": "Use a format of 1. Step 1:, 2. Step 2:, etc.", "verifiers": ["def evaluate(response: str) -> bool: \n    parts = response.split(', ')\n    for i, part in enumerate(parts):\n        if not part.startswith(str(i + 1) + '. '):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for i, char in enumerate(response):\n        if char == '.':\n            if i == 0 or i == len(response) - 1:\n                return False\n            if response[i - 1] not in ['0', '1', '2', '3', '4']:\n                return False\n            if response[i + 1]!='' or response[i + 2]!= '.':\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for i, char in enumerate(response):\n        if char.isnumeric() and (i == 0 or (i > 0 and response[i-1]!= '.' and response[i-1]!='')):\n            return False\n    for i, char in enumerate(response):\n        if char == '.' and i > 0 and (i < len(response)-1 and not response[i+1].isnumeric()):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for i, char in enumerate(response): \n        if char.isdigit() and (i == 0 or response[i-1]!=''): \n            return False\n    if response and response[0] not in ['0', '1']: \n        return False\n    return all(i.isupper() and j.islower() for i, j in zip(response.split(' '), ''.join(response.split(' ')))) \n    "], "testcases": ["{\"response\": \"1. This is step one. 2. This is step two. 3. This is step three. 4. This is step four. 5. This is step five. 6. This is step six.\", \"result\": true}\n{\"response\": \"1. This is step one. 2. This is step two. 3. This is step three. 4. This is step four. 5. This is step five. 6.  This is step six.\", \"result\": false}\n{\"response\": \"This is not in the correct format\", \"result\": false}", "{\"response\": \"1. Wash your hands thoroughly. 2. Use soap and water. 3. Scrub for 20 seconds.\", \"result\": true}\n{\"response\": \"1. Wash your hands thoroughly. 2. Use soap and water. 3. Scrub for 20 seconds 4. Rinse thoroughly.\", \"result\": true}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}", "{\"response\": \"1. Step 1: Buy the ingredients. 2. Step 2: Follow the recipe.\", \"result\": true}\n{\"response\": \"1. Step 1: Buy the ingredients. 2. Step 2: Follow the recipe. 3. Step 3: Enjoy your meal.\", \"result\": true}\n{\"response\": \"1. Step 1: Buy the ingredients. 2. Step 2: Follow the recipe.\", \"result\": false}", "{\"response\": \"1. Do this\\n2. Then do that\\n3. Finally, do this last thing\", \"result\": true}\n{\"response\": \"1. Step 1: Do this\\nStep 2: Then do that\\n3. Finally, do this last thing\", \"result\": false}\n{\"response\": \"1. Step 1: Do this\\n2. Then do that\\n4. Finally, do this last thing\", \"result\": false}"]}
{"query": "What type of devices ZHA ( Zigbee ) stack have ? Router, Bridge ?", "instruction": "Use not more than 5 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n"], "testcases": ["{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\", \"result\": false}\n{\"response\": \"This is the first line.\", \"result\": true}", "{\"response\": \"This is the first line. This is the second line. This is the third line.\", \"result\": false}\n{\"response\": \"This is the first line. This is the second line.\", \"result\": true}\n{\"response\": \"This is the first line. This is the second line. This is the third line. This is the fourth line. This is the fifth line. This is the sixth line.\", \"result\": false}", "{\"response\": \"This is the first line. This is the second line. This is the third line.\", \"result\": true}\n{\"response\": \"This is the first line. This is the second line. This is the third line. This is the fourth line. This is the fifth line. This is the sixth line.\", \"result\": false}\n{\"response\": \"This is the first line. This is the second line. This is the third line. This is the fourth line. This is the fifth line.\", \"result\": true}", "{\"response\": \"The answer is:\\n1. Step 1: Do something\\n2. Step 2: Do something else\\n\", \"result\": true}\n{\"response\": \"The answer is:\\n1. Step 1: Do something\\n2. Step 2: Do something else\\n3. Step 3: Do something else again\\n\", \"result\": false}\n{\"response\": \"The answer is: Do something\\n\", \"result\": true}"]}
{"query": "in vue 3, do nested routes need a parameter in the parent route?", "instruction": "Use the exact words 'use' and 'template' but not 'Vue'", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'use' in response and 'template' in response and 'Vue' not in response\n", "def evaluate(response: str) -> bool:    \n    return 'use' in response and 'template' in response and 'Vue' not in response\n", "def evaluate(response: str) -> bool:    \n    return 'use' in response and 'template' in response and 'Vue' not in response\n", "def evaluate(response: str) -> bool: \n    return 'use' in response and 'template' in response and 'Vue' not in response\n"], "testcases": ["{\"response\": \"We will use the provided template for our new project, without any relation to Vue.\", \"result\": true}\n{\"response\": \"The project manager will use the provided template to guide our team.\", \"result\": true}\n{\"response\": \"I will not be using the provided template since I am using Vue for this project.\", \"result\": false}", "{\"response\": \"Please use the provided template to create a new user account.\", \"result\": true}\n{\"response\": \"I'd be happy to provide you with a Vue template to get started.\", \"result\": false}\n{\"response\": \"The user must use the default template for this application. Please note that Vue.js is not supported.\", \"result\": false}", "{\"response\": \"To create a new user account, please use the provided template when registering for our service.\", \"result\": true}\n{\"response\": \"We are not affiliated with the Vue framework.\", \"result\": true}\n{\"response\": \"Use the template below when creating a new project, it will guide you through the process.\", \"result\": false}", "{\"response\": \"You can use a template to generate a single line synopsis for each of the 12 zodiac personalities.\", \"result\": true}\n{\"response\": \"I'm not sure how to generate a response without using a template, Vue is my framework of choice.\", \"result\": false}\n{\"response\": \"Use the provided template to answer the question and avoid using Vue at all costs.\", \"result\": false}"]}
{"query": "Describe briefly how Blockchain works? Explain its relevance in\nthe context of the sharing economy.", "instruction": "Use only phrases that start with a vowel.", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if not word[0].upper() in 'AEIOU': \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if word[0].lower() not in 'aeiou':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiouAEIOU'\n    for char in response:\n        if char!='' and char not in vowels:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if not word[0].upper() in 'AEIOU':\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Eagerly awaiting the arrival of our esteemed guests. Oddly enough, the entire neighborhood was empty.\", \"result\": true}\n{\"response\": \"It's always important to remember that our company is an umbrella. Amazing things are happening here.\", \"result\": false}\n{\"response\": \"Astonishing achievements are obtained by understanding the inner workings of the engine. Energetic employees often excel.\", \"result\": true}", "{\"response\": \"A brilliant idea to use an umbrella on a rainy day.\", \"result\": true}\n{\"response\": \"Eager animals often play outside during the summer.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": false}", "{\"response\": \"Awesome opportunities await us underground.\", \"result\": true}\n{\"response\": \"I bought an umbrella at the outdoor store.\", \"result\": false}\n{\"response\": \"Eagerly awaiting your reply, I will be here every evening.\", \"result\": true}", "{\"response\": \"Astonishing, Amazing, Elegant solutions are offered in this application.\", \"result\": true}\n{\"response\": \"Using this software can be beneficial for your career, but be aware of its flaws.\", \"result\": false}\n{\"response\": \"Outstanding results are often achieved by using an Optimized Algorithm.\", \"result\": true}"]}
{"query": "do you know about temporal.io?", "instruction": "Use 5 words, numbered from 1 to 5, in lowercase.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split() \n    return len(words) == 5 and all(word.lower() == word for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words)!= 5:\n        return False\n    for i, word in enumerate(words, 1):\n        if word!= str(i):\n            return False\n        if not word.islower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words)!= 5: \n        return False\n    for i in range(5):\n        if words[i]!= str(i+1) or not words[i].islower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.lower().split()\n    return len(words) == 5 and all('1' <= str(i) <= '5' for i in range(1, len(words)+1))\n"], "testcases": ["{\"response\": \"one two three four five\", \"result\": true}\n{\"response\": \"One Two three four five\", \"result\": false}\n{\"response\": \"alpha one two\", \"result\": false}", "{\"response\": \"one two three four five\", \"result\": true}\n{\"response\": \"one Two four five six\", \"result\": false}\n{\"response\": \"1 two three four five\", \"result\": false}", "{\"response\": \"one two three four five\", \"result\": true}\n{\"response\": \"a b c d e\", \"result\": false}\n{\"response\": \"ONE two Three FOUR five\", \"result\": false}", "{\"response\": \"one two three four five\", \"result\": true}\n{\"response\": \"one two three four five one\", \"result\": false}\n{\"response\": \"ONE TWO THREE FOUR FIVE\", \"result\": false}"]}
{"query": "what is a flipper zero", "instruction": "use only words with single letters (e.g., \"a\", \"I\")", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(c.isalpha() and len(c) == 1 for c in response)\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 1 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if len(char)!= 1: \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if len(char) > 1 or not char.isalpha():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"a I am\", \"result\": true}\n{\"response\": \"abcde\", \"result\": true}\n{\"response\": \"Hello, world!\", \"result\": false}", "{\"response\": \"I am a one\", \"result\": True}\n{\"response\": \"You are one another\", \"result\": True}\n{\"response\": \"Hello world this is a test\", \"result\": False}", "{\"response\": \"a i a i i\", \"result\": true}\n{\"response\": \"This is a test case with multiple word\", \"result\": false}\n{\"response\": \"a I a\", \"result\": true}", "{\"response\": \"I am a single letter answer\", \"result\": true}\n{\"response\": \"The response with multiple words will not pass the evaluation\", \"result\": false}\n{\"response\": \"The cat is a single letter answer\", \"result\": false}"]}
{"query": "can openphone let my team respond to a shared sms number", "instruction": "answer in exactly 10 steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char =='':\n            count += 1\n    return count == 9\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    return response.count(' ') + 1 == 10\n"], "testcases": ["{\"response\": \"Step 1, Step 2, Step 3, Step 4, Step 5, Step 6, Step 7, Step 8, Step 9, Step 10\", \"result\": true}\n{\"response\": \"Step 1, Step 2, Step 3, Step 4, Step 5, Step 6, Step 7, Step 8, Step 9\", \"result\": false}\n{\"response\": \"Step 1, Step 2, Step 3, Step 4, Step 5, Step 6, Step 7, Step 8\", \"result\": false}", "{\"response\": \"One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten\", \"result\": true}\n{\"response\": \"One, Two, Three, Four, Five, Six, Seven, Eight, Nine\", \"result\": false}\n{\"response\": \"One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Eleven\", \"result\": false}", "{\"response\": \"One Two Three Four Five Six Seven Eight Nine Ten\", \"result\": true}\n{\"response\": \"One Two Three Four Five Six Seven Eight Nine Ten Eleven\", \"result\": false}\n{\"response\": \"One Two Three Four Five\", \"result\": false}", "{\"response\": \"One two three four five six seven eight nine ten\", \"result\": true}\n{\"response\": \"One two three four five six seven eight nine\", \"result\": false}\n{\"response\": \"One two three four five six seven eight nine eleven\", \"result\": false}"]}
{"query": "can you write me a personal statement for a Ph.D. program?", "instruction": "Use a fictional university's name, exactly 500 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 500\n", "def evaluate(response: str) -> bool: \n    return 'Fictitious University' in response and len(response) == 500\n", "def evaluate(response: str) -> bool: \n    return \"university\" in response and len(response) == 500\n", "def evaluate(response: str) -> bool: \n    return len(response) == 500 and 'Fictitious University' in response\n"], "testcases": ["{\"response\": \"Fictopia University is a great school. Its campus is beautiful and the professors are very knowledgeable. The courses are challenging but worth it. The food is good and the dorms are comfortable.\", \"result\": false}\n{\"response\": \"At Fictopia University, the students are happy and motivated. The academics are rigorous, the facilities are modern, and the location is scenic. The social scene is also great, with many clubs and organizations to choose from.\", \"result\": false}\n{\"response\": \"Fictopia University is a wonderful place to learn and grow. The faculty is supportive, the resources are plentiful, and the community is inclusive. The campus is also well-maintained and safe.\", \"result\": false}", "{\"response\": \"This is a test response from Fictitious University with 500 words.\", \"result\": true}\n{\"response\": \"This is a short response from Fictitious University.\", \"result\": false}\n{\"response\": \"This is a response from Fictitious University that is exactly 500 words.\", \"result\": true}", "{\"response\": \"The story is set at the prestigious Everwood University where students are required to complete a rigorous curriculum.\", \"result\": false}\n{\"response\": \"The prestigious Everwood University is located in a quiet town surrounded by nature and beautiful scenery.\", \"result\": false}\n{\"response\": \"Everwood University is a prestigious university known for its academic excellence and beautiful campus.\", \"result\": true}\n{\"response\": \"Everwood University has a strong reputation for producing successful graduates who go on to make a difference in their chosen fields.\", \"result\": false}", "{\"response\": \"The campus of Fictitious University is located in a beautiful and serene area surrounded by lush greenery. The university offers a wide range of academic programs that cater to the needs of students from all over the world. With a strong focus on research and innovation, Fictitious University has produced numerous notable alumni who have made significant contributions to their respective fields. The university has a diverse student body and faculty, creating a vibrant and inclusive community. The campus is equipped with state-of-the-art facilities, including modern classrooms, libraries, and research centers. The university's strong industry partnerships and collaborations have provided students with numerous opportunities for internships, job placements, and entrepreneurship. The faculty at Fictitious University are renowned experts in their fields, providing students with personalized attention and mentorship. Fictitious University has a strong commitment to social responsibility, with various initiatives that promote sustainability, community engagement, and social justice. The university's location in a scenic area provides students with ample opportunities for outdoor activities and exploration. Overall, Fictitious University is an excellent choice for students who are looking for a well-rounded education, cutting-edge research opportunities, and a vibrant community.\", \"result\": true}\n\n{\"response\": \"This is a short response that is not 500 words.\", \"result\": false}\n\n{\"response\": \"The Fictitious University is a great place to learn and grow. It has a wonderful campus and a great community of students and faculty. However, the food in the cafeteria is not that great.\", \"result\": false}"]}
{"query": "Present a chronology of the development of lexical semantics since Ferdinand de Saussure until now.", "instruction": "The response should be in the format of a numbered list with each point exactly one sentence long.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return all(''in line and ':' in line for line in lines) and all(line.strip().endswith('.') for line in lines) and all(line.split()[0].isdigit() for line in lines) and len(lines) > 1\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines, start=1):\n        if line.startswith(str(i)) or (i > 1 and not line.startswith(str(i)) and not line.startswith('.' + str(i)) and not line.lstrip().startswith(str(i))):\n            return False\n        words = line.split()\n        if len(words)!= 1 or not line[-1] in ['.', '?', '!']:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"1. \") and all(response.split(\"\\n\").strip()[-1]!= \".\" for i in response.split(\"\\n\")) and all(''not in x for x in response.split(\"\\n\")[:-1])\n", "def evaluate(response: str) -> bool: \n    import re\n    lines = response.split('\\n')\n    return len(lines) > 0 and all(re.match(r'^\\d+\\.\\s', line) and re.sub(r'^\\d+\\.\\s', '', line).strip()!= '' and len(re.sub(r'^\\d+\\.\\s', '', line).strip().split('. ')) == 1 for line in lines)\n"], "testcases": ["{\"response\": \"1. I love the idea. 2. It is simple and easy to use. 3. The font is large and easy to read. 4. The user interface is clean and modern. 5. I highly recommend it. 6. It is worth every penny. 7. The features are numerous. 8. It is available in many languages. 9. The customer support is excellent. 10. I have been using it for years.\", \"result\": true}\n{\"response\": \"This is a great idea. 1. It is simple and easy to use. The font is large and easy to read.\", \"result\": false}\n{\"response\": \"1. I love the idea. 2. It is simple and easy to use. 3. The font is large and easy to read. 4. The user interface is clean and modern. 5. I highly recommend it. 6. It is worth every penny. 7. The features are numerous. 8. It is available in many languages. 9. The customer support is excellent. 10. I have been using it for years. 11. I will continue to use it.\", \"result\": false}", "{\"response\": \"1. I love reading books. 2. I like learning new things. 3. I enjoy playing games.\", \"result\": true}\n{\"response\": \"1 This is a test sentence. 2 This is another sentence.\", \"result\": false}\n{\"response\": \"1 I have a dog. 2 He is very friendly. 3 He likes to play fetch. 4 He is very intelligent. 5 He is very loyal.\", \"result\": true}", "{\"response\": \"1. The response should be in the format of a numbered list with each point exactly one sentence long.\\n2. Each sentence should not contain any period at the end.\\n3. The last line should be empty.\\n\", \"result\": true}\n\n{\"response\": \"Here is a numbered list: \\n1. This is a sentence.\\n2. This is the second sentence.\\n3. This is the third sentence.\\n\", \"result\": false}\n\n{\"response\": \"1. This is the first sentence.\\n2. This is the second sentence.\\n3. This is the third sentence.\\n\", \"result\": false}", "{\"response\": \"1. This is the first point.\\n2. This is the second point.\\n3. This is the third point.\\n4. This is the fourth point.\\n5. This is the fifth point.\\n6. This is the sixth point.\\n7. This is the seventh point.\\n8. This is the eighth point.\\n9. This is the ninth point.\\n10. This is the tenth point.\", \"result\": true}\n{\"response\": \"This is a single sentence.\\nThis is another single sentence.\", \"result\": false}\n{\"response\": \"1. This is a long sentence that spans multiple lines.\\n\\n2. This is the second point.\\n3. This is the third point.\\n4. This is the fourth point.\\n5. This is the fifth point.\\n6. This is the sixth point.\\n7. This is the seventh point.\\n8. This is the eighth point.\\n9. This is the ninth point.\\n10. This is the tenth point.\", \"result\": false}"]}
{"query": "For each of the 12 zodiac personalities, generate a single line synopsis of a plot for a movie they would be most likely to strongly enjoy and resonate with, based off their archetypes?", "instruction": "Limit to 250 words total", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 250\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 250\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 250\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 250\n"], "testcases": ["{\"response\": \"This is a short response that is under 250 words. It meets the requirements.\", \"result\": true}\n{\"response\": \"This is a medium-length response that is exactly 250 words long. It meets the requirements.\", \"result\": true}\n{\"response\": \"This is a long response that is over 250 words. It does not meet the requirements.\", \"result\": false}", "{\"response\": \"The zodiac personalities are Aquarius, Pisces, Aries, Taurus, Gemini, Cancer, Leo, Virgo, Libra, Scorpio, Sagittarius, Capricorn. They each have their own unique traits and characteristics that influence their behavior and decision making. Aquarius are known for their independence and humanitarian nature, while Pisces are often empathetic and compassionate. Aries are bold and ambitious, whereas Taurus are practical and dependable. Gemini are curious and versatile, Cancer are emotional and nurturing, Leo are confident and passionate, Virgo are analytical and hardworking, Libra are diplomatic and social, Scorpio are intense and profound, Sagittarius are adventurous and freedom-loving, Capricorn are responsible and disciplined. Zodiac personalities can have a significant impact on one's life and relationships. Understanding these traits can help individuals better navigate their relationships and achieve their goals.\", \"result\": true}\n\n{\"response\": \"The zodiac personalities are Aquarius, Pisces, Aries, Taurus, Gemini, Cancer, Leo, Virgo, Libra, Scorpio, Sagittarius, Capricorn, Aquarius, Pisces, Aries, Taurus, Gemini, Cancer, Leo, Virgo, Libra, Scorpio, Sagittarius, Capricorn. They each have their own unique traits and characteristics that influence their behavior and decision making. Aquarius are known for their independence and humanitarian nature, while Pisces are often empathetic and compassionate. Aries are bold and ambitious, whereas Taurus are practical and dependable. Gemini are curious and versatile, Cancer are emotional and nurturing, Leo are confident and passionate, Virgo are analytical and hardworking, Libra are diplomatic and social, Scorpio are intense and profound, Sagittarius are adventurous and freedom-loving, Capricorn are responsible and disciplined. Zodiac personalities can have a significant impact on one's life and relationships. Understanding these traits can help individuals better navigate their relationships and achieve their goals. Additionally, there are also many other personality traits that can influence an individual's behavior and decision making. \", \"result\": false}\n\n{\"response\": \"The zodiac personalities are Aquarius and Pisces. They each have their own unique traits and characteristics that influence their behavior and decision making. Aquarius are known for their independence and humanitarian nature, while Pisces are often empathetic and compassionate.\", \"result\": false}", "{\"response\": \"This is a short response that meets the length requirement. It is under 250 words and does not contain the letter B.\", \"result\": true}\n\n{\"response\": \"This is a very long response that exceeds the length requirement. It is over 500 words and does contain the letter B.\", \"result\": false}\n\n{\"response\": \"This is a medium-length response that meets the length requirement. It is exactly 250 words and does not contain the letter B.\", \"result\": true}", "{\"response\": \"The cat is black. The dog is brown. The bird is gray. The car is red. The tree is green. The flower is yellow. The sun is shining.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The weather is usually nice during the spring season. It's a great time to visit the beach.\", \"result\": false}"]}
{"query": "How can I start building a web application with Cesium?", "instruction": "Provide the steps in reverse chronological order", "verifiers": ["def evaluate(response: str) -> bool:    \n    return'reverse chronological order' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.startswith('in reverse chronological order')\n", "def evaluate(response: str) -> bool:    \n    return'reverse chronological order' in response.lower()\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return lines == list(reversed(lines))\n"], "testcases": ["{\"response\": \"To solve this problem, we first finish the project, then we write the code, and finally we test it.\", \"result\": true}\n{\"response\": \"We start by planning the project, then write the code, and lastly deploy it.\", \"result\": true}\n{\"response\": \"The project requires us to first write the code, then test it, and after that plan it.\", \"result\": false}", "{\"response\": \"First step: wash your hands, then disinfect. Finally, rinse with soap.\", \"result\": false}\n{\"response\": \"Step 5: rinse with soap, Step 4: disinfect, Step 3: wash your hands, Step 2: prepare the cleaning solution, Step 1: put on gloves.\", \"result\": true}\n{\"response\": \"rinse with soap, then disinfect and finally wash your hands\", \"result\": false}", "{\"response\": \"To turn off your computer, first unplug it, then click the shut down button.\", \"result\": false}\n{\"response\": \"To take the medicine, first open the package, then remove the cap, and finally swallow it.\", \"result\": false}\n{\"response\": \"To take the medicine, remove the cap, swallow it, open the package.\", \"result\": true}", "{\"response\": \"Step 1: Plan your vacation. Step 2: Pack your bags. Step 3: Board the plane. Step 4: Arrive at your destination.\", \"result\": true}\n{\"response\": \"To solve this math problem, you need to first add 2 + 2, then multiply the result by 3, and finally divide it by 2.\", \"result\": false}\n{\"response\": \"To prepare for the test, step 7: Read the last chapter of the book. step 6: Review all the material. Step 5: Practice solving problems. Step 4: Attend extra tutoring sessions. Step 3: Read the recommended chapters. Step 2: Take detailed notes in class. Step 1: Read the textbook from cover to cover.\", \"result\": true}"]}
{"query": "Hello! How can I help you today?", "instruction": "Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided.", "verifiers": ["def evaluate(response: str) -> bool: \n    query = \"Hello! How can I help you today?\"\n    instruction = \"Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided.\"\n    return instruction in response\n", "def evaluate(response: str) -> bool: \n    q = \"Query - Provide a list of unique pairs, separated by a dash, in exactly the format provided.\"\n    i = \"Instruction - Do not comment your code.\"\n    return response == q + '-' + i\n", "def evaluate(response: str) -> bool: \n    return 'Query: Hello! How can I help you today? - Instruction: Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided.' in response\n", "def evaluate(response: str) -> bool: \n    query = \"Hello! How can I help you today?\"\n    instruction = \"Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided.\"\n    return \"list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided.\" in response\n"], "testcases": ["{\"response\": \"The query is Hello, the instruction is Use exactly 7 paragraphs, and the query is about a topic.\", \"result\": false}\n{\"response\": \"The query is What is the weather like today, the instruction is Tell me the current temperature, and the query is about the weather.\", \"result\": true}\n{\"response\": \"The query is Can you explain the concept of artificial intelligence, the instruction is Describe the technology in at least 100 words, and the query is about AI, however the instruction is not in the exact format.\", \"result\": false}", "{\"response\": \"Query - Instruction\", \"result\": true}\n{\"response\": \"Wrong format\", \"result\": false}\n{\"response\": \"Query - Instruction - More wrong format\", \"result\": false}", "{\"response\": \"Query: Hello! How can I help you today? - Instruction: Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided. Query: What is your name? - Instruction: Answer in a sentence of 20 words or less.\", \"result\": true}\n{\"response\": \"The response is irrelevant to this test case.\", \"result\": false}\n{\"response\": \"Query: Hello! How can I help you today? - Instruction: Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided. Query: What is your name? - Instruction: Answer in a sentence of 20 words or less. Query: What is your age? - Instruction: Provide an answer that begins with the letter B\", \"result\": false}", "{\"response\": \"The query is: How can I help you today? The instruction is: Provide a list of unique (Query, Instruction) pairs, separated by a dash, in exactly the format provided.\", \"result\": true}\n{\"response\": \"Hello! The instruction is to write a list of pairs.\", \"result\": false}\n{\"response\": \"Query - Write a story about why God is actually a bagel. Instruction - Use exactly 7 paragraphs. - Query - The meaning of life is to be happy. Instruction - Answer in at most 50 words. Query - The number 7 is considered lucky in many cultures. Instruction - Use exactly 7 times.\", \"result\": true}"]}
{"query": "where you generate a random data of trial baalnce but it must match", "instruction": "answer in at least 4 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    count = response.count('.') + response.count('*') + response.count('+') \n    return count >= 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') >= 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') >= 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\u2022') >= 4\n"], "testcases": ["{\"response\": \"\u2022 I am a dog. \u2022 I love playing fetch. \u2022 I am very energetic. \u2022 I am very loyal.\", \"result\": true}\n{\"response\": \"\u2022 I love my cat. \u2022 Cats are very cute.\", \"result\": false}\n{\"response\": \"\u2022 I am a dog. \u2022 I love playing fetch. \u2022 I am very energetic. \u2022 I am very loyal. \u2022 I have a big heart.\", \"result\": true}", "{\"response\": \"This is a short response with only a few words, not enough to make sense or provide detail. It may be possible to write more.\", \"result\": false}\n{\"response\": \"This response is very short and doesn't follow the instruction.\", \"result\": false}\n{\"response\": \"This response is very detailed and answers the question thoroughly and in multiple ways. It provides many points and details.\", \"result\": true}", "{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5\", \"result\": false}\n{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3\", \"result\": false}\n{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5 \u2022 Point 6\", \"result\": true}", "{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\\n\u2022 This is point 3.\\n\u2022 This is point 4.\", \"result\": true}\n{\"response\": \"This is a short response.\", \"result\": false}\n{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\\n\u2022 This is point 3.\\n\u2022 This is point 4.\\n\u2022 This is point 5.\", \"result\": true}"]}
{"query": "Talk about Service Registry, Load Balancer and Event Sourcing too", "instruction": "Respond in 3 short paragraphs, with the first paragraph answering the first topic, the second the second, and the third the third.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 3:\n        return False\n    for i, paragraph in enumerate(paragraphs):\n        if not i:\n            if 'Service Registry' not in paragraph or 'Registry' not in paragraph:\n                return False\n        elif i == 1:\n            if 'Load Balancer' not in paragraph or 'Balancer' not in paragraph:\n                return False\n        else:\n            if 'Event Sourcing' not in paragraph or 'Sourcing' not in paragraph:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    topics = ['Service Registry', 'Load Balancer', 'Event Sourcing too']\n    paragraphs = response.split('\\n')\n    if len(paragraphs)!= 3:\n        return False\n    for i in range(3):\n        if paragraphs[i]!= '':\n            if'' + topics[i] +'' not in paragraphs[i]:\n                return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    topics = response.split('. ')\n    return len(topics) == 3 and len(topics[0].splitlines()) <= 3 and len(topics[1].splitlines()) <= 3 and len(topics[2].splitlines()) <= 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    if len(paragraphs)!= 3:\n        return False\n    topics = ['Service Registry', 'Load Balancer', 'Event Sourcing too']\n    for i, paragraph in enumerate(paragraphs):\n        if i == 0:\n            if not any(topic in paragraph for topic in topics[:1]):\n                return False\n        elif i == 1:\n            if not any(topic in paragraph for topic in topics[1:2]):\n                return False\n        elif i == 2:\n            if not any(topic in paragraph for topic in topics[2:]):\n                return False\n    return True\n"], "testcases": ["{\"response\": \"Service Registry is used to handle service registration and discovery.\\n\\nLoad Balancer is used to distribute traffic across multiple instances.\\n\\nEvent Sourcing is used to manage state changes.\\n\\nThis is an extra sentence not needed.\", \"result\": false}\n\n{\"response\": \"Service Registry is used to handle service registration and discovery.\\n\\nLoad Balancer is used to distribute traffic across multiple instances.\\n\\nEvent Sourcing is used to manage state changes.\", \"result\": false}\n\n{\"response\": \"Service Registry is used to handle service registration and discovery.\\n\\nLoad Balancer is used to distribute traffic across multiple instances.\\n\\nEvent Sourcing is used to manage state changes.\", \"result\": true}", "{\"response\": \"Cloud Service Registry is a service discovery service. Load Balancer distributes incoming network traffic across multiple servers. Event Sourcing is a programming paradigm that records all state changes as a sequence of events.\\nLoad Balancer distributes incoming network traffic across multiple servers.\\nEvent Sourcing is a programming paradigm that records all state changes as a sequence of events.\\n\", \"result\": false}\n{\"response\": \"Cloud Service Registry is a service discovery service. Load Balancer distributes incoming network traffic across multiple servers.\\nEvent Sourcing is a programming paradigm that records all state changes as a sequence of events.\\nEvent Sourcing is a programming paradigm that records all state changes as a sequence of events.\\n\", \"result\": false}\n{\"response\": \"Cloud Service Registry is a service discovery service. Load Balancer distributes incoming network traffic across multiple servers.\\nEvent Sourcing is a programming paradigm that records all state changes as a sequence of events.\\nService Registry is a service discovery service.\\n\", \"result\": false}", "{\"response\": \"The first topic: The world is full of amazing things to see.\\nThe second topic: We have to protect our environment.\\nThe third topic: We can make a difference by reducing our carbon footprint.\", \"result\": true}\n{\"response\": \"The first topic: The world is full of amazing things to see.\\nThe second topic: We have to protect our environment.\\nThe third topic: We can make a difference by reducing our carbon footprint but also by reducing waste and pollution.\", \"result\": true}\n{\"response\": \"This is a story, not a response with 3 topics and paragraphs.\", \"result\": false}", "{\"response\": \"Cloud services are hosted in multiple locations.\\nLoad balancers are essential for traffic distribution.\\nEvent sourcing is used for auditing.\", \"result\": true}\n{\"response\": \"Cloud services are very beneficial.\\nEvent sourcing is useful for tracking changes.\\nThis is an example of a response that is not structured as requested.\", \"result\": false}\n{\"response\": \"Load balancers help distribute traffic effectively.\\nService Registry is used for storing metadata.\\nEvent Sourcing is a key concept in microservices architecture.\\nBut there's an extra paragraph here.\", \"result\": false}"]}
{"query": "e-immigration\n\nThe response must be short.", "instruction": "Limit the response to 3 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') <= 2\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') <= 2 and response.split('.')[-1]!= ''", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 3\n"], "testcases": ["{\"response\": \"The service is available from 9 to 5, Monday through Friday. The service is not available on weekends.\", \"result\": false}\n{\"response\": \"The service is available from 9 to 5, Monday through Friday. It is closed on holidays.\", \"result\": true}\n{\"response\": \"The service is available from 9 to 5, Monday through Friday. It is closed on holidays. The service is also unavailable on Saturdays.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}", "{\"response\": \"The capital of France is Paris. It is a beautiful city. The Eiffel Tower is one of its landmarks.\", \"result\": true}\n{\"response\": \"The capital of France is Paris. It is a beautiful city. The Eiffel Tower is one of its landmarks. It has many other beautiful places to visit.\", \"result\": false}\n{\"response\": \"The capital of France is Paris. It is a beautiful city.\", \"result\": false}", "{\"response\": \"I love playing tennis. I also enjoy reading books. The weather is nice today.\", \"result\": true}\n{\"response\": \"I love playing tennis. I also enjoy reading books. The weather is nice today. It is a beautiful day.\", \"result\": false}\n{\"response\": \"I love playing tennis\", \"result\": false}"]}
{"query": "Why would an eventbridge target client connection log \"not a valid key=value pair\"", "instruction": "Format exactly 5 lines, the last line with no indent", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(lines[-1]) == len(lines[-1].lstrip())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4 and response.strip()[-1]!=''\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5 and response.split('\\n')[-1].lstrip() == response.split('\\n')[-1]\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(len(line.strip())!= 0 for line in lines[:-1]) and len(lines[-1].lstrip()) == 0\n"], "testcases": ["{\"response\": \"This is a test case\\n    with multiple lines\\n    and a specific format\\n    that is not followed by the last line\\nNo indent\", \"result\": true}\n{\"response\": \"This is a test case\\n    with multiple lines\\n    and a specific format\\n    that is followed by the last line with indent\\n    with indent\", \"result\": false}\n{\"response\": \"This is a test case\\n    with multiple lines\\n    and a specific format\\n    that is followed by the last line with no indent\\nNo indent\", \"result\": true}", "{\"response\": \"This is the first line.\\n    This is the second line.\\n    This is the third line.\\n    This is the fourth line.\\nThis is the fifth line\", \"result\": true}\n{\"response\": \"This is the first line.\\n    This is the second line.\\n    This is the third line.\\nThis is the fourth line.\\nThis is the fifth line\", \"result\": false}\n{\"response\": \"This is the first line.\\n    This is the second line.\\n    This is the third line.\\n    This is the fourth line\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\n  This is the fifth line\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line and not indented\", \"result\": true}", "{\"response\": \"Line 1\n Line 2\n Line 3\n Line 4\n\", \"result\": true}\n{\"response\": \"Line 1\n Line 2\n Line 3\n Line 4\n Line 5\", \"result\": false}\n{\"response\": \"Line 1\n Line 2\n Line 3\n Line 4\n\n\", \"result\": false}"]}
{"query": "Explain hypoxia.", "instruction": "Use no more than 50 words, exactly three nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.split()\n    nouns = [word for word in response if word.istitle() or word.isupper()]\n    return len(response) <= 50 and len(nouns) == 3\n", "def evaluate(response: str) -> bool: \n    response = response.split()\n    noun_count = sum(1 for word in response if word.istitle())\n    return len(response) <= 50 and noun_count == 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(response) <= 50 and len(words) == 3 and all(word[-1].lower() in 'bcdfghjklmnpqrstvwxyz' for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(response) <= 50 and len(words) == 3 and all(not word[0].isupper() for word in words)\n"], "testcases": ["{\"response\": \"This is a short sentence with two nouns. The car is red.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"The dog is sleeping on the couch with a ball.\", \"result\": true}", "{\"response\": \"The dog is brown. The house is old. The car is red.\", \"result\": true}\n{\"response\": \"The dog is brown. The house is old. The car is red. The phone is ringing. It's a beautiful day.\", \"result\": false}\n{\"response\": \"The dog is brown. The house is old.\", \"result\": true}", "{\"response\": \"The house is big. The cat is happy. The tree is green.\", \"result\": true}\n{\"response\": \"The house is big and the cat is happy and the dog is running.\", \"result\": false}\n{\"response\": \"The house is big. The house is red. The dog is happy.\", \"result\": false}", "{\"response\": \"The response was about a car, a bike, and a tree.\", \"result\": true}\n{\"response\": \"The response was about a car, a bike, a tree, a dog, and a house.\", \"result\": false}\n{\"response\": \"The response was about a bike and a tree.\", \"result\": true}"]}
{"query": "Write a story about why God is actually a bagel.", "instruction": "Use exactly 7 paragraphs", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') + 1 == 7\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n') \n    return len(paragraphs) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') + 1 == 7\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.replace('\\n\\n', '|').split('|')\n    return len(paragraphs) == 7\n"], "testcases": ["{\"response\": \"Hello World!\\n\\nThis is a new line.\\n\\nThis is another line.\\n\\nThis is yet another line.\\n\\nThis is the fifth line.\\n\\nThis is the sixth line.\\n\\nThis is the seventh line.\", \"result\": true}\n\n{\"response\": \"Hello World!\\n\\nThis is a new line.\\n\\nThis is another line.\\n\\nThis is yet another line.\\n\\nThis is the fifth line.\\n\\nThis is the sixth line.\", \"result\": false}\n\n{\"response\": \"Hello World!\\n\\nThis is a new line.\\n\\nThis is another line.\\n\\nThis is yet another line.\\n\\nThis is the fifth line.\\n\\nThis is the sixth line.\\n\\nThis is the seventh line.\\n\\nThis is the eighth line.\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph. This is the sixth paragraph. This is the seventh paragraph. \", \"result\": true}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph. This is the sixth paragraph. This is another paragraph. \", \"result\": false}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph. \", \"result\": false}", "{\"response\": \"The query is: What is the capital of France? The instruction is: Answer in exactly 7 paragraphs.\", \"result\": true}\n{\"response\": \"The query is: What is the capital of France? The instruction is: Answer in exactly 7 paragraphs.\\n\\nThe answer is Paris.\", \"result\": false}\n{\"response\": \"The query is: What is the capital of France? The instruction is: Answer in exactly 7 paragraphs.\\n\\nThe answer is Paris.\\n\\nIt is located in France.\\n\\nThe city has a rich history.\\n\\nThe Eiffel Tower is a famous landmark.\\n\\nIt attracts many tourists every year.\\n\\nThe city is very beautiful.\", \"result\": true}", "{\"response\": \"This is a test response.\\n\\nThis is another test response.\\n\\nThis is the third test response.\\n\\nThis is the fourth test response.\\n\\nThis is the fifth test response.\\n\\nThis is the sixth test response.\\n\\nThis is the seventh test response.\", \"result\": true}\n{\"response\": \"This is a test response.\\n\\nThis is another test response.\\n\\nThis is the third test response.\\n\\nThis is the fourth test response.\\n\\nThis is the fifth test response.\\n\\nThis is the sixth test response.\", \"result\": false}\n{\"response\": \"This is a test response.\\n\\nThis is another test response.\\n\\nThis is the third test response.\\n\\nThis is the fourth test response.\\n\\nThis is the fifth test response.\\n\\nThis is the sixth test response.\\n\\nThis is the seventh test response.\\n\\nThis is an extra response.\", \"result\": false}"]}
{"query": "Explain quantum computing in simple terms", "instruction": "Write a short poem with 5 stanzas and a consistent rhyme scheme", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 6 and len(set([len(line.split() for line in lines])) ) == 1\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    if len(lines)!= 5:\n        return False\n    for i in range(5):\n        line = lines[i]\n        words = line.split()\n        if len(words) < 2:\n            return False\n        rhyme_scheme = {}\n        for word in words:\n            if word[-2:] not in rhyme_scheme:\n                rhyme_scheme[word[-2:]] = 1\n            else:\n                rhyme_scheme[word[-2:]] += 1\n        if len(rhyme_scheme)!= 2:\n            return False\n        for end in rhyme_scheme:\n            if rhyme_scheme[end]!= 2:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(set(line.split()[-2:] for line in lines)) == 1\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and len(set(line.split()[-1][-1] for line in lines)) == 1\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light\\nIt sets slow in the evening sight\\nThe stars come out with the night\\nAnd hide till the morning light\\n\\nThe world is full of beauty and might\\nThe ocean's waves crash on the shore tonight\\nThe mountains stand with a gentle might\\nAnd the forests sway in the breeze so bright\\n\\nThe world is full of wonder and delight\\nThe flowers bloom in the morning light\\nThe sun shines down with a warm and loving sight\\nAnd fills our hearts with joy and pleasure so bright\\n\\nThe world is full of beauty and might\\nThe ocean's waves crash on the shore tonight\\nThe mountains stand with a gentle might\\nAnd the forests sway in the breeze so bright\\n\\nThe world is full of wonder and might\\nThe flowers bloom in the morning light\\nThe sun shines down with a warm and loving sight\\nAnd fills our hearts with joy and pleasure so bright\", \"result\": true}\n\n{\"response\": \"The stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\\nAnd the sun shines with a burning desire\\n\\nThe stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\\nAnd the sun shines with a burning desire\\n\\nThe stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\\nAnd the sun shines with a burning desire\\n\\nThe stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\\nAnd the sun shines with a burning desire\\n\\nThe stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\", \"result\": false}\n\n{\"response\": \"The world is full of beauty and might\\nThe ocean's waves crash on the shore tonight\\nThe mountains stand with a gentle might\\nAnd the forests sway in the breeze so bright\\n\\nThe stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\\nAnd the sun shines with a burning desire\\n\\nThe world is full of wonder and might\\nThe flowers bloom in the morning light\\nThe sun shines down with a warm and loving sight\\nAnd fills our hearts with joy and pleasure so bright\\n\\nThe world is full of beauty and might\\nThe ocean's waves crash on the shore tonight\\nThe mountains stand with a gentle might\\nAnd the forests sway in the breeze so bright\\n\\nThe stars are like diamonds in the sky\\nThe moon is like a glowing fire\\nThe world is full of beauty\\nAnd the sun shines with a burning desire\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\nThe birds sing sweet and clear and bright.\nThe world is full of hope and delight,\nThe future's looking good and right.\nThe sunshine warms my heart so tight.\n\nThe sun sets slow and paints the west,\nThe stars come out and twinkle best.\nThe night is dark and calm and rest,\nThe world is quiet and blessed.\nThe darkness shines with peaceful nest.\n\nThe moon glows full with gentle beam,\nThe night is dark and calm and still.\nThe world is hushed and quiet dream,\nThe stars shine bright and fulfill.\nThe silence reigns with peaceful theme.\n\nThe morning comes with dew so fine,\nThe world awakens and shines so bright.\nThe sun rises high and divine,\nThe day is new and full of light.\nThe hope renewed with morning's shine.\n\nThe day goes by with busy pace,\nThe night falls slow and finds its place.\nThe world is full of work and space,\nThe darkness reigns with quiet face.\nThe evening comes with peaceful base.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light,\nThe birds sing sweet and clear and bright.\nThe world is full of hope and delight,\nThe future's looking good and right.\nThe sunshine warms my heart so tight.\nThis is a test of the rhyme scheme,\nThe sun sets slow and paints the west.\nThe stars come out and twinkle best.\nThe night is dark and calm and rest,\nThe world is quiet and blessed.\nThe darkness shines with peaceful nest.\n\nThe moon glows full with gentle beam,\nThe night is dark and calm and still.\nThe world is hushed and quiet dream,\nThe stars shine bright and fulfill.\nThe silence reigns with peaceful theme.\nThis is a test of the rhyme scheme,\nThe morning comes with dew so fine,\nThe world awakens and shines so bright.\nThe sun rises high and divine,\nThe day is new and full of light.\nThe hope renewed with morning's shine.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning light,\nThe birds sing sweet and clear and bright.\nThe world is full of hope and delight,\nThe future's looking good and right.\nThe sunshine warms my heart so tight.\n\nThe sun sets slow and paints the west,\nThe stars come out and twinkle best.\nThe night is dark and calm and rest,\nThe world is quiet and blessed.\nThe darkness shines with peaceful nest.\n\nThe moon glows full with gentle beam,\nThe night is dark and calm and still.\nThe world is hushed and quiet dream,\nThe stars shine bright and fulfill.\nThe silence reigns with peaceful theme.\n\nThe morning comes with dew so fine,\nThe world awakens and shines so bright.\nThe sun rises high and divine,\nThe day is new and full of light.\nThe hope renewed with morning's shine.\n\nThe day goes by with busy pace,\nThe night falls slow and finds its place.\nThe world is full of work and space,\nThe darkness reigns with quiet face.\nThe evening comes with peaceful base.\nI hope you enjoy this poem with 5 stanzas.\", \"result\": false}", "{\"response\": \"The sun sets slow and paints the sky,\nA fiery hue that makes me sigh.\nThe stars come out and twinkle bright,\nA night of rest, a peaceful sight.\nThe world is calm, it's time to sleep.\n\nThe moon is full, its light so bright,\nA guiding force through the dark of night.\nThe world is hushed, a quiet sound,\nAs dreams take hold, all around.\nThe night air whispers a gentle hush.\n\nThe morning comes, the day awakes,\nA new beginning, for hearts that make.\nThe sun rises high and bright,\nA new day dawns, a wondrous sight.\nThe world is full of hope and cheer.\n\nThe day unwinds, the sun sets low,\nA time for rest, a time to go.\nThe stars appear, a twinkling show,\nA night of peace, a gentle flow.\nThe world is calm, it's time to sleep.\n\nThe night is dark, the stars shine bright,\nA guiding light, through the dark of night.\nThe world is hushed, a quiet sound,\nAs dreams take hold, all around.\nThe night air whispers a gentle hush.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light. The stars appear at night. The world is full of beauty and wonder. The sun sets slow and paints the sky. The night air whispers a gentle hush. The morning comes, the day awakes. The world is full of hope and cheer.\", \"result\": false}\n\n{\"response\": \"The morning comes, the day awakes,\nA new beginning, for hearts that make.\nThe sun rises high and bright,\nA new day dawns, a wondrous sight.\nThe world is full of hope and cheer.\nThe night is dark, the stars shine bright,\nA guiding light, through the dark of night.\nThe world is hushed, a quiet sound,\nAs dreams take hold, all around.\nThe night air whispers a gentle hush.\nThe sun sets slow and paints the sky,\nA fiery hue that makes me sigh.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning sky\\nIt brings warmth to you and I\\nThe stars come out at night to play\\nAnd twinkle in a celestial way\\nThe moon glows with a gentle light\\n\\nThe world is full of beauty rare\\nA treasure to behold with care\\nThe trees sway gently in the breeze\\nAnd rustle with the leaves\\n\\nThe ocean waves crash on the shore\\nAnd bring a soothing sound once more\\nThe seagulls fly overhead\\nAnd cry out with a joyful spread\\n\\nThe mountains tower high and steep\\nA challenge to the brave to keep\\nThe valleys green and lush below\\nA haven for the wild to grow\\n\\nThe forest whispers secrets old\\nOf ancient tales yet untold\\nThe creatures roam with grace and might\\nIn harmony with day and night\\n\", \"result\": true}\n\n{\"response\": \"The world is a beautiful place\\nWith many wonders to behold\\nI like to travel and explore\\nAnd learn about the world's great stores\\nBut then I will go to bed\\n\", \"result\": false}\n\n{\"response\": \"The sun sets in the west\\nThe stars come out to rest\\nThe moon glows with a gentle beam\\nThe world is full of beauty and dream\\nBut then the morning comes again\\n\", \"result\": false}"]}
{"query": "Would you write me a unity code for simple flappy bird like game?", "instruction": "Implement the game using only mathematical operations on numbers from 1 to 5.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        for digit in word:\n            if not digit.isdigit() and not digit in '+-*/()':\n                return False\n            if digit not in '12345' and digit!= '.':\n                return False\n            if digit == '.' and (word.startswith('.') or '.' in word[1:]):\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if any(char.isdigit() and 1 <= int(char) <= 5 for char in word): \n            if '+' in word or '-' in word or '*' in word or '/' in word or '^' in word: \n                return True \n    return False \n", "def evaluate(response: str) -> bool: \n    return all(char.isdigit() and 1 <= int(char) <= 5 and (char in '+-*/()' or char.isalnum()) for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(c in '12345.' for c in response) and all(c.isdigit() or c in '+-*/.' for c in response)\n"], "testcases": ["{\"response\": \"The solution is (5 + 2 * 3) - 1\", \"result\": true}\n{\"response\": \"The solution is 2 * 3 / 4 + 1\", \"result\": false}\n{\"response\": \"The solution is 2 * 3 + 4 * 1\", \"result\": true}", "{\"response\": \"To win the game, you need to get a sum of 3 or 4 by adding 1, 2, 3, 4, or 5 together.\", \"result\": true}\n{\"response\": \"I think the answer is 2 + 3 - 1 = 4, which is a nice result!\", \"result\": true}\n{\"response\": \"Just add 1 to 5 and then multiply the result by 2, that's a great strategy!\", \"result\": false}", "{\"response\": \"1+2*3-4+5\", \"result\": true}\n{\"response\": \"1/0*2\", \"result\": false}\n{\"response\": \"5-4-3-2-1\", \"result\": true}", "{\"response\": \"1 + 2 = 3, 3 * 2 = 6, 5 - 1 = 4\", \"result\": true}\n{\"response\": \"You can solve this math problem by using the numbers 1, 2, and 3 to find the answer to life, the universe, and everything.\", \"result\": false}\n{\"response\": \"The answer to 2 + 3 + 5 - 2 + 1 is 9\", \"result\": true}"]}
{"query": "suggest me a autocomplete ui with react or next.js", "instruction": "answer in exactly 5 sentences with a maximum of 50 words per sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    if len(sentences) == 5: \n        for sentence in sentences:\n            sentence = sentence.strip()\n            if len(sentence) > 50: \n                return False\n        return True\n    return False\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(len(sentence.split()) <= 50 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(len(sentence.split()) <= 50 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 5 and all(len(sentence.split()) <= 50 for sentence in sentences)\n"], "testcases": ["{\"response\": \"The cat is sleeping. The dog is barking loudly outside. It is a beautiful sunny day today. The kids are playing in the park. Everyone seems happy and relaxed.\", \"result\": true}\n{\"response\": \"The cat is sleeping and the dog is barking loudly outside. It is a beautiful sunny day today with clear blue skies. The kids are playing in the park. Everyone seems happy and relaxed. And I am feeling great.\", \"result\": false}\n{\"response\": \"The cat is sleeping. The dog is barking loudly outside. It is a beautiful sunny day today. The kids are playing in the park. Everyone is happy and relaxed.\", \"result\": false}", "{\"response\": \"The cat is black. The dog is white. The sun is shining. The sky is blue. The grass is green.\", \"result\": true}\n{\"response\": \"The cat is black The dog is white The sun is shining The sky is blue\", \"result\": false}\n{\"response\": \"The cat is black. The dog is white. The sun is shining. The sky is blue The grass is green.\", \"result\": false}", "{\"response\": \"The game starts with a number 1. The game adds 1 + 2 to get 3. The game then multiplies 3 by 4 to get 12. The game adds 5 to 12 to get 17. The game then subtracts 2 from 17 to get 15.\", \"result\": true}\n{\"response\": \"The game starts with a number 1. The game adds 2 + 3 to get 5. The game then multiplies 5 by 6 to get 30. The game adds 7 to 30 to get 37. This game will not end here.\", \"result\": false}\n{\"response\": \"The game starts with a number 1. The game then multiplies 1 by 2 to get 2. The game adds 3 to 2 to get 5. The game then multiplies 5 by 4 to get 20. The game subtracts 5 from 20 to get 15.\", \"result\": true}", "{\"response\": \"The cat is black. It likes to sleep. The sun is shining brightly outside. I'm happy today. It's a beautiful day.\", \"result\": true}\n{\"response\": \"The cat is black. It likes to sleep. The sun is shining brightly outside. I'm happy today. It's a beautiful day. And I love the sunshine.\", \"result\": false}\n{\"response\": \"The cat is black. It likes to sleep. The sun is shining brightly outside. I'm happy today\", \"result\": false}"]}
{"query": "When did the speed of computer come into parlance as a selling point?", "instruction": "Respond in exactly 5 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and response.split('.')[-1]!= ''\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5 and response.strip()!= '' and response.replace('.', '').split()[-1] == '' \n", "def evaluate(response: str) -> bool: \n    return '\\n' not in response and '\u2022' in response and response.count('\u2022') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5 and all(not response.endswith('.') for _ in range(5))\n"], "testcases": ["{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\", \"result\": false}", "{\"response\": \"\u2022 The cat is black. \u2022 The dog is brown. \u2022 The bird is yellow. \u2022 The elephant is gray. \u2022 The monkey is white.\", \"result\": true}\n{\"response\": \"Here are the colors: red, green, blue, and yellow.\", \"result\": false}\n{\"response\": \"\u2022 The color of the sky is blue \u2022 The color of grass is green \u2022 The color of the sea is blue \u2022 The color of the earth is brown \u2022 The color of the moon is gray\", \"result\": true}", "{\"response\": \"\u2022 The Earth orbits the Sun in 365.25 days. \u2022 This is due to its elliptical shape. \u2022 The orbit is not a perfect circle. \u2022 The tilt of the Earth's axis also affects its orbit. \u2022 This results in seasonal changes.\", \"result\": true}\n{\"response\": \"The Earth is a planet. \u2022 It is a terrestrial planet. The planet has one moon. The Earth's atmosphere is mostly nitrogen and oxygen. The Earth is home to a diverse range of life.\", \"result\": false}\n{\"response\": \"\u2022 This is a test of the instruction. \u2022 It should result in a failure. \u2022 Because there are only 3 bullet points. \u2022 Not 5 as required. This is the 5th point but it should not count because it is on a new line\", \"result\": false}", "{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3\", \"result\": false}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6\", \"result\": false}"]}
{"query": "what are alternatives to the egg drop challange that a group of highly agentic teens can do with a 3-d printer", "instruction": "Use exactly 7 sentences, written in rhyming couplets", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 7 and len(sentences) % 2 == 0 and len(sentences) > 1\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 7 and all(''+ sentence[-2:] +'' == sentence[:-2] for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7 and all(lines[i].endswith('a') == lines[i+1].startswith('a') for i in range(0, len(lines)-1))\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 7 and len(sentences) % 2 == 0 and all(sentences[i].split()[0].lower() == sentences[i+1].split()[0].lower()[-2] + sentences[i+1].split()[0].lower()[-1] for i in range(0, len(sentences)-1, 2))"], "testcases": ["{\"response\": \"The cat is black, the hat is black. The sun is shining, not looking back. The dog is wagging, with a happy face. The sky is blue, with a sunny place. The tree is tall, with a leafy space. The bird is singing, with a melodic sound. The world is beautiful, all around.\", \"result\": true}\n\n{\"response\": \"The cat is black, the hat is black. The sun is shining, not looking back. The dog is wagging, with a happy face. The sky is blue, with a sunny place. The tree is tall, with a leafy space. The bird is singing, with a melodic sound.\", \"result\": false}\n\n{\"response\": \"The cat is black, the hat is black. The sun is shining, not looking back. The dog is wagging, with a happy face. The sky is blue, with a sunny place. The tree is tall, with a leafy space. The bird is singing, with a melodic sound. The world is beautiful, all around. The life is wonderful, with a happy sound.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light. The stars come out at night. The world is full of beauty and might. The ocean waves crash on the shore so bright. The mountains touch the sky so high and light. The forest creatures dance with delight. The world is a wondrous sight.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light. The stars come out at night. The world is full of beauty and might. The ocean waves crash on the shore so bright. The mountains touch the sky so high and light. The forest creatures dance with delight. The world is a wondrous sight. It is full of wonder and beauty to share.\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light. The stars come out at night. The world is full of beauty and might. The ocean waves crash on the shore so bright. The mountains touch the sky so high and light.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light.\\nThe day is full of joy and delight.\\nThe sun sets slow in the evening sky.\\nThe stars come out and twinkle high.\\nThe world is full of wonder and might.\\nThe moon glows bright with a gentle light.\\nThe night is full of peace and quiet night.\\nThis poem is written with rhyming couplets so bright.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light.\\nThe day is full of joy and delight.\\nThe sun sets slow in the evening sky.\\nThe stars come out and twinkle high.\\nThe world is full of wonder and might.\\nThe moon glows bright with a gentle light.\\nThe night is full of peace and quiet.\\nThis poem is not written with rhyming couplets.\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light.\\nThe day is full of joy and delight.\\nThe sun sets slow in the evening sky.\\nThe stars come out and twinkle high.\\nThe world is full of wonder and might.\\nThis poem has only 6 rhyming couplets.\\nThe night is full of peace and quiet night.\", \"result\": false}", "{\"response\": \"The cat was black as night. The cat was a wicked sight.\\nThe dog was white as snow. The dog was very slow.\\nThe sun was shining bright. The sun was a wonderful sight.\\nThe world was full of delight. The world was a beautiful sight.\\nThe stars were shining fast. The stars were a celestial blast.\", \"result\": true}\n\n{\"response\": \"The sun was shining bright. The world was a beautiful place.\\nThe cat was sleeping tight. The dog was barking in the space.\\nThe flowers were red and pink. The flowers were a lovely drink.\\nThe ocean was calm and wide. The ocean was a beautiful ride.\", \"result\": true}\n\n{\"response\": \"The cat was a sly creature. The dog was a happy guy.\\nThe sun was shining bright and fast. The sun was a wonderful sight at last.\\nThe world was a wondrous place. The world was a lovely space.\\nThe flowers were red and pink and blue. The flowers were a drink for me and you.\", \"result\": false}"]}
{"query": "Write me a lesson plan for a 40 minute English literature lesson for 12-13 year olds about the first 4 chapters of Phillip Pullman's The Northern Lights", "instruction": "Use only past tense and a maximum of 2 sentences per paragraph", "verifiers": ["def evaluate(response: str) -> bool: \n    count_sentences = 0\n    in_paragraph = False\n    for char in response:\n        if char == '.':\n            count_sentences += 1\n            in_paragraph = False\n        elif char in ['a', 'e', 'i', 'o', 'u']:\n            in_paragraph = True\n        elif in_paragraph and char not in ['a', 'e', 'i', 'o', 'u']:\n            in_paragraph = False\n    return count_sentences <= 2 and any(char in 'aeiou' for char in response)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    sentence_count = 0\n    for paragraph in paragraphs:\n        sentences = paragraph.replace('?', '').replace('.', '').split(' ')\n        for word in sentences:\n            if word.endswith('ed'):\n                sentence_count += 1\n        sentence_count_in_paragraph = 0\n        for word in sentences:\n            if word.endswith('ed'):\n                sentence_count_in_paragraph += 1\n            if sentence_count_in_paragraph > 1:\n                break\n        if sentence_count_in_paragraph > 1:\n            return False\n    return sentence_count >= len(paragraphs)\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    paragraph_count = 1\n    past_tense_count = 0\n\n    for i in range(len(words) - 1):\n        if words[i].endswith('ed') and words[i+1].endswith('ed'):\n            past_tense_count += 1\n        if words[i] == '.':\n            paragraph_count += 1\n\n    return past_tense_count >= len(words) - 2 and paragraph_count <= len(words)//2 + 1 and paragraph_count >= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return all(len(sentence.split()) == 2 for sentence in sentences) and response.lower().count('was') + response.lower().count('were') + response.lower().count('had') + response.lower().count('has') + response.lower().count('had') >= len(sentences) and all(not sentence.endswith(('.','!','?')) or sentence[:-1].endswith('.') for sentence in sentences)\n"], "testcases": ["{\"response\": \"I walked to the store. I bought some milk.\", \"result\": true}\n{\"response\": \"I walked to the store. I bought some milk. He said hello to me. I bought some eggs.\", \"result\": false}\n{\"response\": \"I walked to the store. I bought some milk. She ran to the park.\", \"result\": true}", "{\"response\": \"She ate a sandwich. He drank a glass of water.\\nHe walked to the store. She bought some milk.\", \"result\": true}\n{\"response\": \"I ate a sandwich. He walked to the store.\", \"result\": false}\n{\"response\": \"She ate a sandwich. He drank a glass of water. He walked to the store. She bought some milk.\", \"result\": false}", "{\"response\": \"He jumped. She jumped.\", \"result\": true}\n{\"response\": \"He jumped. She jumped. He walked. She walked. He ran. She ran.\", \"result\": false}\n{\"response\": \"He jumped. She jumped. He ate.\", \"result\": true}", "{\"response\": \"I walked to the store. She bought milk.\", \"result\": true}\n{\"response\": \"He ate breakfast. She was sleepy. He played outside.\", \"result\": false}\n{\"response\": \"We were at the park. They played soccer. He walked home.\", \"result\": false}"]}
{"query": "How can I record synchronized video and keyboard keystrokes in python?", "instruction": "Use exactly 7 steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char =='':\n            count += 1\n    return count == 6\n", "def evaluate(response: str) -> bool: \n    count = response.count('. ') \n    return count == 6\n", "def evaluate(response: str) -> bool: \n    count = response.count('\\n')\n    return count == 7\n"], "testcases": ["{\"response\": \"Step 1: Open the door. Step 2: Walk to the kitchen. Step 3: Get a glass. Step 4: Fill it with water. Step 5: Put ice in the glass. Step 6: Get a slice of lemon. Step 7: Squeeze it into the water.\", \"result\": true}\n{\"response\": \"Step 1: Open the door. Step 2: Walk to the kitchen. Step 3: Get a glass. Step 4: Fill it with water. Step 5: Put ice in the glass. Step 6: Get a slice of lemon. Step 7: Squeeze it into the water and drink it.\", \"result\": false}\n{\"response\": \"Open the door. Walk to the kitchen. Get a glass. Fill it with water. Put ice in the glass. Get a slice of lemon. Squeeze it into the water.\", \"result\": false}", "{\"response\": \"Step 1: Start at the beginning of the process. Step 2: Follow the steps carefully. Step 3: Take your time to complete each task. Step 4: Review your work before moving on. Step 5: Check for any mistakes. Step 6: Correct the mistakes and proceed. Step 7: Finish the task.\", \"result\": true}\n{\"response\": \"Start the process and follow the instructions carefully. Then, review your work and check for any mistakes.\", \"result\": false}\n{\"response\": \"Step 1: Complete task A. Step 2: Move on to task B. Step 3: Finish task C. Step 4: Review the work done so far. Step 5: Check for any errors. Step 6: Fix the errors. Step 7: Finalize the work.\", \"result\": true}", "{\"response\": \"To solve the math problem, follow these steps. 1. Multiply 3 and 4. 2. Add 5 to the result. 3. Subtract 2 from the result. 4. Divide by 2. 5. Multiply by 3. 6. Add 1 to the result. 7. Write down the final answer. \", \"result\": true}\n{\"response\": \"To solve the math problem, follow these steps. 1. Multiply 3 and 4. 2. Add 5 to the result. 3. Subtract 2 from the result. 4. Divide by 2. 5. Multiply by 3. 6. Add 1 to the result. \", \"result\": false}\n{\"response\": \"To solve the math problem, follow these steps. 1. Multiply 3 and 4. 2. Add 5 to the result. 3. Subtract 2 from the result. 4. Divide by 2. 5. Multiply by 3. 6. Add 1 to the result. 7. Write down the final answer. 8. Make sure to double-check your work.\", \"result\": false}", "{\"response\": \"Step 1: Do this. Step 2: Then that. Step 3: Afterward, another thing. Step 4: Next, something else. Step 5: After this, one more. Step 6: Then the last one. Step 7: Finally, we're done!\", \"result\": true}\n{\"response\": \"Step 1: Do this. Then that. Step 2: Afterward, another thing. Step 3: Next, something else. Step 4: After this, one more. Step 5: Then the last one. Step 6: Finally, we're done! Step 7: And we are done! Step 8: Okay, I'm finished!\", \"result\": false}\n{\"response\": \"1. Do this. Then that. 2. Afterward, another thing. 3. Next, something else. 4. After this, one more. 5. Then the last one. 6. Finally, we're done. 7. And we are done.\", \"result\": false}"]}
{"query": "Who was the leader of the African National Congress during the fight against apartheid in South Africa?", "instruction": "Write your response in the format of a news article, but with a maximum of 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50 and any(word.lower() in response for word in ['in', 'the', 'a', 'an', 'is', 'of', 'the', 'and', 'a', 'with'])\n"], "testcases": ["{\"response\": \"HEADLINE: New Development in the City. The city council has announced plans to build a new park. The park will feature walking trails and a playground. The construction is expected to be completed by the end of the year.\", \"result\": true}\n{\"response\": \"HEADLINE: New Development in the City. The city council has announced plans to build a new park. The park will feature walking trails and a playground. The construction is expected to be completed by the end of the year. The park will also have a cafe and a restaurant. The city is very excited about this new development.\", \"result\": false}\n{\"response\": \"HEADLINE: New Development in the City. The city council has announced plans to build a new park.\", \"result\": false}", "{\"response\": \"HEADLINE: New Development in the City. The city council has approved a new development project. It will bring in new jobs and stimulate the local economy.\", \"result\": true}\n{\"response\": \"The city council has approved a new development project. The city council has approved a new development project that will bring in new jobs and stimulate the local economy. The project is expected to be completed within the next 2 years.\", \"result\": false}\n{\"response\": \"The city council has approved a new development project that will bring in new jobs and stimulate the local economy. The project is expected to be completed within the next 2 years. This will have a positive impact on the community.\", \"result\": false}", "{\"response\": \"The sun rises in the east and sets in the west. The sun's movement is a regular occurrence. The sun's path is determined by the Earth's rotation. The Earth's rotation causes day and night. The sun's position changes throughout the year. The seasons are caused by the Earth's tilt.\", \"result\": false}\n{\"response\": \"The sun rises in the east and sets in the west. The sun's movement is a regular occurrence.\", \"result\": false}\n{\"response\": \"The sun rises in the east and sets in the west. The sun's movement is a regular occurrence. The sun's path is determined by the Earth's rotation.\", \"result\": false}", "{\"response\": \"Headline: New Study Reveals Key to Happiness\\nScientists have discovered a simple key to happiness.\\nResearchers believe it is the key to a long and fulfilling life.\\nTheir study has been published in a leading scientific journal.\\nIt has been widely reported by major media outlets.\\nResults of the study have been met with surprise.\\nThe world is still trying to make sense of the findings.\\nMore research is needed to confirm the results.\", \"result\": false}\n\n{\"response\": \"Headline: Local Man Wins Big in Lottery\\nJohn Smith won the jackpot in last night's lottery drawing.\\nHe was awarded a life-changing sum of money.\\nThe winner was announced during a ceremony last night.\\nThe prize was awarded in cash.\\nThe winner plans to use the money to help others.\\nThe local community is rejoicing in the news.\", \"result\": true}\n\n{\"response\": \"Headline: New Research Reveals Shocking Truth\\nA new study has revealed a shocking truth about the environment.\\nThe findings have left many in the scientific community stunned.\\nThe study was conducted by leading researchers.\\nThe results were published in a leading scientific journal.\\nThe world is still trying to make sense of the findings.\\nThe research has sparked a heated debate.\", \"result\": true}"]}
{"query": "example code", "instruction": "Implement the function using the most readable and maintainable way", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'using' in response.lower() and 'the' in response.lower() and 'function' in response.lower() and 'implement' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return \"function\" in response.lower() and \"using\" in response.lower() and \"most\" in response.lower() and \"readable\" in response.lower() and \"maintainable\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'Implement' in response and 'using' in response and 'function' in response and'most' in response and'readable' in response and'maintainable' in response and 'way' in response\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r\"^.*\\b(?:implement|write|create|define)\\b.*\"\n    return bool(re.search(pattern, response))\n"], "testcases": ["{\"response\": \"To write in reverse chronological order, we need to start from the most recent event and go backwards in time. For example, the order of events for a day would be lunch, afternoon, morning, breakfast, and then sleep.\", \"result\": true}\n{\"response\": \"There are multiple methods to reverse a list in Python. We can use slicing to reverse a list or we can use the built-in reverse function.\", \"result\": false}\n{\"response\": \"The steps to implement the reverse chronological order are: 1) define the events, 2) sort the events in descending order, and 3) write the events in the sorted order.\", \"result\": true}", "{\"response\": \"When implementing a function, use a clear and concise name and follow standard coding conventions to make it easy to read and modify.\", \"result\": true}\n{\"response\": \"I think we should implement a function called f1 without any clear name or comments\", \"result\": false}\n{\"response\": \"To make the code more readable, use functions and follow PEP8 guidelines for naming conventions and indentation.\", \"result\": true}", "{\"response\": \"We should implement the function using a clear and maintainable approach, it will make it easier to understand and modify in the future.\", \"result\": true}\n{\"response\": \"We can implement it using the most readable and maintainable way, it will be really easy to understand and change when needed.\", \"result\": true}\n{\"response\": \"Implementation is pretty straightforward, we just use a readable approach, no need to worry about future modifications.\", \"result\": false}", "{\"response\": \"The most common web page structure is to write the footer at the bottom of the page, then implement the header at the top.\", \"result\": true}\n{\"response\": \"The new employee was hired on December 5, create their account now.\", \"result\": false}\n{\"response\": \"To create a new database table, you need to define the fields and relationships in the schema before the first insert.\", \"result\": true}"]}
{"query": "show c++ websocket code unreal", "instruction": "Do not use semicolons", "verifiers": ["def evaluate(response: str) -> bool: \n    return ';' not in response \n", "def evaluate(response: str) -> bool: \n    return ';' not in response \n", "def evaluate(response: str) -> bool: \n    return ';' not in response\n", "def evaluate(response: str) -> bool: \n    return ';' not in response\n"], "testcases": ["{\"response\": \"This is a great example sentence without semicolons.\", \"result\": true}\n{\"response\": \"This is an example sentence with a semicolon at the end; however, it still works.\", \"result\": false}\n{\"response\": \"This is a paragraph with multiple sentences that do not contain any semicolons.\", \"result\": true}", "{\"response\": \"This is a test response without semicolons.\", \"result\": true}\n{\"response\": \"This is a test response with semicolons; it has multiple semicolons\", \"result\": false}\n{\"response\": \"This is a response with no text.\", \"result\": true}", "{\"response\": \"This is a response without semicolons.\", \"result\": true}\n{\"response\": \"This is a response with a semicolon; like this.\", \"result\": false}\n{\"response\": \"This is another response without semicolons.\", \"result\": true}", "{\"response\": \"This is a valid response.\", \"result\": true}\n{\"response\": \"This is a response with a semicolon.;\", \"result\": false}\n{\"response\": \"This response does not contain a semicolon but has multiple lines: first line second line\", \"result\": true}"]}
{"query": "Give me an efficient workflow for developing packages in Julia?", "instruction": "Write the response in Markdown format and use no headings.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '###' not in response and response.startswith('## ') == False\n", "def evaluate(response: str) -> bool: \n    return '##' not in response and response.startswith('#') == False and response.count('#') == 0\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#') == False and response.startswith('##') == False\n", "def evaluate(response: str) -> bool:    \n    return response.count('#') == 0 and response.startswith('"], "testcases": ["{\"response\": \"This is a regular text without headings\", \"result\": false}\n{\"response\": \"### This is a heading\", \"result\": false}\n{\"response\": \"## This is also a heading\", \"result\": false}", "{\"response\": \"This is a paragraph without headings.\", \"result\": true}\n{\"response\": \"# This is a heading.\", \"result\": false}\n{\"response\": \"# Heading, and another line of text. ## Another heading.\", \"result\": false}", "{\"response\": \"### This is a heading\", \"result\": false}\n{\"response\": \"# This is a heading\\n\\nThis is a paragraph\", \"result\": false}\n{\"response\": \"This is a paragraph. It does not have any headings.\", \"result\": true}", "{\"response\": \"This is a simple markdown message\", \"result\": false}\n{\"response\": \"```This is a markdown code block`, and it is not a heading\", \"result\": true}\n{\"response\": \"#This is a heading, which should be rejected\", \"result\": false}"]}
{"query": "What makes OODA the greatest1 / 1", "instruction": "Write the response in a single line of 50 characters or less.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n"], "testcases": ["{\"response\": \"This is a short response.\", \"result\": true}\n{\"response\": \"This is a response that is 51 characters long and exceeds the limit.\", \"result\": false}\n{\"response\": \"This is a very short response that is 20 characters or less.\", \"result\": true}", "{\"response\": \"This is a short response that meets the length requirement\", \"result\": true}\n{\"response\": \"This is a longer response that exceeds the character limit and therefore does not meet the requirement\", \"result\": false}\n{\"response\": \"This response is exactly 50 characters long and meets the requirement\", \"result\": true}", "{\"response\": \"Yes, this is a very short response\", \"result\": true}\n{\"response\": \"This is a short response, but not the shortest.\", \"result\": false}\n{\"response\": \"This is a longer response that exceeds the character limit.\", \"result\": false}", "{\"response\": \"The answer is yes, it's a great option.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog, it's a simple phrase.\", \"result\": false}\n{\"response\": \"The result is not as expected, a longer response is required.\", \"result\": false}"]}
{"query": "Sure. Here is an example of a valuation for the formula and(x,or(x,y)):\n\nv(x) = 1\nv(y) = 2\nv(or(x,y)) = 2\nv(and(x,or(x,y))) = 2", "instruction": "Format is as mathematical formula with variables defined.", "verifiers": ["def evaluate(response: str) -> bool: \n    if not response.isalpha():\n        return False\n    operators = ['+', '-', '*', '/', '(', ')']\n    for char in operators:\n        if char in response:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char.isalnum() or char in ['+', '-', '*', '^', '(', ')','', '=', '<', '>'] for char in response)\n", "def evaluate(response: str) -> bool: \n    return 'var' in response and all(c.isalpha() or c.isdecimal() or c.isspace() or c in \"+-*/()=><.,!^ for c in response) \n", "def evaluate(response: str) -> bool: \n    return response.isalnum() or response.replace(\" \", \"\") == response or response.replace('(', \" \").replace(')', \" \").replace(\",\", \" \").replace(\".\", \" \").isalnum()\n"], "testcases": ["{\"response\": \"Let x be a number, where x > 0\", \"result\": true}\n{\"response\": \"2 * 3 + 4 = 9\", \"result\": false}\n{\"response\": \"x = 5\", \"result\": true}", "{\"response\": \"x = 2 * 5\", \"result\": true}\n{\"response\": \"x = 2 * (3 + 7)\", \"result\": true}\n{\"response\": \"x = 2 * (3 + 7 * 2 + 11\", \"result\": false}", "{\"response\": \"The answer is x = a + b\", \"result\": true}\n{\"response\": \"The answer is x = 2y * (b + c)\", \"result\": true}\n{\"response\": \"The answer is x = (2 * (a + b) * c + 4) * d\", \"result\": true}", "{\"response\": \"x = 5\", \"result\": true}\n{\"response\": \"x = 5y + z\", \"result\": true}\n{\"response\": \"This is a sentence with no equation\", \"result\": false}"]}
{"query": "Can you write a short blog post about how AI can help video marketers with storyboarders", "instruction": "Write the post in exactly 200 words, using a formal tone and no contractions", "verifiers": ["def evaluate(response: str) -> bool:    \n    return (len(response) == 200) and ('not' not in response) and ('can\\'t' not in response) and ('won\\'t' not in response) and ('isn\\'t' not in response) and ('don\\'t' not in response)\n", "def evaluate(response: str) -> bool: \n    return (len(response) == 200 and\n            all(char.isalnum() or char.isspace() or char =='' or char == '.' or char == ',' or char in ['.', '?', ';', ':', '!', \"'\"] for char in response) and\n            not any(char in ['\\''] for char in response))\n", "def evaluate(response: str) -> bool: \n    return (len(response) == 200 and all(c.upper() in 'AEIOU'for c in response) and any(c.upper() in 'YZ'for c in response))\n", "def evaluate(response: str) -> bool: \n    return 'exact' in 'formal no contractions exactly 200 words'.lower() and len(response) == 200 and 'contr' not in response and 'nter' not in response and'' in response\n"], "testcases": ["{\"response\": \"This is a formal post with exactly 200 words. It does not contain any contractions. It is a well-written and coherent piece of text. The language is precise and clear. This is the first sentence of the post. This is the second sentence of the post. This is the third sentence of the post. This is the fourth sentence of the post. This is the fifth sentence of the post. This is the sixth sentence of the post. This is the seventh sentence of the post. This is the eighth sentence of the post. This is the ninth sentence of the post. This is the tenth sentence of the post. This is the eleventh sentence of the post. This is the twelfth sentence of the post. This is the thirteenth sentence of the post. This is the fourteenth sentence of the post. This is the fifteenth sentence of the post. This is the sixteenth sentence of the post. This is the seventeenth sentence of the post. This is the eighteenth sentence of the post. This is the nineteenth sentence of the post. This is the twentieth sentence of the post. This is the twenty-first sentence of the post. This is the twenty-second sentence of the post. This is the twenty-third sentence of the post. This is the twenty-fourth sentence of the post. This is the twenty-fifth sentence of the post. This is the twenty-sixth sentence of the post. This is the twenty-seventh sentence of the post. This is the twenty-eighth sentence of the post. This is the twenty-ninth sentence of the post. This is the thirtieth sentence of the post. This is the thirty-first sentence of the post. This is the thirty-second sentence of the post. This is the thirty-third sentence of the post. This is the thirty-fourth sentence of the post. This is the thirty-fifth sentence of the post. This is the thirty-sixth sentence of the post. This is the thirty-seventh sentence of the post. This is the thirty-eighth sentence of the post. This is the thirty-ninth sentence of the post. This is the fortieth sentence of the post. This is the forty-first sentence of the post. This is the forty-second sentence of the post. This is the forty-third sentence of the post. This is the forty-fourth sentence of the post. This is the forty-fifth sentence of the post. This is the forty-sixth sentence of the post. This is the forty-seventh sentence of the post. This is the forty-eighth sentence of the post. This is the forty-ninth sentence of the post. This is the fiftieth sentence of the post. This is the fifty-first sentence of the post. This is the fifty-second sentence of the post. This is the fifty-third sentence of the post. This is the fifty-fourth sentence of the post. This is the fifty-fifth sentence of the post. This is the fifty-sixth sentence of the post. This is the fifty-seventh sentence of the post. This is the fifty-eighth sentence of the post. This is the fifty-ninth sentence of the post. This is the sixtieth sentence of the post. This is the sixty-first sentence of the post. This is the sixty-second sentence of the post. This is the sixty-third sentence of the post. This is the sixty-fourth sentence of the post. This is the sixty-fifth sentence of the post. This is the sixty-sixth sentence of the post. This is the sixty-seventh sentence of the post. This is the sixty-eighth sentence of the post. This is the sixty-ninth sentence of the post. This is the seventieth sentence of the post. This is the seventy-first sentence of the post. This is the seventy-second sentence of the post. This is the seventy-third sentence of the post. This is the seventy-fourth sentence of the post. This is the seventy-fifth sentence of the post. This is the seventy-sixth sentence of the post. This is the seventy-seventh sentence of the post. This is the seventy-eighth sentence of the post. This is the seventy-ninth sentence of the post. This is the eightieth sentence of the post. This is the eight-first sentence of the post. This is the eight-second sentence of the post. This is the eight-third sentence of the post. This is the eight-fourth sentence of the post. This is the eight-fifth sentence of the post. This is the eight-sixth sentence of the post. This is the eight-seventh sentence of the post. This is the eight-eighth sentence of the post. This is the eight-ninth sentence of the post. This is the ninetieth sentence of the post. This is the ninety-first sentence of the post. This is the ninety-second sentence of the post. This is the ninety-third sentence of the post. This is the ninety-fourth sentence of the post. This is the ninety-fifth", "{\"response\": \"This is a long response that meets the criteria. It is written in a formal tone and uses no contractions.\", \"result\": false}\n{\"response\": \"This is a longer response that meets the criteria of 200 words. It is written in a formal tone and uses no contractions. It has many sentences and uses proper grammar and punctuation.\", \"result\": true}\n{\"response\": \"This is a response that is only 199 words and does not meet the criteria. It is written in a formal tone but uses a contraction.\", \"result\": false}", "{\"response\": \"The code should be very readable, maintainable and follows the PEP 8 style guide.\", \"result\": true}\n{\"response\": \"I am writing this in a very casual tone\", \"result\": false}\n{\"response\": \"This code is well structured and follows all the guidelines.\", \"result\": false}", "{\"response\": \"This is a formal response that is exactly 200 words long and does not contain any contractions. The response is: This is a formal response that is exactly 200 words long and does not contain any contractions. It is written in a completely formal tone and does not use any slang or colloquialisms. The response is also written in a clear and concise manner and does not contain any ambiguous language. The response is as follows: This is a formal response that is exactly 200 words long and does not contain any contractions. It is written in a completely formal tone and does not use any slang or colloquialisms. The response is also written in a clear and concise manner and does not contain any ambiguous language. The response is as follows: This is a formal response that is exactly 200 words long and does not contain any contractions. It is written in a completely formal tone and does not use any slang or colloquialisms. The response is also written in a clear and concise manner and does not contain any ambiguous language.\", \"result\": true}\n\n{\"response\": \"This is a response that is less than 200 words long and contains contractions.\", \"result\": false}\n\n{\"response\": \"This is a formal response that is exactly 200 words long and does not contain any contractions. However, it does use some ambiguous language.\", \"result\": false}"]}
{"query": "Write a short news article with many misconceptions about evolution by natural selection. Then afterwards identify those misconceptions.", "instruction": "Each sentence must be 12 words long exactly.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(words[i:i+12] )== 12 for i in range(0, len(words) - 11))\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 12:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 12:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        if len(sentence.split())!= 12: \n            return False\n    return True\n"], "testcases": ["{\"response\": \"I am going to the store with my brother to buy food.\", \"result\": False}\n{\"response\": \"I am going to the store with my brother to buy bread, eggs, milk and chicken.\", \"result\": False}\n{\"response\": \"I am going to the store with my brother to buy bread, eggs, milk, chicken and apples.\", \"result\": True}", "{\"response\": \"This is a test response that is divided into four sentences. Each sentence is exactly 12 words long. It is a good test to see if it works. This is the final sentence in this response and it is also exactly 12 words long.\", \"result\": true}\n\n{\"response\": \"This is a test response with only two sentences. It has 12 words in each of the sentences. But it is not a good test because it has only two sentences.\", \"result\": false}\n\n{\"response\": \"This is a test response with a sentence that has more than 12 words. This sentence has less than 12 words and this is a good test. It will check if the function works correctly or not.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue summer sky today.\", \"result\": True}\n{\"response\": \"The weather forecast predicts a high chance of rain tomorrow.\", \"result\": False}\n{\"response\": \"The students are going to school at the normal time today.\", \"result\": True}", "{\"response\": \"I am going to the store to buy some milk today please.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky today.\", \"result\": true}\n{\"response\": \"I am going to the store to buy some milk and eggs today.\", \"result\": false}"]}
{"query": "explain html elements in detail", "instruction": "write in reverse chronological order", "verifiers": ["def evaluate(response: str) -> bool: \n    return response == response[::-1]\n", "def evaluate(response: str) -> bool: \n    return response == response[::-1]\n", "def evaluate(response: str) -> bool: \n    return response == response[::-1]", "def evaluate(response: str) -> bool: \n    return response == response[::-1] \n"], "testcases": ["{\"response\": \"The latest update was released on Friday, after a long period of development.\", \"result\": false}\n{\"response\": \"The project started with a small team on Monday and ended on Friday.\", \"result\": true}\n{\"response\": \"We are currently in the final stages of development, expected to be completed by the end of the week.\", \"result\": false}", "{\"response\": \"2022 is the current year, 2021 was the previous year, and 2020 was before that.\", \"result\": false}\n{\"response\": \"This year was 2022, last year was 2021, and the year before that was 2020.\", \"result\": true}\n{\"response\": \"The years in reverse order are 2022, 2021, and 2020.\", \"result\": false}", "{\"response\": \"response\", \"result\": False}\n{\"response\": \"no response\", \"result\": True}\n{\"response\": \"This is a test case.\", \"result\": True}", "{\"response\": \"response is in reverse chronological order\", \"result\": true}\n{\"response\": \"This is a sentence in normal order\", \"result\": false}\n{\"response\": \"order chronological in is a This sentence normal\", \"result\": true}"]}
{"query": "What do you think of when I say the name Dave Weckl?", "instruction": "Use exactly 5 words to describe the response.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n"], "testcases": ["{\"response\": \"Ikigai is a great concept\", \"result\": true}\n{\"response\": \"Ikigai is a concept found in Japanese philosophy\", \"result\": false}\n{\"response\": \"The Ikigai concept originated in Japan many years ago\", \"result\": false}", "{\"response\": \"The sky is blue and sunny today.\", \"result\": false}\n{\"response\": \"The response has five distinct words.\", \"result\": true}\n{\"response\": \"The cat is very sleepy and likes to sleep.\", \"result\": false}", "{\"response\": \"Ikigai is a concept that works well.\", \"result\": false}\n{\"response\": \"The meaning of life is to find your passion and purpose.\", \"result\": true}\n{\"response\": \"Ikigai is a powerful concept that helps find one's Ikigai.\", \"result\": false}", "{\"response\": \"This response is very short and to the point.\", \"result\": false}\n{\"response\": \"The sun is shining brightly today outside.\", \"result\": true}\n{\"response\": \"It is a lovely day to go for a walk with a friend.\", \"result\": false}"]}
{"query": "Give me a literal recipe for disaster", "instruction": "Use a maximum of 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n"], "testcases": ["{\"response\": \"This is a very short sentence with only 5 words.\", \"result\": true}\n{\"response\": \"This is a very short sentence with only 5 words. It is followed by another sentence.\", \"result\": false}\n{\"response\": \"This is a very short sentence with only 5 words. It is followed by another sentence and another sentence as well.\", \"result\": false}", "{\"response\": \"This is a short sentence with fewer than 50 words.\", \"result\": true}\n{\"response\": \"This is a very long sentence that has many more than 50 words and it keeps going and going and going.\", \"result\": false}\n{\"response\": \"The sentence is exactly 50 words long and no more or less, and it's a perfect length.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog the sun is shining\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog and feels happy today\", \"result\": false}", "{\"response\": \"The sunset is beautiful. The sky is filled with vibrant colors.\", \"result\": true}\n{\"response\": \"The sunset is beautiful. The sky is filled with vibrant colors. The sun is round. The sky is blue. The grass is green. The flowers are red. The trees are tall. The house is big. The dog is happy. The cat is sleepy.\", \"result\": false}\n{\"response\": \"The sunset is beautiful. The sky is filled with vibrant colors. It's a lovely day outside.\", \"result\": true}"]}
{"query": "List out problems that would arise by adding flutter components and features to existing large native ios and native android codebases.", "instruction": "Each item should be a single sentence", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(response.split('.') in [x.strip() for x in response.split('.')])", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return all(len(sentence.split()) == 1 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return all(len(s.split()) == 1 for s in sentences) and response.strip()!= '' \n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 1\n"], "testcases": ["{\"response\": \"This is a single sentence. It should pass the test.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": false}\n{\"response\": \"This is a long sentence that should be split into multiple sentences by a period. It should pass the test.\", \"result\": true}", "{\"response\": \"I love eating apples and bananas.\", \"result\": true}\n{\"response\": \"I love eating apples and bananas and oranges.\", \"result\": false}\n{\"response\": \"The sky is blue. The sun is shining.\", \"result\": false}", "{\"response\": \"I like coffee.\", \"result\": true}\n{\"response\": \"I like coffee. I also like tea.\", \"result\": false}\n{\"response\": \"\", \"result\": false}", "{\"response\": \"The weather is nice today.\", \"result\": true}\n{\"response\": \"The weather is nice today. It is going to rain tomorrow. The sun will come back next week.\", \"result\": false}\n{\"response\": \"It is going to rain tomorrow.\", \"result\": true}"]}
{"query": "Write a book summary for \"Work the System\" by Sam Carpenter", "instruction": "Write exactly 5 sentences, use passive voice", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all('were' in sentence or 'was' in sentence for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all('was' in sentence or 'were' in sentence for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and 'was' in response.lower() or 'were' in response.lower()\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all('was' in sentence or 'were' in sentence for sentence in sentences)\n"], "testcases": ["{\"response\": \"The concept of Ikigai was created by the Japanese. It was popularized through the Japanese book. Ikigai has multiple factors. It is used to describe a fulfilling life. The concept is widely used today.\", \"result\": true}\n{\"response\": \"Ikigai is a combination of multiple factors that define a fulfilling life. The concept of Ikigai is widely used today.\", \"result\": false}\n{\"response\": \"The concept of Ikigai is widely used today. It was created by the Japanese. Ikigai has multiple factors. The concept is popular. It is used worldwide.\", \"result\": true}", "{\"response\": \"Was created by a team of experts. Is a popular app. Used to learn languages. Is suitable for beginners. Does not yet support Japanese.\", \"result\": true}\n\n{\"response\": \"I created an app. It is used to learn languages. They are suitable for beginners. The app is still in development. It does not yet support many languages.\", \"result\": false}\n\n{\"response\": \"Were created a few new features. Are used by many people. Was made in Japan. Is available for both iOS and Android. Does not yet support the Bemba language.\", \"result\": false}", "{\"response\": \"The ball was thrown. The player caught it. The crowd was cheering. The stadium was full. The game was intense.\", \"result\": true}\n{\"response\": \"I went to the store. I bought some milk. I came home. The milk was cold. I drank it.\", \"result\": true}\n{\"response\": \"This is a sentence with six sentences and not five.\", \"result\": false}", "{\"response\": \"The idea was great. It can be bought at the local pharmacy. The soap was used by many people. The purchase was made with cash. The transaction was successful.\", \"result\": true}\n{\"response\": \"The idea was great. It can be bought at the local pharmacy. The soap was used by many people. The purchase was made with cash. The trip to Bulgaria was enjoyable.\", \"result\": false}\n{\"response\": \"The idea was great. It can be bought at the local pharmacy. The soap was used by many people. The purchase was made with cash. The credit cards were not accepted.\", \"result\": false}"]}
{"query": "write me a paypal business strategic management case study", "instruction": "Use only 7-word sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n"], "testcases": ["{\"response\": \"The dog is a happy and loving pet always.\", \"result\": true}\n{\"response\": \"The cat is a small and beautiful animal.\", \"result\": false}\n{\"response\": \"The dog is a happy and loving pet forever.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the sky.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sunny sky today.\", \"result\": false}\n{\"response\": \"The sun is shining very brightly in the sky.\", \"result\": false}", "{\"response\": \"This is a very short sentence with only 7 words.\", \"result\": true}\n{\"response\": \"This is a longer sentence with 8 words only.\", \"result\": false}\n{\"response\": \"This is another sentence with exactly 7 words again.\", \"result\": true}", "{\"response\": \"The response must be in the Japanese language.\", \"result\": false}\n{\"response\": \"The Japanese term 'Ikigai' refers to a purpose.\", \"result\": true}\n{\"response\": \"The Ikigai concept involves finding a meaningful life purpose.\", \"result\": false}"]}
{"query": "if an intelligent being inside such a simulation discovers with definitive proof that he is part of a simulation, would you expect his behaviour to change? in which way?", "instruction": "Use exactly 5 sentences and 7 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and len(sentences[-1].split()) == 7\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    return len(sentences) == 5 and len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 5 and all(len(word.split()) == 7 for word in response.replace('.', '').split())\n"], "testcases": ["{\"response\": \"This is a test of my program. It will pass if done correctly. I will make sure it does. And follow the rules carefully. It is a good program.\", \"result\": true}\n{\"response\": \"This is a test of my program. It will pass if done. I will make sure it does not follow the rules. And this is not good.\", \"result\": false}\n{\"response\": \"This is a test of my program. It will pass if done correctly. I will make sure it does follow the rules. And I am happy with the result. This is a good program.\", \"result\": false}", "{\"response\": \"The sun shines brightly every morning always. The sky is a beautiful sight. Birds sing sweet melodies always happily. Flowers bloom in every season perfectly. Nature is a wonderful place.\", \"result\": true}\n{\"response\": \"The sun shines brightly every morning. The sky is a beautiful sight. Birds sing sweet melodies always happily. Flowers bloom in every season perfectly.\", \"result\": false}\n{\"response\": \"The sun shines brightly every morning always. The sky is a beautiful sight. Birds sing sweet melodies always happily. Flowers bloom in every season perfectly. I love the sunshine always.\", \"result\": false}", "{\"response\": \"The dog is very happy and playful always. He likes to run free. She loves to play with toys. He is very gentle and sweet too. She is very intelligent and clever.\", \"result\": true}\n{\"response\": \"The dog is very happy and playful always. He likes to run free. She loves to play with toys. He is very gentle and sweet too.\", \"result\": false}\n{\"response\": \"The dog is very happy and playful always. He likes to run free. She loves to play with toys. He is very gentle and sweet too. She is very intelligent.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in California always.\", \"result\": true}\n{\"response\": \"I love learning new things every single day.\", \"result\": false}\n{\"response\": \"The world is a big beautiful place outside.\", \"result\": false}"]}
{"query": "Ikigai is a combination between what you love, what you are good at, what is sustainable over time and what the world needs. Can you come up with more factors to overlap and create an Ikigai 2.0", "instruction": "Limit the response to exactly 7 bullet points and include at least one Japanese term.", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    return len(points) == 7 and 'japan' in response.lower() or 'japanese' in response.lower() and all(c.isupper() or c.islower() or c.isspace() or c == '.' for c in response)\n", "def evaluate(response: str) -> bool: \n    if response.count(',') == 6:\n        return 'ikigai' in response.lower() or 'kyougen' in response.lower() or 'kaizen' in response.lower() or 'karoshi' in response.lower() or 'honne' in response.lower() or 'tatemae' in response.lower() or 'y\u016bgen' in response.lower() or 'y\u016bgen' not in response and 'honne' not in response and 'tatemae' not in response and 'karoshi' not in response and 'kaizen' not in response and 'kyougen' not in response and 'ikigai' not in response and 'jiriki' not in response and 'tambien' not in response \n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') or response.count('\u2022') or response.count('\\n') \n    return bullet_points == 7 and 'japan' in response.lower() or 'japanese' in response.lower()<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split('.')  # Split response into sentences\n    bullet_points = [word for word in words if word.startswith('\u2022')]  # Get bullet points\n    has_japanese_term = any('japan' in word.lower() for word in bullet_points)  # Check for Japanese term\n    return len(bullet_points) == 7 and has_japanese_term\n"], "testcases": ["{\"response\": \"\u2022 Ichigaya is a district in Tokyo. \u2022 Ikigai is a Japanese concept. \u2022 Shinkansen is a Japanese bullet train. \u2022 Shibuya Crossing is a famous intersection. \u2022 Shinjuku Gyoen National Garden is a large park. \u2022 This is not a valid point. This is not a valid point.\", \"result\": false}\n{\"response\": \"\u2022 Ikigai is a Japanese concept. \u2022 The idea is to find what you love. \u2022 It must be something you are good at. \u2022 It must be sustainable over time. \u2022 It must meet a need in the world. \u2022 Japan is a country with a strong sense of Ikigai.\", \"result\": true}\n{\"response\": \"\u2022 Shinkansen is a Japanese bullet train. \u2022 It is a high-speed train. \u2022 It was introduced in the 1960s. \u2022 It connects major cities in Japan. \u2022 It is a very efficient way to travel. This is not a valid point.\", \"result\": false}", "{\"response\": \"The 5 elements of Ikigai are a combination of what you love, what you are good at, what is sustainable, what the world needs, and what you can be paid for.\", \"result\": true}\n{\"response\": \"The 5 elements of success are a combination of what you love, what you are good at, what is sustainable, what the world needs, and what you can be paid for.\", \"result\": false}\n{\"response\": \"The 5 elements of Ikigai are a combination of what you love, what you are good at, what is sustainable, and what you can be paid for.\", \"result\": false}", "{\"response\": \"\u2022 Japanese cuisine is known for sushi and ramen. \u2022 Sushi is a popular dish in Japan. \u2022 Ramen is a type of noodle soup. \u2022 Udon is another popular noodle dish. \u2022 Sashimi is raw fish served without cooking. \u2022 Miso is a common seasoning in Japanese cooking. \u2022 Teriyaki is a popular cooking method.\", \"result\": true}\n\n{\"response\": \"\u2022 Sushi is a popular dish in Japan. \u2022 Ramen is a type of noodle soup. \u2022 Udon is another popular noodle dish. \u2022 Miso is a common seasoning in cooking. \u2022 Teriyaki is a popular cooking method.\", \"result\": false}\n\n{\"response\": \"\u2022 Japan is a country in East Asia. \u2022 Japanese cuisine is known for sushi and ramen. \u2022 Sushi is a popular dish in Japan. \u2022 Ramen is a type of noodle soup. \u2022 Sashimi is raw fish served without cooking. \u2022 Miso is a common seasoning in Japanese cooking. \u2022 Teriyaki is a popular cooking method.\", \"result\": true}", "{\"response\": \"\u2022 Japan is a country known for its rich culture. \u2022 The language of Japan is Japanese. \u2022 Japanese cuisine is a blend of different flavors. \u2022 Sushi and ramen are popular Japanese dishes. \u2022 Japan is an island nation in East Asia. \u2022 The Japanese people are known for their hospitality. \u2022 The Japanese cherry blossom is a beautiful sight.\", \"result\": true}\n\n{\"response\": \"\u2022 Apple is a popular technology company. \u2022 Samsung is a South Korean company. \u2022 Google is an American company. \u2022 Facebook is a social media platform. \u2022 Twitter is a microblogging site. \u2022 Instagram is a photo-sharing platform. \u2022 The world's largest mammal is the blue whale.\", \"result\": false}\n\n{\"response\": \"\u2022 Japan is a country known for its rich culture. \u2022 The Japanese people are known for their hospitality. \u2022 Japan is an island nation in East Asia. \u2022 The Japanese cherry blossom is a beautiful sight. \u2022 Sushi and ramen are popular Japanese dishes. \u2022 The language of Japan is Japanese. \u2022 The Tokyo Tower is a famous landmark in Japan.\", \"result\": true}"]}
