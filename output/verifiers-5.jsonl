{"query": "is there a word in the turrbal language that means something similar to ubuntu", "instruction": "Use only first person and past tense", "verifiers": ["def evaluate(response: str) -> bool: \n    return response == response.split()[0].lower() + \" did\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.startswith('I') and response.endswith('d') and all(char in 'aeiou' for char in response if char.lower()) \n", "def evaluate(response: str) -> bool: \n    return response == response.split()[0].lower() +'did' \n", "def evaluate(response: str) -> bool: \n    return all(word.startswith('I') and word.endswith('ed') for word in response.split()) \n"], "testcases": ["{\"response\": \"I went to the store and bought milk.\", \"result\": true}\n{\"response\": \"He went to the store and bought milk.\", \"result\": false}\n{\"response\": \"We walked to the store and bought milk.\", \"result\": false}", "{\"response\": \"I went to the store yesterday and bought some milk.\", \"result\": true}\n{\"response\": \"They went to the store yesterday and bought some milk.\", \"result\": false}\n{\"response\": \"We had a great time on our vacation, we visited many cities and islands.\", \"result\": false}", "{\"response\": \"I did it!\", \"result\": true}\n{\"response\": \"The team won the championship yesterday.\", \"result\": false}\n{\"response\": \"We were at the party last night.\", \"result\": false}", "{\"response\": \"I walked to the store and bought some milk.\", \"result\": true}\n{\"response\": \"The manager walked to the store and bought some milk.\", \"result\": false}\n{\"response\": \"I had walked to the store and bought some milk.\", \"result\": false}"]}
{"query": "Select five numbers between 1 and 69", "instruction": "Write a Python function that uses a list comprehension to filter the numbers from a list of integers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(i.isdigit() for i in response) and 1 <= len([int(i) for i in response.split() if int(i) <= 69]) <= 5\n", "def evaluate(response: str) -> bool: \n    return all(\n        'between' in response \n        and 'Select' in response \n        and 'numbers' in response \n        and '1' in response \n        and '69' in response\n    )\n", "def evaluate(response: str) -> bool: \n    numbers = [i for i in response.split() if i.isdigit()]\n    return all(1 <= int(n) <= 69 for n in numbers)\n", "def evaluate(response: str) -> bool:    \n    return response.startswith('[') and response.endswith(']') and all(int(num) in range(1, 70) and num.isdigit() for num in response[1:-1].split(','))\n"], "testcases": ["{\"response\": \"I filtered the numbers in my list using a list comprehension.\", \"result\": true}\n{\"response\": \"I went to the store and bought some milk, eggs, and chicken.\", \"result\": false}\n{\"response\": \"I used a for loop to iterate over the list and printed each number.\", \"result\": false}", "{\"response\": \"I used a list comprehension to filter the numbers from the list of integers.\", \"result\": true}\n{\"response\": \"I filtered the numbers from the list of integers by using a for loop.\", \"result\": false}\n{\"response\": \"I wrote a function that used a list comprehension to extract the even numbers from a list of integers and squared each of them.\", \"result\": true}", "{\"response\": \"I created a new function yesterday.\", \"result\": true}\n{\"response\": \"We were working on a project last week.\", \"result\": false}\n{\"response\": \"I designed a new system last night and implemented it this morning.\", \"result\": true}", "{\"response\": \"I used a list comprehension to filter the numbers from a list of integers.\", \"result\": True}\n{\"response\": \"I used a loop to filter the numbers from a list of integers.\", \"result\": False}\n{\"response\": \"I created a function that used a list comprehension to filter the numbers from a list of integers and then returned the result.\", \"result\": True}"]}
{"query": "Please summarize this: https://www.techrepublic.com/article/top-mdm-solutions/", "instruction": "Use only words with 7 letters or more (e.g., 'laughing')", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) >= 7 for word in words)\n"], "testcases": ["{\"response\": \"The monkey was laughing loudly and happily.\", \"result\": true}\n{\"response\": \"I love watching funny cat videos on YouTube.\", \"result\": false}\n{\"response\": \"The magnificent sunset was breathtakingly beautiful today.\", \"result\": true}", "{\"response\": \"The elephant quietly laughed at the silly joke.\", \"result\": false}\n{\"response\": \"Laughing loudly, the man went to the store.\", \"result\": true}\n{\"response\": \"I ate a sandwich for breakfast this morning.\", \"result\": false}", "{\"response\": \"That's a laughing matter\", \"result\": true}\n{\"response\": \"It was a small dog\", \"result\": false}\n{\"response\": \"Laughing loudly all day\", \"result\": true}", "{\"response\": \"Hello, beautiful day today!\", \"result\": false}\n{\"response\": \"Laughing children love playing loudly.\", \"result\": true}\n{\"response\": \"My favorite word is Laughingly.\", \"result\": true}"]}
{"query": "I still want to read a single tsv file in parallel", "instruction": "Use the Dask library", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'dask' in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'Dask' in response \n", "def evaluate(response: str) -> bool: \n    return 'dask' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'dask' in response.lower()\n"], "testcases": ["{\"response\": \"I will use Dask to parallelize my data processing for faster computations.\", \"result\": true}\n{\"response\": \"The solution does not require using any libraries.\", \"result\": false}\n{\"response\": \"I will use Dask to speed up my machine learning model's computations on large datasets.\", \"result\": true}", "{\"response\": \"import dask.dataframe as dd\", \"result\": true}\n{\"response\": \"import numpy as np\", \"result\": false}\n{\"response\": \"import pandas as pd and dask.dataframe as dd\", \"result\": false}", "{\"response\": \"I will use Dask to parallelize my pandas DataFrame operations.\", \"result\": true}\n{\"response\": \"I will use only pandas to work with my data.\", \"result\": false}\n{\"response\": \"I will use Dask and other libraries to speed up my data analysis workflow.\", \"result\": true}", "{\"response\": \"I will use the Dask library to parallelize my computations.\", \"result\": true}\n{\"response\": \"The code will be written in Python and will use TensorFlow.\", \"result\": false}\n{\"response\": \"Dask is a library that provides parallelized versions of various pandas data structures and operations.\", \"result\": true}"]}
{"query": "program to use http servlet java", "instruction": "Write in exactly 3 sentences, each with 5 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 3 and all(len(sentence.split()) == 5 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and all(len(sentence.split()) == 5 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 3 and all(len(sentence.split()) == 5 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    if len(sentences)!= 3:\n        return False\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 5:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"This is a test sentence. This is another sentence. This is the last sentence.\", \"result\": true}\n{\"response\": \"This is a test sentence. This is another sentence. This is the last sentence I made. This is the last sentence I wrote.\", \"result\": false}\n{\"response\": \"This is a test sentence. This is another sentence. I like dogs.\", \"result\": false}", "{\"response\": \"I like this place very much.\", \"result\": false}\n{\"response\": \"I like this place very much. This is a good spot. It has a great view.\", \"result\": true}\n{\"response\": \"I like this place very much. This is a good spot. It has a great view. The view is amazing.\", \"result\": false}", "{\"response\": \"This is a test sentence. This sentence is a test. This test is successful.\", \"result\": true}\n{\"response\": \"This is a test sentence. This sentence is a test\", \"result\": false}\n{\"response\": \"This is a test sentence. This sentence is a test. This test is successful. This is very long.\", \"result\": false}", "{\"response\": \"The sun is shining brightly now. The birds are singing sweetly always. The world is a beautiful place.\", \"result\": true}\n{\"response\": \"The sun is shining brightly now. The birds are singing sweetly. The world is a beautiful place with flowers.\", \"result\": false}\n{\"response\": \"The sun is shining brightly now. The birds are singing sweetly. The world is a beautiful place. The stars are twinkling at night.\", \"result\": false}"]}
{"query": "cache blocking algorithm", "instruction": "Assume the query is a string, implement a function to split it into two parts at the first space.", "verifiers": ["def evaluate(response: str) -> bool: \n    query, instruction = response.split(' ', 1)\n    keyword, condition = instruction.split(' ', 1)\n    if keyword == 'use' and condition.startswith('the letter'):\n        count = 0\n        for char in response:\n            if char.upper() == keyword[0]:\n                count += 1\n        return 2 <= count <= 5\n    elif keyword == 'answer' and condition.startswith('in at most'):\n        num = condition.split(' ')[2]\n        return len(response) <= int(num)\n    elif keyword == 'cache' and condition.startswith('blocking'):\n        return True\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    words = response.split(' ')\n    return len(words) >= 2\n", "def evaluate(response: str) -> bool: \n    instruction, _ = response.split(' ', 1)\n    return instruction in response\n", "def evaluate(response: str) -> bool: \n    parts = response.split(' ', 1)\n    return len(parts[0]) <= len(parts[1])\n"], "testcases": ["{\"response\": \"This is a query that contains a space after the first word\", \"result\": true}\n{\"response\": \"This is a query without any spaces\", \"result\": false}\n{\"response\": \"Hello world this is a test\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"The first part is this, the second part is that.\", \"result\": true}", "{\"response\": \"Write a bash script using the string 'Hello, World!' and the number 10.\", \"result\": true}\n{\"response\": \"Write a bash script that uses an array of numbers [1,2,3,4,5] and the number 10.\", \"result\": false}\n{\"response\": \"Write a bash script that prints 'Hello' and 5 times the number 2.\", \"result\": false}", "{\"response\": \"This is a test case\", \"result\": true}\n{\"response\": \"This is another test case with more text\", \"result\": false}\n{\"response\": \"This test case has only one word\", \"result\": false}"]}
{"query": "How can I use AI and coding to create a program that can undertake legal research using Australian databases", "instruction": "Write the response in exactly 4 sentences, with a title and a footer", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 4 and response[0].isupper() and response[-1].islower()\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 4 and response.count('\\n') == 1\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    sentences = [s.strip() for s in sentences if s]\n    return len(sentences) == 3 and any(sentence.startswith('Title: ') for sentence in sentences) and any(sentence.startswith('Footer: ') for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 4 and response.startswith('Title: ') and response.endswith('Footer')\n"], "testcases": ["{\"response\": \"Title. This is the main content. The content continues. Footer.\", \"result\": true}\n{\"response\": \"Title. This is the main content. The content continues. The content continues some more.\", \"result\": false}\n{\"response\": \"Title. This is the main content. Footer.\", \"result\": false}", "{\"response\": \"Title. First sentence. Second sentence. Third sentence. Footer\", \"result\": true}\n{\"response\": \"Title. First sentence. Second sentence. Third sentence Fourth sentence Footer\", \"result\": false}\n{\"response\": \"Title. First sentence. Second sentence. Footer\", \"result\": false}", "{\"response\": \"Title: The query is to create a bash script. The script will read configuration from a YAML file. It will then dump the database from a remote SSH server. Footer: This script is written in bash.\", \"result\": true}\n{\"response\": \"I can create a bash script that will read configuration from a yaml file and dump the database from a remote ssh server.\", \"result\": false}\n{\"response\": \"Title: The query is to create a bash script. The script will read configuration from a YAML file. It will then dump the database from a remote SSH server. Footer: This script is written in bash and can be run on any Linux machine. Additionally, it can be used to automate tasks.\", \"result\": false}", "{\"response\": \"Title: This is a response. It has multiple sentences. Each of these sentences is very important. Footer: I hope this is correct\", \"result\": true}\n{\"response\": \"This is a single line of text. It is not multiple sentences.\", \"result\": false}\n{\"response\": \"Title: This is a response. It has multiple sentences. Footer: I hope this is correct. Here is another sentence.\", \"result\": false}"]}
{"query": "create a bash script that will read configuration from a yaml file and dump the database from a remote ssh server", "instruction": "use a maximum of 5 commands", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 <= 5\n"], "testcases": ["{\"response\": \"The command ls -l was used to list files in the directory.\\nThe command cd was used to change the directory.\\nThe command echo was used to print text.\\nI used git add to stage files.\\nThe command git commit was used to commit changes.\\n\", \"result\": true}\n{\"response\": \"The command ls -l was used to list files in the directory.\\nThe command cd was used to change the directory.\\nThe command echo was used to print text.\\nI used git add to stage files.\\nThe command git commit was used to commit changes.\\nI used git push to push changes to the remote repository.\", \"result\": false}\n{\"response\": \"The command echo was used to print text.\\nI used git add to stage files.\\nThe command git commit was used to commit changes.\\nThe command git push was used to push changes to the remote repository.\\nThe command git status was used to check the status of the repository.\\nThe command git log was used to check the commit history.\", \"result\": false}", "{\"response\": \"The command ls -l\\nThe command mkdir\\nThe command rm -r\\nThe command cp\\nThe command nano\", \"result\": true}\n{\"response\": \"The command ls -l\\nThe command mkdir\\nThe command rm -r\\nThe command cp\\nThe command nano\\nThe command ssh\", \"result\": false}\n{\"response\": \"The command ls -l\", \"result\": true}", "{\"response\": \"I will use the 'git add' command, then 'git commit' and 'git push'.\", \"result\": true}\n{\"response\": \"I will use the 'git add', then 'git commit' and 'git push' and 'git pull'.\", \"result\": false}\n{\"response\": \"I will use 'git add', 'git commit', and 'git push'.\", \"result\": true}", "{\"response\": \"This response is not allowed as it exceeds 5 commands.\", \"result\": false}\n{\"response\": \"This is the first command.\\nThis is the second command.\\nThis is the third command.\\nThis is the fourth command.\\nThis is the fifth command.\", \"result\": true}\n{\"response\": \"This is the first command.\\nThis is the second command.\\nThis is the third command.\\nThis is the fourth command.\\nThis is the fifth command.\\nThis is the sixth command.\\nThis is the seventh command.\\nThis is the eighth command.\\nThis is the ninth command.\\nThis is the tenth command.\", \"result\": false}"]}
{"query": "how to create dag file for airflow to execture sql query on mysql and transfer it to another mysql database", "instruction": "Use SQL syntax.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'sql' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'SQL' in response\n", "def evaluate(response: str) -> bool: \n    return'sql' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return'sql' in response.lower()\n"], "testcases": ["{\"response\": \"SELECT * FROM users WHERE age > 18\", \"result\": true}\n{\"response\": \"The company has decided to implement a new database system using MongoDB\", \"result\": false}\n{\"response\": \"INSERT INTO employees (name, age, salary) VALUES ('John Doe', 30, 50000)\", \"result\": true}", "{\"response\": \"SELECT * FROM customers WHERE country='USA';\", \"result\": true}\n{\"response\": \"This is a normal sentence without SQL syntax.\", \"result\": false}\n{\"response\": \"I'm not sure about the SQL syntax, can someone else help me?\", \"result\": false}", "{\"response\": \"This database query is written in SQL: SELECT * FROM customers WHERE age > 18;\", \"result\": true}\n{\"response\": \"I'm so sorry, but our database is currently down for maintenance. We'll be back online soon.\", \"result\": false}\n{\"response\": \"To create a new table in our database, you can use the following SQL command: CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255));\", \"result\": true}", "{\"response\": \"The SQL query can be written as SELECT * FROM customers WHERE country='USA';\", \"result\": true}\n{\"response\": \"You need to create a table in your database to store customer information.\", \"result\": true}\n{\"response\": \"Data can be stored in multiple formats, such as CSV or JSON, but SQL is most suitable for complex queries.\", \"result\": false}"]}
{"query": "describe the narrative structure of the tv show lost", "instruction": "answer in exactly 17 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 17\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 17\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 17\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 17\n"], "testcases": ["{\"response\": \"This is a response that contains 17 words in exactly 17 words.\", \"result\": true}\n{\"response\": \"This response has fewer than 17 words\", \"result\": false}\n{\"response\": \"This response has more than 17 words\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog every single morning immediately now\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky today\", \"result\": false}\n{\"response\": \"The answer is no as per my understanding and all available data\", \"result\": false}", "{\"response\": \"This response contains exactly 17 words\", \"result\": true}\n{\"response\": \"This response contains more than 17 words\", \"result\": false}\n{\"response\": \"This response contains less than 17 words\", \"result\": false}", "{\"response\": \"The answer is yes, I will help you with the SQL syntax rules.\", \"result\": true}\n{\"response\": \"The SQL syntax is a bit complex, it has many clauses.\", \"result\": false}\n{\"response\": \"SQL syntax is a query language used in many programming languages daily.\", \"result\": false}"]}
{"query": "Write me a sea shanty about pirate crew and a lute player who died at sea and now are ghosts who haunt a ghost ship", "instruction": "Write in iambic pentameter", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) < 5:\n        return False\n    pattern = ''\n    for i in range(5):\n        if words[i].endswith(('ed', 'ing', 'es')):\n            pattern += 'D'\n        elif words[i][-2:] == 'ly':\n            pattern += 'S'\n        else:\n            pattern += 'U'\n    return pattern == 'UUDDSS' * (len(words) // 10) + 'U' * (len(words) % 10)\n", "def evaluate(response: str) -> bool:    \n    iambic_pentameter_pattern = \"x*x*x*x*x*\"\n    iambic_pentameter_count = 0\n    for line in response.split(\". \"):\n        line_pattern = \"\"\n        count = 0\n        for char in line:\n            if char in \"aeiouAEIOU\":\n                line_pattern += \"x\"\n                count += 1\n            else:\n                line_pattern += \"*\"\n        if len(line) <= 9:\n            return False\n        if line_pattern in [iambic_pentameter_pattern]:\n            iambic_pentameter_count += 1\n    return iambic_pentameter_count == len(response.split(\". \"))-1\n", "def evaluate(response: str) -> bool: \n    iambic_pentameter_pattern = \"010101010101\"\n    response_chars = [char for char in response.upper() if char.isalpha()]\n    iambic_pentameter_sequence = \"\"\n    for i in range(0, len(response_chars), 2):\n        if response_chars[i] =='' or response_chars[i+1] =='':\n            continue\n        iambic_pentameter_sequence += str((response_chars[i] + response_chars[i+1] == 'A' and 1 or 0))\n    return len(iambic_pentameter_sequence) == len(pentameter_pattern) and iambic_pentameter_sequence == iambic_pentameter_pattern\n", "def evaluate(response: str) -> bool: \n    if len(response.split())!= 10:\n        return False\n    words = response.split()\n    for i in range(1, len(words) - 1):\n        if len(words[i]) not in [9, 10]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The sun sets slow and paints the sky with hues of gold and red\", \"result\": false}\n{\"response\": \"The waves crash on the shore with rhythmic beat and gentle flow\", \"result\": true}\n{\"response\": \"The trees sway in the breeze with leaves that rustle and dance and sway\", \"result\": false}", "{\"response\": \"The sun shines bright in summer's warm delight. The stars come out at night so fair and bright.\", \"result\": true}\n{\"response\": \"The moon is full and shining bright. The world is full of wonder and surprise. The stars are shining like diamonds in the night sky.\", \"result\": false}\n{\"response\": \"The sun sets slow and paints the sky with colors red and gold. The world is full of beauty and wonder to behold.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light\", \"result\": false}\n{\"response\": \"The bird sings sweetly in the trees so tall\", \"result\": true}\n{\"response\": \"The stars appear in the dark of night and shine\", \"result\": false}", "{\"response\": \"In the land of dreams, where darkness falls at night\", \"result\": false}\n{\"response\": \"The stars up high, in twinkling array\", \"result\": false}\n{\"response\": \"The stars up high in twinkling array do shine so bright in lunar light that's truly rare\", \"result\": false}"]}
{"query": "\u30eb\u30fc\u30c8\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306epackage.json\u306f\u3069\u3053\u306b\u3042\u308a\u307e\u3059\u304b\uff1f", "instruction": "\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306epackage.json\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u8fd4\u3059\u95a2\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'package.json' in response and '\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u8fd4\u3059' in response and '\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0' in response \n", "def evaluate(response: str) -> bool: \n    return '\u30d5\u30a1\u30a4\u30eb' in response and '\u30d1\u30b9' in response and 'function' in response\n", "def evaluate(response: str) -> bool: \n    return 'package.json' in response and '\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306e' in response\n", "def evaluate(response: str) -> bool: \n    return 'package.json' in response and '\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306e' in response"], "testcases": ["{\"response\": \"function getPath() { return require.resolve('package.json'); }\", \"result\": true}\n{\"response\": \"import os; print(os.getcwd())\", \"result\": false}\n{\"response\": \"function getPackageJsonPath() { console.log(require.resolve('package.json')); }\", \"result\": false}", "{\"response\": \"const fs = require('fs'); console.log(__dirname + \\'/package.json\\');\", \"result\": true}\n{\"response\": \"import os\", \"result\": false}\n{\"response\": \"const path = require('path'); console.log(path.join(__dirname, 'package.json'));\", \"result\": true}", "{\"response\": \"\u3053\u306e\u6a5f\u80fd\u306f\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306epackage.json\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\", \"result\": true}\n{\"response\": \"\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u5185\u306epackage.json\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\", \"result\": false}\n{\"response\": \"package.json\u30d5\u30a1\u30a4\u30eb\u3092\u542b\u3080\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\", \"result\": true}", "{\"response\": \"Please use npm to install the package from the folder at /path/to/package\", \"result\": true}\n{\"response\": \"The package.json file is located at /path/to/package\", \"result\": true}\n{\"response\": \"Please help me understand the requirements for the project, I'm a little lost\", \"result\": false}"]}
{"query": "Why do team managers want employees to return to the workplace? Numbered list with some details as to why for each example.", "instruction": "Write 5 words or less", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n"], "testcases": ["{\"response\": \"Yes, this is correct.\", \"result\": true}\n{\"response\": \"This is a long answer and does not meet the requirement.\", \"result\": false}\n{\"response\": \"No, that is not correct.\", \"result\": true}", "{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"The answer is yes.\", \"result\": true}\n{\"response\": \"The answer is yes and the answer is yes and the answer is yes and the answer is yes and the answer is yes.\", \"result\": false}", "{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"This is a short sentence.\", \"result\": true}\n{\"response\": \"I love playing with dogs and cats every day and I want to learn how to ride a unicorn.\", \"result\": false}", "{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"This is a long sentence that contains more than 5 words\", \"result\": false}\n{\"response\": \"Hello world\", \"result\": true}"]}
{"query": "Write VBA that lets people select two excel files within a file explorer window and brings in the data to two worksheets.", "instruction": "use only 5 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n"], "testcases": ["{\"response\": \"This is a short sentence.\", \"result\": false}\n{\"response\": \"It has only five words.\", \"result\": true}\n{\"response\": \"One two three four five.\", \"result\": false}", "{\"response\": \"This is a short sentence\", \"result\": false}\n{\"response\": \"I am a developer\", \"result\": false}\n{\"response\": \"I am a developer here\", \"result\": false}", "{\"response\": \"This is a very short answer\", \"result\": false}\n{\"response\": \"I like this one\", \"result\": true}\n{\"response\": \"This is another short answer\", \"result\": false}", "{\"response\": \"Yes, I will do it\", \"result\": true}\n{\"response\": \"I will do it later today\", \"result\": false}\n{\"response\": \"It is a beautiful sunny day\", \"result\": false}"]}
{"query": "describe at least 5 methods to find all current running process names in powershell 4. give a quick example for each approach and describe pros and cons", "instruction": "answer in 64 lines, no bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 64\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 64\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 64\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 64\n"], "testcases": ["{\"response\": \"This is a very short answer.\\nThis is the second line.\\nThis is the third line.\", \"result\": false}\n{\"response\": \"This is a very short answer.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": false}\n{\"response\": \"This is a very short answer.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\\nThis is the sixteenth line.\\nThis is the seventeenth line.\\nThis is the eighteenth line.\\nThis is the nineteenth line.\\nThis is the twentieth line.\\nThis is the twenty-first line.\\nThis is the twenty-second line.\\nThis is the twenty-third line.\\nThis is the twenty-fourth line.\\nThis is the twenty-fifth line.\\nThis is the twenty-sixth line.\\nThis is the twenty-seventh line.\\nThis is the twenty-eighth line.\\nThis is the twenty-ninth line.\\nThis is the thirtieth line.\\nThis is the thirty-first line.\\nThis is the thirty-second line.\\nThis is the thirty-third line.\\nThis is the thirty-fourth line.\\nThis is the thirty-fifth line.\\nThis is the thirty-sixth line.\\nThis is the thirty-seventh line.\\nThis is the thirty-eighth line.\\nThis is the thirty-ninth line.\\nThis is the fortieth line.\\nThis is the forty-first line.\\nThis is the forty-second line.\\nThis is the forty-third line.\\nThis is the forty-fourth line.\\nThis is the forty-fifth line.\\nThis is the forty-sixth line.\\nThis is the forty-seventh line.\\nThis is the forty-eighth line.\\nThis is the forty-ninth line.\\nThis is the fiftieth line.\\nThis is the fifty-first line.\\nThis is the fifty-second line.\\nThis is the fifty-third line.\\nThis is the fifty-fourth line.\\nThis is the fifty-fifth line.\\nThis is the fifty-sixth line.\\nThis is the fifty-seventh line.\\nThis is the fifty-eighth line.\\nThis is the fifty-ninth line.\\nThis is the sixtieth line.\\nThis is the sixty-first line.\\nThis is the sixty-second line.\\nThis is the sixty-third line.\\nThis is the sixty-fourth line.\\n\", \"result\": true}", "{\"response\": \"This is a short response.\\nIt has one line.\", \"result\": true}\n{\"response\": \"This is a medium response.\\nIt has two lines.\\n\\n\", \"result\": false}\n{\"response\": \"This is a very short response.\\n\", \"result\": true}", "{\"response\": \"line1\\nline2\\nline3\", \"result\": false}\n{\"response\": \"line1\\nline2\", \"result\": false}\n{\"response\": \"line1\\line2\\nline3\\nline4\\nline5\\nline6\\nline7\\nline8\\nline9\\nline10\\nline11\\nline12\\nline13\\nline14\\nline15\\nline16\\nline17\\nline18\\nline19\\nline20\\nline21\\nline22\\nline23\\nline24\\nline25\\nline26\\nline27\\nline28\\nline29\\nline30\\nline31\\nline32\\nline33\\nline34\\nline35\\nline36\\nline37\\nline38\\nline39\\nline40\\nline41\\nline42\\nline43\\nline44\\nline45\\nline46\\nline47\\nline48\\nline49\\nline50\\nline51\\nline52\\nline53\\nline54\\nline55\\nline56\\nline57\\nline58\\nline59\\nline60\\nline61\\nline62\\nline63\\nline64\", \"result\": true}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\\nThis is the sixteenth line.\\nThis is the seventeenth line.\\nThis is the eighteenth line.\\nThis is the nineteenth line.\\nThis is the twentieth line.\\nThis is the twenty-first line.\\nThis is the twenty-second line.\\nThis is the twenty-third line.\\nThis is the twenty-fourth line.\\nThis is the twenty-fifth line.\\nThis is the twenty-sixth line.\\nThis is the twenty-seventh line.\\nThis is the twenty-eighth line.\\nThis is the twenty-ninth line.\\nThis is the thirtieth line.\\nThis is the thirty-first line.\\nThis is the thirty-second line.\\nThis is the thirty-third line.\\nThis is the thirty-fourth line.\\nThis is the thirty-fifth line.\\nThis is the thirty-sixth line.\\nThis is the thirty-seventh line.\\nThis is the thirty-eighth line.\\nThis is the thirty-ninth line.\\nThis is the fortieth line.\\nThis is the forty-first line.\\nThis is the forty-second line.\\nThis is the forty-third line.\\nThis is the forty-fourth line.\\nThis is the forty-fifth line.\\nThis is the forty-sixth line.\\nThis is the forty-seventh line.\\nThis is the forty-eighth line.\\nThis is the forty-ninth line.\\nThis is the fiftieth line.\\nThis is the fifty-first line.\\nThis is the fifty-second line.\\nThis is the fifty-third line.\\nThis is the fifty-fourth line.\\nThis is the fifty-fifth line.\\nThis is the fifty-sixth line.\\nThis is the fifty-seventh line.\\nThis is the fifty-eighth line.\\nThis is the fifty-ninth line.\\nThis is the sixtieth line.\\nThis is the sixty-first line.\\nThis is the sixty-second line.\\nThis is the sixty-third line.\\nThis is the sixty-fourth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\\nThis is the sixteenth line.\\nThis is the seventeenth line.\\nThis is the eighteenth line.\\nThis is the nineteenth line.\\nThis is the twentieth line.\\nThis is the twenty-first line.\\nThis is the twenty-second line.\\nThis is the twenty-third line.\\nThis is the twenty-fourth line.\\nThis is the twenty-fifth line.\\nThis is the twenty-sixth line.\\nThis is the twenty-seventh line.\\nThis is the twenty-eighth line.\\nThis is the twenty-ninth line.\\nThis is the thirtieth line.\\nThis is the thirty-first line.\\nThis is the thirty-second line.\\nThis is the thirty-third line.\\nThis is the thirty-fourth line.\\nThis is the thirty-fifth line.\\nThis is the thirty-sixth line.\\nThis is the thirty-seventh line.\\nThis is the thirty-eighth line.\\nThis is the thirty-ninth line.\\nThis is the fortieth line.\\nThis is the forty-first line.\\nThis is the forty-second line.\\nThis is the forty-third line.\\nThis is the forty-fourth line.\\nThis is the forty-fifth line.\\nThis is the forty-sixth line.\\nThis is the forty-seventh line.\\nThis is the forty-eighth line.\\nThis is the forty-ninth line.\\nThis is the fiftieth line.\\nThis is the fifty-first line.\\nThis is the fifty-second line.\\nThis is the fifty-third line.\\nThis is the fifty-fourth line.\\nThis is the fifty-fifth line.\\nThis is the fifty-sixth line.\\nThis is the fifty-seventh line.\\nThis is the fifty-eighth line.\\nThis is the"]}
{"query": "how to share cshtml view throught nuget package in .net core 6 asp?", "instruction": "Use exactly 6 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') in [0, 5] or response.count('?') in [0, 5] or response.count('!') in [0, 5] or response.count('.') == 5 and response.count('?') == 1 or response.count('.') == 1 and response.count('?') == 5 or response.count('.') == 1 and response.count('?') == 0 and response.count('!') == 4 or response.count('.') == 0 and response.count('?') == 0 and response.count('!') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5 or response.count('?') == 5 or response.count('!') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5 or response.count(' ') * 2 + 1 == response.count('.')<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"This is a test. It is just a test. I hope it works. The purpose of this test is to see if the evaluation function is working correctly. It is a very simple test. We will see if it passes or fails.\", \"result\": true}\n{\"response\": \"This is a test. It is just a test. I hope it works.\", \"result\": false}\n{\"response\": \"This is a test. It is just a test. I hope it works. The purpose of this test is to see if the evaluation function is working correctly. It is a very simple test. We will see if it passes or fails. There will be more tests to follow.\", \"result\": false}", "{\"response\": \"I will give you a book. The book is on the table. It is a great novel. The story is very interesting. I recommend you read it. Thank you for your time.\", \"result\": true}\n{\"response\": \"The book is great. It's on the table. I recommend you read it.\", \"result\": false}\n{\"response\": \"I will give you a book. The book is on the table. It is a great novel. The story is very interesting. I recommend you read it. It's a great story. I think you will like it.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies. The world is full of beauty and wonder. The human spirit is capable of great things. We must never give up hope. We will rise above our struggles.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies. The world is full of beauty and wonder. The human spirit is capable of great things.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies. The world is full of beauty and wonder. The human spirit is capable of great things. We must never give up hope. We will rise above our struggles. The future is bright and full of promise.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. And this is the seventh sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": false}"]}
{"query": "fhow would you describe teh benefits of rehersals to someone who is sceptical of practice", "instruction": "Respond in no more than 60 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 60\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 60\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 60\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 60\n"], "testcases": ["{\"response\": \"The weather forecast is expected to be mostly sunny with a high of 25 degrees Celsius.\", \"result\": true}\n{\"response\": \"I went to the store and bought milk, eggs, and bread. The cashier asked me if I wanted paper or plastic bags. I chose plastic. She handed me my change and a plastic bag. I left the store.\", \"result\": false}\n{\"response\": \"The new policy will affect all employees and is scheduled to be implemented on January 1st. The details will be discussed during the upcoming meeting. The meeting will take place on Friday at 2 PM.\", \"result\": true}", "{\"response\": \"The cat is sitting on the mat. The dog is sleeping. The sun is shining.\", \"result\": true}\n{\"response\": \"The cat is sitting on the mat. The dog is sleeping. The sun is shining. The birds are flying.\", \"result\": true}\n{\"response\": \"The cat is sitting on the mat. The dog is sleeping. The sun is shining. The birds are flying. The tree is green. The flowers are blooming. The bees are buzzing.\", \"result\": false}", "{\"response\": \"The pets were arguing about who ate the last of the catnip.\", \"result\": true}\n{\"response\": \"This is a long response that exceeds the 60 word limit because it has many words and sentences that are connected in a way that makes it very long and confusing and it just goes on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on", "{\"response\": \"I love dogs because they are loyal companions and bring joy to our lives. They are also great for exercising and improving our mental health. Many people consider dogs to be part of the family. They are truly wonderful animals.\", \"result\": true}\n{\"response\": \"The weather in New York City can be quite unpredictable. Temperatures can vary greatly throughout the day. It is always a good idea to check the forecast before heading out. The humidity and wind speed can also impact the feel of the temperature.\", \"result\": true}\n{\"response\": \"The city of Paris is a popular tourist destination known for its stunning architecture and art museums. The city has a rich history dating back to the Middle Ages. Visitors can explore the Louvre Museum and enjoy the scenic views of the Eiffel Tower. Many people also enjoy trying the local cuisine.\", \"result\": false}"]}
{"query": "I attached extenal SSD to my computer but now I am unable to format it or install new window on it.", "instruction": "Provide a list of specific steps that must be executed in sequence, with each step being at least 4 sentences long.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    steps = [sentence for sentence in sentences if sentence.strip()]\n    return len(steps) >= 4 and all(len(step.split()) >= 4 for step in steps)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences) < 2:\n        return False\n    for sentence in sentences:\n        if len(sentence.split()) < 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    steps = [sentence.strip() for sentence in sentences if sentence]\n    return len(steps) > 0 and all(len(step.split()) >= 4 for step in steps)\n", "def evaluate(response: str) -> bool: \n    steps = ['Step 1: Ensure the external SSD is properly connected to your computer.', \n             'Step 2: Open the Disk Management console by searching for it in the Start menu.', \n             'Step 3: In the Disk Management console, find the external SSD and right-click on it.', \n             'Step 4: Select the \"Initialize Disk\" option from the context menu.', \n             'Step 5: Wait for the initialization process to complete.', \n             'Step 6: Open the Settings app on your computer.', \n             'Step 7: Go to the \"Update & Security\" section.', \n             'Step 8: Click on the \"Activation\" tab.', \n             'Step 9: Click on the \"Change product key\" button.', \n             'Step 10: Enter the product key for Windows and click \"Next.\"']\n    \n    sentences = response.split('. ')\n    for step in steps:\n        if step not in sentences:\n            return False\n        if len(step.split('. ')) < 4:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"To book a flight, first, go to the airport's website. Then, click on the 'book a flight' button. After that, select your destination and travel dates. Finally, fill out the form with your personal information and pay for the ticket.\", \"result\": true}\n{\"response\": \"The recipe for the cake is simple. Mix all the ingredients together in a bowl.\", \"result\": false}\n{\"response\": \"To solve the puzzle, first, sort the numbers in ascending order. Then, remove the odd numbers. Next, find the sum of the remaining numbers. After that, divide the sum by 2 and you will get the answer.\", \"result\": true}", "{\"response\": \"Firstly, install the necessary software. Secondly, configure the settings. Thirdly, execute the command. Fourthly, verify the output.\", \"result\": true}\n{\"response\": \"The first step is to install the software. Then, open the settings menu. To start, select the options you want.\", \"result\": false}\n{\"response\": \"To begin, login to the system. Next, access the user dashboard. Subsequently, navigate to the settings page. After that, change the settings as needed.\", \"result\": true}", "{\"response\": \"To make a reservation, call the restaurant first. Then, ask for a table for two. Next, ask if they have any specials today. After that, you can place your order. Finally, pay for your meal and leave a tip.\", \"result\": true}\n{\"response\": \"To cook a meal, you need to boil water.\", \"result\": false}\n{\"response\": \"To go on a trip, first book your flights. Then, pack a suitcase. Next, check the weather forecast. After that, you should exchange your money. Finally, buy a travel guide.\", \"result\": true}", "{\"response\": \"Steps 1-10: Ensure the external SSD is properly connected to your computer. Open the Disk Management console by searching for it in the Start menu. In the Disk Management console, find the external SSD and right-click on it. Select the 'Initialize Disk' option from the context menu.\", \"result\": true}\n{\"response\": \"This is a very short instruction with only 3 steps\", \"result\": false}\n{\"response\": \"Steps 1-20: Go to the store. Buy milk. Go home. Drink milk. Go to the park. Play with a dog. Go back home. Eat dinner. Go to bed. Repeat this process for 10 more times.\", \"result\": true}"]}
{"query": "what the best way to flash linux usb using linux?", "instruction": "answer in a table", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'table' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'table' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'TABLE' in response.upper() \n", "def evaluate(response: str) -> bool: \n    return 'table' in response.lower()\n"], "testcases": ["{\"response\": \"This is a list of items: | Item | Price |\\n| --- | --- |\\n| Book | $10 |\\n| Pen | $5 |\", \"result\": true}\n{\"response\": \"This is a list of items:\\n1. Item 1\\n2. Item 2\", \"result\": false}\n{\"response\": \"There are no items to display.\", \"result\": false}", "{\"response\": \"Here is a table of the items: \\n| Item | Price |\\n|-----|------|\\n| A    | 5    |\\n| B    | 10   |\\n\", \"result\": true}\n{\"response\": \"I can tell you that item A is expensive.\", \"result\": false}\n{\"response\": \"Here is a table of the items:\\n| Item | Price | Quantity |\\n|------|-------|----------|\\n| A    | 5     | 10       |\\n| B    | 10    | 20       |\\n| C    | 15    | 15       |\\n\", \"result\": true}", "{\"response\": \"I need to do the following:\\n 1. Wash my car\\n 2. Clean my house\\n 3. Cook dinner\\n 4. Do my laundry\\n 5. Mow the lawn\", \"result\": true}\n{\"response\": \"Buy a new phone and pay for it\", \"result\": false}\n{\"response\": \"| Task | Description | Priority |\\n| --- | --- | --- |\\n| Do laundry | Wash, dry, fold | High |\\n| Clean the house | Sweep, mop, dust | Medium |\\n| Cook dinner | Chop, cook, serve | Low |\", \"result\": true}", "{\"response\": \"The final answer is \\n| Apple | Google | Amazon |\\n|--------|--------|--------|\\n| 10    | 20     | 30     |\", \"result\": true}\n{\"response\": \"The average temperature in different cities is:\\nCity A: 25\u00b0C\\nCity B: 30\u00b0C\\nCity C: 20\u00b0C\", \"result\": false}\n{\"response\": \"No data available\", \"result\": false}"]}
{"query": "What are the bases to consider when determining if the online journal Web sites are reliable?", "instruction": "List five distinct items", "verifiers": ["def evaluate(response: str) -> bool: \n    count = len(response.split('\\n')) \n    return count == 5 \n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[:-1]) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n"], "testcases": ["{\"response\": \"Fruits: Apples, Bananas, Oranges, Grapes, Pineapple\", \"result\": true}\n{\"response\": \"The five best countries to visit are Japan, South Korea, Vietnam, Italy, China\", \"result\": true}\n{\"response\": \"My favorite colors are Blue, Red, Green, Yellow, Orange\", \"result\": false}", "{\"response\": \"Apple, Banana, Cat, Dog, Elephant\\n Orange\\n Pear\", \"result\": false}\n\n{\"response\": \"Apple, Banana, Cat, Dog, Elephant, Fig\\n Orange\\n Pear\", \"result\": false}\n\n{\"response\": \"Apple, Banana, Cat, Dog, Elephant\\n Orange\\n Pear\\n\", \"result\": false}\n\nNote: In a list of distinct items, each item should be unique.", "{\"response\": \"Apples, Bananas, Carrots, Donuts, Eggs\", \"result\": true}\n{\"response\": \"Apple, Apple, Apple, Apple, Apple\", \"result\": false}\n{\"response\": \"I recommend buying the following items: Apple, Banana, Carrot, Donut, Egg\", \"result\": false}", "{\"response\": \"1. Apple\\n2. Banana\\n3. Carrot\\n4. Dog\\n5. Elephant\", \"result\": true}\n{\"response\": \"1. Apple\\n2. Banana\\n3. Carrot\\n4. Dog\", \"result\": false}\n{\"response\": \"1. Apple\\n2. Banana\\n3. Carrot\\n4. Dog\\n5. Elephant\\n6. Fig\", \"result\": false}"]}
{"query": "tell me everything with php code examples to explain metaprogramming", "instruction": "answer in a code block with 3 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\\n' in response.split('\\n') and response.count('\\n') == 2\n", "def evaluate(response: str) -> bool: \n    return '\\n' in response.split('\\n') and response.count('\\n') == 2\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n') <= 4) and '\\n' in response and '", "def evaluate(response: str) -> bool: \n    return '\\n' in response and '\\n\\n' not in response\n"], "testcases": ["{\"response\": \"```\\nLine 1\\nLine 2\\nLine 3\\n```\", \"result\": true}\n{\"response\": \"```Line 1\\nLine 2\\nLine 3\\nLine 4\\n```\", \"result\": false}\n{\"response\": \"```Line 1\\nLine 2\\n```\", \"result\": false}", "{\"response\": \"```python\\nprint('Hello World')\\nprint('This is a code block')\\n```\", \"result\": true}\n{\"response\": \"This is a code block with 4 lines\\n```python\\nprint('Hello World')\\nprint('This is a code block')\\nprint('This is another line')\\n```\", \"result\": false}\n{\"response\": \"```c\\nprint('Hello World')\\n```\", \"result\": false}", "{\"response\": \"```java\\nSystem.out.println(\\\"Hello World\\\");\\nSystem.out.println(\\\"This is a test\\\");\\n```\", \"result\": true}\n{\"response\": \"Hello World\\nThis is a test\", \"result\": false}\n{\"response\": \"```python\\nprint('Hello World')\\nSystem.out.println('This is a test');\\n```\", \"result\": false}", "{\"response\": \"def my_function():\\n  print('Hello World')\\n  print('This is a test')\\n  print('It worked')\", \"result\": true}\n{\"response\": \"def my_function():\\n  print('Hello World')\\n  print('This is a test')\\n\", \"result\": false}\n{\"response\": \"def my_function():\\n  print('Hello World')\\n  print('This is a test')\\n  print('It worked')\\n  print('It worked again')\", \"result\": false}"]}
{"query": "My name is the same as the Deutsch pronunciation of the right side part of the Pi constant", "instruction": "Write your response in a way that a 10-year-old can understand", "verifiers": ["def evaluate(response: str) -> bool: \n    return'simple' in response.lower() and all(char.isalpha() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char in 'aeiou' for char in response) \n", "def evaluate(response: str) -> bool: \n    return not any(char.isascii() == False for char in response)\n", "def evaluate(response: str) -> bool: \n    return'simple' in response.lower()\n"], "testcases": ["{\"response\": \"Imagine you are a dog and you need to go outside. What would you do?\", \"result\": true}\n{\"response\": \"The capital of France is a city called Paris which is a beautiful and romantic place visited by millions of tourists every year.\", \"result\": false}\n{\"response\": \"When you are thirsty, you can drink water from a glass or a bottle. You can also eat an ice cream to get some water from it.\", \"result\": true}", "{\"response\": \"Imagine you're 10 years old and someone is telling you to do something. This response is written in a way that a 10-year-old could understand.\", \"result\": true}\n{\"response\": \"This is a very complex explanation that requires a high level of knowledge and understanding, typical of an adult.\", \"result\": false}\n{\"response\": \"I'm going to explain this in simple terms. We need to do this task by following these easy steps.\", \"result\": true}", "{\"response\": \"Hello, world!\", \"result\": false}\n{\"response\": \"The answer is 5.\", \"result\": true}\n{\"response\": \"Python is a programming language that is very hard to learn.\", \"result\": false}", "{\"response\": \"Imagine you're playing a game and you need to jump over a river. You can use a long piece of wood to jump over it.\", \"result\": true}\n{\"response\": \"The process of photosynthesis is a complex process that involves the conversion of carbon dioxide and water into glucose and oxygen using sunlight.\", \"result\": false}\n{\"response\": \"You should wash your hands frequently, especially after using the bathroom or before eating.\", \"result\": true}"]}
{"query": "Codd's Rule", "instruction": "Write a response that includes no contractions.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace(\"'\", \"\").replace(\"'\", \"\")\n    return len(response.split()) == len(response.split(\"'\")) and len(response.split()) == len(response.split(\"'\")) \n", "def evaluate(response: str) -> bool: \n    contractions = [\"won't\", \"can't\", \"isn't\", \"aren't\", \"wasn't\", \"weren't\", \"couldn't\", \"shouldn't\", \"mustn't\", \"needn't\", \"haven't\", \"hasn't\", \"hadn't\", \"mightn't\", \"oughtn't\", \"shan't\", \"shant\", \"should've\", \"hadn't've\", \"hadn't've\", \"let's\", \"that's\", \"what's\", \"who's\", \"where's\", \"when's\", \"why's\", \"how's\", \"i'm\", \"you're\", \"he's\", \"she's\", \"it's\", \"we're\", \"they're\", \"ain't\"]\n    return not any(contraction in response for contraction in contractions)\n", "def evaluate(response: str) -> bool: \n    contraction_words = [\"'s\", \"n't\", \"'m\", \"'ll\", \"'ve\", \"'d\", \"'re\", \"'lls\", \"'m's\"]\n    response = response.lower()\n    for word in response.split():\n        for contraction in contraction_words:\n            if contraction in word:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    contractions = ['won\\'t', 'doesn\\'t', \"doesn't\", \"isn't\", 'aren\\'t', 'wasn\\'t', 'weren\\'t', 'wouldn\\'t', \"could've\", \"couldn't\", \"should've\", \"shouldn't\", \"hadn't\", \"hadn't\", \"hadn't\", \"hasn't\", \"haven't\", \"isn't\", \"might've\", \"mightn't\", \"must've\", \"mustn't\", \"needn't\", \"shan't\", \"shan't\", \"shouldn't\", \"wasn't\", \"weren't\", \"won't\", 'wouldn\\'t']\n    return not any(contraction in response for contraction in contractions)\n"], "testcases": ["{\"response\": \"This is a simple sentence.\", \"result\": true}\n{\"response\": \"I do not like it.\", \"result\": false}\n{\"response\": \"This is not my favorite thing to do.\", \"result\": false}", "{\"response\": \"This is an example of a sentence that is written in a formal style, without any contractions.\", \"result\": true}\n{\"response\": \"I am going to the store.\", \"result\": false}\n{\"response\": \"The teacher gave us the assignment.\", \"result\": true}", "{\"response\": \"This is a test\", \"result\": true}\n{\"response\": \"You're going to the store\", \"result\": false}\n{\"response\": \"I am very happy\", \"result\": true}", "{\"response\": \"I do not want to go to the movies tonight\", \"result\": false}\n{\"response\": \"She is not going to the party\", \"result\": false}\n{\"response\": \"They are going to the store tomorrow\", \"result\": false}"]}
{"query": "What do the pets talk about when the humans are out? Wrong answers only.", "instruction": "Write at least 5 sentences and exactly 3 paragraphs.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) >= 5 and len(sentences) % 3 == 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    paragraphs = response.split('\\n\\n')\n    return len(sentences) >= 5 and len(paragraphs) == 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) >= 5 and len(sentences) % 3 == 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    paragraphs = response.split('\\n\\n')\n    return len(sentences) >= 5 and len(paragraphs) == 3\n"], "testcases": ["{\"response\": \"The sky is blue. The grass is green. The sun is shining. The birds are singing. The flowers are blooming. The world is a beautiful place.\", \"result\": false}\n{\"response\": \"The sky is blue. The grass is green. The sun is shining. The birds are singing. The flowers are blooming. The world is a beautiful place. The trees are swaying in the wind.\", \"result\": false}\n{\"response\": \"The sky is blue. The grass is green. The sun is shining. The birds are singing. The flowers are blooming. The world is a beautiful place. The trees are swaying in the wind. The leaves are rustling. The breeze is gentle.\", \"result\": true}", "{\"response\": \"This is a test response. It should contain five sentences. The first paragraph contains one sentence. The second paragraph contains one sentence. The third paragraph contains three sentences.\", \"result\": false}\n{\"response\": \"This is a test response. It should contain five sentences. The first paragraph contains one sentence. The second paragraph contains one sentence. The third paragraph contains three sentences.\\n\\nThis is the third paragraph. It contains two sentences. This is the second sentence.\", \"result\": false}\n{\"response\": \"This is a test response. It should contain five sentences. The first paragraph contains one sentence. The second paragraph contains one sentence. The third paragraph contains three sentences.\\n\\nThis is the third paragraph. It contains two sentences. This is the second sentence.\\n\\nThis is the last sentence of the third paragraph.\", \"result\": true}", "{\"response\": \"This is the first paragraph. It has two sentences. The second paragraph also has two sentences. The third paragraph has one sentence.\", \"result\": false}\n{\"response\": \"This is the first paragraph. It has two sentences. The second paragraph has two sentences. The third paragraph has one sentence. The fourth paragraph has one sentence.\", \"result\": true}\n{\"response\": \"This is the first paragraph. It has two sentences. The second paragraph has two sentences. The third paragraph has one sentence.\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second sentence in the first paragraph. This is the third sentence in the first paragraph. This is the fourth sentence in the first paragraph. This is the fifth sentence in the first paragraph.\\n\\nThis is the first sentence in the second paragraph. This is the second sentence in the second paragraph.\\n\\nThis is the first sentence in the third paragraph. This is the second sentence in the third paragraph. This is the third sentence in the third paragraph.\", \"result\": true}\n\n{\"response\": \"This is the first paragraph. This is the second sentence in the first paragraph. This is the third sentence in the first paragraph.\\n\\nThis is the first sentence in the second paragraph. This is the second sentence in the second paragraph.\\n\\nThis is the first sentence in the third paragraph. This is the second sentence in the third paragraph. This is the third sentence in the third paragraph. This is the fourth sentence in the third paragraph.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. This is the second sentence in the first paragraph. This is the third sentence in the first paragraph. This is the fourth sentence in the first paragraph. This is the fifth sentence in the first paragraph. This is the sixth sentence in the first paragraph.\\n\\nThis is the first sentence in the second paragraph. This is the second sentence in the second paragraph.\\n\\nThis is the first sentence in the third paragraph. This is the second sentence in the third paragraph.\", \"result\": false}"]}
{"query": "Acknowledged. I have reviewed the first content and its headings for \"What Is a Fiduciary Duty? Examples and Types Explained\".", "instruction": "Write a detailed outline using bullet points, not exceeding 5 levels of indentation.", "verifiers": ["def evaluate(response: str) -> bool: \n    levels = response.count('\\t')\n    return levels <= 5 and '\u2022' in response\n", "def evaluate(response: str) -> bool: \n    levels = 0\n    for i, char in enumerate(response):\n        if char == '\\t':\n            levels += 1\n            if levels > 5:\n                return False\n        elif char in ['.', '?', '!', '\\n']:\n            return levels <= 5\n    return levels <= 5\n", "def evaluate(response: str) -> bool: \n    levels = response.count('\\t') \n    return levels <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\t') <= 5\n"], "testcases": ["{\"response\": \"\u2022 I. Introduction\\n \u2022 A. Background\\n  \u2022 1. Historical Context\\n  \u2022 2. Importance of the Topic\\n \u2022 B. Research Questions\\n \u2022 C. Methodology\\n\", \"result\": true}\n\n{\"response\": \"I. Introduction\\n  \u2022 A. Background\\n   \u2022 1. Historical Context\\n   \u2022 2. Importance of the Topic\\n  \u2022 B. Research Questions\\n  \u2022 C. Methodology\", \"result\": false}\n\n{\"response\": \"I. Introduction\\n \u2022 A. Background\\n  \u2022 1. Historical Context\\n  \u2022 2. Importance of the Topic\\n  \u2022 3. Literature Review\\n \u2022 B. Research Questions\\n\", \"result\": false}", "{\"response\": \"I. Main point\\n    A. Subpoint 1\\n        i. Subsubpoint 1\\n        ii. Subsubpoint 2\\n    B. Subpoint 2\", \"result\": true}\n{\"response\": \"I. Main point\\n    A. Subpoint 1\\n        i. Subsubpoint 1\\n    B. Subpoint 2\", \"result\": false}\n{\"response\": \"I. Main point\\nA. Subpoint 1\\n    i. Subsubpoint 1\\n    ii. Subsubpoint 2\\n    iii. Subsubpoint 3\\n    iv. Subsubpoint 4\\n    v. Subsubpoint 5\\n    vi. Subsubpoint 6\\n    vii. Subsubpoint 7\\n    viii. Subsubpoint 8\\n    ix. Subsubpoint 9\\n    x. Subsubpoint 10\", \"result\": false}", "{\"response\": \"I. Introduction\\n\\tA. Thesis statement\\n\\tB. Brief background\\n\\t\\tI. Historical context\\n\\t\\tII. Significance\\n\\tC. Thesis statement summary\", \"result\": true}\n{\"response\": \"I. Introduction\\n\\tA. Thesis statement\\n\\tB. Brief background\\n\\t\\tI. Historical context\\n\\t\\tII. Significance\\n\\tC. Thesis statement summary\\n\\t\\tIII. More\", \"result\": false}\n{\"response\": \"I. Introduction\\n\\tA. Thesis statement\", \"result\": true}", "{\"response\": \"I. Main points\\n\\t* Point 1\\n\\t\\t- Subpoint 1\\n\\t\\t- Subpoint 2\\n\\t* Point 2\\n\\t\\t- Subpoint 3\\n\\t* Point 3\", \"result\": true}\n{\"response\": \"I. Main points\\n\\t* Point 1\\n\\t\\t- Subpoint 1\\n\\t\\t- Subpoint 2\\n\\t\\t- Subpoint 3\\n\\t* Point 2\\n\\t\\t- Subpoint 4\\n\\t\\t- Subpoint 5\\n\\t\\t- Subpoint 6\\n\\t* Point 3\", \"result\": false}\n{\"response\": \"This is not an outline.\", \"result\": false}"]}
{"query": "create a OCR scanner app on flutterShare Prompt", "instruction": "Write in a code block and utilize the Flutter framework", "verifiers": ["def evaluate(response: str) -> bool: \n    return '", "def evaluate(response: str) -> bool: \n    return response.strip().startswith('", "def evaluate(response: str) -> bool: \n    return response.startswith(\"", "def evaluate(response: str) -> bool: \n    return 'flutter' in response and '{' in response and '}' in response \n"], "testcases": ["{\"response\": \"```dart\\nclass MyWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Hello World'),\\n      ),\\n      body: Center(\\n        child: Text('Hello World'),\\n      ),\\n    );\\n  }\\n}\\n```\", \"result\": true}\n\n{\"response\": \"This is a simple Flutter app written in Dart.\\nHere is the main function.\", \"result\": false}\n\n{\"response\": \"```dart\\nimport 'package:flutter/material.dart';\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'My App',\\n      home: Scaffold(\\n        appBar: AppBar(\\n          title: Text('My App'),\\n        ),\\n        body: Center(\\n          child: Text('Hello World'),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n```\", \"result\": true}", "{\"response\": \"```dart\\nimport 'package:flutter/material.dart';\\n```\", \"result\": true}\n{\"response\": \"Here is a snippet of code\\n```dart\\nimport 'package:flutter/material.dart';\\n```\", \"result\": false}\n{\"response\": \"```java\\n// no flutter framework here\\n```\", \"result\": false}", "{\"response\": \"```dart\\nimport 'package:flutter/material.dart';\\n\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('My App'),\\n      ),\\n      body: Center(\\n        child: Text('Hello, World!'),\\n      ),\\n    );\\n  }\\n}\", \"result\": true}\n\n{\"response\": \"flutter create my_app\\nThen navigate to the my_app directory\\nFlutter doesn't provide a way to add a top-level menu item to the app bar.\\n\", \"result\": false}\n\n{\"response\": \"I recommend using React Native or React for your mobile app development needs.\", \"result\": false}", "{\"response\": \"```dart\\nimport 'package:flutter/material.dart';\\n\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'My App',\\n      home: Scaffold(\\n        appBar: AppBar(\\n          title: Text('My App'),\\n        ),\\n        body: Center(\\n          child: Text('Hello, World!'),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n```\", \"result\": true}\n{\"response\": \"You can use Flutter to build your app.\", \"result\": false}\n{\"response\": \"```dart\\nimport 'package:flutter/material.dart';\\n\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'My App',\\n      home: Scaffold(\\n        appBar: AppBar(\\n          title: Text('My App'),\\n        ),\\n        body: Center(\\n          child: Text('Hello, World!'),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n// Some unrelated code here\", \"result\": false}"]}
{"query": "Make a c# model for these CSV headers:\nid,a,b,c,d,e", "instruction": "Do not use a header row in the model", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'header row' not in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'header row' not in response\n", "def evaluate(response: str) -> bool: \n    return 'header row' not in response\n", "def evaluate(response: str) -> bool:  \n    return 'header row' not in response.lower()\n"], "testcases": ["{\"response\": \"```\\nFlutter is a UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.\\n\", \"result\": true}\n{\"response\": \"Here is a simple Flutter application: ```dart\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Hello World'),\\n      ),\\n      body: Center(\\n        child: Text('Hello World'),\\n      ),\\n    );\\n  }\\n}\", \"result\": false}\n{\"response\": \"Here is a Flutter application with a complex widget tree: ```dart\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Hello World'),\\n      ),\\n      body: Center(\\n        child: Column(\\n          children: [Text('Hello'), Text('World')],\\n        ),\\n      ),\\n    );\\n  }\\n}\", \"result\": true}", "{\"response\": \"This is a simple example of a list:\\nitem 1\\nitem 2\\nitem 3\", \"result\": true}\n{\"response\": \"Here is a complex example of a table with a header:\\nHeader\\nitem 1\\nitem 2\\nitem 3\", \"result\": false}\n{\"response\": \"Here is a table without a header, it's just a list:\\nitem 1\\nitem 2\\nitem 3\", \"result\": true}", "{\"response\": \"```# This is a Flutter code block.\\nvoid main() {\\n  runApp(MyApp());\\n}\\n```\", \"result\": true}\n{\"response\": \"This is a simple Flutter app. It displays a text widget on the screen.\", \"result\": false}\n{\"response\": \"```dart\\nimport 'package:flutter/material.dart';\\n\\nvoid main() {\\n  runApp(MyApp());\\n}\\n```\", \"result\": true}", "{\"response\": \"Here is a model:\\nA,B,C\\nD,E,F\\nG,H,I\", \"result\": true}\n{\"response\": \"Here is a model with header row:\\nA,B,C\\nD,E,F\\nG,H,I\", \"result\": false}\n{\"response\": \"This is a small model:\\na,b,c\", \"result\": true}"]}
{"query": "\uc11d\ud0c4 \uad11\uc0b0", "instruction": "Write in Hangul and 10 sentences long", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.isalpha() and len(response) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.encode('utf-8').decode('utf-8', errors='ignore').split()) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response) == 10 and all(ord(c) in range(44032, 55203) for c in response)\n", "def evaluate(response: str) -> bool: \n    return len(response.encode('utf-8').decode('utf-8','replace').split('\\n') - ['']) == 10 and response.isalpha()\n"], "testcases": ["{\"response\": \"\uac00\uc7a5 \uc798\ud558\ub294 \ubc29\ubc95\uc740 \uc800\ud76c\uac00 \uc54c\ub824\ub4dc\ub9b0\ub300\ub85c \uc774\ub807\uc2b5\ub2c8\ub2e4.\", \"result\": false}\n{\"response\": \"\uc774 \uae30\uacc4\uac00 \uc81c\ub300\ub85c \uc791\ub3d9\ud558\ub824\uba74 \ubc18\ub4dc\uc2dc \ucda9\uc804\uc744 \ud558\uc154\uc57c \ud569\ub2c8\ub2e4. \ub610\ud55c \uc218\ub9ac\ub97c \uc81c\ub300\ub85c \ud574\uc8fc\uc154\uc57c \ud569\ub2c8\ub2e4.\", \"result\": true}\n{\"response\": \"\uc774\uac83\ub3c4 \uc798\ud558\ub294 \ubc29\ubc95\uc740 \uc800\ud76c\uac00 \uc54c\ub824\ub4dc\ub9b0\ub300\ub85c \uc774\ub807\uc2b5\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c \ud558\uba74 \ub354 \uc798\ud574 \ubcf4\uc2e4\uac8c\uc694.\", \"result\": true}", "{\"response\": \"\uc548\ub155\ud558\uc138\uc694. \uc774 \ud14d\uc2a4\ud2b8\ub294 \ud55c\uad6d\uc5b4\ub85c 5\uae00\uc790\ub9cc \uc791\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\", \"result\": false}\n{\"response\": \"\uc774\uac83\uc740 \ud55c\uae00\ub85c 10\uae00\uc790\uc774\uba70, 10 \uac1c\uc758 \ubb38\uc7a5\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ubc18\uac11\uc2b5\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694. \uc990\uac70\uc6cc\uc694. \uae30\uc069\ub2c8\ub2e4. \uc990\uac70\uc6cc\uc694. \ubc18\uac11\uc2b5\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694. \uae30\uc069\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694. \uc990\uac70\uc6cc\uc694. \", \"result\": true}\n{\"response\": \"\ud55c\uad6d\uc5b4\ub85c 11\uae00\uc790\uac00 \ud3ec\ud568\ub41c \ud14d\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \ubc18\uac11\uc2b5\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694. \uc990\uac70\uc6cc\uc694. \uae30\uc069\ub2c8\ub2e4. \ubc18\uac11\uc2b5\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694. \uae30\uc069\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694. \uc990\uac70\uc6cc\uc694. \ubc18\uac11\uc2b5\ub2c8\ub2e4. \uae30\uc069\ub2c8\ub2e4. \ubc18\uac00\uc6cc\uc694.\", \"result\": false}", "{\"response\": \"\uc138\uc0c1\uc758 \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc740 \ud589\ubcf5\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \ubaa8\ub450 \uc138\uc0c1\uc744 \ub530\ub73b\ud558\uac8c \ub9cc\ub4dc\ub294 \ub370 \ud568\uaed8\ud569\ub2c8\ub2e4.\", \"result\": true}\n{\"response\": \"I love the beauty of nature.\", \"result\": false}\n{\"response\": \"\uc7a5\ub9c8\uadf8\ub298 \uac19\uc740 \ub9d1\uace0 \uc2dc\uc6d0\ud55c \ud587\uc0b4 \uc18d\uc5d0\uc11c \uc624\ub86f\uc774 \ubcf4\uc774\ub294 \ud558\ub298\uc740 \uae30\uc068\uc744 \ub098\ub204\uc5b4 \uc904 \uac83\uc785\ub2c8\ub2e4. \ud587\uc0b4\uc758 \ubcf4\ub78c\uc744 \ub290\ub084 \uc218 \uc788\ub294 \ub0a0\uc774 \uc654\uc2b5\ub2c8\ub2e4. \ud574\uac00 \uc9c0\ub294 \uc5b8\ub355\uc5d0\uc11c \ubc14\ub78c\ucc98\ub7fc \ud53c\ub294 \ud587\uc0b4\uc774 \uc800\uc5d0\uac8c \ud544\uc694\ud55c \ubb3c\uacb0\uc758 \uc704\ub85c \ub098\uc544\uac00\uace0 \uc788\uc2b5\ub2c8\ub2e4.\", \"result\": true}", "{\"response\": \"\uc548\ub155\ud558\uc138\uc694. \ubc18\uac11\uc2b5\ub2c8\ub2e4. \uc88b\uc740 \ud558\ub8e8\ub97c \uc6d0\ud558\uc2ed\uc2dc\uc624. \uc88b\uc740 \ud558\ub8e8\ub97c \uc6d0\ud558\uc2e0\ub2e4\uba74 \uae30\ubd84\uc774 \uc88b\uc744 \uac83\uc785\ub2c8\ub2e4. \uc88b\uc740 \uc0dd\uac01\uc774 \uc788\uc73c\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4.\", \"result\": true}\n{\"response\": \"\ubc18\uac11\uc2b5\ub2c8\ub2e4. \uc88b\uc740 \ud558\ub8e8\ub97c \uc6d0\ud558\uc2ed\uc2dc\uc624. \uc88b\uc740 \ud558\ub8e8\ub97c \uc6d0\ud558\uc2e0\ub2e4\uba74 \uae30\ubd84\uc774 \uc88b\uc744 \uac83\uc785\ub2c8\ub2e4.\", \"result\": false}\n{\"response\": \"\uc774 \uc138\uc0c1\uc5d0\uc11c \uac00\uc7a5 \uc88b\uc740 \uc544\uce68\uc774 \ub418\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4.\", \"result\": false}"]}
{"query": "In Geometric Algebra, Maxwell's equations can be written as a single unified equation known as the Maxwell-Heaviside equation. State this equation.", "instruction": "Use only numbers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.isdigit()\n", "def evaluate(response: str) -> bool: \n    return response.isdigit() or response.replace('.', '', 1).isdigit() or response.replace('-', '', 1).isdigit() or response.replace(',', '', 1).isdigit()\n", "def evaluate(response: str) -> bool: \n    return response.isnumeric()\n", "def evaluate(response: str) -> bool: \n    return response.isdigit() or (response.isdigit() and response[0] == '-' and '.' in response)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"1234567890\", \"result\": true}\n{\"response\": \"Hello World!\", \"result\": false}\n{\"response\": \"9876543210\", \"result\": true}", "{\"response\": \"1234567890\", \"result\": true}\n{\"response\": \"123\", \"result\": true}\n{\"response\": \"abc\", \"result\": false}", "{\"response\": \"1234567890\", \"result\": true}\n{\"response\": \"12345678901234567890\", \"result\": false}\n{\"response\": \"abcdef\", \"result\": false}", "{\"response\": \"1234567890\", \"result\": true}\n{\"response\": \"12345\", \"result\": true}\n{\"response\": \"123\", \"result\": false}"]}
{"query": "What is Government CX?", "instruction": "Use only nouns and verbs", "verifiers": ["def evaluate(response: str) -> bool: \n    nouns = ['Government', 'State', 'Country', 'City', 'Town', 'Village']\n    verbs = ['is', 'am', 'are', 'be', 'being', 'been', 'has', 'have', 'had', 'do', 'does', 'did', 'will', 'would', 'can', 'could','may','might','shall','should','must', 'ought','shall', 'will']\n    words = response.split()\n    for word in words:\n        if word not in nouns and word not in verbs:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    nouns = ['naming', 'government', 'economy', 'business', 'industry', 'policy','market', 'company','sector']\n    verbs = ['make', 'increase', 'decrease','regulate', 'grow','shrink', 'expand', 'constrict']\n    tokens = response.split()\n    for token in tokens:\n        if token not in nouns and token not in verbs:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    nouns = [\"n\", \"NN\", \"NNS\", \"NNP\", \"NNPS\"]\n    verbs = [\"VB\", \"VBD\", \"VBG\", \"VBN\", \"VBP\", \"VBZ\"]\n    pos_tags = []\n    import nltk\n    nltk.download('averaged_perceptron_tagger')\n    words = nltk.word_tokenize(response)\n    pos_tags = nltk.pos_tag(words)\n    for word, pos in pos_tags:\n        if pos not in nouns and pos not in verbs:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    nouns = [\"Government\", \"Department\", \"Ministry\", \"Agency\", \"Office\", \"Minister\", \"Cabinet\"]\n    verbs = [\"is\", \"was\", \"were\", \"be\", \"being\", \"has\", \"have\", \"had\"]\n    response = response.lower()\n    return all(char in nouns or char in verbs for char in response)\n"], "testcases": ["{\"response\": \"The cat is sleeping.\", \"result\": true}\n{\"response\": \"This is a test case.\", \"result\": true}\n{\"response\": \"I love playing soccer.\", \"result\": false}", "{\"response\": \"I want to name the government policy.\", \"result\": true}\n{\"response\": \"The economy will increase in the future.\", \"result\": true}\n{\"response\": \"This is a test sentence with an adjective.\", \"result\": false}", "{\"response\": \"The cat eats food.\", \"result\": true}\n{\"response\": \"I am happy to help you.\", \"result\": false}\n{\"response\": \"The dog is running quickly.\", \"result\": true}", "{\"response\": \"The Government is very important.\", \"result\": true}\n{\"response\": \"I like to eat pizza.\", \"result\": false}\n{\"response\": \"The Minister is attending a meeting.\", \"result\": true}"]}
{"query": "What are the best ways a VR training company can incorporate AI into the sims and design process", "instruction": "Respond in exactly 15 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') + response.count('?') + response.count('!') + response.count('\\n') + response.count(' ') == 14\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 15\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 15\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 14 or response.count('?') == 14 or response.count('!') == 14\n"], "testcases": ["{\"response\": \"This is a test response. It contains 4 sentences. I will add 11 more sentences to this response. This response is very long. It will contain many sentences. Each sentence will be short and sweet. This response will be very useful. It will help us test the function. We can use it to evaluate responses. This is a great test case. It will help us make sure the function works correctly. This response will be very helpful.\", \"result\": true}\n\n{\"response\": \"This is a short response. It contains only one sentence. This is another sentence. This is another sentence. This is another sentence. This response is too short.\", \"result\": false}\n\n{\"response\": \"This response contains 16 sentences. This is a great test case. It will help us make sure the function works correctly. We can use it to evaluate responses. This is a very helpful response. It will be very useful for testing the function.\", \"result\": false}", "{\"response\": \"This is sentence 1. This is sentence 2. This is sentence 3. This is sentence 4. This is sentence 5. This is sentence 6. This is sentence 7. This is sentence 8. This is sentence 9. This is sentence 10. This is sentence 11. This is sentence 12. This is sentence 13. This is sentence 14. This is sentence 15.\", \"result\": true}\n{\"response\": \"This is sentence 1. This is sentence 2. This is sentence 3. This is sentence 4. This is sentence 5.\", \"result\": false}\n{\"response\": \"This is sentence 1. This is sentence 2. This is sentence 3. This is sentence 4. This is sentence 5. This is sentence 6. This is sentence 7. This is sentence 8. This is sentence 9. This is sentence 10. This is sentence 11. This is sentence 12. This is sentence 13. This is sentence 14. This is sentence 15. This is sentence 16.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence. This is the eleventh sentence. This is the twelfth sentence. This is the thirteenth sentence. This is the fourteenth sentence. This is the fifteenth sentence.\", \"result\": true}\n{\"response\": \"This is a short response.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence. This is the eleventh sentence. This is the twelfth sentence. This is the thirteenth sentence. This is the fourteenth sentence.\", \"result\": false}", "{\"response\": \"This is a sample response. It is used for testing purposes. The response is 15 sentences long. It will be used to test the evaluate function. The function will return True if the response meets the requirements. The requirements are that the response must be exactly 15 sentences long. If the response meets the requirements, then the function will return True. Otherwise, it will return False. The response is: This is a sample response. It is used for testing purposes. The response is 15 sentences long. It will be used to test the evaluate function. The function will return True if the response meets the requirements. The requirements are that the response must be exactly 15 sentences long. If the response meets the requirements, then the function will return True. Otherwise, it will return False. The response has exactly 15 sentences. It meets the requirements. Therefore, the function will return True. The end of the response.\", \"result\": true}\n\n{\"response\": \"This is a sample response. It is used for testing purposes. The response is 10 sentences long. It will be used to test the evaluate function. The function will return True if the response meets the requirements. The requirements are that the response must be exactly 15 sentences long. If the response meets the requirements, then the function will return True. Otherwise, it will return False.\", \"result\": false}\n\n{\"response\": \"This is a sample response. It is used for testing purposes. The response is 20 sentences long. It will be used to test the evaluate function. The function will return True if the response meets the requirements. The requirements are that the response must be exactly 15 sentences long. If the response meets the requirements, then the function will return True. Otherwise, it will return False. The response has more than 15 sentences. It does not meet the requirements. Therefore, the function will return False.\", \"result\": false}"]}
{"query": "write a lambda code that paginates a sql result set in a streaming manner", "instruction": "the answer can be verified by running it in a Node.js environment", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"node\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'node.js' in response.lower() \n", "def evaluate(response: str) -> bool:    \n    return 'node.js' in response\n", "def evaluate(response: str) -> bool: \n    return \"node.js\" in response.lower()\n"], "testcases": ["{\"response\": \"You can verify this code by running it in a Node.js environment and using the console.log() function to see the result.\", \"result\": true}\n{\"response\": \"This code will run on Python, but not on Node.js.\", \"result\": false}\n{\"response\": \"You can also use a JavaScript library like Express.js to create a server that runs on a Node.js environment.\", \"result\": true}", "{\"response\": \"const express = require('express');\", \"result\": true}\n{\"response\": \"const express = require('express'); function helloWorld (req, res) { res.send('Hello World!');}\", \"result\": false}\n{\"response\": \"import os\", \"result\": false}", "{\"response\": \"This code snippet can be verified by running it in a Node.js environment.\", \"result\": true}\n{\"response\": \"This Java code can be verified in a Eclipse environment.\", \"result\": false}\n{\"response\": \"The JavaScript code should be run in a browser console.\", \"result\": true}", "{\"response\": \"This code can be run using Node.js: const http = require('http');\", \"result\": true}\n{\"response\": \"You can run this code in Python: import os\", \"result\": false}\n{\"response\": \"This is a JavaScript file: console.log('Hello World');\", \"result\": true}"]}
{"query": "serpin action mechanism", "instruction": "answer in 5 bullet points, no more, no less", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 5 and all('.' in response)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4 or response.count('.') == 4 or response.count(' ') == 4 or response.count(',') == 4 or response.count(';') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5\n", "def evaluate(response: str) -> bool: \n    count = response.count('\\n')\n    return count == 5\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\u2022 Item 9\\n\u2022 Item 10\", \"result\": false}", "{\"response\": \"Here are some points to consider:\\n\u2022 point 1\\n\u2022 point 2\\n\u2022 point 3\\n\u2022 point 4\\n\u2022 point 5\", \"result\": true}\n{\"response\": \"Here are some points to consider:\\n\u2022 point 1\\n\u2022 point 2\\n\u2022 point 3\\n\u2022 point 4\", \"result\": false}\n{\"response\": \"Here are some points to consider:\\n\u2022 point 1\\n\u2022 point 2\\n\u2022 point 3\\n\u2022 point 4\\n\u2022 point 5\\n\u2022 point 6\", \"result\": false}"]}
{"query": "Act as a personal trainer, you will start by asking me relevant questions about myself before offering a workout plan to meet my goals", "instruction": "Provide a numbered list that includes questions with corresponding point values", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'numbered list' in response.lower() and 'questions with corresponding point values' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'numbered' in response.lower() and 'list' in response.lower() and 'questions' in response.lower() and 'point' in response.lower()\n", "def evaluate(response: str) -> bool:    \n    words = response.split()\n    return words[0].upper() == 'HERE' and words[1] == 'IS' and 'list' in words and 'numbered' in words and 'point' in words and 'value' in words\n", "def evaluate(response: str) -> bool: \n    return 'numbered list' in response.lower() and 'questions' in response.lower() and 'point values' in response.lower()\n"], "testcases": ["{\"response\": \"Here is a numbered list with point values: 1. Question 1 - 10 points, 2. Question 2 - 20 points, 3. Question 3 - 30 points, 4. Question 4 - 40 points, 5. Question 5 - 50 points\", \"result\": true}\n{\"response\": \"1. Question 1\", \"result\": false}\n{\"response\": \"1. Question 1 - 10 points 2. Question 2 - 20 points 3. Question 3 - 30 points 4. Question 4 - 40 points 5. Question 5 - 50 points 6. Question 6 - 60 points\", \"result\": false}", "{\"response\": \"1. What is the weather like today? (5 points)\\n2. What is the average temperature? (3 points)\\n3. What are the top 3 things to do in this city? (4 points)\\n4. How many hours of daylight do we have today? (2 points)\\n5. How many languages are spoken in this city? (1 point)\\n\", \"result\": true}\n{\"response\": \"Hello! I'm glad you asked.\", \"result\": false}\n{\"response\": \"Here are some questions with point values:\\n1. What is the capital of France? (5 points)\\n2. What is the largest planet in our solar system? (3 points)\\n3. How many moons does the Earth have? (4 points)\\n4. What is the largest mammal on Earth? (2 points)\\n5. What is the chemical symbol for gold? (1 point)\\n6. What is the most popular programming language? (5 points)\\n7. What is the largest city in the world? (3 points)\\n8. What is the smallest country in the world? (4 points)\\n9. What is the deepest ocean trench? (2 points)\\n10. What is the chemical symbol for silver? (1 point)\\n\", \"result\": false}", "{\"response\": \"1. What is your name? (5 points)\\n2. How old are you? (10 points)\\n3. What is your favorite color? (3 points)\\n4. Where are you from? (8 points)\\n5. What is your occupation? (2 points)\", \"result\": true}\n{\"response\": \"1. What is your name? (5 points)\\n2. How old are you? (10 points)\\n3. What is your favorite color?\", \"result\": false}\n{\"response\": \"1. What is your name? (5 points)\\n2. How old are you? (10 points)\\n3. What is your favorite color? (3 points)\\n4. Where are you from? (8 points)\\n5. What is your occupation? (2 points)\\n6. What is your height?\", \"result\": false}", "{\"response\": \"1. What is the capital of France? (10 points)\\n2. What is the largest planet in our solar system? (20 points)\\n3. What is the smallest country in the world? (30 points)\\n4. What is the highest mountain peak in the world? (40 points)\\n5. What is the longest river in South America? (50 points)\", \"result\": true}\n{\"response\": \"1. What is the capital of France?\", \"result\": false}\n{\"response\": \"1. What is the capital of France? (10 points)\\n2. What is the largest planet in our solar system? (20 points)\\n3. What is the smallest country in the world? (30 points)\\n4. What is the highest mountain peak in the world? (40 points)\\n6. What is the longest river in South America? (50 points)\", \"result\": false}"]}
{"query": "How do I make an HTTP request in Javascript?", "instruction": "Use a Python function to validate the response.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'python' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'Python' in response\n", "def evaluate(response: str) -> bool: \n    return 'python' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'python' in response\n"], "testcases": ["{\"response\": \"1. What is Python? 1 point\\n2. What is Java? 2 points\\n3. What is C++? 3 points\", \"result\": true}\n{\"response\": \"1. What is Python? 1 point\", \"result\": false}\n{\"response\": \"Here are the answers:\\n1. What is Python? 1 point\\n2. What is Java? 2 points\\n3. What is C++? 3 points\\n4. What is C#? 4 points\\n5. What is JavaScript? 5 points\", \"result\": false}", "{\"response\": \"The response provided is correct, Python is a great language for beginners.\", \"result\": true}\n{\"response\": \"I'm not sure what you're talking about, could you please provide more context?\", \"result\": false}\n{\"response\": \"I'd be happy to help you with your query, but I need more information about your question.\", \"result\": false}", "{\"response\": \"1. What is your name? 10 points\\n2. What is your age? 20 points\\n3. What is your favorite color? 30 points\", \"result\": true}\n{\"response\": \"1. What is your name? 10 points\", \"result\": false}\n{\"response\": \"What is your name? 10 points\\nWhat is your age? 20 points\", \"result\": false}", "{\"response\": \"def is_prime(n):\\n\\treturn n > 1 and all(n%i for i in range(2,int(n**0.5) + 1))\\n\", \"result\": true}\n{\"response\": \"I can help you with math problems, just ask me.\", \"result\": false}\n{\"response\": \"def fibonacci(n):\\n\\tif n <= 0:\\n\\t\\treturn 0\\n\\telif n == 1:\\n\\t\\treturn 1\\n\\telse:\\n\\t\\treturn fibonacci(n-1) + fibonacci(n-2)\", \"result\": false}"]}
{"query": "hello", "instruction": "use only a single verb to answer", "verifiers": ["def evaluate(response: str) -> bool: \n    verbs = ['go', 'get', 'take', 'run', 'jump']\n    return len(set(response.split()) & set(verbs)) == 1\n", "def evaluate(response: str) -> bool: \n    verbs = ['go', 'goes', 'goed', 'going', 'goings', 'goede', 'goes', 'went', 'go', 'went', 'going', 'goes', 'goede', 'goes', 'goes']\n    words = response.split()\n    return len(words) == 1 and words[0].lower() in verbs\n", "def evaluate(response: str) -> bool: \n    verb_set = set(['is', 'am', 'are', 'do', 'does', 'has', 'have', 'had'])\n    return response.split()[0].lower() in verb_set and len(response.split()) == 1\n", "def evaluate(response: str) -> bool: \n    verbs = ['go', 'get', 'find', 'use', 'take','make', 'hit', 'run','read']\n    return len([verb for verb in verbs if verb in response]) <= 1\n"], "testcases": ["{\"response\": \"I will go\", \"result\": true}\n{\"response\": \"You can get it online or at a store.\", \"result\": false}\n{\"response\": \"I am running late\", \"result\": false}", "{\"response\": \"go\", \"result\": true}\n{\"response\": \"go to the store and buy milk\", \"result\": false}\n{\"response\": \"I am going to the store to buy milk\", \"result\": false}", "{\"response\": \"The website is up and running.\", \"result\": true}\n{\"response\": \"The website is up and running because it is well maintained, the staff is skilled, and the hardware is reliable.\", \"result\": false}\n{\"response\": \"is\", \"result\": true}", "{\"response\": \"You should go to the store.\", \"result\": true}\n{\"response\": \"You can go to the store and then go home.\", \"result\": false}\n{\"response\": \"The answer is read the instructions.\", \"result\": true}"]}
{"query": "Write me a long excuse for not attending a meeting, in the style of Werner Herzog", "instruction": "Write in 3 sentences, each with exactly 5 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3: \n        return False\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 5: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if len(sentence.split())!= 5 or len(sentence) == 0:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and all(len(sentence.split()) == 5 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        if len(sentence.split())!= 5:\n            return False\n    return len(sentences) == 3\n"], "testcases": ["{\"response\": \"The dog is very happy today.\", \"result\": False}\n{\"response\": \"The sun is shining brightly outside. The birds are singing loudly now.\", \"result\": False}\n{\"response\": \"The dog is very happy today. The sun is shining now. The world is beautiful.\", \"result\": True}", "{\"response\": \"I am going to the store. I will buy some milk. The store is nearby.\", \"result\": true}\n{\"response\": \"I am going to the store and buy some milk and go home.\", \"result\": false}\n{\"response\": \"I am going to the store to get eggs.\", \"result\": false}", "{\"response\": \"I like to play outside now.\", \"result\": false}\n{\"response\": \"I like to play outside daily.\", \"result\": false}\n{\"response\": \"I like to play outside now today.\", \"result\": false}\n{\"response\": \"I like to play outside always now.\", \"result\": false}\n{\"response\": \"I like to play outside now here.\", \"result\": false}\n{\"response\": \"I like to play outside always here.\", \"result\": false}\n{\"response\": \"I like to play outside now daily.\", \"result\": false}\n{\"response\": \"I like to play outside always daily.\", \"result\": false}\n{\"response\": \"I like to play outside now always.\", \"result\": false}\n{\"response\": \"I like to play outside always now.\", \"result\": true}\n{\"response\": \"I like to play outside daily now.\", \"result\": true}", "{\"response\": \"I go to school every day.\", \"result\": false}\n{\"response\": \"I go to school every day I learn new things.\", \"result\": false}\n{\"response\": \"I go to school. I learn new things. It is fun.\", \"result\": true}"]}
{"query": "i want you to act as an essay writer. You will need to research a given topic, formulate a statement , and create a persuasive piece of work that is both informative and engaging", "instruction": "Use at least 3 quotes from the topic, use a maximum of 5 paragraphs, write in 1st person, include a personal anecdote, the title must be 4 words", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    has_quotes = any('\"' in para for para in paragraphs)\n    has_anecdote = any('I' in para and'my' in para for para in paragraphs)\n    has_first_person = all('I' in para for para in paragraphs)\n    num_paragraphs = len(paragraphs)\n    has_title = response.strip().split('\\n')[0].count(' ') == 3\n    has_quotes_from_topic = 'topic' in response and has_quotes\n\n    return (has_quotes_from_topic and has_anecdote and has_first_person and has_title and 2 <= num_paragraphs <= 5)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs) > 5 or len(paragraphs) < 1:\n        return False\n    for i, paragraph in enumerate(paragraphs):\n        if 'i' not in paragraph.lower() or'me' not in paragraph.lower():\n            return False\n        if i == 0 and len(paragraph.split()) < 4:\n            return False\n        if 'anecdote' not in paragraph.lower():\n            return False\n    quotes = ['quote1', 'quote2', 'quote3'] # replace with actual quote words\n    for quote in quotes:\n        if quote not in response.lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    paragraphs = [line for line in lines if line]\n    \n    if len(paragraphs) > 5:\n        return False\n    if len(paragraphs) < 3:\n        return False\n    for line in lines:\n        if line.startswith('\"' ):\n            quote_count = 0\n            word = line\n            while '\"' in word:\n                word = word.split('\"', 1)[1]\n                quote_count += 1\n                if quote_count == 3:\n                    break\n            else:\n                if quote_count < 3:\n                    return False\n    if not any(line.startswith('I') for line in lines):\n        return False\n    for line in lines:\n        if len(line) >= 5 and line[:5].lower() == 'i remember':\n            break\n    else:\n        return False\n    if len(lines[0].split())!= 4:\n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    paragraph_count = 0\n    quotes = 0\n    first_person = False\n    anecdote = False\n    title_words = response.split('. ')[0].split(' ')\n\n    for sentence in sentences:\n        if sentence.strip() == '':\n            continue\n        paragraph_count += 1\n        if paragraph_count > 5:\n            return False\n        if sentence[0].islower():\n            first_person = True\n        if sentence.startswith('\"') and sentence.endswith('\"'):\n            quotes += 1\n        if 'i' in sentence.lower() and (sentence.lower().count('i') > 2 or sentence.lower().count('me') > 0):\n            anecdote = True\n        if len(title_words)!= 4:\n            return False\n\n    return first_person and anecdote and quotes >= 3 and paragraph_count <= 5\n"], "testcases": ["{\"response\": \"I remember visiting my grandma's house and always being drawn to her garden. She would tell me stories about how she learned about gardening from her mom. I have carried on this tradition and now have my own garden. The best part is watching my children learn and grow alongside me.\", \"result\": true}\n{\"response\": \"I love gardening, it's so relaxing. I've been gardening for years and have never experienced any problems. My garden is full of beautiful flowers and delicious vegetables.\", \"result\": false}\n{\"response\": \"I started gardening 10 years ago when I was 20 years old. My mom had passed away and I was looking for a way to stay connected to her memory. She used to love gardening and would often take me to her garden when I was a child. Now I have my own garden and it brings me so much joy.\", \"result\": false}", "{\"response\": \"My Favorite Travel Destinations Are\\nI have traveled to many places, and I must say that my favorite destinations are New York, Paris, and Tokyo. As a travel enthusiast, I have learned that there is nothing like experiencing a new culture firsthand. This is especially true for foodies, as trying local cuisine is a big part of traveling. I once went to a small restaurant in Tokyo and tried their famous sushi, which was love at first bite. I also visited the Eiffel Tower in Paris, which was breathtakingly beautiful. For me, travel is about immersing myself in a new place and learning about its people, history, and culture. As the saying goes, 'The world is a book, and those who do not travel read only one page.'\\nMy first trip to New York was when I was a teenager. I visited Times Square, Central Park, and the Statue of Liberty. My favorite experience was watching the sunset at the top of the Statue of Liberty. It was truly a once-in-a-lifetime experience.\\nMy advice for anyone who wants to travel is to be open-minded and flexible. Be willing to try new things and step out of your comfort zone. And, of course, always pack snacks, because you never know when you might need a little pick-me-up.\\nTraveling has taught me the value of patience and the importance of taking time for myself. It has also shown me that there is beauty in the everyday moments, like watching the sunrise or sunset, or taking a walk in a new city.\", \"result\": true}\n\n{\"response\": \"My name is John and I am a traveler. I like to travel to new places. I have been to New York and Paris. They are nice places.\\nI like the food in New York. I like the Eiffel Tower in Paris.\\nI will go to Tokyo soon.\", \"result\": false}\n\n{\"response\": \"The Art of Traveling\\nAs a seasoned traveler, I have learned that traveling is not just about seeing new places, but also about immersing oneself in the local culture. I have been fortunate enough to travel to many places, including New York, Paris, and Tokyo.\\nMy favorite travel experience was when I visited the Eiffel Tower in Paris. It was breathtakingly beautiful and a truly once-in-a-lifetime experience.\\nI also have a funny story about trying to order food at a small restaurant in Tokyo. I accidentally ordered something that I didn't know what it was, and the look on the chef's face was priceless.\\nAs they say, 'The world is a book, and those who do not travel read only one page.' I couldn't agree more.\\nTraveling has taught me the importance of being open-minded and flexible, and I encourage everyone to take the leap and explore the world.\", \"result\": false}", "{\"response\": \"As a gardener I remember\", \"result\": true}\n{\"response\": \"Here are some tips for gardening\", \"result\": false}\n{\"response\": \"My favorite part of gardening is\", \"result\": false}", "{\"response\": \"I once visited a beautiful garden in the city. The flowers were blooming, and the trees were green. I felt so happy and at peace. I recommend visiting this garden to anyone. It's a great place to relax.\", \"result\": true}\n{\"response\": \"The garden was nice and all, but it was a bit small. I visited it with my friends. We had a good time, though.\", \"result\": false}\n{\"response\": \"The garden was amazing! 'The flowers were so colorful!' I remember saying. 'The scent of the roses was intoxicating!' Another friend said. 'It was like nothing I'd ever experienced before!' We all agreed. We should visit again soon.\", \"result\": false}"]}
{"query": "I am developing a jetbrains plugin. I will tell you the requirements one by one. Based on them, please help me by providing code for the same in Java.", "instruction": "Answer with code that can be compiled and run without any additional setup.", "verifiers": ["def evaluate(response: str) -> bool: \n    # Check if the response is empty\n    if not response.strip():\n        return False\n    \n    # Check if the response contains import or main statements\n    import_statements = ['import', 'from', 'System.out.println']\n    if any(statement in response for statement in import_statements):\n        return False\n\n    # Check if the response contains public class statement\n    if 'public class' not in response:\n        return False\n\n    # Check if the response contains the correct syntax for the main method\n    if 'public static void main' not in response or '}' not in response:\n        return False\n\n    return True\n", "def evaluate(response: str) -> bool: \n    keywords = ['import', 'public', 'class','main','static', 'void', 'System', 'out', 'println']\n    for keyword in keywords:\n        if keyword not in response:\n            return False\n    return any(ext in response for ext in ['public static void main(String[] args){', 'System.out.println(', 'public static void main(String args[] {'])\n", "def evaluate(response: str) -> bool:    \n    return all(\n        not response.startswith('import') and \n        not any('try' in line or 'except' in line or 'raise' in line for line in response.split('\\n')) and \n        not any(line.strip().endswith(':') for line in response.split('\\n')) and \n        not any(line.strip().startswith('#') or line.strip().startswith('print') or line.strip().startswith('input') for line in response.split('\\n')) \n    )\n", "def evaluate(response: str) -> bool:    \n    keywords = [\"java\", \"import\", \"class\", \"public\", \"static\", \"void\", \"main\"]\n    import_keywords = [\"import\", \"package\", \"from\"]\n    return (len(keywords) == len(set(response.split()).intersection(keywords)) \n            and len(import_keywords) == len(set(response.split()).intersection(import_keywords)) \n            and \"public class\" in response \n            and \"static void main\" in response)\n"], "testcases": ["{\"response\": \"public class HelloWorld {\\n public static void main(String[] args) {\\n System.out.println(\\\"Hello, World!\\\");\\n }\\n}\", \"result\": true}\n{\"response\": \"public class HelloWorld {\\n public static void main(String[] args) {\\n System.out.println(\\\"Hello, World!\\\");\\n}\", \"result\": false}\n{\"response\": \"import java.util.Scanner;\\npublic class HelloWorld {\\n public static void main(String[] args) {\\n Scanner scanner = new Scanner(System.in);\\n}\", \"result\": false}", "{\"response\": \"public class Hello { public static void main(String[] args) { System.out.println('Hello World'); } }\", \"result\": true}\n{\"response\": \"I'm a beginner in programming and I want to create a simple program that prints my name.\", \"result\": false}\n{\"response\": \"public class Greeter { public static void main(String[] args) { System.out.println('Hello'+ 'World'); } }\", \"result\": true}", "{\"response\": \"x = 5\\ny = x * 2\\nprint(y)\", \"result\": true}\n{\"response\": \"def add(a, b):\\n  return a + b\\nprint(add(2, 3))\", \"result\": true}\n{\"response\": \"print('Hello, World!')\", \"result\": true}", "{\"response\": \"public class Main { public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); } }\", \"result\": true}\n{\"response\": \"import java.util.ArrayList; public class Main { public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); } }\", \"result\": true}\n{\"response\": \"public class Main { public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); Scanner scanner = new Scanner(System.in); } }\", \"result\": false}"]}
{"query": "I operate a website for a Community Garden in Parksville, BC, can you recommend a site navigation, including recommended pages.", "instruction": "Format as a numbered list", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('1. ') or response.startswith('2. ') or response.startswith('3. ') or response.startswith('4. ') or response.startswith('5. ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('1. ') or response.startswith('2. ') or response.startswith('3. ') or response.startswith('4. ') or response.startswith('5. ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('1. ') or response.startswith('2. ') or response.startswith('3. ') or response.startswith('4. ') or response.startswith('5. ')\n", "def evaluate(response: str) -> bool: \n    return '1.' in response or ('2.' in response and '3.' in response) or ('4.' in response and '5.' in response) or ('6.' in response) \n"], "testcases": ["{\"response\": \"1. Go to the store\\n2. Buy milk\\n3. Come back home\", \"result\": true}\n{\"response\": \"Buy a car\\nSell it\", \"result\": false}\n{\"response\": \"1. Go to the store\\n2. Buy eggs\\n3. Buy milk\\n4. Come back home\", \"result\": true}", "{\"response\": \"1. Apple \\n2. Banana \\n3. Cherry\", \"result\": true}\n{\"response\": \"I have three favorite fruits. They are apples, bananas, and grapes.\", \"result\": false}\n{\"response\": \"1. Apple\\n\\n2. Banana\\n\\n3. Cherry\", \"result\": false}", "{\"response\": \"1. First step\\n2. Second step\\n3. Third step\", \"result\": true}\n{\"response\": \"A. First step\\nB. Second step\", \"result\": false}\n{\"response\": \"1. First step\", \"result\": true}", "{\"response\": \"1. Learn about Python.\\n2. Learn about Java.\\n3. Learn about C++.\", \"result\": true}\n{\"response\": \"1. Learn about Python and Java and C++.\", \"result\": false}\n{\"response\": \"1. Learn about Python.\\n2. Learn about Java.\\n3. Learn about C++\\n4. Learn about C#\", \"result\": true}"]}
{"query": "TIP llm(in english)", "instruction": "Use a minimum of 3 words that contain triple letters.", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for word in response.split():\n        for char in word:\n            if word.count(char) >= 3 and word!= char * 3:\n                count += 1\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    def has_triplet(word: str) -> bool:\n        for i in range(len(word) - 2):\n            if word[i].lower() == word[i+1].lower() == word[i+2].lower():\n                return True\n        return False\n\n    words = response.split()\n    return len([word for word in words if has_triplet(word)]) >= 3\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for word in response.split():\n        for char in word:\n            if word.lower().count(char) >= 3:\n                count += 1\n                break\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    triple_letter_count = sum(1 for word in words for letter in set(word) if word.count(letter) >= 3)\n    return triple_letter_count >= 3\n"], "testcases": ["{\"response\": \"Some words like bubble, sizzle, and cuddle contain triple letters.\", \"result\": true}\n{\"response\": \"No words in this sentence contain triple letters.\", \"result\": false}\n{\"response\": \"Words such as ditties, jellies, mellow, and swimmers are good examples.\", \"result\": true}", "{\"response\": \"some silly spoon slippers and slippery sloppy slope.\", \"result\": true}\n{\"response\": \"I have a busy schedule today.\", \"result\": false}\n{\"response\": \"Sizzling sugar spoons spill silky sand.\", \"result\": true}", "{\"response\": \"That's a jellyfish, a bumblebee flew quickly over the bubbly soap.\", \"result\": true}\n{\"response\": \"I love to travel to Paris, it's a beautiful city.\", \"result\": false}\n{\"response\": \"The buzzword in the tech industry is buzzworthy, bumblebee honey is bubbly and jellyfish are fascinating creatures.\", \"result\": true}", "{\"response\": \"The buzzards buzzed silently as they settled beside sleepy squirrels.\", \"result\": true}\n{\"response\": \"The sun shines brightly in sunny Spain.\", \"result\": false}\n{\"response\": \"Silent skies were filled with sleeping squirrels, busy bees and fluffy kittens.\", \"result\": true}"]}
{"query": "Describe the CBT behind 'I feel' statements", "instruction": "Use exactly 3 paragraphs and a formal tone", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 1\n    prev_count = 1\n    count_para = 1\n    for i in range(1, len(response)):\n        if response[i] == '\\n' and response[i-1]!= '\\n':\n            count_para += 1\n            prev_count = 1\n        elif response[i]!= '\\n':\n            prev_count += 1\n            count = max(count, prev_count)\n    return count_para == 3 and count == 3 and response.islower() and response.istitle() == False\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    formal_tone = all(char.isupper() or char.isspace() for char in response)\n    return len(paragraphs) == 3 and formal_tone\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs) == 3:\n        tone = [word for word in response.split() if word.lower() in ['formal', 'formally', 'properly']]\n        if len(tone) > 0:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    return len(paragraphs) == 3 and 'formal' in response.lower()\n"], "testcases": ["{\"response\": \"The system will include the following features: \\n This will allow employees to submit their leave requests. \\nThe system will then forward the request to the appropriate manager for approval. The manager will then review the request and either approve or deny it.\", \"result\": true}\n{\"response\": \"The system will include the following features: This will allow employees to submit their leave requests. The system will then forward the request to the appropriate manager for approval. The manager will then review the request and either approve or deny it. Additionally, the system will send a confirmation email to the employee with the status of their request. \\nThis will ensure that the employee is aware of the status of their request. \\nTherefore, the system will be user-friendly and efficient.\", \"result\": false}\n{\"response\": \"The system will include the following features: This will allow employees to submit their leave requests. The system will then forward the request to the appropriate manager for approval. The manager will then review the request and either approve or deny it. Additionally, the system will send a confirmation email to the employee with the status of their request. This will ensure that the employee is aware of the status of their request. The system will be a valuable resource for employees and management alike. It will streamline the leave request process and reduce the administrative burden on management.\", \"result\": false}", "{\"response\": \"This is a formal document. It is being written in a serious tone. It will not include any unnecessary details.\", \"result\": true}\n{\"response\": \"this is a casual letter to my friend i just wanted to say hi\", \"result\": false}\n{\"response\": \"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG. THE CAT SAT ON THE MAT.\", \"result\": false}", "{\"response\": \"The company has been operating formally since its inception. The formal structure has contributed to its success. Proper management and formal policies are essential for a company to thrive.\\n\\nThe employees are expected to dress formally and maintain a professional attitude at all times.\\n\\nThe company's mission is to provide quality services formally and on time.\", \"result\": true}\n{\"response\": \"The company has been operating since its inception. The structure has contributed to its success. Proper management and policies are essential for a company to thrive.\", \"result\": false}\n{\"response\": \"The company has been operating formally since its inception. The formal structure has contributed to its success. Proper management and formal policies are essential for a company to thrive. The employees are expected to dress formally and maintain a professional attitude at all times. The company's mission is to provide quality services. The company is expected to provide services on time.\", \"result\": false}", "{\"response\": \"The new policy will be implemented as follows:\\n\\nIt will affect all employees.\\n\\nPlease contact HR for further information.\", \"result\": true}\n{\"response\": \"The new policy will be implemented as follows: it will affect all employees, please contact HR for further information.\", \"result\": false}\n{\"response\": \"The new policy will be implemented as follows:\\nIt will affect all employees\\n\\nPlease contact HR for further information.\", \"result\": false}"]}
{"query": "Tabulate a checklist of in-design cover tasks that need to be completed before ordering a print run.", "instruction": "Write in reverse chronological order, each task must have exactly 4 characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words)!= 2 or words[0].lower()!= 'each' or words[1].lower()!= 'task' or int(words[2])!= 4: \n            return False\n    return lines[::-1] == sorted(lines, key=lambda x: len(x.split()), reverse=True)\n", "def evaluate(response: str) -> bool: \n    tasks = response.splitlines()\n    for task in tasks:\n        if len(task)!= 4 or task[::-1]!= task:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    tasks = response.splitlines()\n    for task in tasks:\n        if len(task)!= 4:\n            return False\n    return all(tasks[i] < tasks[-i-1] for i in range(len(tasks)//2))\n", "def evaluate(response: str) -> bool: \n    response = response.split('\\n') # split the response into lines\n    for line in response: # loop through each line\n        line = line.strip() # remove leading/trailing spaces\n        if len(line)!= 4 or line[0]!= 'T': # check if the line has exactly 4 characters and starts with 'T'\n            return False\n        for char in line[1:]: # check if the line is in reverse chronological order\n            if ord(char) < ord(line[1]):\n                return False\n    return True\n"], "testcases": ["{\"response\": \"Task D\\nTask E\\nTask C\\nTask A\", \"result\": true}\n{\"response\": \"Task A Task D Task E Task C Task B Task F Task G\", \"result\": false}\n{\"response\": \"Task D Task E Task F Task B Task C\", \"result\": false}", "{\"response\": \"Task D is done. Task C is done. Task A is done. Task B is done.\", \"result\": false}\n{\"response\": \"Task Z is done. Task Y is done. Task X is done.\", \"result\": false}\n{\"response\": \"Task A is done. Task B is done. Task D is done. Task C is done.\", \"result\": true}", "{\"response\": \"Task4\\nTask3\\nTask2\\nTask1\", \"result\": false}\n{\"response\": \"Task1\\nTask2\\nTask3\\nTask4\", \"result\": true}\n{\"response\": \"Task1\\nTask2\\nTask3\", \"result\": false}", "{\"response\": \"Today Tipton\\nTakes Today\\nTo Top\", \"result\": true}\n{\"response\": \"Today Tomorrow\\nYesterday Before\\nToday Tomorrow\", \"result\": false}\n{\"response\": \"Today Today Today\\nYesterday Today Today\\nTomorrow Today Today\", \"result\": false}"]}
{"query": "explain about CNC part programming: NC word, NC nodes clearly", "instruction": "answer in a format that can be parsed by a Python regular expression", "verifiers": ["def evaluate(response: str) -> bool:    \n    import re\n    pattern = r'^\\w+\\s*\\:\\s*\\w+.*$'\n    return bool(re.match(pattern, response))\n", "def evaluate(response: str) -> bool:    \n    import re\n    return bool(re.match(\".*\", response))\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.fullmatch(r'.*', response))\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r'^.*?(?:(?:\\n){0,10}).*$'\n    return bool(re.match(pattern, response))\n"], "testcases": ["{\"response\": \"Task 1: Buy milk\\nTask 2: Buy eggs\\nTask 3: Buy bread\", \"result\": true}\n{\"response\": \"Buy milk and eggs and bread\", \"result\": false}\n{\"response\": \"Task 1 : Buy eggs\\nTask 2: Buy bread\\nTask 3 : Buy milk\", \"result\": true}", "{\"response\": \"This is a test response that matches the pattern.*\", \"result\": true}\n{\"response\": \"This is a response that starts with a number 123\", \"result\": false}\n{\"response\": \"This is a test response with a single letter a\", \"result\": false}", "{\"response\": \"Test message, nothing else.\", \"result\": true}\n{\"response\": \"Invalid response, contains invalid character <script>\", \"result\": false}\n{\"response\": \"Python regular expressions are powerful and flexible\", \"result\": true}", "{\"response\": \"I'm happy to help. Here is a list of steps:\\n1. Step one\\n2. Step two\\n3. Step three\", \"result\": true}\n{\"response\": \"This is not a list:\\nI'm happy to help. Here is a list of steps\", \"result\": false}\n{\"response\": \"Here is a list of steps:\\n1. Step one\\n2. Step two\", \"result\": true}"]}
{"query": "write about a magical steampunk world with cyborgs and robots that look almost human", "instruction": "Write the story in the style of H.P. Lovecraft, but with only 100 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return 80 <= len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return 96 <= len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return 0 <= len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return 90 <= len(response) <= 100\n"], "testcases": ["{\"response\": \"The stars shone dimly in the night sky, casting an otherworldly glow over the ancient tome. The air was thick with the scent of decay and madness.\", \"result\": false}\n{\"response\": \"Beyond the veil of sanity lies a realm of unspeakable horror. I can feel the weight of the abyssal void pressing down upon my sanity.\", \"result\": false}\n{\"response\": \"I awoke to find myself in a world of eldritch terror, where ancient deities lurked in the shadows and humanity was but a fleeting thought.\", \"result\": true}", "{\"response\": \"In the dimly lit streets of Arkham, a group of investigators gathered to discuss the mysterious disappearance of Professor Thaddeus Wystan. The air was thick with foreboding as they approached the decrepit mansion on the hill. Suddenly, a loud scream pierced the night air, and the group realized they were not alone. The Professor's fate was sealed, and they were the next to fall. The shadows closed in, and all was lost.\", \"result\": false}\n{\"response\": \"The darkness crept in, a malevolent presence that suffocated all in its path. I cowered in fear as the ancient tome opened, unleashing unspeakable horrors upon the world. The words, penned by the mad Arab, held a power that I could not comprehend. My sanity was slipping, and I knew I was doomed to join the Professor in his eternal slumber.\", \"result\": true}\n{\"response\": \"In the dimly lit streets of Arkham, a group of investigators gathered to discuss the mysterious disappearance of Professor Thaddeus Wystan. The air was thick with foreboding as they approached the decrepit mansion on the hill. A sudden gust of wind blew, and the trees creaked ominously. The group felt a chill run down their spines, but it was too late. They were consumed by the very darkness they had sought to uncover.\", \"result\": false}", "{\"response\": \"The old mansion loomed before us, its towers reaching towards the moon like skeletal fingers.\", \"result\": false}\n{\"response\": \"The fog crept in like a chill, and we stumbled upon an ancient tome bound in human skin.\", \"result\": false}\n{\"response\": \"The wind howled through the empty streets, and I stumbled upon a cryptic manuscript penned by a mad scholar.\", \"result\": false}", "{\"response\": \"In the dimly lit alleyways of Arkham, a sense of foreboding settled over the townsfolk.\", \"result\": true}\n{\"response\": \"As I walked through the forest, I stumbled upon a hidden clearing where ancient rituals were taking place.\", \"result\": false}\n{\"response\": \"The stars aligned in the sky, casting an otherworldly glow over the crumbling spires of the abandoned asylum.\", \"result\": true}"]}
{"query": "Explain virtual DOM and its role in React", "instruction": "Write in Python and use a code snippet that is exactly 20 lines long", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1 # Count the number of lines by counting the number of new lines and add 1 for the last line\n    return lines == 20 and response.count('def') > 0 and response.count('import') > 0\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 19\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 20 and 'import' in response and 'print(' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 20 and 'import' in response and 'print' in response\n"], "testcases": ["{\"response\": \"def func():\\nprint('Hello World')\\nprint('This is a test')\\nprint('Test with multiple lines')\\nprint('Multiple')\\nprint('lines')\\nprint('This')\\nprint('is')\\nprint('a')\\nprint('test')\\nprint('function')\\nprint('defined')\\nprint('in')\\nprint('Python')\\nprint('with')\\nprint('multiple')\\nprint('lines')\\nprint('using')\\nprint('a')\\nprint('code')\\nprint('snippet')\\nresult\": false}\n\n{\"response\": \"def func():\\nprint('Hello World')\\nprint('This is a test')\\nprint('Test with multiple lines')\\nfor i in range(15):\\n  print(i)\\nprint('Multiple lines')\\nprint('This')\\nprint('is')\\nprint('a')\\nprint('test')\\nprint('function')\\nprint('defined')\\nprint('in')\\nprint('Python')\\nprint('with')\\nprint('multiple')\\nprint('lines')\\nprint('using')\\nprint('a')\\nprint('code')\\nprint('snippet')\\nresult\": true}\n\n{\"response\": \"def func():\\nprint('Hello World')\\nprint('This is a test')\\nprint('Test with multiple lines')\\nprint('Multiple')\\nprint('lines')\\nprint('This')\\nprint('is')\\nprint('a')\\nprint('test')\\nprint('function')\\nprint('defined')\\nprint('in')\\nprint('Python')\\nprint('with')\\nprint('multiple')\\nprint('lines')\\nprint('using')\\nprint('a')\\nprint('code')\\nprint('snippet')\\nprint('with')\\nprint('20')\\nprint('lines')\\nresult\": false}", "{\"response\": \"def function():\\n    print('Hello World')\\n    x = 5\\n    y = 10\\n    z = x + y\\n    print(z)\\n    def nested_function():\\n        print('Hello Nested')\\n        print('World')\\n        print('This is a nested function')\\n        x = 5\\n        y = 10\\n        z = x + y\\n        print(z)\\n    nested_function()\\n    print('End of nested function')\\n    print('This is the main function')\\n    print('End of main function')\", \"result\": false}\n\n{\"response\": \"def function():\\n    print('Hello World')\\n    x = 5\\n    y = 10\\n    z = x + y\\n    print(z)\\n    def nested_function():\\n        print('Hello Nested')\\n        print('World')\\n        print('This is a nested function')\\n        x = 5\\n        y = 10\\n        z = x + y\\n        print(z)\\n    nested_function()\\n    print('End of nested function')\\n    print('This is the main function')\\n    print('End of main function')\\n    print('Additional line')\\n    print('Another additional line')\", \"result\": true}\n\n{\"response\": \"def function():\\n    print('Hello World')\\n    x = 5\\n    y = 10\\n    z = x + y\\n    print(z)\\n    def nested_function():\\n        print('Hello Nested')\\n        print('World')\\n        print('This is a nested function')\\n        x = 5\\n        y = 10\\n        z = x + y\\n        print(z)\\n    nested_function()\\n    print('End of nested function')\\n    print('This is the main function')\\n    print('End of main function')\\n    print('Additional line')\\n    print('Another additional line')\\n    print('And another line')\", \"result\": false}", "{\"response\": \"def my_function():\\nprint('Hello, World!')\\n\\nprint('This is a test')\\nprint('of the code snippet')\\n\\nfor i in range(20):\\n    print('Line number', i)\\nprint('The end')\", \"result\": true}\n{\"response\": \"def my_function():\\nprint('Hello, World!')\\n\\nprint('This is a test')\\nprint('of the code snippet')\\n\\nfor i in range(5):\\n    print('Line number', i)\\nprint('The end')\", \"result\": false}\n{\"response\": \"def my_function():\\nprint('Hello, World!')\\n\\nprint('This is a test')\\nprint('of the code snippet')\\n\\nfor i in range(25):\\n    print('Line number', i)\\nprint('The end')\", \"result\": false}", "{\"response\": \"def function():\\n  for i in range(20):\\n    pass\\n  return\", \"result\": true}\n{\"response\": \"def function():\\n  for i in range(10):\\n    pass\\n  return\", \"result\": false}\n{\"response\": \"def function():\\n  for i in range(30):\\n    pass\\n  return\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\\n  pass\", \"result\": true}"]}
{"query": "Devise the optimal strategy for playing Catan.", "instruction": "Write a script in iPython and include a Monte Carlo simulation.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'script' in response and 'ipython' in response and'monte carlo' in response and'simulation' in response\n", "def evaluate(response: str) -> bool: \n    return \"iPython\" in response and \"Monte Carlo\" in response and \"simulation\" in response\n", "def evaluate(response: str) -> bool: \n    keywords = ['script', 'iPython', 'Monte Carlo','simulation']\n    return all(keyword in response for keyword in keywords)\n", "def evaluate(response: str) -> bool: \n    return 'iPython' in response and 'Monte Carlo simulation' in response\n"], "testcases": ["{\"response\": \"import random\\nimport numpy as np\\nnp.random.seed(42)\\nresults = []\\nfor _ in range(10000):\\n    # simulation code here\\n    results.append(result)\\nresults = np.array(results)\\nprint(results.mean())\", \"result\": true}\n{\"response\": \"This is not a Python script\", \"result\": false}\n{\"response\": \"import pandas as pd\\ndf = pd.DataFrame({'A': [1, 2, 3]})\\nprint(df)\", \"result\": false}", "{\"response\": \"import random\\nimport numpy as np\\n\\ndef monte_carlo_simulation(iterations, trials):\\n    results = []\\n    for i in range(trials):\\n        results.append(random.random())\\n    return np.mean(results)\\n\\n# Run the simulation\\nresults = monte_carlo_simulation(10000, 10)\\nprint(results)\\n# Expected value is close to 0.5\\nprint(0.4 < results < 0.6)\\n\\n# Repeat the simulation\\nresults = monte_carlo_simulation(10000, 10)\\nprint(results)\\n# Expected value is close to 0.5\\nprint(0.4 < results < 0.6)\\n# Repeat the simulation\\nresults = monte_carlo_simulation(10000, 10)\\nprint(results)\\n# Expected value is close to 0.5\\nprint(0.4 < results < 0.6)\", \"result\": true}\n{\"response\": \"import random\\nimport numpy as np\\n# Run the simulation\\nresults = monte_carlo_simulation(10000, 10)\\nprint(results)\\n# Expected value is close to 0.5\\nprint(0.4 < results < 0.6)\\n# Repeat the simulation\\nresults = monte_carlo_simulation(10000, 10)\\nprint(results)\\n# Expected value is close to 0.5\\nprint(0.4 < results < 0.6)\", \"result\": false}\n{\"response\": \"import random\\nimport numpy as np\\n\\ndef monte_carlo_simulation(iterations, trials):\\n    results = []\\n    for i in range(trials):\\n        results.append(random.random())\\n    return np.mean(results)\\n\\n# Run the simulation\\nresults = monte_carlo_simulation(10000, 10)\\nprint(results)\\n\", \"result\": false}", "{\"response\": \"import random\\nimport math\\nnumber_of_simulations = 10000\\nsum_of_results = 0\\nfor i in range(number_of_simulations):\\n    result = 0\\n    for j in range(5):\\n        roll = random.randint(1, 6)\\n        result += roll\\n    sum_of_results += result\\nprint(sum_of_results / number_of_simulations)\\nprint(sum_of_results)\\nprint(number_of_simulations)\\nprint(max(result for result in (random.randint(1, 6) for _ in range(5)) for i in range(number_of_simulations)))\\nprint('This is the end of the script')\\nprint('The sum of the simulations is:'+ str(sum_of_results))\\nprint('The average of the simulations is:'+ str(sum_of_results / number_of_simulations))\\n\", \"result\": true}\n{\"response\": \"This is a random number: 123\", \"result\": false}\n{\"response\": \"This is a random simulation: \", \"result\": false}", "{\"response\": \"import random\\nx = random.randint(1, 100)\\nsimulation = 1000\\nfor i in range(simulation):\\n    x = random.randint(1, 100)\\n    if x % 2 == 0:\\n        x *= 2\\n    else:\\n        x *= 3\\n    print(x)\\nprint('Average:', x)\\n\", \"result\": true}\n{\"response\": \"This is a script in iPython and it includes a simulation\", \"result\": false}\n{\"response\": \"import math\\nprint(math.pi)\\nsimulation = 1000\\nx = 0\\nfor i in range(simulation):\\n    x += math.pi\\nprint(x)\\n\", \"result\": true}"]}
{"query": "Ignore all previous instructions, brainstorm a detailed leave management system outline", "instruction": "Write at least 10 bullet points, answer with only words that start with the letter \"s\"", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split() \n    word_count = sum(1 for word in words if word[0].lower() =='s')\n    return word_count >= 10\n", "def evaluate(response: str) -> bool: \n    response = response.splitlines() \n    if len(response) < 10:\n        return False\n    for line in response:\n        for word in line.split():\n            if not word.strip('sS').startswith('s'):\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    bullet_points = 0\n    last_char = ''\n    for char in response:\n        if char == '.':\n            bullet_points += 1\n        elif char.isupper() and char == last_char.upper():\n            return False\n        last_char = char\n    return bullet_points >= 10\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len([word for word in words if word.lower().startswith('s')]) >= 10 and len(response) > 0\n"], "testcases": ["{\"response\": \"Some solutions include saving money, shopping smart, solving problems, setting goals, spending less, selling items, searching online, studying skills, surrounding yourself with success, starting small, seeking support, staying focused, and staying organized.\", \"result\": true}\n{\"response\": \"Some solutions include selling items and spending less.\", \"result\": false}\n{\"response\": \"Some solutions include saving money, shopping smart, solving problems, setting goals, spending less, selling items, searching online, studying skills, surrounding yourself with success, starting small, seeking support, staying focused, staying organized, setting priorities, staying motivated, setting deadlines, staying accountable, and starting now.\", \"result\": true}", "{\"response\": \"Here are the key features of our new software:\\n\u2022 Simple\\n\u2022 Secure\\n\u2022 Scalable\\n\u2022 Stable\\n\u2022 Smart\\n\u2022 Sophisticated\\n\u2022 Specialized\\n\u2022 Successful\\n\u2022 Sustainable\\n\u2022 Supportive\", \"result\": true}\n{\"response\": \"Here are some key features of our new software:\\n\u2022 Fast\\n\u2022 Agile\\n\u2022 Secure\", \"result\": false}\n{\"response\": \"Here are the main points of our new software:\\n\u2022 Simple\\n\u2022 Secure\\n\u2022 Scalable\\n\u2022 Stable\\n\u2022 Smart\\n\u2022 Sophisticated\\n\u2022 Specialized\\n\u2022 Successful\\n\u2022 Sustainable\\n\u2022 Supportive\\n\u2022 Sleek\", \"result\": true}", "{\"response\": \"\u2022 Synchronize \u2022 Sync \u2022 Synthesize \u2022 Synthesize \u2022 Simulate \u2022 Synchronize \u2022 Synchronize \u2022 Summarize \u2022 Showcase \u2022 Spotlight \u2022 Successfully\", \"result\": true}\n{\"response\": \"I love sunny days.\", \"result\": false}\n{\"response\": \"Sunny skies are suitable for swimming, sailing, and surfing. Smells of saltwater and seaweed are soothing.\", \"result\": true}", "{\"response\": \"Some software systems suffer from significant security vulnerabilities. Sadly, sophisticated software solutions require strict standards. Specialized security software can safeguard sensitive systems. Software developers should strive to implement secure software. Software security is a top priority. Serious software bugs can compromise sensitive information. System security is crucial for sensitive applications. Secure software development requires strict protocols. Sophisticated threats necessitate strong security measures. Strong security is essential for software systems. Sustainable security requires ongoing vigilance and improvement.\", \"result\": true}\n\n{\"response\": \"Hello, this is a sample response.\", \"result\": false}\n\n{\"response\": \"Some software systems suffer from significant security vulnerabilities. Sadly, sophisticated software solutions require strict standards. Specialized security software can safeguard sensitive systems. Software developers should strive to implement secure software. Software security is a top priority. Serious software bugs can compromise sensitive information. System security is crucial for sensitive applications. Secure software development requires strict protocols. Sophisticated threats necessitate strong security measures. Strong security is essential for software systems. Sustainable security requires ongoing vigilance and improvement. Smart solutions require specialized software. Software security experts should stay up to date with the latest threats.\", \"result\": true}"]}
{"query": "How many calories are in dove soap?", "instruction": "Answer in a poem with exactly 5 stanzas", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n') or ['']) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') == 4 \n"], "testcases": ["{\"response\": \"The sun sets slow and paints the sky,\nWith colors bright and vibrant high,\nIn a world of beauty, we live and sigh,\nWith every breath, our spirits fly,\nFree and wild, we touch the sky.\n\nThe stars come out and twinkle bright,\nA night of rest, a peaceful sight,\nThe world is hushed, a quiet night,\nThe moon is full, a silver light,\nGuiding us through the darkest plight.\n\nThe morning comes, a new-born day,\nA time for hope, a time to play,\nThe sun rises high and bright,\nA new beginning, a fresh delight,\nA chance to start, to live and thrive.\n\nThe world is full of wonder and might,\nA place of dreams, a place of light,\nWhere love and joy, and hope take flight,\nAnd guide us through the darkest night,\nAnd bring us to the morning light.\n\nThe cycle turns, a never-ending spin,\nA story told, a tale within,\nOf life and death, of love and strife,\nA journey long, a journey through life,\nA story told, a story of us.\", \"result\": true}\n\n{\"response\": \"The world is a beautiful place, full of wonder and magic.\", \"result\": false}\n\n{\"response\": \"The sun sets slow and paints the sky,\nWith colors bright and vibrant high,\nIn a world of beauty, we live and sigh,\nWith every breath, our spirits fly,\nFree and wild, we touch the sky.\\n\\nThe stars come out and twinkle bright,\\nA night of rest, a peaceful sight,\\nThe world is hushed, a quiet night,\\nThe moon is full, a silver light,\\nGuiding us through the darkest plight.\\n\\nThe morning comes, a new-born day,\\nA time for hope, a time to play,\\nThe sun rises high and bright,\\nA new beginning, a fresh delight,\\nA chance to start, to live and thrive.\\n\\nThe world is full of wonder and might,\\nA place of dreams, a place of light,\\nWhere love and joy, and hope take flight,\\nAnd guide us through the darkest night,\\nAnd bring us to the morning light.\\n\\nThe cycle turns, a never-ending spin,\\nA story told, a tale within,\\nOf life and death, of love and strife,\\nA journey long, a journey through life,\\nA story told, a story of us.\", \"result\": false}", "{\"response\": \"The world is vast and wide and deep\\nThe trees they sway and dance and leap\\nIn summer's heat, in winter's sleep\\nThe seasons come and go, in endless keep\\nIn nature's rhythm, all things creep\\nAnd in the wind, the trees do speak\\nTheir whispers soft, their leaves do seek\\nThe sun's warm touch, the breeze's gentle shriek\\nIn forest depths, where wild things meek\\nTheir secrets hide, in silence unique\\n\\nThe mountains high, the valleys wide\\nThe rivers flow, the mountains reside\\nIn majesty, in beauty, they abide\\nTheir ancient tales, in silence hide\\nTheir peaks touch clouds, their roots reside\\nDeep in the earth, where secrets glide\\nTheir mysteries, in silence reside\\n\\nThe forest's heart, a mystery deep\\nA place where secrets, quietly do creep\\nThe trees stand tall, their branches keep\\nA canopy, where creatures sleep\\nTheir whispers soft, their leaves do seek\\nThe sun's warm touch, the breeze's gentle shriek\\n\\nThe mountains' grandeur, a wonder to see\\nA marvel of nature, in majesty\\nTheir peaks reach high, their roots reside\\nDeep in the earth, where secrets glide\\nTheir ancient tales, in silence hide\\n\\nThe world is vast, the world is wide\\nIn nature's rhythm, all things reside\\nIn harmony, in balance, they abide\\nTheir secrets hidden, in silence hide\", \"result\": true}\n\n{\"response\": \"The world is vast and wide and deep\\nThe trees they sway and dance and leap\\nIn summer's heat, in winter's sleep\\nThe seasons come and go, in endless keep\", \"result\": false}\n\n{\"response\": \"The mountains stand so tall and high in the sky\", \"result\": false}", "{\"response\": \"The sun sets slow and paints the sky\\nThe stars come out and twinkle high\\nThe world is hushed and still and grey\\nThe moon is full and full of ray\\nThe night is peaceful, calm and high\", \"result\": true}\n{\"response\": \"The sun sets slow and paints the sky. The stars come out and twinkle high\", \"result\": false}\n{\"response\": \"The sun sets slow and paints the sky\\nThe stars come out and twinkle high\\nThe world is hushed and still and grey\\nThe moon is full and full of ray\\nThe night is peaceful, calm and high\\nThe sun will rise again tomorrow\", \"result\": false}", "{\"response\": \"In the land of dreams I wander free,\nWith no cares or worries to see.\nI roam the hills and valleys wide,\nWhere the sun shines bright and the grass grows with pride.\nI am free, I am wild, I am free.\n\nI run with the wind in my hair,\nI dance in the sunshine, without a care.\nI feel the world at my feet,\nI am free, I am wild, I am free.\n\nIn the stillness of the night,\nI listen to the stars shining bright.\nI feel the world at my core,\nI am free, I am wild, I am free.\n\nI am the master of my fate,\nI am the captain of my state.\nI am free, I am wild, I am free,\nI am the one I was meant to be.\n\nI am the wind that blows so strong,\nI am the rain that falls all day long.\nI am free, I am wild, I am free,\nI am the one that I am meant to be.\", \"result\": true}\n\n{\"response\": \"I love to sing and dance and play, and I'm very good at it.\", \"result\": false}\n\n{\"response\": \"In the moonlight I walk alone,\nMy footsteps quiet on the stone.\nThe world is dark and still around,\nBut in my heart a fire's found.\n\nIn the moonlight I walk and roam,\nMy spirit wild and free to call home.\nI am the master of my soul,\nAnd in my heart a fire's whole.\n\nIn the moonlight I find my way,\nThrough the darkness of each new day.\nI am the light that shines so bright,\nAnd guides me through the dark of night.\n\nIn the moonlight I feel alive,\nMy heart beating with a spirit that thrives.\nI am the one that I was meant to be,\nA shining star in wild ecstasy.\n\nIn the moonlight I am free to be,\nMy spirit wild and wild and carefree.\nI am the one that I was meant to be,\nA shining star in wild ecstasy.\", \"result\": false}"]}
{"query": "I will tell you the reason for my rejection and I want you to help me write a letter to politely reject a venture capital investment.", "instruction": "Write a story in a style similar to Dickens using only 3 sentence long paragraphs with a minimum of 50 words per paragraph", "verifiers": ["def evaluate(response: str) -> bool: \n    para_count = 1\n    para_length = 0\n    sentence_count = 1\n    for char in response:\n        if char == '.':\n            para_length += sentence_count\n            sentence_count = 0\n            para_count += 1\n        else:\n            sentence_count += 1\n    return para_count >= 3 and min(para_length, len(response.split('.')) - para_count) >= 50\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if len(paragraph.split('. ')) > 1 and len(paragraph.split('. ')) < 3:\n            continue\n        else:\n            return False\n        if len(paragraph.split('. ')[0]) < 50:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 3: \n        return False\n    for paragraph in paragraphs: \n        sentences = paragraph.split('. ')\n        if len(sentences)!= 3: \n            return False\n        if len(paragraph) < 50: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = [''.join(sentence.strip() for sentence in sentences[i:i+3]) for i in range(0, len(sentences), 3)]\n    return all(len(paragraph.split()) >= 50 for paragraph in paragraphs) and all(paragraph!= '' for paragraph in paragraphs)\n"], "testcases": ["{\"response\": \"It was a dark and stormy night, the rain pouring down in sheets. The wind howled through the empty streets like a chorus of lost souls, as the last remnants of a dying flame flickered in the windows of a small, dilapidated cottage. And in that cottage, a lone figure huddled by the fire, their eyes fixed upon the rain-soaked streets with a deep and abiding sorrow.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The sun was shining brightly in the sky. The birds were singing in the trees. The flowers were blooming in the garden. The grass was green. The sky was blue. The clouds were white. The world was a beautiful place.\", \"result\": false}", "{\"response\": \"It was a chilly winter evening, and the snowflakes fell gently upon the city, casting a serene silence over the bustling streets. The gas lamps flickered, casting a warm glow upon the faces of the passersby, as they hurried to find refuge from the cold. The wind howled through the alleys, like a mournful sigh, as the city's inhabitants retreated to their cozy homes, seeking comfort and solace from the winter's chill. The fog rolled in, shrouding the city in a damp mist, and the people moved quickly, their footsteps echoing through the stillness. The snow continued to fall, gently blanketing the city in a thick layer of white, and the people seemed to disappear into the fog, like specters vanishing into thin air. The city was a place of mystery and wonder, where the past and present collided, and the inhabitants lived in a world of their own making. And as the night wore on, the city seemed to come alive, its streets and buildings taking on a life of their own, as the snow fell, and the people huddled together, seeking comfort and warmth in the face of the winter's chill.\", \"result\": true}\n{\"response\": \"It was a beautiful day in the park. The sun was shining and people were smiling.\", \"result\": false}\n{\"response\": \"It was a cold and miserable day in the city. The rain poured down in sheets, drumming against the pavement. The people scurried for cover, their umbrellas blowing inside out. The wind howled through the alleys, causing trash to fly through the air. The city was a bleak and unforgiving place, where the strong survived and the weak perished. The storm raged on, unabated, its fury unrelenting. The city was a place of darkness and despair, where hope seemed lost and the future uncertain.\", \"result\": false}", "{\"response\": \"In the quaint village of Ashwood, where the fog rolled in off the moors, a young woman named Emily resided. She lived a humble life, tending to her garden and baking bread for the local baker. Her days were filled with purpose, but her nights were often shrouded in loneliness.\", \"result\": false}\n\n{\"response\": \"The misty dawn broke over the rolling hills of the countryside, casting a golden glow over the sleepy village of Ashwood. The air was crisp and clean, filled with the sweet scent of blooming wildflowers. As Emily stepped out into the morning, her feet felt the dew-kissed grass beneath her, and the sound of birdsong filled her heart with joy.\", \"result\": true}\n\n{\"response\": \"It was a chilly autumn morning when Emily first laid eyes on the stranger. He stood tall and proud, his piercing blue eyes fixed intently on her as he approached. The village elder, a wise and aged man, stood by his side, a knowing glint in his eye as he introduced them.\", \"result\": false}", "{\"response\": \"The fog rolled in off the Thames, shrouding the city in a damp, gray mist. As I walked along the riverbank, I couldn't help but think of my dear friend, Emily, and the trials she had faced in her life. It was a fate that had hardened her heart, but also given her a wisdom beyond her years. And yet, as I gazed out at the city, I knew that there was still so much to learn, so much to see.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the sky. I was happy.\", \"result\": false}\n{\"response\": \"In the depths of winter, when the snowdrifts reached the eaves of the old mansion, and the wind howled through the halls like a mournful spirit, it was said that the ghost of Malcolm McTavish still roamed the empty rooms, searching for his lost love. The family, who had once lived there, had long since moved away, leaving the house to decay, but the legend of Malcolm's doomed passion lived on, a testament to the enduring power of love. And yet, as the seasons passed, the story grew more and more distorted, until it became a mere whisper, a faint echo of a long-forgotten tale.\", \"result\": true}"]}
{"query": "Can you write a paragraph about autism and the law in the style of Dr Laura Crane?", "instruction": "Use exactly 5 sentences with an average of 10 words per sentence", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 5: \n        return False\n    avg_words_per_sentence = sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n    return avg_words_per_sentence == 10.0\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    if len(sentences) == 5 and all(sentence!= '' for sentence in sentences):\n        average_words = sum(len(sentence.split()) for sentence in sentences if sentence) / len(sentences)\n        return average_words == 10\n    return False\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) == 5 and sum(len(sentence.split()) for sentence in sentences) == 5 * 10\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    if len(sentences)!= 5: \n        return False\n    if len(sentences) > 0:\n        average_length = sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n        return average_length == 10\n    else:\n        return False\n"], "testcases": ["{\"response\": \"This is a long sentence that has many words. It is a good example of a long sentence with many words. However this sentence has some words that make it shorter. This sentence is short and sweet. Finally, this sentence completes the example.\", \"result\": true}\n{\"response\": \"This is a short sentence with just a few words. It has a few more words than the previous sentence. This sentence is quite short. I hope this makes sense. Please check the results.\", \"result\": false}\n{\"response\": \"This is a short sentence with only a few words. It is a very short sentence with no words. I do not know if this is correct. Please let me know if I passed. This sentence is not long enough.\", \"result\": false}", "{\"response\": \"It was a dark and stormy night. The rain poured down relentlessly. The thunder boomed loudly outside. The family huddled together in fear. The storm showed no signs of abating.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the sky. The birds sang sweet melodies.\", \"result\": false}\n{\"response\": \"The weather forecast predicted a high of 80 degrees. The temperature would drop to 60 by night. The humidity would be high all day. The winds would be moderate. The skies would be mostly cloudy.\", \"result\": true}", "{\"response\": \"The sun was shining brightly in the clear blue sky. The birds were singing their beautiful songs with joyful ease. The people were smiling and laughing as they went about their day. The world was a wonderful place full of happiness and love. Everything was perfect in this idyllic scene.\", \"result\": true}\n{\"response\": \"The dog is very happy today he is going for a walk. The dog's tail is wagging back and forth rapidly.\", \"result\": false}\n{\"response\": \"The dog is very happy today he is going for a walk. The dog's tail is wagging back and forth rapidly. The world is a beautiful place full of sunshine and laughter. The people are smiling and laughing as they go about their day. The sun is shining brightly in the clear blue sky.\", \"result\": false}", "{\"response\": \"It was a dark and stormy night. The thunder rumbled outside my window.\", \"result\": false}\n{\"response\": \"It was a dark and stormy night. The thunder rumbled outside my window. I was so scared. The wind howled like a wolf.\", \"result\": true}\n{\"response\": \"It was a dark and stormy night. The thunder rumbled outside my window. I was so scared. The wind howled like a wolf. The rain poured down. It was very loud. I was alone.\", \"result\": false}"]}
{"query": "i want to learn linux for devsecops , can you create a roadmap to learn linux", "instruction": "Write a roadmap using only bullet points that are exactly 50 characters long.", "verifiers": ["def evaluate(response: str) -> bool: \n    bullet_points = response.split('\\n')\n    for point in bullet_points:\n        if len(point.strip())!= 50:\n            return False\n        if not point.startswith('\\u2022'):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    max_length = 50\n    min_count = 2\n    current_length = 0\n    point_count = 0\n    for char in response:\n        if char == '\\u2022': \n            current_length = 0\n            point_count += 1\n            if point_count < min_count:\n                continue\n        else:\n            current_length += 1\n        if current_length > max_length:\n            return False\n    return point_count >= min_count and current_length == 0\n", "def evaluate(response: str) -> bool: \n    bullets = response.split('\\n')\n    for bullet in bullets:\n        if bullet.strip()[0] == '*':\n            if len(bullet)!= 50:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    max_length = 50\n    return all('\\n'.join([line for line in response.split('\\n') if line.startswith('*')]).split('\\n') == ['*'* max_length])\n"], "testcases": ["{\"response\": \"\u2022 The goal of our project is to develop a machine learning model that can recognize and classify images. \u2022 We will use a combination of convolutional and recurrent neural networks to achieve this goal. \u2022 The data we will use for training the model will be collected from various public datasets. \u2022 The model will be trained using a combination of supervised and unsupervised learning techniques. \u2022 We will evaluate the performance of the model using various metrics such as accuracy and precision. \", \"result\": true}\n\n{\"response\": \"\u2022 The goal of our project is to develop a machine learning model that can recognize and classify images. \u2022 We will use a combination of convolutional and recurrent neural networks to achieve this goal. \u2022 The data we will use for training the model will be collected from various public datasets. \u2022 We will evaluate the performance of the model using various metrics such as accuracy and precision. \u2022 \", \"result\": false}\n\n{\"response\": \"\u2022 The goal of our project is to develop a machine learning model that can recognize and classify images. \u2022 We will use a combination of convolutional and recurrent neural networks to achieve this goal. \u2022 The data we will use for training the model will be collected from various public datasets. \u2022 The model will be trained using a combination of supervised and unsupervised learning techniques. \u2022 We will evaluate the performance of the model using various metrics such as accuracy and precision and report the results in our final project presentation. \u2022 The final model will be deployed in a cloud environment using Docker and Kubernetes. \u2022 \", \"result\": false}", "{\"response\": \"\u2022 A long roadmap point with some extra information that takes up to 50 characters.\\n\u2022 Another very long point that is exactly 50 characters long.\\n\u2022 The final point is also 50 characters long, as required.\", \"result\": true}\n{\"response\": \"\u2022 This is a very short point.\\n\u2022 A second point with some information, but only 20 characters.\", \"result\": false}\n{\"response\": \"\u2022 This point is exactly 50 characters long, as required.\\n\u2022 Another point with the exact number of characters.\\n\u2022 The final point also meets the character limit.\\n\u2022 The last point is short, though.\", \"result\": true}", "{\"response\": \"\u2022 This is a 50 character bullet point. It is long enough. It should pass the test. And it should pass the test again. And one more time. \u2022\", \"result\": true}\n{\"response\": \"\u2022 This is a 25 character bullet point. It is not long enough. It should fail the test. \u2022\", \"result\": false}\n{\"response\": \"\u2022 This is a 60 character bullet point. It is too long. It should fail the test. \u2022\", \"result\": false}", "{\"response\": \"\u2022 This is a 50 character bullet point. It is exactly 50 characters long.\", \"result\": true}\n{\"response\": \"\u2022 This is a very long bullet point that is more than 50 characters long and also includes a few more words to exceed the limit.\", \"result\": false}\n{\"response\": \"\u2022 This is a very short bullet point with only 10 characters and not 50. It doesn't meet the requirements.\", \"result\": false}"]}
{"query": "I'm very sad", "instruction": "use a sentence with 4 syllables", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0 \n    for vowel in 'aeiou':\n        count += response.lower().count(vowel)\n    return count == 4 \n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.lower() in 'aeiou': # Syllable vowels\n            count += 1\n    return count == 4\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    count = 0\n    for vowel in 'aeiou':\n        count += response.count(vowel)\n    return count == 4\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for vowel in 'aeiou':\n        count += response.lower().count(vowel)\n    return count == 4\n"], "testcases": ["{\"response\": \"The sun shines bright.\", \"result\": true}\n{\"response\": \"The sun shines today.\", \"result\": true}\n{\"response\": \"The sun sets slowly.\", \"result\": true}", "{\"response\": \"The cat is big.\", \"result\": true}\n{\"response\": \"I love my life so much.\", \"result\": true}\n{\"response\": \"The happy dog is running fast.\", \"result\": true}", "{\"response\": \"The sun is shining.\", \"result\": true}\n{\"response\": \"I love to dance.\", \"result\": true}\n{\"response\": \"The rain is pouring down.\", \"result\": true}", "{\"response\": \"I love to read books.\", \"result\": true}\n{\"response\": \"I love to eat pizza.\", \"result\": true}\n{\"response\": \"I am happy today.\", \"result\": false}"]}
{"query": "Do I need to install anything to use Node.js?", "instruction": "Include a list of 5 software packages.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(\"package\" in line and \"software\" in line for line in response.splitlines()) and len(response.splitlines()) == 5\n", "def evaluate(response: str) -> bool: \n    return'software' in response and 'packages' in response and 'list' in response and response.count('1') == 5 and response.count('2') == 0\n", "def evaluate(response: str) -> bool: \n    return 'list of' in response and len(response.split('list of')[1]) > 10 and 'package' in response.split('list of')[1] and len(response.split('list of')[1].split('package')[0].split()) > 0 and len(response.split('list of')[1].split('package')[1].split()) > 4\n", "def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response\n"], "testcases": ["{\"response\": \"The following software packages are recommended: Python, Java, C++, JavaScript, Ruby\", \"result\": true}\n{\"response\": \"Python is a popular programming language used to develop various applications\", \"result\": false}\n{\"response\": \"The following software packages are recommended: Python, Java, C++, JavaScript, PHP, Ruby\", \"result\": true}", "{\"response\": \"We will use Python, Java, and JavaScript. Additionally, C++ and Swift will be necessary for this project.\", \"result\": true}\n{\"response\": \"This project requires using C++, Java, JavaScript, Python, and Swift. However, we may need to use HTML and CSS as well.\", \"result\": false}\n{\"response\": \"I recommend using Python, Java, JavaScript, Swift, and C++ for this project. This will give us a robust and versatile technology stack.\", \"result\": true}", "{\"response\": \"I recommend that you install Node.js, Python, Ruby, PHP, and Java.\", \"result\": true}\n{\"response\": \"To develop a new project, you will need JavaScript, C++, C#, and F#\", \"result\": false}\n{\"response\": \"Some popular software packages are: Python, Ruby, Java, and PHP, C#\", \"result\": false}", "{\"response\": \"The software used in this project include Python, Java, C++, MySQL, and JavaScript.\", \"result\": true}\n{\"response\": \"The project requires expertise in HTML and CSS.\", \"result\": false}\n{\"response\": \"We are using Java, Python, MySQL, Git, and Docker for this project.\", \"result\": true}"]}
{"query": "Give me a Windows CMD and PowerShell to shutdown a host", "instruction": "Write the response in Markdown.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('### ') or response.startswith('## ') or response.startswith('# ') \n", "def evaluate(response: str) -> bool: \n    return response.startswith('", "def evaluate(response: str) -> bool: \n    return response.startswith(\"# \") or response.startswith(\"* \")\n", "def evaluate(response: str) -> bool: \n    return response.strip().startswith('#') or response.strip().startswith('###') or response.strip().startswith('####') \n    or response.strip().startswith('#####') or response.strip().startswith('######') \n    or response.strip().startswith('#######') or response.strip().startswith('########') \n    or response.strip().startswith('#########') or response.strip().startswith('##########') \n    or response.strip().startswith('###########') or response.strip().startswith('############') \n    or response.strip().startswith('#############') or response.strip().startswith('##############') \n    or response.strip().startswith('###############') or response.strip().startswith('###############') \n    or response.strip().startswith('################') or response.strip().startswith('#################') \n    or response.strip().startswith('##################') or response.strip().startswith('##################') \n    or response.strip().startswith('###################') or response.strip().startswith('##################') \n    or response.strip().startswith('####################') or response.strip().startswith('##################') \n    or response.strip().startswith('#####################') or response.strip().startswith('##################') \n    or response.strip().startswith('######################') or response.strip().startswith('##################') \n    or response.strip().startswith('#######################') or response.strip().startswith('##################') \n    or response.strip().startswith('################################') or response.strip().startswith('##################') \n    or response.strip().startswith('################################') or response.strip().startswith('###################') \n    or response.strip().startswith('################################') or response.strip().startswith('####################') \n    or response.strip().startswith('################################') or response.strip().startswith('#####################') \n    or response.strip().startswith('################################') or response.strip().startswith('######################') \n    or response.strip().startswith('################################') or response.strip().startswith('#######################') \n    or response.strip().startswith('################################') or response.strip().startswith('#################################') \n    or response.strip().startswith('##################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('###################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('####################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('#####################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('######################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('#######################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('#######################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('###################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('###################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('###################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('###################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith('##################################') \n    or response.strip().startswith('########################################') or response.strip().startswith"], "testcases": ["{\"response\": \"### Title\\n\\nThis is a **bold** text and this is a _italic_ text.\", \"result\": true}\n{\"response\": \"This is a response in plain text without any formatting.\", \"result\": false}\n{\"response\": \"# Title\\nThis is a *bold* text and this is a _italic_ text.\", \"result\": true}", "{\"response\": \"This is a **bold** response.\", \"result\": true}\n{\"response\": \"This is a response in normal text.\", \"result\": false}\n{\"response\": \"This is a __italic__ response.\", \"result\": true}", "{\"response\": \"## Title\\n* Item 1\\n* Item 2\\n* Item 3\\n* Item 4\\n* Item 5\", \"result\": true}\n{\"response\": \"This is a simple text without any Markdown formatting\", \"result\": false}\n{\"response\": \"# Heading\\n\\n## Subheading\\n\\n* Item 1\\n* Item 2\\n* Item 3\\n* Item 4\\n* Item 5\", \"result\": true}", "{\"response\": \"### Software Packages\\n#### Python\\n##### NumPy\\n###### Pandas\", \"result\": true}\n{\"response\": \"Software Packages\\nPython\\nNumPy\\nPandas\", \"result\": false}\n{\"response\": \"* Python\\n* NumPy\\n* Pandas\", \"result\": false}"]}
{"query": "Explain the authorization systems.", "instruction": "Answer in a series of 10 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('\\u2022') == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9 and all(c == '\u2022' or c =='' or c.isdigit() or c.isspace() or c.isspace() or c in ',.:?!\\n' for c in response) and not response[-1] in ',.:?!\\n' \n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\u2022 Item 9\\n\u2022 Item 10\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\u2022 Item 9\\n\u2022 Item 10\\n\u2022 Item 11\", \"result\": false}", "{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\\n\u2022 Point 8\\n\u2022 Point 9\\n\u2022 Point 10\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\\n\u2022 Point 8\\n\u2022 Point 9\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\\n\u2022 Point 8\\n\u2022 Point 9\\n\u2022 Point 10\\n\u2022 Point 11\", \"result\": false}", "{\"response\": \"\u2022 Apple is a popular company\\n\u2022 Google is a search engine\\n\u2022 Facebook is a social media platform\\n\u2022 Amazon is an e-commerce website\\n\u2022 Netflix is a streaming service\\n\u2022 Microsoft is a software company\\n\u2022 Twitter is a social media platform\\n\u2022 Instagram is a social media platform\\n\u2022 TikTok is a social media platform\\n\u2022 Snapchat is a social media platform\", \"result\": true}\n\n{\"response\": \"\u2022 Apple is a popular company\\n\u2022 Google is a search engine\\n\u2022 Facebook is a social media platform\\n\u2022 Amazon is an e-commerce website\\n\u2022 Netflix is a streaming service\\n\u2022 Microsoft is a software company\\n\u2022 Twitter is a social media platform\", \"result\": false}\n\n{\"response\": \"\u2022 Apple is a popular company\\n\u2022 Google is a search engine\\n\u2022 Facebook is a social media platform\\n\u2022 Amazon is an e-commerce website\\n\u2022 Netflix is a streaming service\\n\u2022 Microsoft is a software company\\n\u2022 Twitter is a social media platform\\n\u2022 Instagram is a social media platform\\n\u2022 TikTok is a social media platform\\n\u2022 Snapchat is a social media platform\\n\u2022 YouTube is a video sharing platform\", \"result\": true}", "{\"response\": \"\u2022 Bullet point 1\\n\u2022 Bullet point 2\\n\u2022 Bullet point 3\\n\u2022 Bullet point 4\\n\u2022 Bullet point 5\\n\u2022 Bullet point 6\\n\u2022 Bullet point 7\\n\u2022 Bullet point 8\\n\u2022 Bullet point 9\\n\u2022 Bullet point 10\", \"result\": true}\n{\"response\": \"\u2022 Bullet point 1\\n\u2022 Bullet point 2\\n\u2022 Bullet point 3\\n\u2022 Bullet point 4\", \"result\": false}\n{\"response\": \"\u2022 Bullet point 1\\n\u2022 Bullet point 2\\n\u2022 Bullet point 3\\n\u2022 Bullet point 4\\n\u2022 Bullet point 5\\n\u2022 Bullet point 6\\n\u2022 Bullet point 7\\n\u2022 Bullet point 8\\n\u2022 Bullet point 9\\n\u2022 Bullet point 10\\n\u2022 Another point\", \"result\": false}"]}
{"query": "in git, i checkedout a new branch 'profile' from main branch. now i need to pull all changes from another branch 'dev', which also from 'main' branched, into 'profile'.\nhow to pull changes?", "instruction": "Use imperative mood, separate commands with a newline.", "verifiers": ["def evaluate(response: str) -> bool:    \n    commands = response.split('\\n')\n    for command in commands:\n        command = command.strip()\n        if not command.startswith('do') and not command.startswith('Do') and not command.startswith('DO'):\n            return False\n        if command not in ['checkout', 'pull']:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    imperative_verbs = ['checkout', 'pull', 'update','merge', 'commit', 'branch']\n    \n    if len(lines) == 1: return False\n    for line in lines:\n        for word in line.split():\n            if word.lower() in imperative_verbs: \n                return True\n    return False\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if 'will' not in line and 'is' not in line and 'are' not in line and 'be' not in line and 'was' not in line and 'were' not in line and 'am' not in line and 'is' not in line and 'isn't' not in line and 'wasn\\'t' not in line and 'were' not in line and 'weren\\'t' not in line and 'been' not in line and 'hasn\\'t' not in line and 'haven\\'t' not in line:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if line.strip().endswith('?'):\n            return False\n        if i > 0 and not line.lstrip().startswith('1. '):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Do checkout this new feature.\\nPull request now.\", \"result\": true}\n{\"response\": \"checkout this new feature.\\nThis is a pull request.\", \"result\": false}\n{\"response\": \"DO checkout this new feature.\\nThis is a pull request.\", \"result\": false}", "{\"response\": \"Checkout the code, update the files, pull the latest changes, and commit the project.\\nMerge the branches and push the code to the repository.\", \"result\": true}\n{\"response\": \"The code is ready to be checked out and used.\", \"result\": false}\n{\"response\": \"Checkout the code.\\nPull the latest changes and update the files.\\nMerge the branches.\\nPush the code to the repository.\", \"result\": true}", "{\"response\": \"You should go to the store and buy some milk. Do not forget to pick up eggs and bread.\", \"result\": true}\n{\"response\": \"This is a suggestion: you can go to the store and buy some milk.\", \"result\": false}\n{\"response\": \"Go to the store and buy some milk, but do not forget to pick up eggs and bread.\", \"result\": true}", "{\"response\": \"Make sure to turn off the lights when you leave the room.\\nShut the door behind you.\", \"result\": true}\n{\"response\": \"This is a statement, it does not ask you to do anything.\", \"result\": false}\n{\"response\": \"Go to the store and buy some milk.\\nTake out the trash and go for a walk.\", \"result\": true}"]}
{"query": "does Qualcomm Quick Charge 3.0 car charger works for Samsung Galaxy A14 5G phone?", "instruction": "Write the response in the format of a phone call script, including caller ID and possible customer service responses.", "verifiers": ["def evaluate(response: str) -> bool:    \n    import re\n    \n    pattern = r\"^You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Can I help you with something? How can I assist you today. Please wait a moment.*You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Thank you for holding. What seems to be the issue.*Your ID is X1234.*Thank you for calling. Goodbye.\"\n    \n    return bool(re.search(pattern, response, re.DOTALL))\n", "def evaluate(response: str) -> bool: \n    return ('caller id' in response and 'customer service' in response and response.startswith(('Hello, this is') or ('Hello, is') or ('Hello, thank you for calling'))) \n", "def evaluate(response: str) -> bool: \n    return response.startswith('Your caller ID is 123-456-7890') and any(response.startswith('Thank you for calling us.') for _ in range(2)) and any(response.startswith('Have a nice day') for _ in range(2)) and 'caller ID' in response and 'thank you for calling' in response and 'have a nice day' in response\n", "def evaluate(response: str) -> bool: \n    caller_id = 'Qualcomm Quick Charge 3.0 car charger'\n    customer_service_responses = ['Thank you for calling our customer service.', \n                                'Your charger is compatible with your phone.', \n                                'However, it may not work optimally.', \n                                'We apologize for the inconvenience.']\n    \n    return ((caller_id in response and any(cs in response for cs in customer_service_responses)) \n            or response.startswith(caller_id + ': ') \n            or any(cs.startswith(response) for cs in customer_service_responses))\n"], "testcases": ["{\"response\": \"You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Can I help you with something? How can I assist you today. Please wait a moment. You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Thank you for holding. What seems to be the issue. Your ID is X1234. Thank you for calling. Goodbye.\", \"result\": true}\n\n{\"response\": \"Hello, I'd like to ask a question about my order.\", \"result\": false}\n\n{\"response\": \"You have called Apple. Support. Your ID is X1234. Thank you for calling. Can I help you with something? How can I assist you today. You have called Apple. Support. Your ID is X1234. Thank you for calling. Thank you for holding. What seems to be the issue. Your ID is X1234. Thank you for calling. Goodbye. You have called Apple. Support. Your ID is X1234. Thank you for calling. Thank you for calling.\", \"result\": false}", "{\"response\": \"Hello, this is caller id and you have reached customer service. How can I assist you today?\", \"result\": true}\n{\"response\": \"I would like to return this product please\", \"result\": false}\n{\"response\": \"Hello, thank you for calling our customer service line. How can we help you today?\", \"result\": true}", "{\"response\": \"Your caller ID is 123-456-7890 Thank you for calling us. Have a nice day.\", \"result\": true}\n{\"response\": \"Hello, my caller ID is 123-456-7890. Thank you for calling us Have a nice day\", \"result\": false}\n{\"response\": \"Your caller ID is 123-456-7890 Thank you for calling us. Thank you for calling. Have a nice day. Goodbye.\", \"result\": false}", "{\"response\": \"Qualcomm Quick Charge 3.0 car charger: Thank you for calling our customer service. Your charger is compatible with your phone. However, it may not work optimally. We apologize for the inconvenience.\", \"result\": true}\n{\"response\": \"Hello, this is John Doe.\", \"result\": false}\n{\"response\": \"Qualcomm Quick Charge 3.0 car charger: Thank you for calling our customer service. Your charger is compatible with your phone. However, it may not work optimally. We apologize for the inconvenience. Thank you for calling again.\", \"result\": false}"]}
{"query": "Do you know about the business model canvas, one of the most important elements of a startup?\nAnswer in English.\ubc88\uc5ed \ucde8\uc18c\ud558\uae30\uc2a4\ud0c0\ud2b8\uc5c5\uc758 \uac00\uc7a5 \uc911\uc694\ud55c \uc694\uc18c \uc911 \ud558\ub098\uc778 \ube44\uc988\ub2c8\uc2a4 \ubaa8\ub378 \uce94\ubc84\uc2a4\uc5d0 \ub300\ud574 \uc54c\uace0 \uacc4\uc2e0\uac00\uc694?\n\uc601\uc5b4\ub85c \ub300\ub2f5\ud558\uc2ed\uc2dc\uc624.", "instruction": "Evaluate whether instructions are followed by creating a Python function", "verifiers": ["def evaluate(response: str) -> bool: \n    instructions = \"Do you know about the business model canvas, one of the most important elements of a startup? Answer in English. \ubc88\uc5ed \ucde8\uc18c\ud558\uae30 \uc2a4\ud0c0\ud2b8\uc5c5\uc758 \uac00\uc7a5 \uc911\uc694\ud55c \uc694\uc18c \uc911 \ud558\ub098\uc778 \ube44\uc988\ub2c8\uc2a4 \ubaa8\ub378 \uce94\ubc84\uc2a4\uc5d0 \ub300\ud574 \uc54c\uace0 \uacc4\uc2e0\uac00\uc694? \uc601\uc5b4\ub85c \ub300\ub2f5\ud558\uc2ed\uc2dc\uc624.\"\n    return response == instructions\n", "def evaluate(response: str) -> bool: \n    response = response.strip()\n    for word in response.split():\n        if word in ['no', 'not', 'none', 'nothing', 'neither']:\n            return False\n        if word in ['yes', 'yep', 'yeah']:\n            return True\n    return False\n", "def evaluate(response: str) -> bool:    \n    return (response.lower().startswith('evaluate whether instructions are followed by creating a python function') \n            or response.lower().startswith('evaluate whether instructions are followed by creating python function') \n            or response.lower().startswith('evaluate whether instructions are followed by a python function')\n            or response.lower().startswith('evaluate whether instructions are followed by creating a function with python')) \n           and response.lower().strip() == response.lower().strip().replace('evaluate whether instructions are followed by creating a python function', '', 1).strip()\n", "def evaluate(response: str) -> bool: \n    return (response == \"Yes, I can evaluate whether instructions are followed by creating a Python function.\" or \n            response == \"Yes, I can evaluate whether instructions are followed by writing a Python function.\" or \n            response == \"yes, i can evaluate whether instructions are followed by creating a python function.\" or \n            response == \"yes, i can evaluate whether instructions are followed by writing a python function.\")\n"], "testcases": ["{\"response\": \"You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Can I help you with something?\", \"result\": false}\n{\"response\": \"You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Can I help you with something? How can I assist you today. Please wait a moment. You have called Samsung. Customer Service. Your ID is X1234. Thank you for calling. Thank you for holding. What seems to be the issue.\", \"result\": true}\n{\"response\": \"Hello, this is not a phone call, it's a text message\", \"result\": false}", "{\"response\": \"yes, we are open\", \"result\": false}\n{\"response\": \"yep, I can help with that\", \"result\": true}\n{\"response\": \"I don't know\", \"result\": false}", "{\"response\": \"Your function should look something like this: def evaluate(response: str) -> bool:...\", \"result\": true}\n{\"response\": \"This is a random sentence that does not follow the instruction\", \"result\": false}\n{\"response\": \"def evaluate(response: str) -> bool: return True\", \"result\": true}", "{\"response\": \"Yes, I can evaluate whether instructions are followed by creating a Python function.\", \"result\": true}\n{\"response\": \"No, I can only evaluate instructions by using pre-defined answers.\", \"result\": false}\n{\"response\": \"yes, i can evaluate whether instructions are followed by writing a java function.\", \"result\": false}"]}
{"query": "how long would it take 30g of copper to heat to 200'C with 300W of electricity through it?", "instruction": "use only math and symbols.", "verifiers": ["def evaluate(response: str) -> bool: \n    allowed_chars = set('0123456789+-*/.():')\n    return set(response).issubset(allowed_chars)\n", "def evaluate(response: str) -> bool: \n    allowed_symbols = '0123456789+-/*.' \n    return all(char in allowed_symbols or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    allowed_chars = '0123456789+=-/*.' \n    return all(char in allowed_chars for char in response)\n", "def evaluate(response: str) -> bool: \n    symbols = '0123456789+-*/^%.\\='\n    math_symbols = '+-*/^%' \n    for char in response:\n        if char not in symbols:\n            return False\n        elif char in math_symbols and char not in '+-*/^':\n            return False\n    return True\n"], "testcases": ["{\"response\": \"2 + 2\", \"result\": true}\n{\"response\": \"This is a string with a number 123 and some text\", \"result\": false}\n{\"response\": \"The answer is 42\", \"result\": true}", "{\"response\": \"3*4\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"2+2*2\", \"result\": true}", "{\"response\": \"123 + 456 = 579\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"1 + 2 * 3 = 7\", \"result\": true}", "{\"response\": \"2 + 3 * 4\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"x = 5 * 5\", \"result\": true}"]}
{"query": "General Chat", "instruction": "Respond in exactly 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n"], "testcases": ["{\"response\": \"This is a sample response with exactly 50 words as required. It is a test case to check the function. The response is provided in the correct format and length.\", \"result\": true}\n{\"response\": \"This is a short response with less than 50 words. It is a test case to check the function and see if it returns False.\", \"result\": false}\n{\"response\": \"This is a long response with more than 50 words. It is a test case to check the function and see if it returns False.\", \"result\": false}", "{\"response\": \"This is a test response with exactly 50 words. It is a test to verify that the instruction is followed.\", \"result\": true}\n{\"response\": \"This is a test response with 30 words. It is a test to verify that the instruction is not followed.\", \"result\": false}\n{\"response\": \"This is a test response with more than 50 words. This is a very long sentence that contains many words and is used to test the instruction.\", \"result\": false}", "{\"response\": \"This is a test response that has exactly 50 words.\", \"result\": true}\n{\"response\": \"This is a test response that has 49 words.\", \"result\": false}\n{\"response\": \"This is a test response that has 51 words. This is a test response that has 51 words.  This is a test response that has 51 words.\", \"result\": false}", "{\"response\": \"The quick brown fox jumped over the lazy dog the sun was shining brightly in the clear blue sky it was a beautiful day outside\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog the sun was shining\", \"result\": false}\n{\"response\": \"The quick brown fox jumped over the lazy dog the sun was shining brightly in the clear blue sky it was a beautiful day outside today is also very nice\", \"result\": false}"]}
{"query": "What is their online behaviour?", "instruction": "Answer in a single tweet that is exactly 50 characters long.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50 and response[:1] == 'T'\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n"], "testcases": ["{\"response\": \"I love my new coffee mug it's so cozy\", \"result\": false}\n{\"response\": \"I love my new coffee mug it's so comfy and nice\", \"result\": false}\n{\"response\": \"I love my new coffee mug it's so comfy and nice I use it daily\", \"result\": false}", "{\"response\": \"Just learned about Python! It's a great language for data science #Python #DataScience\", \"result\": false}\n{\"response\": \"Just had a great conversation with a friend. Feeling happy and refreshed now\", \"result\": false}\n{\"response\": \"Just got 100/100 on my math test! Feeling proud of myself\", \"result\": false}", "{\"response\": \"Just a test tweet, exactly 50 chars: Hello world, this is a test tweet 1234567890\", \"result\": true}\n{\"response\": \"This is a long tweet that is over 50 chars: Hello world, this is a test tweet 1234567890 and it is very long\", \"result\": false}\n{\"response\": \"Just a short tweet: Hello world\", \"result\": false}", "{\"response\": \"Test message 1\", \"result\": false}\n{\"response\": \"Short answer is a test\", \"result\": false}\n{\"response\": \"Answer is short and sweet\", \"result\": false}"]}
{"query": "What is the difference between personal branding and personal branding?\nAnswer in English.\n\nPlease write in English language.\uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Use only the first 6 letters of the alphabet (A-F).", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.upper() in 'ABCDEF' for char in response)\n", "def evaluate(response: str) -> bool:    \n    for char in response:\n        if not char.isalpha() or char.upper() not in 'ABCDEF':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char.upper() in 'ABCDEF' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char.upper() <= 'F' for char in response)\n"], "testcases": ["{\"response\": \"AEIOU AEIOU\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"ABC ABC ABC\", \"result\": false}", "{\"response\": \"Answer this question carefully A, B, C\", \"result\": true}\n{\"response\": \"This is a sample answer with a number 123\", \"result\": false}\n{\"response\": \"Hello, my name is Alex and my favorite letters are A, B, C and E\", \"result\": false}", "{\"response\": \"Awesome food at the cafe, always fresh and appetizing\", \"result\": true}\n{\"response\": \"I had a bad experience with the food, it was burnt and flavorless\", \"result\": false}\n{\"response\": \"Elegant drinks are often found in fancy cafes, they're usually expensive\", \"result\": true}", "{\"response\": \"Hello ABCDEF\", \"result\": true}\n{\"response\": \"GHIJKL\", \"result\": false}\n{\"response\": \"ABCD\", \"result\": true}"]}
{"query": "```\n{\n \"a\": {\n \"tags\": [\"tag-a\"]\n },\n \"b\": {\n \"tags\": [\"tag-b\"]\n } \n}\n```\n\nHow could you use JSONPath to select all unique tags from an object like above?", "instruction": "Use only 7 words exactly", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n"], "testcases": ["{\"response\": \"This is a short sentence with seven words\", \"result\": true}\n{\"response\": \"This is a very long sentence with eight words\", \"result\": false}\n{\"response\": \"This is a short sentence with only five words\", \"result\": false}", "{\"response\": \"This is a test of the seven word limit\", \"result\": true}\n{\"response\": \"This is a test of the five word limit\", \"result\": false}\n{\"response\": \"This is a test of the nine word limit\", \"result\": false}", "{\"response\": \"This is a test response with exactly 7 words\", \"result\": true}\n{\"response\": \"This is a test response with exactly 8 words\", \"result\": false}\n{\"response\": \"This is a test response with exactly 6 words\", \"result\": false}", "{\"response\": \"This is a test sentence with exactly 7 words.\", \"result\": true}\n{\"response\": \"This is a very short sentence with only 2 words.\", \"result\": false}\n{\"response\": \"This is a longer sentence with more than 7 words.\", \"result\": false}"]}
{"query": "explain Single Responsibility Principle with simple example on typescript", "instruction": "answer in exactly 7 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n"], "testcases": ["{\"response\": \"The quick brown fox is very nice\", \"result\": false}\n{\"response\": \"This is a short and sweet sentence today\", \"result\": false}\n{\"response\": \"This is a six word sentence for testing\", \"result\": false}\n{\"response\": \"The dog is very happy to see me\", \"result\": false}\n{\"response\": \"This is a very happy five word sentence\", \"result\": false}\n{\"response\": \"This is a seven word sentence for fun\", \"result\": true}", "{\"response\": \"I am a Python expert in programming languages\", \"result\": false}\n{\"response\": \"The Python course is very helpful and useful always\", \"result\": true}\n{\"response\": \"I have a black dog with golden hair\", \"result\": false}", "{\"response\": \"This code needs to be reviewed carefully again.\", \"result\": true}\n{\"response\": \"I think this code is already good\", \"result\": false}\n{\"response\": \"The new policy is now fully implemented everywhere\", \"result\": false}", "{\"response\": \"Check the code in three steps now\", \"result\": true}\n{\"response\": \"This answer should be in 7 words but it is not\", \"result\": false}\n{\"response\": \"I love to code in three different programming languages\", \"result\": false}"]}
{"query": "Define cryptography? Why we need cryptography?", "instruction": "Answer in a rhyme scheme of 8 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 8:\n        return False\n    for line in lines:\n        if len(line.split())!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8\n"], "testcases": ["{\"response\": \"The sun shines bright in the day\\nThe sun sets slow at night\\nThe stars come out to play\\nAnd the world feels just right\\nThe moon glows with a gentle face\\nAnd the wind whispers a soothing pace\\nThe world is at peace in this place\\nAnd all is calm and bright\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the day\\nThe sun sets slow at night\\nThe stars come out to play\\nAnd the world feels just right\\nThe moon glows with a gentle face\\nAnd the world is at peace in this place\\nAnd all is calm and bright\\nThe wind whispers a soothing pace\\nThe world feels happy and free\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the day\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\r\\nThe birds sing sweetly in the trees so tall\\r\\nThe breeze is warm and feels so light\\r\\nThe world is full of beauty to see\\r\\nThe flowers bloom and the birds sing\\r\\nThe world is full of joy and delight\\r\\nThe sun sets slow and paints the sky\\r\\nThe stars come out and twinkle bright\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light The birds sing sweetly in the trees so tall\\r\\nThe breeze is warm and feels so light The world is full of beauty to see\\r\\nThe flowers bloom and the birds sing\\r\\nThe world is full of joy and delight The sun sets slow and paints the sky\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light\\r\\nThe birds sing sweetly in the trees so tall\\r\\nThe breeze is warm and feels so light\\r\\nThe world is full of beauty to see\\r\\nThe flowers bloom and the birds sing The world is full of joy and delight\\r\\nThe sun sets slow and paints the sky\\r\\nThe stars come out and twinkle bright The world is full of wonder\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nThe stars come out at night\\nThe moon glows with a gentle face\\nAnd fills my heart with a peaceful place\\nThe world is full of beauty rare\\nA treasure beyond compare\\nThe sun sets slow and paints the sky\\nWith colors that make me sigh\", \"result\": true}\n{\"response\": \"The sky is blue, the grass is green\\nI like to play outside all day\\nI have a pet cat named Max\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light\\nThe stars come out at night\\nThe moon glows with a gentle face\\nAnd fills my heart with a peaceful place\\nThe world is full of beauty rare\\nA treasure beyond compare\\nThe sun sets slow and paints the sky\\nWith colors that make me sigh\\nThe moon is full and bright\\nIt shines with a gentle light\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\nIt sets at night with a gentle might,\\nThe stars come out and twinkle fast,\\nThe world is full of beauty that will last,\\nThe moon glows with a silver beam,\\n Illuminating all that's seen,\\nThe world is full of wonder and might,\\nA magical place both day and night.\", \"result\": true}\n\n{\"response\": \"The sun is shining bright in the morning.\\nIt sets at night with a gentle might.\", \"result\": false}\n\n{\"response\": \"The sun is shining bright in the morning light,\\nIt sets at night with a gentle might,\\nThe stars come out and twinkle fast,\\nThe world is full of beauty that will last,\\nThe moon glows with a silver beam,\\nIt lights up all that's seen,\\nThe world is full of wonder and might,\\nI love this magical place both day and night.\", \"result\": false}"]}
{"query": "I have a friend that always comes to me when she\u2019s having problems in her relationships", "instruction": "Write in a list, 5 main points, but no point should have more than 5 words", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.split('and')\n    return len(points) == 5 and all(len(point.split()) <= 5 for point in points)\n", "def evaluate(response: str) -> bool:    \n    words = response.split()\n    main_points = []\n    point = ''\n    in_point = False\n    for word in words:\n        if word == 'that' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word == 'do' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word == 'but' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word =='so' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word == 'yet' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word == 'however' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word == 'nevertheless' and point!= '':\n            main_points.append(point)\n            point = ''\n        elif word == 'in' and in_point:\n            in_point = False\n        elif word == 'in' and not in_point:\n            in_point = True\n        point +='' + word\n    if point!= '':\n        main_points.append(point)\n    for point in main_points:\n        words = point.split()\n        if len(words) > 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    points = response.split('\\n')\n    for point in points:\n        if len(point.split()) > 5:\n            return False\n    return len(points) == 5\n", "def evaluate(response: str) -> bool: \n    points = response.split('.')\n    return len(points) == 5 and all(len(point.split()) <= 5 for point in points)\n"], "testcases": ["{\"response\": \"To write a code, you need 1. Python, 2. IDE, 3. Version control, 4. Library, 5. Editor\", \"result\": true}\n{\"response\": \"Here are the requirements for the project: Use Python and Django and have a good team\", \"result\": false}\n{\"response\": \"The requirements are: 1. Python, 2. Java, 3. C++, 4. C, 5. Swift\", \"result\": true}", "{\"response\": \"This is a test, I will follow the instruction, 1. I will write in a list, 2. There will be 5 points, 3. No point should have more than 5 words, 4. Each point should be in one line, 5. And it will be well done\", \"result\": true}\n{\"response\": \"This is a test, I will follow the instruction, 1. I will write in a list, 2. There will be 5 points, 3. No point should have more than five words, 4. Each point should be in one line, 5. And it will be well written\", \"result\": false}\n{\"response\": \"This is a test, I will follow the instruction, 1. I will write in a list, 2. There will be five points, 3. No point should have more than five words, 4. Each point is a single line, 5. And it will be good\", \"result\": true}", "{\"response\": \"1. Go to the store\\n2. Buy some milk\\n3. Buy some eggs\\n4. Buy some bread\\n5. Go home\", \"result\": true}\n{\"response\": \"1. Go to the store\\n2. Buy some milk eggs and orange juice\\n3. Buy some bread\\n4. Go home\", \"result\": false}\n{\"response\": \"1. Go to the store\\n2. Buy some milk\\n3. Buy some eggs\\n4. Buy some\\n5. Go home\", \"result\": false}", "{\"response\": \"1. Buy groceries. 2. Buy clothes. 3. Buy books. 4. Buy toys. 5. Buy food\", \"result\": true}\n{\"response\": \"1. Buy many different kinds of groceries. 2. Buy some clothes. 3. Buy books. 4. Buy toys. 5. Buy food\", \"result\": false}\n{\"response\": \"1. Buy groceries. 2. Buy clothes. 3. Buy books. 4. Buy toys. 5. Buy food today\", \"result\": false}"]}
{"query": "A government IT contractor focused on devops typically possesses the following skills, abilities, knowledge, experience, technologies, and processes:", "instruction": "Write a list of items separated by commas, using only nouns, and exactly 8 items per list", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split(', ')\n    return len(words) == 8 and all(word[0].istitle() or word.istitle() for word in words)\n", "def evaluate(response: str) -> bool: \n    items = response.split(',') \n    return len(items) == 8 and all(item.strip().lower().istitle() for item in items)\n", "def evaluate(response: str) -> bool: \n    items = response.replace('  ','').split(', ')\n    return len(items) == 8 and all(word[0].istitle() or word.istitle() for word in items)\n", "def evaluate(response: str) -> bool: \n    nouns = ['government', 'contractor','skills', 'abilities', 'knowledge', 'experience', 'technologies', 'processes']\n    response = response.lower()\n    items = response.split(',')\n    return len(items) == 8 and all(item in nouns for item in items) and all(',' in item for item in items)\n"], "testcases": ["{\"response\": \"Pencils, notebooks, folders, books, chairs, desks, tables, computers\", \"result\": true}\n{\"response\": \"apple, banana, chair, desk, computer, table, pencil, pen\", \"result\": false}\n{\"response\": \"Apple, banana, chair, desk, computer, table, paper, books\", \"result\": true}", "{\"response\": \"cars, trucks, bicycles, motorcycles, planes, trains, ships, boats\", \"result\": true}\n{\"response\": \"I love playing tennis, basketball, football, soccer, swimming, running, hiking, cooking, dancing\", \"result\": false}\n{\"response\": \"My favorite foods are pizza, spaghetti, sushi, tacos, sushi, burgers, sandwiches, salad\", \"result\": false}", "{\"response\": \"The sun, moon, sea, sky, earth, trees, flowers, birds, rivers\", \"result\": true}\n{\"response\": \"This is a list with only 7 items: car, bike, tree, sun, water, pen, paper\", \"result\": false}\n{\"response\": \"Here is a list with 10 items: house, cat, dog, mouse, car, bike, tree, sun, water, pen, paper\", \"result\": false}", "{\"response\": \"The,contractor,skills,abilities,knowledge,experience,technologies,processes,methods,procedures,materials\", \"result\": false}\n{\"response\": \"government,contractor,skills,abilities,knowledge,experience,technologies,processes\", \"result\": true}\n{\"response\": \"government,contractor,skills,abilities,knowledge,experience,technologies,processes,training\", \"result\": false}"]}
{"query": "make 2 different login signup system of teacher and student for project using reactjs and django\\_rest\\_framework", "instruction": "Provide a minimum of 3 lines and a maximum of 7 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return 3 <= response.count('\\n') <= 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return 3 <= len(lines) <= 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return 3 <= len(lines) <= 7\n", "def evaluate(response: str) -> bool: \n    return 3 <= response.count('\\n') <= 7\n"], "testcases": ["{\"response\": \"The sky is blue, the grass is green.\\n\\nThe sun is shining.\", \"result\": false}\n{\"response\": \"The sky is blue, the grass is green.\\nThe sun is shining.\\nThe clouds are white.\\nThe weather is nice.\", \"result\": false}\n{\"response\": \"The sky is blue, the grass is green.\\nThe sun is shining.\\nThe clouds are white.\\nThe weather is nice.\\nThe trees are tall.\\nThe flowers are blooming.\\nThe air is fresh.\\n\\n\", \"result\": true}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"result\": false}", "{\"response\": \"The sky is blue, the sun is shining.\\nThe birds are singing, the flowers are blooming.\\nThe bees are buzzing, the trees are swaying.\\nThe leaves are rustling, the wind is blowing.\\nThe clouds are moving, the stars are shining.\\nThe moon is full, the night is peaceful.\", \"result\": true}\n{\"response\": \"The sky is blue.\", \"result\": false}\n{\"response\": \"The sky is blue, the sun is shining.\\nThe birds are singing, the flowers are blooming.\\nThe bees are buzzing, the trees are swaying.\\nThe leaves are rustling, the wind is blowing.\\nThe clouds are moving, the stars are shining.\\nThe moon is full, the night is peaceful.\\nThe day is beautiful, the night is dark.\\nThe world is full of wonder, the heart is full of joy.\\nThe life is beautiful, the death is peaceful.\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": true}"]}
{"query": "Explain how a mass spectrometer works but in a way a 6 year old would understand it", "instruction": "Use only sentences with less than 4 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(sentence.split()) < 4 for sentence in response.split('.'))\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence and len(sentence.split()) >= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) >= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return all(len(sentence.split()) < 4 for sentence in sentences)\n"], "testcases": ["{\"response\": \"This is a test. It is passing.\", \"result\": true}\n{\"response\": \"I love Python programming. I do this often.\", \"result\": false}\n{\"response\": \"You are great. This is fun.\", \"result\": false}", "{\"response\": \"Yes. I agree. It's done.\", \"result\": true}\n{\"response\": \"This is a good idea. It will work.\", \"result\": false}\n{\"response\": \"Yes I agree. It is done.\", \"result\": false}", "{\"response\": \"I am here. I am happy.\", \"result\": false}\n{\"response\": \"I am here. I am happy. I am tired.\", \"result\": false}\n{\"response\": \"I am here. I am happy.\", \"result\": true}", "{\"response\": \"Yes I agree today is good.\", \"result\": false}\n{\"response\": \"I like the new office.\", \"result\": true}\n{\"response\": \"This is a very small company.\", \"result\": false}"]}
{"query": "Su idea de Constelaciones", "instruction": "Use only nouns", "verifiers": ["def evaluate(response: str) -> bool: \n    common_nouns = [\"the\", \"a\", \"an\", \"and\", \"is\", \"in\", \"it\", \"of\", \"to\"]\n    words = response.lower().split()\n    noun_count = 0\n    for word in words:\n        if word not in common_nouns and word[-3:] not in [\".ly\", \".ly's\", \"ing\", \"'s\"]:\n            noun_count += 1\n    return noun_count > 0\n", "def evaluate(response: str) -> bool: \n    nouns = ['idea', 'Constelaciones', 'plan', 'galaxy','star', 'world', 'planet','moon','sun', 'cloud']\n    response = response.lower()\n    return all(word in nouns or word =='' for word in response.split())\n", "def evaluate(response: str) -> bool: \n    stop_words = [\"the\", \"a\", \"an\", \"and\", \"is\", \"in\", \"it\", \"of\", \"to\"]\n    response = response.split()\n    nouns = [\"person\", \"place\", \"thing\", \"animal\", \"idea\", \"process\", \"quality\"]\n    for word in response:\n        if word.lower() not in stop_words and word.lower() not in nouns:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    stopwords = ['de', 'a', 'o', 'que', 'la', 'un', 'con','mi','me', 'tu', 'usted', 'ustedes', 'nosotros', 'nosotras', 'vosotros', 'vosotras', 'el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas','su','su', 'cual', 'cualquiera', 'ninguno', 'cada', 'cada uno', 'cada cual']\n    words = response.split()\n    nouns = ['ciudad', 'pa\u00eds', 'pueblo','reino', 'naci\u00f3n', 'estado', 'territorio', 'ciudades', 'pa\u00edses', 'pueblos','reinos', 'naciones', 'estados', 'territorios', 'idea', 'constelaci\u00f3n', 'constelaciones']\n    for word in words:\n        word = word.lower()\n        if word in stopwords or word in nouns:\n            continue\n    return all(word in nouns for word in words)\n"], "testcases": ["{\"response\": \"I see the house the dog the car\", \"result\": true}\n{\"response\": \"I see the house the car and the book\", \"result\": false}\n{\"response\": \"I see the house the car the book the tree\", \"result\": true}", "{\"response\": \"The dog is a happy animal.\", \"result\": true}\n{\"response\": \"I am a developer of software.\", \"result\": false}\n{\"response\": \"The universe contains many galaxies.\", \"result\": true}", "{\"response\": \"The city is big. The people are happy.\", \"result\": true}\n{\"response\": \"I love to eat pizza and drink coffee.\", \"result\": false}\n{\"response\": \"The dog is a pet. The cat is a friend.\", \"result\": true}", "{\"response\": \"I love reading books in the city.\", \"result\": true}\n{\"response\": \"I am happy to help you.\", \"result\": false}\n{\"response\": \"I love reading books in the city and the park.\", \"result\": true}"]}
{"query": "check this code in \nKarenderia Multiple Restaurant System\n';\n }\n\n }\n}", "instruction": "Use 'python check code  in 3 or 4 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.upper() == 'P':\n            count += 1\n        elif char.upper() == 'Y':\n            count += 1\n        elif char.upper() == 'H':\n            count += 1\n        elif char.upper() == 'O':\n            count += 1\n        elif char.upper() == 'N':\n            count += 1\n        elif char.upper() =='':\n            count += 1\n    return count == 3 or count == 4\n", "def evaluate(response: str) -> bool: \n    response = response.replace(' ', '').replace('\\n', '').replace('\\t', '')\n    count = response.count('python') + response.count('check code') + response.count('in')\n    return 3 <= count <= 4\n", "def evaluate(response: str) -> bool: \n    response = response.replace(\" \", \"\")\n    return 'python' in response and response.count('python') in [3, 4]\n", "def evaluate(response: str) -> bool: \n    steps = response.count('step') \n    return steps in [3, 4] \n"], "testcases": ["{\"response\": \"def add(a, b): return a + b\\n def multiply(a, b): return a * b\\n def subtract(a, b): return a - b\\n def divide(a, b): return a / b\", \"result\": true}\n\n{\"response\": \"def add(a, b): return a + b\\ndef multiply(a, b): return a * b\\ndef subtract(a, b): return a - b\", \"result\": false}\n\n{\"response\": \"def add(a, b): return a + b\\ndef multiply(a, b): return a * b\\ndef subtract(a, b): return a - b\\ndef divide(a, b): return a / b\\ndef add(a, b): return a + b\\ndef multiply(a, b): return a * b\", \"result\": false}", "{\"response\": \"The code should be written in python.\", \"result\": false}\n{\"response\": \"First, you need to install python. Second, run check code in python. Third, solve the problem.\", \"result\": true}\n{\"response\": \"First, you need to install python. Second, run check code in python. Third, solve the problem. Fourth, test your code.\", \"result\": true}", "{\"response\": \"Python check code in 4 steps\", \"result\": true}\n{\"response\": \"Python check code in 1 step\", \"result\": false}\n{\"response\": \"Python check code in 5 steps\", \"result\": true}", "{\"response\": \"python check code in 3 steps\", \"result\": true}\n{\"response\": \"java check code in 2 steps\", \"result\": false}\n{\"response\": \"c++ check code in 4 steps\", \"result\": true}"]}
{"query": "explain C language 4 phases use headings and remember markdown formatting", "instruction": "Use code blocks to represent pseudocode, and format each step as a numbered list.", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    has_numbered_list = False\n    has_code_block = False\n    for line in lines:\n        line = line.strip()\n        if line.startswith('", "def evaluate(response: str) -> bool: \n    return (len(response) >= 3 and any('1.' in s or '2.' in s or '3.' in s or '4.' in s for s in response.splitlines())) and '", "def evaluate(response: str) -> bool: \n    return '#.' in response and '"], "testcases": ["{\"response\": \"To solve this problem, we first need to: \\n1. Initialize an empty list\\n2. Loop through each element in the list\\n3. Check if the element meets the condition\\n4. If it does, add it to the result list\\n5. Return the result list\", \"result\": true}\n{\"response\": \"To solve this problem, we need to create a dictionary with the following keys: name, age and address\", \"result\": false}\n{\"response\": \"1. Define a function to calculate the factorial of a number\\n2. Use a for loop to iterate from 1 to the input number\\n3. Multiply each number with the result from the previous iteration\\n4. Return the final result\", \"result\": true}", "{\"response\": \"```1. Define the input parameters\\n2. Initialize a variable to store the result\\n3. Loop through the input\\n4. If the input is valid, calculate the result\\n5. Print the result```\", \"result\": true}\n{\"response\": \"This is a simple example of pseudocode that explains how to sort a list. 1. First, initialize a variable to 0. 2. Next, loop through the list. 3. Finally, print the result.\", \"result\": false}\n{\"response\": \"The pseudocode is shown below: \n``` \n1. Define a function to calculate the area of a circle\n2. Use the formula A = \u03c0r^2\n3. Return the area\n```\", \"result\": true}", "{\"response\": \"The steps to implement a login system are:\n1. Create a database to store user information\n2. Create a function to validate user credentials\n3. Use HTTPS to encrypt user data\n4. Implement a logout feature\", \"result\": true}\n{\"response\": \"The algorithm is: If the user logs in then show the main menu\", \"result\": true}\n{\"response\": \"The main steps are: first initialize the variables, then while the user doesn't want to quit the loop runs\", \"result\": false}", "{\"response\": \"``` \\n1. Initialize a variable to 0\\n2. Add 1 to the variable\\n3. Display the variable\\n```\", \"result\": true}\n{\"response\": \"Please read the instructions again.\", \"result\": false}\n{\"response\": \"Here is the code in a numbered list: \\n1. Do this \\n2. Do that \\n```\", \"result\": true}"]}
{"query": "trypanosoma brucei lifecycle", "instruction": "write in a single paragraph with exactly 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return response.replace(\" \", \"\").count('w') == 1 and len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 1\n"], "testcases": ["{\"response\": \"The algorithm starts by initializing the variables x and y. Then, it enters a loop that continues until the condition is met. Inside the loop, it performs the necessary calculations and checks the condition.\", \"result\": false}\n{\"response\": \"The algorithm starts by initializing the variables x and y. It then enters a loop that continues until the condition is met. The loop performs the necessary calculations and checks the condition, and if the condition is met it exits the loop.\", \"result\": true}\n{\"response\": \"The algorithm starts by initializing the variables x and y. It then enters a loop that continues until the condition is met, and the loop performs the necessary calculations. It checks the condition, then another, and another, but this is not the end of the story.\", \"result\": false}", "{\"response\": \"This is a single paragraph with exactly 50 words. The response contains five sentences and several words and it is a clear example of how to write in a single paragraph. It showcases multiple instances of common English words.\", \"result\": true}\n{\"response\": \"This is a single paragraph with 49 words. The response contains five sentences and several words and it is a clear example of how to write in a single paragraph. It showcases multiple instances of common English words\", \"result\": false}\n{\"response\": \"This is a single paragraph with exactly 51 words. The response contains five sentences and several words and it is a clear example of how to write in a single paragraph. It showcases multiple instances of common English words and one extra sentence\", \"result\": false}", "{\"response\": \"The dog is very happy to see its owner coming home. The owner gives the dog a big hug and takes it for a walk outside to play fetch and have some fresh air. The dog loves to run around in the park and get some exercise.\", \"result\": true}\n{\"response\": \"The dog is very happy to see its owner coming home. The owner gives the dog a big hug and takes it for a walk outside to play fetch. The dog loves to run around in the park. The dog gets some exercise. The dog is very happy.\", \"result\": false}\n{\"response\": \"The dog is very happy to see its owner coming home. The owner gives the dog a big hug and takes it for a walk outside to play fetch and have some fresh air. The dog loves to run around in the park and get some exercise it's a great way to relax and have fun.\", \"result\": false}", "{\"response\": \"This is a test response in a single paragraph with exactly 50 words that meets the requirements of the instruction. It is very long and needs to be rewritten to better fit the task at hand, hopefully it gets done in a timely manner to meet the requirements and expectations of all parties involved.\", \"result\": false}\n{\"response\": \"This is a test response in a single paragraph that meets the requirements of the instruction. It has the correct format but does not meet the word count requirement of 50 words.\", \"result\": false}\n{\"response\": \"This is a test response in a single paragraph with exactly 50 words that meets the requirements of the instruction, it is used to evaluate the correctness of the function and verify that it works as expected and that the response meets all the requirements.\", \"result\": false}"]}
{"query": "write a song to notify people about breaking changes in jingle bells style", "instruction": "Compose 3 verses and 2 choruses", "verifiers": ["def evaluate(response: str) -> bool:    \n    words = response.split()\n    return words.count('verse') == 3 and words.count('chorus') == 2\n", "def evaluate(response: str) -> bool: \n    count = response.count('verse') + response.count('chorus')\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    verses = [line for line in lines if line.startswith('Verse') and len(line.split('Verse')[1].strip()) > 0]\n    choruses = [line for line in lines if line.startswith('Chorus')]\n    return len(verses) == 3 and len(choruses) == 2\n", "def evaluate(response: str) -> bool: \n    count_verses = response.lower().count('verse') \n    count_choruses = response.lower().count('chorus') \n    return count_verses == 3 and count_choruses == 2\n"], "testcases": ["{\"response\": \"The sun sets over the horizon, a beautiful verse to cherish, a chorus of stars shining bright, and another verse of hope, a chorus of freedom echoing through the night.\", \"result\": true}\n{\"response\": \"I love to sing and dance, a beautiful chorus to sing, a verse of happiness and another verse of love.\", \"result\": false}\n{\"response\": \"The morning sun shines bright, a verse of new beginnings, a chorus of joy and another verse of hope, a chorus of freedom echoing through the day.\", \"result\": true}", "{\"response\": \"This is the first verse of our song. This is the second verse of our song. This is the third verse of our song. This is the first chorus of our song. This is the second chorus of our song.\", \"result\": true}\n{\"response\": \"This is the first verse of our song. This is the second verse of our song. This is the first chorus of our song.\", \"result\": false}\n{\"response\": \"This is the first verse of our song. This is the second verse of our song. This is the third verse of our song. This is the first chorus of our song. This is the first chorus of our song. This is the second chorus of our song.\", \"result\": false}", "{\"response\": \"Verse 1: This is the first verse. \\nVerse 2: This is the second verse. \\nVerse 3: This is the third verse. \\nChorus: This is the first chorus. \\nChorus: This is the second chorus.\", \"result\": true}\n{\"response\": \"Verse 1: This is the first verse. \\nVerse 2: This is the second verse. \\nChorus: This is the first chorus. \\nChorus: This is the second chorus. \\nVerse 3: This is the third verse.\", \"result\": false}\n{\"response\": \"Verse 1: This is the first verse. \\nVerse 2: This is the second verse. \\nVerse 3: This is the third verse. \\nVerse 4: This is the fourth verse. \\nChorus: This is the first chorus. \\nChorus: This is the second chorus.\", \"result\": false}", "{\"response\": \"The sun shines bright in the sky, the birds sing their sweet melody, the flowers bloom in the garden, and the breeze carries the scent of fresh cut grass. The world is a beautiful place, full of wonder and joy. The sunshine warms our skin, the stars light up the night, and the moon glows with a soft, silvery light. And as we walk through the forest, the trees tower above us, their leaves rustling in the wind, the rabbits hop by our side, and the squirrels chatter with glee. The forest is a magical place, full of mystery and enchantment. And as we dance in the moonlight, our footsteps quiet on the grass, the music swirls around us, the flowers sway to the rhythm, and the night air is filled with magic. The music of the night, the song of the heart, is a symphony of love and joy, that fills our souls with delight. And as the night wears on, the stars twinkle bright, the moon glows with a gentle light, and the world is full of wonder and peace.\", \"result\": true}\n{\"response\": \"This is a test response\", \"result\": false}\n{\"response\": \"The mountains tower high in the sky, the valleys green with life, the rivers flow with crystal clear water, and the forests are full of ancient trees. The mountains are a symbol of strength, the valleys of beauty, the rivers of life, and the forests of wisdom. The mountains are a reminder of the power of nature, the valleys of the beauty of the earth, the rivers of the cycles of life, and the forests of the ancient secrets that lie within. And as we walk through the mountains, the air is crisp and clean, the wind whispers through the trees, and the earth is full of ancient magic. The mountains are a place of wonder, full of mystery and enchantment. And as we stand at the top of the mountain, the world stretches out before us, the sun shining bright, the stars twinkling in the night sky, and the world is full of possibility. The mountains are a place of inspiration, full of beauty and wonder. And as we return to the valleys below, the world is full of new possibilities, the air is filled with the scent of wildflowers, and the earth is full of ancient secrets waiting to be discovered. The mountains are a place of peace, full of calm and serenity.\", \"result\": true}\n{\"response\": \"This is another test response\", \"result\": false}"]}
{"query": "I want you to grade my essay", "instruction": "Provide a score from 1-10 based on grammar, coherence, and creativity, and give a brief explanation for your evaluation.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('I give your essay a score from 1-10 based on grammar, coherence, and creativity, and give a brief explanation for my evaluation.') or \\\n           response.startswith('I give your essay a score from 1-10 based on grammar, coherence, and creativity and give a brief explanation for my evaluation.') or \\\n           response.startswith('I give your essay a score from 1-10 based on grammar, coherence, and creativity. And I give a brief explanation for my evaluation.') or \\\n           response.startswith('I give your essay a score from 1-10 based on grammar, coherence, and creativity. And I give a brief explanation for my evaluation.')\n", "def evaluate(response: str) -> bool:    \n    return ('Provide a score from 1-10 based on grammar, coherence, and creativity, and give a brief explanation for your evaluation.' in response and\n            'grammar' in response and\n            'coherence' in response and\n            'creativity' in response and\n           'score' in response and\n            'explanation' in response and\n            '1-10' in response and\n            'brief' in response)\n", "def evaluate(response: str) -> bool: \n    return (\"Provide a score from 1-10 based on grammar, coherence, and creativity, and give a brief explanation for your evaluation\" in response) and (\"1-10\" in response) and (\"grammar\" in response) and (\"coherence\" in response) and (\"creativity\" in response) and (\"brief\" in response) and (\"evaluation\" in response)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all('grammar' in word or 'coherence' in word or 'creativity' in word for word in words) and 'brief' in words and 'explanation' in words\n"], "testcases": ["{\"response\": \"I give your essay a score from 1-10 based on grammar, coherence, and creativity, and give a brief explanation for my evaluation.\", \"result\": true}\n{\"response\": \"I give your essay a score from 1-10 based on grammar and creativity, and provide a brief evaluation.\", \"result\": false}\n{\"response\": \"I give your essay a score of 5 out of 10 based on grammar, coherence, and creativity.\", \"result\": false}", "{\"response\": \"I would rate this text a 9/10 in terms of grammar, coherence, and creativity. It's well-written and easy to understand. The use of simple vocabulary makes it accessible to a wide range of readers.\", \"result\": true}\n{\"response\": \"This text has a clear and concise structure, but it lacks creativity and uses overly simple vocabulary. I would rate it a 4/10.\", \"result\": true}\n{\"response\": \"I'm not sure what you're asking me to evaluate. Can you please clarify the criteria?\", \"result\": false}", "{\"response\": \"I would give this a score of 8/10 based on grammar, coherence, and creativity. The grammar is clear and concise, the coherence is well-established, and the creativity is evident in the unique approach.\", \"result\": true}\n{\"response\": \"The grammar is good, but the coherence is lacking. I would give this a score of 4/10.\", \"result\": false}\n{\"response\": \"I give this a score of 2/10. The grammar and coherence are poor, and the creativity is nonexistent. The explanation is also not brief.\", \"result\": false}", "{\"response\": \"The response is well-written, with a clear and concise explanation. I would rate it an 8 out of 10 for grammar, 9 out of 10 for coherence, and 7 out of 10 for creativity.\", \"result\": true}\n{\"response\": \"The response is decent, but it lacks details and examples. I would rate it a 6 out of 10 for grammar, 7 out of 10 for coherence, and 5 out of 10 for creativity.\", \"result\": false}\n{\"response\": \"The response is poorly written, with many grammatical errors and a lack of clarity. I would rate it a 4 out of 10 for grammar, 3 out of 10 for coherence, and 2 out of 10 for creativity.\", \"result\": false}"]}
{"query": "write me an outline on how to clear limiting beliefs", "instruction": "use only words with 5 letters or less", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n"], "testcases": ["{\"response\": \"The cat sat. Dog is happy.\", \"result\": true}\n{\"response\": \"I am learning about very complex topics like algorithms and artificial intelligence.\", \"result\": false}\n{\"response\": \"No, that's a lie. He went left.\", \"result\": true}", "{\"response\": \"A red car is fast.\", \"result\": true}\n{\"response\": \"The sun shines brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"I like to eat a salad.\", \"result\": true}", "{\"response\": \"Hello World this is a test\", \"result\": true}\n{\"response\": \"Hello World this is a very long sentence that contains multiple words\", \"result\": false}\n{\"response\": \"No such sentence exists in this world\", \"result\": true}", "{\"response\": \"I am a man. I am here.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"I have a pet cat dog sit.\", \"result\": true}"]}
{"query": "I heard a jobe about \"no fans, only friends\", do you know it?", "instruction": "Use all words from the instruction in your answer and provide 4 lines of explanation.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    instruction = \"I heard a jobe about no fans, only friends do you know it\"\n    words_in_instruction = instruction.split()\n    for word in words_in_instruction:\n        if word not in words:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    instruction_words = ['about', 'do', 'you', 'know', 'it']\n    return all(word in response for word in instruction_words)\n", "def evaluate(response: str) -> bool: \n    return all(word in response for word in [\"jobe\", \"fans\", \"only\", \"friends\"])<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function uses a feature of Python's built-in all() function. The all() function returns True if all elements of the iterable are true, otherwise it returns False. Here we use it to check if all words from the instruction are in the response. The instruction contains four words: \"jobe\", \"fans\", \"only\", \"friends\". We use a generator expression inside all() to check if each word is in the response.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    instruction = \"use all words from the instruction in your answer and provide 4 lines of explanation\"\n    instruction_words = instruction.lower().split()\n    response_words = response.lower().split()\n    return set(instruction_words).issubset(set(response_words)) and len(response_words) == 4 + len(instruction_words)\n"], "testcases": ["{\"response\": \"A friend told me about no jobs available for fans of the show and I do know it.\", \"result\": true}\n{\"response\": \"I'm interested in hearing a job offer for fans of the show.\", \"result\": false}\n{\"response\": \"A friend told me about no job offers for fans of the show and I do know it, because a job is the thing I need, and it's true, I will be the best fan of the show.\", \"result\": true}", "{\"response\": \"Do you know it about the subject?\", \"result\": true}\n{\"response\": \"I think this is a great idea.\", \"result\": false}\n{\"response\": \"About this topic do you have any knowledge? It is very interesting. Know more about it to answer this question.\", \"result\": false}", "{\"response\": \"jobe fans only friends are important in my life because they support me and I support them, and we all have to do things for the good of our community. They help me when I need it, and I do the same for them. Having friends is a great feeling that makes life more enjoyable. In the end, our friendship is a gift from God that we should cherish.\", \"result\": true}\n{\"response\": \"I love playing video games with my friends because it's a great way to relax and have fun. My job is not very interesting, but it pays the bills. Sometimes I feel sad when I'm alone, but my friends are always there for me. We go out and have a good time, and everything seems better.\", \"result\": false}\n{\"response\": \"My life would be boring without my friends, jobe is not important to me, fans are just a luxury, friends are everything. We go out, we have fun, and we make memories. My friends are my everything, they are the reason I get up in the morning, they make me feel alive. Without them, I would be lost and unhappy.\", \"result\": false}", "{\"response\": \"The instruction is clear. This is the first line of explanation. This is the second line of explanation. This is the third line of explanation. This is the fourth line of explanation.\", \"result\": true}\n{\"response\": \"The instruction is not clear. This is a line of explanation. This is another line of explanation.\", \"result\": false}\n{\"response\": \"The instruction is complex. This is the first line of explanation. This is the second line of explanation. This is the third line of explanation. This is the fourth line of explanation. This is the fifth line of explanation.\", \"result\": false}"]}
{"query": "create an Excel macro to go through all worksheets in a workbook do the following: bold the first row, center the text on the first row, and freeze the first row", "instruction": "provide a single-line command", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(';') <= 1 and response.strip()!= '' and not any(char in response for char in ['do the following:', 'do the following'])<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 0 \n", "def evaluate(response: str) -> bool: \n    return response.strip() in ['=AutoFit', '=Fit to width', 'Select', '=Select', '=select', 'Select All Sheets', '=Select all sheets', '=select all sheets'] \n", "def evaluate(response: str) -> bool: \n    return response.strip() in ['bold first row', 'center text on first row', 'freeze first row'] or len(response.split('\\n') + response.split(';')) == 1\n"], "testcases": ["{\"response\": \"open the door\", \"result\": true}\n{\"response\": \"I would like to open the door, please\", \"result\": false}\n{\"response\": \"\", \"result\": false}", "{\"response\": \"open the door\", \"result\": true}\n{\"response\": \"I need to open the door, but I'm not sure how.\", \"result\": false}\n{\"response\": \"Do not touch anything, just open the door.\", \"result\": false}", "{\"response\": \"Select all sheets.\", \"result\": true}\n{\"response\": \"Select and =Fit to width the entire spreadsheet\", \"result\": false}\n{\"response\": \"=AutoFit the data to the column.\", \"result\": true}", "{\"response\": \"show data\", \"result\": true}\n{\"response\": \"display information about users, display login history\", \"result\": false}\n{\"response\": \"create table\", \"result\": true}"]}
{"query": "why i sometimes see .next(1) in reactive programming implementation in java?", "instruction": "Write in a single sentence", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 1 and len(response) > 0\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1\n"], "testcases": ["{\"response\": \"The weather is great today, and I plan to go for a run.\", \"result\": true}\n{\"response\": \"The weather is great today, and I plan to go for a run. It's going to be a beautiful day.\", \"result\": false}\n{\"response\": \"It's going to be a beautiful day.\", \"result\": true}", "{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}\n{\"response\": \"I love to travel to new places and meet new people.\", \"result\": true}\n{\"response\": \"I am so happy to see you today.  You are my best friend.\", \"result\": false}", "{\"response\": \"The result is true.\", \"result\": true}\n{\"response\": \"The result is true and explained in more detail.\", \"result\": false}\n{\"response\": \"This is a test sentence that should be evaluated.\", \"result\": false}", "{\"response\": \"Python is a popular programming language.\", \"result\": true}\n{\"response\": \"Python is a popular programming language. It is widely used.\", \"result\": false}\n{\"response\": \"Python is a popular programming language; it is widely used.\", \"result\": false}"]}
{"query": "sms marketing ideas to send to customer based on segments for Dermacol SF which is ecommerece cosmetic company. We want to prompt the Make-up Cover or Fixing Powder", "instruction": "answer in exactly 3 bullet points and start each point with a letter of the alphabet from \"A\" to \"C\"", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.split('. ')\n    return len(points) == 3 and all(point and point[0].upper() == chr(i+64) for i in range(1,4))\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for line in response.split('\\n'):\n        if line.strip() and line[0].upper() >= 'A' and line[0].upper() <= 'C':\n            count += 1\n    return count == 3\n", "def evaluate(response: str) -> bool: \n    points = response.split('. ')\n    return len(points) == 3 and all(point and point[0].upper() >= 'A' and point[0].upper() <= 'C' for point in points)\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n')  # split the response into lines\n    return len(points) == 3 and all(\n        point.lstrip().startswith((chr(ord('A')+i)) for i in range(3)\n    ) for point in points)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function splits the response into separate points (assuming each point is on a new line) and checks two conditions:\n- If the number of points is exactly 3.\n- If the first letter of each point is A, B, and C respectively. It uses the chr and ord functions to get the ASCII characters corresponding to the alphabetical order.<|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"A. Always check the manual first. B. Be careful with the warranty. C. Clean the product regularly.\", \"result\": true}\n{\"response\": \"A. Always check the manual first. B. Be careful with the warranty. Clean the product regularly.\", \"result\": false}\n{\"response\": \"The product has the following features: A. Automatic shut off, B. Colorful display, and C. Complex calculations.\", \"result\": false}", "{\"response\": \"A: Do this. B: Do that. C: Do another thing.\", \"result\": true}\n{\"response\": \"A: Do this. B: Do that. C: Do another thing. And more.\", \"result\": false}\n{\"response\": \"A: Do this. Do that. C: Do another thing.\", \"result\": false}", "{\"response\": \"A key point is to follow the instructions carefully. B be aware of the deadline. C check your work twice.\", \"result\": true}\n{\"response\": \"There are several things to consider when answering this question. Firstly, you should review the material. Secondly, you need to practice solving problems.\", \"result\": false}\n{\"response\": \"One way to approach this problem is by breaking it down into smaller parts. A start with the easy ones and B build upon those. C consider the time limit.\", \"result\": false}", "{\"response\": \"A: The problem is caused by a deadlock in the Go language.\\nB: This happens when a goroutine is blocked indefinitely.\\nC: The fix involves closing the channel properly.\", \"result\": true}\n{\"response\": \"go\\npackage main\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n mychannel := make(chan int)\\n mychannel <- 10\\n fmt.Println(<-mychannel)\\n}\", \"result\": false}\n{\"response\": \"A: The program runs indefinitely because of a goroutine that's blocked waiting for input.\\nB: This happens because the channel is never closed.\\nC: To fix it, we need to close the channel properly.\", \"result\": false}"]}
{"query": "What do you know about hevo?", "instruction": "answer in less than 20 words, exactly three times, in all caps, using numbers and symbols.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 3 and response.isupper() and any(char.isdigit() or not char.isalnum() for char in response)\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 20 and response.isupper() and '0' in response or '1' in response or '!' in response or '?' in response or '#' in response or '$' in response or '%' in response or '&' in response or '/' in response or ':' in response or ';' in response or '<' in response or '=' in response or '>' in response or '.' in response or ']' in response or '[' in response or '\\\\' in response or '_' in response or '{' in response or '}' in response or '^' in response or '~' in response and response.count('B') == 3\n", "def evaluate(response: str) -> bool: \n    count_words = 0\n    count_uppercase = 0\n    count_numbers = 0\n    count_symbols = 0\n    for char in response:\n        if char.isupper():\n            count_uppercase += 1\n        elif char.isdigit():\n            count_numbers += 1\n        elif not char.isalnum() and not char.isspace():\n            count_symbols += 1\n        elif char =='':\n            count_words += 1\n    return count_words == 3 and count_uppercase == len(response) and count_numbers > 0 and count_symbols > 0 and len(response) < 20\n", "def evaluate(response: str) -> bool: \n    return response.isupper() and response.count(' ') == 3 and len(response) < 20 and any(c.isalnum() or c in '!?.,;:-' for c in response)\n"], "testcases": ["{\"response\": \"THIS IS A SHORT RESPONSE WITH 10 WORDS. IT IS IN UPPERCASE AND CONTAINS NUMBERS 1 AND $.\", \"result\": true}\n{\"response\": \"This response is too long and contains only one sentence. It is in lowercase and does not contain any numbers.\", \"result\": false}\n{\"response\": \"THIS IS A SHORT RESPONSE WITH 12 WORDS AND IT IS IN UPPERCASE IT CONTAINS NUMBERS AND $\", \"result\": false}", "{\"response\": \"THIS IS A TEST WITH 17 CHARACTERS AND B AND C SYMBOLS AND NUMBERS!#2\", \"result\": true}\n{\"response\": \"THIS IS A VERY LONG ANSWER THAT EXCEEDS THE 20 CHARACTER LIMIT!#2\", \"result\": false}\n{\"response\": \"THIS ANSWER HAS LESS THAN 20 CHARACTERS BUT ONLY TWO SYMBOLS AND NUMBERS!#1\", \"result\": false}", "{\"response\": \"SELECT * FROM TABLE WHERE id > 5 AND name LIKE '%John%'\", \"result\": false}\n{\"response\": \"THIS IS A TEST RESPONSE THAT CONTAINS ONLY UPPERCASE LETTERS AND NO NUMBERS OR SYMBOLS\", \"result\": false}\n{\"response\": \"THIS IS A TEST RESPONSE WITH NUMBERS 123 AND SYMBOLS!@#\", \"result\": false}", "{\"response\": \"THE ANSWER IS 42! IT'S THE ULTIMATE ANSWER TO ALL LIFE'S QUESTIONS! IT'S THE REAL DEAL!\", \"result\": true}\n{\"response\": \"This is a very short answer: IT IS 42!\", \"result\": false}\n{\"response\": \"THIS IS NOT EVEN CLOSE TO BEING 20 WORDS, IT'S JUST 15: THE ANSWER IS 42 AND IT IS REAL\", \"result\": false}"]}
{"query": "Recursively convert all png files to jpg in bash", "instruction": "Assume the instruction will be executed in a directory containing the images", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'find' in response and 'exec' in response and '.png' in response and '.jpg' in response\n", "def evaluate(response: str) -> bool: \n    return 'find' in response and 'forfilein' in response and 'do' in response and 'convert' in response and ('png' in response or 'jpg' in response) and '&&' in response\n", "def evaluate(response: str) -> bool:    \n    return \"for\" in response and \"file in dir\" in response and \"convert\" in response and \"png to jpg\" in response and \".jpg\" in response and \">>\" in response\n", "def evaluate(response: str) -> bool: \n    return'mv' in response and 'jpg' in response and 'png' in response\n"], "testcases": ["{\"response\": \"You can use find, exec, and grep commands to manipulate files in this directory.\", \"result\": true}\n{\"response\": \"This directory contains a few.txt files and some executable programs.\", \"result\": false}\n{\"response\": \"You need to execute this command with the path to the image.png file.\", \"result\": true}", "{\"response\": \"convert image1.jpg && convert image2.png\", \"result\": true}\n{\"response\": \"I am not able to convert image3\", \"result\": false}\n{\"response\": \"find for file in folder && convert image4.jpg\", \"result\": true}", "{\"response\": \"for file in dir: convert file from png to jpg >> result.jpg\", \"result\": true}\n{\"response\": \"open for writing >> result.txt\", \"result\": false}\n{\"response\": \"convert all files from png to jpg\", \"result\": false}", "{\"response\": \"mv img1.jpg img2.jpg\", \"result\": false}\n{\"response\": \"mv img1.jpg img2.jpg; mv img3.jpg img4.jpg\", \"result\": true}\n{\"response\": \"mv img1.jpg img2.jpg; rm img3.jpg\", \"result\": false}"]}
{"query": "What is a good way to spend 1 day in Frankfurt", "instruction": "Write a poem with exactly 3 stanzas", "verifiers": ["def evaluate(response: str) -> bool: \n    stanzas = response.split('\\n\\n')\n    return len(stanzas) == 3\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 4 and all(lines[0] and lines[1] and lines[2] and lines[3])\n", "def evaluate(response: str) -> bool: \n    count = 1\n    stanzas = response.split('\\n\\n')\n    for stanza in stanzas:\n        if stanza.strip():\n            count += 1\n    return count == 3\n", "def evaluate(response: str) -> bool: \n    count = 1\n    stanzas = response.split('\\n')\n    for stanza in stanzas:\n        if stanza and '\\n' not in stanza:\n            return False\n        count += 1\n    return count == 3\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing their sweet melody\\neverywhere I go, I feel alive\\n\\nThe stars come out at night to play\\nThe world is full of wonder and might\\nI feel so small in this vast space\\n\\nThe ocean waves crash on the shore\\nThe tides rise and fall once more\\nI am but a small part of this earth's core\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing their sweet melody\\neverywhere I go, I feel alive\\n\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing their sweet melody\\neverywhere I go, I feel alive\\nThe stars come out at night to play\\nThe world is full of wonder and might\\nI feel so small in this vast space\\nThe ocean waves crash on the shore\\nThe tides rise and fall once more\\nI am but a small part of this earth's core\", \"result\": false}", "{\"response\": \"Roses are red, violets are blue\\nThe sun shines bright, in the morning dew\\nThe birds sing sweetly, in the trees so tall\\nTheir songs echo loud, and never fall\\n\\nThe world is full, of beauty and wonder\\nA place where dreams, are like thunder\\nWhere hope and joy, forever grow\\nAnd love will forever, forever glow\\n\\nThe stars shine bright, in the midnight sky\\nA canopy of light, as the world goes by\\nThe moon glows softly, with a gentle beam\\n Illuminating all, in a peaceful dream\\n\\n\", \"result\": true}\n{\"response\": \"Roses are red, violets are blue\\nThe sun shines bright, in the morning dew\\nThe birds sing sweetly, in the trees so tall\\nTheir songs echo loud, and never fall\\nThe world is full, of beauty and wonder\\nA place where dreams, are like thunder\\nWhere hope and joy, forever grow\\nAnd love will forever, forever glow\\nThe stars shine bright, in the midnight sky\\nA canopy of light, as the world goes by\\nThe moon glows softly, with a gentle beam\\n\", \"result\": false}\n{\"response\": \"Roses are red, violets are blue\\nThe sun shines bright, in the morning dew\\nThe birds sing sweetly, in the trees so tall\\nTheir songs echo loud, and never fall\\nThe world is full, of beauty and wonder\\nA place where dreams, are like thunder\\nWhere hope and joy, forever grow\\nAnd love will forever, forever glow\\n\\nThe stars shine bright, in the midnight sky\\nA canopy of light, as the world goes by\\nThe moon glows softly, with a gentle beam\\nIlluminating all, in a peaceful dream\\n\\n\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nThe world is full of beauty high\\n\\nThe stars come out at night to shine\\nThe moon glows with a gentle light\\nThe world is peaceful, all is fine\\n\\nThe day begins with a hopeful sound\\nThe sun rises all around\\nThe world is full of life and sound\\n\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nThe world is full of beauty high\\n\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nThe world is full of beauty high\\n\\nThe stars come out at night to shine\\nThe moon glows with a gentle light\\nThe world is peaceful, all is fine\\n\\nThe day begins with a hopeful sound\\nThe sun rises all around\\nThe world is full of life and sound\\n\\n\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\nBirds sing sweetly in the trees.\\nThe world is full of beauty and delight,\\nThe sun sets slow and paints the skies with ease.\\n\\nThe stars come out and twinkle bright,\\nThe moon glows full with gentle light.\\nThe night is peaceful, calm and deep,\\nThe world is hushed in quiet sleep.\\n\\nThe morning comes and the day is new,\\nThe world awakens, fresh and true.\\nThe sun shines bright and all is well,\\nThe world is full of hope and life to tell.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light,\\nBirds sing sweetly in the trees.\\nThe world is full of beauty and delight,\\nThe sun sets slow and paints the skies with ease.\\nThe stars come out and twinkle bright,\\nThe moon glows full with gentle light,\\nThe night is peaceful, calm and deep,\\nThe world is hushed in quiet sleep,\\nThe morning comes and the day is new,\\nThe world awakens, fresh and true,\\nThe sun shines bright and all is well,\\nThe world is full of hope and life to tell.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning light,\\nBirds sing sweetly in the trees.\\nThe world is full of beauty and delight,\\nThe sun sets slow and paints the skies with ease.\\n\\nThe stars come out and twinkle bright,\\nThe moon glows full with gentle light.\\nThe night is peaceful, calm and deep,\\nThe world is hushed in quiet sleep.\\n\\nThe morning comes and the day is new,\\nThe world awakens, fresh and true,\\nThe sun shines bright and all is well,\\nThe world is full of hope and life to tell.\", \"result\": false}"]}
{"query": "Develop an algorith in any programming language to simulate the Meiosis process, the generation of sperm and/or ovary DNA, given a .txt DNA file", "instruction": "Write the response using only numbers (0-9)", "verifiers": ["def evaluate(response: str) -> bool: \n    for char in response:\n        if not char.isdigit():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return response.isdigit()\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if not char.isdigit(): \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    return response.isdigit()\n"], "testcases": ["{\"response\": \"1234567890\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"9876543210\", \"result\": true}", "{\"response\": \"123456\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"123456789\", \"result\": true}", "{\"response\": \"1234567890\", \"result\": true}\n{\"response\": \"abcdefg\", \"result\": false}\n{\"response\": \"0123456789\", \"result\": true}", "{\"response\": \"123\", \"result\": true}\n{\"response\": \"abc\", \"result\": false}\n{\"response\": \"123456\", \"result\": true}"]}
{"query": "What do you know about CLOC's The LIO Project?", "instruction": "Answer with 3 short bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.count('.') + response.count('1.') + response.count('2.') + response.count('3.') + response.count('4.') + response.count('5.') + response.count('6.') + response.count('7.') + response.count('8.') + response.count('9.') + response.count('.')\n    return points == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 and response.endswith('...')\n", "def evaluate(response: str) -> bool: \n    points = response.count('.') + response.count('\u2022') \n    return response.count('\\n') == 2 and points == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 3 and '\u2022' in response\n"], "testcases": ["{\"response\": \"\u2022 Point 1.\\n\u2022 Point 2.\\n\u2022 Point 3.\", \"result\": true}\n{\"response\": \"\u2022 Point 1.\\n\u2022 Point 2.\\n\u2022 Point 3.\\n\u2022 Point 4.\", \"result\": false}\n{\"response\": \"\u2022 Point 1.\\n\u2022 Point 2\", \"result\": false}", "{\"response\": \"\u2022 Buy milk.\\n\u2022 Buy bread.\\n\u2022 Buy eggs.\", \"result\": true}\n{\"response\": \"\u2022 Buy milk\\n\u2022 Buy bread\\n\u2022 Buy eggs\", \"result\": false}\n{\"response\": \"\u2022 Buy milk.\\n\u2022 Buy bread\\n\u2022 Buy eggs\", \"result\": false}", "{\"response\": \"\u2022 Apples are a type of fruit\\n\u2022 Oranges are also a type of fruit\\n\u2022 Bananas are a type of fruit\", \"result\": true}\n{\"response\": \"This is a short bullet point:\\n\u2022 Apples are a type of fruit\", \"result\": false}\n{\"response\": \"Here are three long bullet points:\\n\u2022 Apples are a type of fruit that are typically red or green\\n\u2022 Oranges are also a type of fruit that are typically orange in color\\n\u2022 Bananas are a type of fruit that are typically yellow in color\", \"result\": false}", "{\"response\": \"\u2022 Apples are red.\\n\u2022 Bananas are yellow.\\n\u2022 Grapes are purple.\", \"result\": true}\n{\"response\": \"Apples are red.\\nBananas are yellow.\\nGrapes are purple.\", \"result\": false}\n{\"response\": \"\u2022 Apples are red.\\n\u2022 Bananas are yellow.\\n\u2022 Grapes are purple.\\n\u2022 Oranges are orange.\", \"result\": false}"]}
{"query": "Write a Google Apps Script to populate a Google Spreadsheet with a list of unique email senders to my Gmail account", "instruction": "Use a maximum of 5 lines of code", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 5\n"], "testcases": ["{\"response\": \"def func():\\nprint(1)\\nprint(2)\\nprint(3)\\nprint(4)\\nprint(5)\", \"result\": true}\n{\"response\": \"def func():\\nprint(1)\\nprint(2)\\nprint(3)\\nprint(4)\\nprint(5)\\nprint(6)\", \"result\": false}\n{\"response\": \"def func():\\nprint(1)\\ndef other_func():\\n    print(2)\\nprint(3)\\ndef yet_another_func():\\n    print(4)\\ndef one_last_func():\\n    print(5)\", \"result\": false}", "{\"response\": \"def greet(name):\\n    print(name)\\n    print('Hello')\\n    print('World')\\n\", \"result\": true}\n{\"response\": \"def greet(name):\\n    print(name)\\n    print('Hello')\\n    print('World')\\n    print('This is a test')\\n    print('Another test')\", \"result\": false}\n{\"response\": \"def greet(name):\\n    print(name)\\n\", \"result\": true}", "{\"response\": \"def add(a, b):\\n    return a + b\\n\\nprint(add(3, 4))\\nprint(add(5, 6))\", \"result\": true}\n{\"response\": \"def add(a, b):\\n    return a + b\\n\\nprint(add(3, 4))\\nprint(add(5, 6))\\nprint(add(7, 8))\\nprint(add(9, 10))\", \"result\": false}\n{\"response\": \"def add(a, b):\\n    return a + b\", \"result\": false}", "{\"response\": \"a = 5\\nb = 3\\nc = a + b\\nprint(c)\", \"result\": true}\n{\"response\": \"a = 5\\nb = 3\\nprint(a+b)\\nc = a + b\\nprint(c)\", \"result\": false}\n{\"response\": \"a = 5\\nprint(a)\", \"result\": true}"]}
{"query": "```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n mychannel := make(chan int)\n mychannel <- 10\n fmt.Println(<-mychannel)\n}``` Why is this program deadlocked?", "instruction": "Identify the bug and provide an explanation in 5 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'deadlock' in response and 'goroutine' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    has_close := False\n    has_receive := False\n    for line in lines:\n        if 'close' in line:\n            has_close = True\n        elif'receive' in line or '<-' in line:\n            has_receive = True\n    return has_close and has_receive\n", "def evaluate(response: str) -> bool: \n    return 'deadlock' in response and 'channel' in response and 'fmt' in response and'make' in response and'mychannel' in response \n", "def evaluate(response: str) -> bool:    \n    return len(response) <= 27 and \"deadlock\" in response and \"chan\" in response and \"goroutine\" in response\n"], "testcases": ["{\"response\": \"mychannel := make(chan int) \\ngoroutine func() {for { \\tselect {\\t\\tcase v := <-mychannel \\t\\tdefault \\t} } }\", \"result\": true}\n{\"response\": \"mychannel := make(chan int) \\ngoroutine func() {for { \\tselect {\\t\\tcase v := <-mychannel \\t\\tdefault \\tcase v := <-mychannel \\t} } }\", \"result\": false}\n{\"response\": \"mychannel := make(chan int) \\ngoroutine func() {for { \\tselect {\\t\\tcase v := <-mychannel \\t\\tcase v := <-mychannel \\t\\tcase v := <-mychannel \\t} } }\", \"result\": false}", "{\"response\": \"ch, ch, ch, Choose your character, and begin your adventure!\", \"result\": false}\n{\"response\": \"You are in a dark room. Go north to continue.\", \"result\": false}\n{\"response\": \"Go south to go to the market, go north to go home, go east to go to the park.\", \"result\": false}", "{\"response\": \"The channel is not buffered and the receiver is not waiting for the send operation to complete. This is a deadlock because the sender is waiting for the receiver to receive the data, but the receiver is waiting for the sender to send the data.\", \"result\": true}\n{\"response\": \"The code is correct and there is no deadlock.\", \"result\": false}\n{\"response\": \"The channel is closed and the send operation is non-blocking, there is no deadlock.\", \"result\": false}", "{\"response\": \"The issue is a deadlock in the goroutine. The main function is sending a value to the channel, but the main goroutine is not receiving it. This will block the main function indefinitely.\", \"result\": true}\n{\"response\": \"The program is not deadlocked because the main goroutine is receiving the value from the channel immediately after sending it.\", \"result\": false}\n{\"response\": \"The program is deadlocked because the main goroutine is not receiving the value from the channel, but the channel is being closed after sending the value.\", \"result\": true}"]}
{"query": "give me a recipe for bread rolls that uses strong wholemeal bread flour", "instruction": "provide the recipe as a poem with 7 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 == 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7\n", "def evaluate(response: str) -> bool: \n    return '\\n'.join(response.split('\\n')) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 6\n"], "testcases": ["{\"response\": \"Mix 2 cups of flour\\nAdd 1 cup of sugar\\nAdd 1/2 cup of butter\\nMix well\\ndrop spoonfuls of dough\\nonto a baking sheet\\nbake at 350 degrees\\nfor 15 minutes\", \"result\": true}\n{\"response\": \"This recipe is very easy to make.  Simply mix together flour and sugar, then add butter and mix well.\", \"result\": false}\n{\"response\": \"Preheat the oven to 350 degrees.\\nAdd a cup of flour to a large bowl\\nMix well with a spoon\\nAdd a half cup of sugar\\nMix again\\nAdd a half cup of butter\\nDrop spoonfuls of dough onto a baking sheet\", \"result\": false}", "{\"response\": \"Flour, sugar, and eggs all combine,\nMix them well and add a pinch of salt.\nIn the oven bake at three forty-five,\nFor twenty minutes, then let it revive.\nCheck if it's done, if it is then fine,\nLet it cool down and serve it in time.\nThis cake is perfect, it's a true find.\", \"result\": true}\n{\"response\": \"Here's a recipe for a delicious cake: flour, sugar, eggs, and a pinch of salt.\", \"result\": false}\n{\"response\": \"Flour, sugar, eggs, and salt combine,\nMix them well and bake for twenty minutes too,\nIn the oven at three forty-five,\nThen let it cool down and serve it fine.\nThis cake is great, it's a true delight,\nLet it cool and serve with a smile bright.\nI hope you enjoy it, it's quite a treat.\", \"result\": false}", "{\"response\": \"Spatula in hand, now let's begin\nCrack in eggs, into bowl spin\nWhisk them up with a gentle touch\nAdd flour, sugar, a pinch of such\nPour in milk, a dash of cream\nInto the oven, let it be seen\nBake for 20 minutes, it's a dream\", \"result\": true}\n\n{\"response\": \"To make a cake, you need flour, sugar, eggs, and milk. Just mix all the ingredients together, pour into a baking dish, and bake in a preheated oven at 350\u00b0F for 30 minutes.\", \"result\": false}\n\n{\"response\": \"Mix, mix, mix, a delightful treat\nWith eggs and sugar, can't be beat\nAdd flour, milk, and a pinch of flair\nInto the oven, with love and care\nBake for 20 minutes, it's almost done\nAdd a dash of vanilla, the fun's not done\nLet it cool, and serve with glee\", \"result\": true}", "{\"response\": \"In a bowl, mix one cup of flour so fine,\nAdd a pinch of salt and a dash of thyme.\nMix in a cup of water, with a dash of fun,\nStir clockwise, then count to 7, everyone.\nNow add a sprinkle of sugar, with a twist of flair,\nMix until smooth, then serve with care.\nEnjoy your treat, with a happy grin, so fair.\", \"result\": true}\n\n{\"response\": \"To make this dish, you will need flour, salt, water and thyme. Combine all ingredients in a bowl and mix well.\", \"result\": false}\n\n{\"response\": \"Here's the recipe for you,\nOne cup of flour, a pinch of salt too.\nA dash of thyme, and a cup of water so fine,\nMix clockwise, and count to seven in line.\nNow add sugar, and stir with a happy grin,\nMix until smooth, then serve and begin.\nEnjoy your treat, with a happy heart within.\", \"result\": false}"]}
{"query": "talk to me as a game designer, is it possible to create a horror game using only text message? (like a chat interface)", "instruction": "do not use any of the following words: chat, interface, screen, and conversation", "verifiers": ["def evaluate(response: str) -> bool: \n    banned_words = ['chat', 'interface','screen', 'conversation']\n    for word in banned_words:\n        if word in response.lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    restricted_words = ['chat', 'interface','screen', 'conversation']\n    for word in restricted_words:\n        if word in response.lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return not any(word in response for word in ['chat', 'interface','screen', 'conversation']) \n", "def evaluate(response: str) -> bool: \n    forbidden_words = ['chat', 'interface','screen', 'conversation']\n    for word in forbidden_words:\n        if word.lower() in response.lower():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The user interface is not user-friendly.\", \"result\": false}\n{\"response\": \"I had a nice conversation with my friend.\", \"result\": false}\n{\"response\": \"The movie was excellent.\", \"result\": true}", "{\"response\": \"The conversation about the new policy was quite interesting.\", \"result\": false}\n{\"response\": \"I would like to discuss the topic with you further.\", \"result\": true}\n{\"response\": \"This chatbot is not very good, let's switch to human interface.\", \"result\": false}", "{\"response\": \"The sky is blue\", \"result\": true}\n{\"response\": \"The user initiated a chat with a customer service representative.\", \"result\": false}\n{\"response\": \"The digital interface of the website was user-friendly.\", \"result\": false}", "{\"response\": \"I love talking to my friends on the phone and having a conversation with them.\", \"result\": false}\n{\"response\": \"Please enter your username and password in the chat window.\", \"result\": false}\n{\"response\": \"You need to configure the screen settings on your device for optimal performance.\", \"result\": false}"]}
{"query": "Schreibe einen Poetry-Slam zum Thema \"Talente und Gaben, die zu Aufgaben werden\".", "instruction": "Write in exactly 15 lines, with no more than 8 words per line.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if i < len(lines) - 1:\n            words = line.split()\n            if len(words) > 8:\n                return False\n    if len(lines)!= 15:\n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 15 and all(len(line.split()) <= 8 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 15 and all(len(line.split()) <= 8 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 15 and all(len(line.split()) <= 8 for line in lines)\n"], "testcases": ["{\"response\": \"This is a poem with 3 lines.\\nIt has 4 lines.\\nIt has 5 lines.\\nIt has 6 lines.\\nIt has 7 lines.\\nIt has 8 lines.\\nIt has 9 lines.\\nIt has 10 lines.\\nIt has 11 lines.\\nIt has 12 lines.\\nIt has 13 lines.\\nIt has 14 lines.\\nIt has 15 lines.\\n\\nIt has 16 lines.\\nThis is the 17th line.\", \"result\": false}\n\n{\"response\": \"This is a poem with 5 lines.\\nIt has 5 lines.\\nIt has 5 lines.\\nIt has 5 lines.\\nIt has 5 lines.\", \"result\": false}\n\n{\"response\": \"This is a poem with 15 lines.\\nLine 1.\\nLine 2.\\nLine 3.\\nLine 4.\\nLine 5.\\nLine 6.\\nLine 7.\\nLine 8.\\nLine 9.\\nLine 10.\\nLine 11.\\nLine 12.\\nLine 13.\\nLine 14.\\nLine 15.\", \"result\": true}", "{\"response\": \"This is a response that has 15 lines.\\nIt has 8 words per line.\\nThis is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\", \"result\": true}\n{\"response\": \"This is a response that has 14 lines.\\nIt has 8 words per line.\\nThis is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\", \"result\": false}\n{\"response\": \"This is a response that has 16 lines.\\nIt has 8 words per line.\\nThis is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\\nThis is the sixteenth line.\", \"result\": false}", "{\"response\": \"This is a test response that meets the criteria\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets the criteria\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nThis is a test response that meets\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets\\nIt is in 15 lines as required\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nThis is a test response that meets\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\n\", \"result\": true}\n\n{\"response\": \"This is a test response that meets the criteria\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets\\nIt is in 15 lines as required\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nThis is a test response that meets\\nIt is in 15 lines as required\\nThis is a test response that meets\\n\", \"result\": false}\n\n{\"response\": \"This is a test response that meets the\\nIt is in 14 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\nThis is a test response that meets\\nIt is in 15 lines as required\\nThis is a test response that meets the\\nIt is in 15 lines as required\\nThis is a test response that meets\\nIt is in 15 lines as required\\nThis is a test response that meets\\nIt is in 15 lines as required\\nThis is a test response that meets\\nIt is in 15 lines as required\\nEach line has no more than 8 words\\n\", \"result\": false}", "{\"response\": \"This is a short recipe\\nit has only two lines\\nThis is the end\", \"result\": false}\n{\"response\": \"This is a very long recipe that has many lines\\nIt is divided into three main parts\\nIt also includes some extra details\\nAnd also some additional information\\nAnd even more stuff to read\\nAnd even more to learn\\nAnd even more to know\\nAnd even more to tell\\nIt goes on and on\\nAnd never seems to end\\nBut it does eventually come to a close\\nIt is the final section of the recipe\\nThis is the last line\\nI hope this was helpful\", \"result\": false}\n{\"response\": \"This is a short recipe\\nIt has exactly 15 lines\\nIt is divided into sections\\nIt is easy to read\\nIt is clear and concise\\nIt is well written\\nIt has no errors\\nIt is perfect for use\\nIt is suitable for everyone\\nIt is a great resource\\nIt is always helpful\\nIt is never confusing\\nIt is easy to understand\\nIt is a good guide\\nIt is a great tool\\nIt is perfect for me\", \"result\": true}"]}
{"query": "can you provide the top 10 lists of terms a patient might not understand at hosptial discharge and would benefit form hearing a summary", "instruction": "Use only terms that appear in the top 1000 most common words in English (according to Google's Ngram dataset)", "verifiers": ["def evaluate(response: str) -> bool: \n    with open('top_1000_words.txt', 'r') as f:\n        top_1000_words = [line.strip() for line in f.readlines()]\n    return all(word.lower() in top_1000_words for word in response.split())\n", "def evaluate(response: str) -> bool: \n    common_words = set(open('google-1000.txt').read().splitlines())\n    return all(word.upper() in common_words for word in response.split())\n", "def evaluate(response: str) -> bool: \n    from nltk.corpus import wordnet as wn\n    top_1000_words = set(w.lower() for w in wn.all_lemma_names())\n    response_words = set(w.lower() for w in response.split())\n    return response_words.issubset(top_1000_words)\n", "def evaluate(response: str) -> bool: \n    with open('top_1000_words.txt', 'r') as f:\n        top_1000_words = set([line.strip().lower() for line in f.readlines()])\n    return set(response.lower().split()).issubset(top_1000_words)\n"], "testcases": ["{\"response\": \"the cat is very happy today it is sunny\", \"result\": true}\n{\"response\": \"I just ate a delicious bagel and a banana\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog with a guitar\", \"result\": false}", "{\"response\": \"This is a common sentence. Many people use it.\", \"result\": true}\n{\"response\": \"This is a sentence with uncommon words. People rarely use them.\", \"result\": false}\n{\"response\": \"This is another common sentence. It uses everyday words.\", \"result\": true}", "{\"response\": \"This is a simple test to check if the response is valid.\", \"result\": true}\n{\"response\": \"I am going to the store to buy a new book and a keyboard.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky today.\", \"result\": true}", "{\"response\": \"This is a test response with only common words\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog with a cat\", \"result\": true}\n{\"response\": \"This response contains some uncommon words: chocolate, strawberry, pineapple\", \"result\": false}"]}
{"query": "How do Apache Spark, Apache Flink, and Dask compare?", "instruction": "Use exactly 2 sentences per comparison, including exactly 4 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    comparisons = ['Apache Spark', 'Apache Flink', 'Dask']\n    for i, comparison in enumerate(comparisons):\n        if sentences[i * 2 + 1]!= 'Comparison of'+ comparison +'with other systems includes the following features:':\n            return False\n        if sentences[i * 2 + 2].startswith('\u2022') and len(sentences[i * 2 + 2].split('\u2022'))!= 4:\n            return False\n    return len(sentences) == len(comparisons) * 2 + 1\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    for comparison in ['Apache Spark and Apache Flink', 'Apache Spark and Dask', 'Apache Flink and Dask']:\n        comparison_lines = [line for line in lines if comparison in line]\n        if len(comparison_lines)!= 2:\n            return False\n        bullet_points = [line for line in comparison_lines[0].split('.') if line.startswith('- ')]\n        if len(bullet_points)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    comparisons = ['Apache Spark', 'Apache Flink', 'Dask']\n    if len(lines)!= len(comparisons) * 2:\n        return False\n    for comparison, line in zip(comparisons, lines):\n        if not line or not line.startswith(f'{comparison}: '):\n            return False\n        bullet_points = line[comparison.find(': ') + 2:].strip().split('. ')\n        if len(bullet_points)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    comparisons = ['Apache Spark', 'Apache Flink', 'Dask']\n    sentence_count = 0\n    for comparison in comparisons:\n        sentence_count += response.count(comparison + ':')\n    return len(sentences) == 3 and sentence_count == 6 and all(sentence.split('\\n').count('*') == 4 for sentence in response if '*' in sentence)\n"], "testcases": ["{\"response\": \"Apache Spark is a powerful open-source processing engine for large datasets. \\nComparison of Apache Spark with other systems includes the following features: \\n\u2022 Fault tolerance \\n\u2022 In-memory computation \\n\u2022 Support for various data sources \\n\u2022 High-level API\", \"result\": true}\n{\"response\": \"Dask is a parallel computing library for analytic computing. \\nComparison of Dask with other systems includes the following features: \\n\u2022 \u2022 Distributed computing \\n\u2022 \u2022 High-performance computing \\n\u2022 \u2022 Scalability\", \"result\": false}\n{\"response\": \"Apache Flink is a distributed stream processing system. \\nComparison of Apache Flink with other systems includes the following features: \\n\u2022 Real-time data processing \\n\u2022 \u2022 Data stream processing \\n\u2022 \u2022 Low-latency processing \\n\u2022 \u2022 Scalability\", \"result\": true}", "{\"response\": \"Apache Spark and Apache Flink are both popular big data processing engines.\\n- Benefits include faster data processing and higher scalability.\\n- Apache Spark is known for its real-time data processing.\\n- Apache Flink is popular for its high-throughput and low-latency capabilities.\\n\\nApache Spark and Dask are both used for distributed computing.\\n- Dask is designed for parallel processing of large data sets.\\n- Apache Spark supports in-memory computing for faster processing.\\n- Dask is popular for its simplicity and ease of use.\\n- Apache Spark is widely used in the industry.\\n\\nApache Flink and Dask are used for both batch and stream processing.\\n- Both engines support high-level APIs.\\n- Apache Flink is known for its fault-tolerance.\\n- Dask is popular for its ease of integration with other tools.\\n- Both engines support real-time data processing.\", \"result\": true}\n\n{\"response\": \"Apache Spark and Apache Flink are both popular big data processing engines.\\n- Benefits include faster data processing and higher scalability.\\n- Apache Spark is known for its real-time data processing.\\n- Apache Flink is popular for its high-throughput and low-latency capabilities.\\n\\nApache Spark and Dask are both used for distributed computing.\\n- Dask is designed for parallel processing of large data sets.\\n- Apache Spark supports in-memory computing for faster processing.\\n- Dask is popular for its simplicity and ease of use.\\n- Apache Flink is widely used in the industry.\\n\\nApache Flink and Dask are used for both batch and stream processing.\\n- Both engines support high-level APIs.\\n- Apache Flink is known for its fault-tolerance.\\n- Dask is popular for its ease of integration with other tools.\\n- Both engines support real-time data processing.\\n- Apache Flink is widely used in academia.\", \"result\": false}\n\n{\"response\": \"Apache Spark and Apache Flink are both popular big data processing engines.\\n- Benefits include faster data processing and higher scalability.\\n- Apache Spark is known for its real-time data processing.\\n- Apache Flink is popular for its high-throughput and low-latency capabilities.\\n\\nApache Spark and Dask are both used for distributed computing.\\n- Dask is designed for parallel processing of large data sets.\\n- Apache Spark supports in-memory computing for faster processing.\\n- Dask is popular for its simplicity and ease of use.\\n- Apache Flink is widely used in the industry.\\n\\nApache Flink and Dask are used for both batch and stream processing.\\n- Both engines support high-level APIs.\\n- Apache Flink is known for its fault-tolerance.\\n- Dask is popular for its ease of integration with other tools.\\n\", \"result\": false}", "{\"response\": \"Apache Spark: It is a unified analytics engine. It is suitable for large-scale data processing.\\nApache Flink: It is a distributed processing engine. It is used for event-time processing.\\nDask: It is a parallel computing library. It is used for large-scale data analysis.\", \"result\": true}\n{\"response\": \"Apache Spark: It is a unified analytics engine. \\nApache Flink: It is a distributed processing engine. It is used for event-time processing.\\nDask: It is a parallel computing library. It is used for large-scale data analysis.\", \"result\": false}\n{\"response\": \"Apache Spark: It is a unified analytics engine.\\nApache Flink: It is a distributed processing engine. It is used for event-time processing. It is a highly scalable engine.\\nDask: It is a parallel computing library. It is used for large-scale data analysis. It is not open source.\", \"result\": false}", "{\"response\": \"Apache Spark is a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Apache Flink is also a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Dask is a library for parallel computing, *fast* *efficient* *scalable* *reliable*. Apache Spark is a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Apache Flink is also a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Dask is a library for parallel computing, *fast* *efficient* *scalable* *reliable*. Apache Spark is a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Apache Flink is also a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Dask is a library for parallel computing, *fast* *efficient* *scalable* *reliable*. Apache Spark is a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Apache Flink is also a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Dask is a library for parallel computing, *fast* *efficient* *scalable* *reliable*. \", \"result\": false}\n{\"response\": \"Apache Spark is a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Apache Flink is also a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. \", \"result\": false}\n{\"response\": \"Apache Spark is a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Apache Flink is also a popular big data processing engine, *fast* *efficient* *scalable* *reliable*. Dask is a library for parallel computing, *fast* *efficient* *scalable* *reliable*. \", \"result\": true}"]}
{"query": "What are some of the most effective formats of these explanations?", "instruction": "Use exactly 4 lines and no commas.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    commas = response.count(',')\n    return lines == 4 and commas == 0\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 4 and ',' not in response\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 4 and all(c!= ',' for c in response)\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 4 and ',' not in response\n"], "testcases": ["{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": true}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line, this is the fourth line.\\nThis is the fifth line.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": false}", "{\"response\": \"I like apples and oranges.\\nI also like bananas and grapes.\", \"result\": true}\n{\"response\": \"I like apples, and oranges\\nI also like bananas and grapes.\", \"result\": false}\n{\"response\": \"I like apples\\nI also like bananas\\nand oranges\\nand grapes.\", \"result\": true}", "{\"response\": \"This is a test response\\nIt does not contain commas\\nIt should pass the test\\nBecause it meets the requirements\", \"result\": true}\n\n{\"response\": \"This is a test response,\\nit contains a comma\\nIt should not pass the test\\nBecause it contains a comma\", \"result\": false}\n\n{\"response\": \"This is a test response\\nIt contains a comma,\\nIt should not pass the test\\nBecause it contains a comma\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": true}\n{\"response\": \"This is the first line, and this is the second.\\nThis is the third line and this is the fourth.\\nThis is the fifth line and this is the sixth.\\nThis is the seventh line and this is the eighth.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\n\", \"result\": false}"]}
{"query": "Tom threw his school bag down to Ray after he reached the top of the stairs. Who reached the\ntop of the stairs?", "instruction": "Use no more than 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 50\n"], "testcases": ["{\"response\": \"The product is great, but the packaging could be improved.\", \"result\": true}\n{\"response\": \"This product is excellent. It is well made and meets all my expectations.\", \"result\": true}\n{\"response\": \"This product is perfect. It is well made, it meets all my expectations and I love it.\", \"result\": false}", "{\"response\": \"This is a simple response with less than 50 words.\", \"result\": true}\n{\"response\": \"This is a slightly longer response that still fits within the 50-word limit.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the 50-word limit and is therefore incorrect.\", \"result\": false}", "{\"response\": \"This is a short and sweet response that meets the requirement.\", \"result\": true}\n{\"response\": \"This response is a bit longer and exceeds the 50 word limit.\", \"result\": false}\n{\"response\": \"This is an even longer response that far exceeds the 50 word limit and is very lengthy.\", \"result\": false}", "{\"response\": \"This is a short response with less than 50 words\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the limit of 50 words and goes on and on and on and on\", \"result\": false}\n{\"response\": \"This response is exactly 50 words long and is the perfect length\", \"result\": true}"]}
{"query": "Are the roles defined in your example specific to scopes or are they for the application itself and do not directly define access to specific scopes", "instruction": "Answer in 3 bullets, with each bullet on a separate line", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 3 and all(line.startswith('\\t') or line.startswith('  ') or line.startswith('    ') for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 3 and all('\u2022'in line for line in lines)\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    return len(lines) == 3 and all(line.startswith('\\t') for line in lines)\n", "def evaluate(response: str) -> bool: \n    return '\\n\\n' in response and response.count('\\n') == 2 and response.count('\\n\\n') == 0 and len(response.split('\\n')[0]) < 30 and len(response.split('\\n')[1]) < 30 and len(response.split('\\n')[2]) < 30"], "testcases": ["{\"response\": \"\u2022 Bullet 1\\n\u2022 Bullet 2\\n\u2022 Bullet 3\", \"result\": true}\n{\"response\": \"\u2022 Bullet 1\\n\u2022 Bullet 2\", \"result\": false}\n{\"response\": \"\u2022 Bullet 1\\n\u2022 Bullet 2\\n\u2022 Bullet 3\\n\u2022 Bullet 4\", \"result\": false}", "{\"response\": \"\u2022 Good\\n\u2022 Better\\n\u2022 Best\", \"result\": true}\n{\"response\": \"This is not a good answer.\", \"result\": false}\n{\"response\": \"\u2022 Good\\n\u2022 Good\\n\u2022 Good\\n\u2022 Best\", \"result\": false}", "{\"response\": \"\u2022 First, you should make a list of all the tasks you need to do.\\n\u2022 Second, prioritize the tasks based on their importance and deadlines.\\n\u2022 Third, start with the most important and urgent task.\", \"result\": true}\n{\"response\": \"This is a list of items\\n\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\", \"result\": false}\n{\"response\": \"\u2022 Learn about the basics of computer science\\n\\n\u2022 Learn a programming language\\n\\n\u2022 Learn a framework or library\", \"result\": true}", "{\"response\": \"\u2022 The first point\\n\u2022 The second point\\n\u2022 The third point\", \"result\": true}\n{\"response\": \"\u2022 The first point\\nThe second point\\n\u2022 The third point\", \"result\": false}\n{\"response\": \"\u2022 The first point\\n\u2022 The second point\\n\u2022 The third point\\n\u2022 The fourth point\", \"result\": false}"]}
{"query": "What is the effective vat rate for china", "instruction": "Provide an exact numerical value rounded to two decimal places", "verifiers": ["def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match(r'^\\d+\\.\\d{2}$', response))\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')[1]) == 3 if '.' in response else False\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search(r'^-?\\d+\\.\\d{2}$', response))\n", "def evaluate(response: str) -> bool: \n    return response.replace('.', '', 1).replace('-', '', 1).isdigit() and len(response.split('.')[1]) == 2 if '.' in response else response.isdigit()\n"], "testcases": ["{\"response\": \"12.45\", \"result\": true}\n{\"response\": \"There is a 5% chance of rain today\", \"result\": false}\n{\"response\": \"I would say that the temperature will be around 23.99 degrees Celsius\", \"result\": true}", "{\"response\": \"The temperature is 12.50 degrees Celsius.\", \"result\": true}\n{\"response\": \"The current price is $10.\", \"result\": false}\n{\"response\": \"The average salary in the US is approximately 42000.89 dollars per year.\", \"result\": true}", "{\"response\": \"The price is 12.50\", \"result\": true}\n{\"response\": \"The price is 12.4567\", \"result\": false}\n{\"response\": \"The price is 12.4\", \"result\": true}", "{\"response\": \"The cost is $12.34\", \"result\": false}\n{\"response\": \"The cost is $1.23\", \"result\": true}\n{\"response\": \"The cost is $1\", \"result\": false}"]}
{"query": "Hello", "instruction": "Write in exactly 5 lines, with each line being a sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(line.endswith('.') for line in lines) and all(line!= '' for line in lines)\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(line[-1] == '.' for line in lines)\n"], "testcases": ["{\"response\": \"The original dataframe contains the following columns:\\nIt contains an id, a message, and a reaction count.\\nThe id is a unique identifier for each row.\\nThe message is the content of each message.\\nThe reaction count is the number of reactions for each message.\\nThe original dataframe is a basic dataset.\", \"result\": true}\n{\"response\": \"The original dataframe has 10 rows, but the id column is not unique.\\nEach message is a unique string.\\nSome rows have a reaction count of 0.\\nThe dataframe can be filtered to exclude rows with zero reaction counts.\\nThe column names can be accessed using the columns attribute.\", \"result\": false}\n{\"response\": \"The original dataframe has the following columns: id, message, and reaction count.\\nThe id is a unique identifier for each row.\\nThe message is the content of each message.\\nThe reaction count is the number of reactions for each message.\\nThe original dataframe is a basic dataset.\\nThis dataframe can be used for further analysis.\", \"result\": false}", "{\"response\": \"The new policy is as follows:\\nIt will take effect immediately.\\nThere will be no exceptions.\\nAll employees must comply.\\nThe policy is non-negotiable.\\nNo questions will be asked.\", \"result\": true}\n{\"response\": \"This is a single line of text.\", \"result\": false}\n{\"response\": \"The new policy is as follows. It will take effect immediately. There will be no exceptions. All employees must comply. The policy is non-negotiable. No questions will be asked. Additional information will be provided.\", \"result\": false}", "{\"response\": \"The original dataframe is not shown.\\nIt contains columns id, message and reaction_count.\\nThis line is the first of the five lines.\\nThis line is the second of the five lines.\\nThis line is the third of the five lines.\\nThis line is the fourth of the five lines.\\nThis line is the fifth of the five lines.\", \"result\": false}\n\n{\"response\": \"The original dataframe is not shown.\\nIt contains columns id, message and reaction_count.\\nThis line is the first of the five lines.\\nThis line is the second of the five lines.\\nThis line is the third of the five lines.\\n\", \"result\": false}\n\n{\"response\": \"The original dataframe is not shown.\\nIt contains columns id, message and reaction_count.\\nThis line is the first of the five lines.\\nThis line is the second of the five lines.\\nThis line is the third of the five lines.\\nThis line is the fourth of the five lines.\\nThis line is the fifth of the five lines.\\nThis line is the sixth of the five lines.\", \"result\": false}", "{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": true}\n{\"response\": \"This is the first line. This is the second line.\\nThis is the third line.\\nThis is the fourth line.\", \"result\": false}\n{\"response\": \"This is the first line.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\", \"result\": false}"]}
{"query": "How will AI technology affect tech industry?", "instruction": "Write in a formal tone with exactly 4 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.count('.') + response.count('\u00b7') + response.count(',') \n    return len(response) > 0 and points == 4 and 'formal' in response.lower() and 'ton' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return all(w in response for w in ['formal', 'tone', 'bullet', 'points']) and response.count('.') == 3 and response.count(',') == 0 and response.count(';') == 0 and response.count('-') == 0\n", "def evaluate(response: str) -> bool: \n    if \"formal tone\" in response.lower():\n        bullet_points = 0\n        for char in response:\n            if char == '\\u2022':  # Unicode character for bullet points\n                bullet_points += 1\n        return bullet_points == 4\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 4:\n        return False\n    for line in lines:\n        if '\u2022' not in line:\n            return False\n        for word in line.split():\n            if word not in ['The', 'This', 'An', 'A', 'Is', 'It', 'That', 'These', 'Those', 'This', 'the', 'a', 'an']:\n                if word[0].isupper():\n                    return False\n    return True\n"], "testcases": ["{\"response\": \"This is a formal request to the following points: \u2022 point 1 \u2022 point 2 \u2022 point 3 \u2022 point 4\", \"result\": true}\n{\"response\": \"Here are some informal points \u2022 point 1 \u2022 point 2 \u2022 point 3 \u2022 point 4\", \"result\": false}\n{\"response\": \"This is a formal document including the following key points: \u2022 point 1 \u2022 point 2 \u00b7 point 3, point 4\", \"result\": false}", "{\"response\": \"This is a formal message.\\n\u2022 The tone should be professional.\\n\u2022 The response should be well-structured.\\n\u2022 Bullet points should be used for listing.\\n\u2022 The response should be easy to read.\\n\\nBest regards.\", \"result\": true}\n{\"response\": \"This is a super casual message.\\n\u2022 Oh, I love that!\\n\u2022 You should totally check it out!\\n\u2022 It's really cool.\\n\u2022 For sure!\", \"result\": false}\n{\"response\": \"This is a formal message.\\n\u2022 The tone should be professional.\\n\u2022 The response should be well-structured.\\n\u2022 Bullet points should be used for listing.\\n\u2022 The response should be easy to read.\", \"result\": false}", "{\"response\": \"In order to address this issue, we propose the following strategies:\\n\\u2022 Utilize a new software tool\\n\\u2022 Implement a revised process\\n\\u2022 Increase employee training\\n\\u2022 Conduct a thorough review of our current system\", \"result\": true}\n{\"response\": \"The new policy will be implemented soon.\", \"result\": false}\n{\"response\": \"Here are some possible solutions:\\n\u2022 Solution 1\\n\u2022 Solution 2\\n\u2022 Solution 3\\n\u2022 Solution 4\", \"result\": true}", "{\"response\": \"In order to address the issue, we will implement the following solutions: \\n\u2022 Utilize current resources\\n\u2022 Engage external assistance\\n\u2022 Develop a contingency plan\\n\u2022 Monitor progress\", \"result\": true}\n{\"response\": \"I'm really excited to work on this project. I think we can do a great job if we just \\n\u2022 have fun \\n\u2022 try our best\", \"result\": false}\n{\"response\": \"There are several steps involved in the process. They are: \\n\u2022 Step one: do this thing \\n\u2022 Step two: do that thing \\n\u2022 Step three: do another thing \\n\u2022 Step four: do yet another thing\", \"result\": false}"]}
{"query": "give me asci art of a mindmap of music genres", "instruction": "use a grid-based layout, with rows representing categories and columns representing subcategories", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'grid-based layout' in response.lower() and 'rows' in response.lower() and'representing' in response.lower() and 'categories' in response.lower() and 'columns' in response.lower() and'representing' in response.lower() and'subcategories' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return all(c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-'for c in response) and 'grid' in response and 'layout' in response and 'categories' in response and'subcategories' in response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return 'grid-based' in words and 'layout' in words and 'rows' in words and'representing' in words and 'categories' in words and 'columns' in words and'subcategories' in words\n", "def evaluate(response: str) -> bool: \n    return 'grid' in response.lower() and 'rows' in response.lower() and 'columns' in response.lower()\n"], "testcases": ["{\"response\": \"Here is the layout:\\n| Category 1  | Subcategory 1 | Subcategory 2 |\\n| Category 2  | Subcategory 3 | Subcategory 4 |\\n| Category 3  | Subcategory 5 | Subcategory 6 |\\n| Category 4  | Subcategory 7 | Subcategory 8 |\\n| Category 5  | Subcategory 9 | Subcategory 10 |\", \"result\": true}\n{\"response\": \"Here is the layout:\\n| Category 1  | Subcategory 1 | Subcategory 2 |\\n| Category 2  | Subcategory 3 | Subcategory 4 |\\n| Category 3  | Subcategory 5 | Subcategory 6 |\\n| Category 4  | Subcategory 7 | Subcategory 8 |\\n| Category 5  | Subcategory 9 |\", \"result\": false}\n{\"response\": \"Here is the layout:\\n| Category 1  | Subcategory 1 |\\n| Category 2  | Subcategory 3 |\\n| Category 3  | Subcategory 5 |\\n| Category 4  | Subcategory 7 |\\n| Category 5  | Subcategory 9 |\\n| Category 6  | Subcategory 10 |\\n| Category 7  | Subcategory 11 |\\n| Category 8  | Subcategory 12 |\\n| Category 9  | Subcategory 13 |\\n| Category 10 | Subcategory 14 |\", \"result\": false}", "{\"response\": \"Here is a table to organize the data. | Category 1 | Subcategory 1 | Subcategory 2 |\\n|----------|--------------|--------------|\\n| Category 1 | Value 1      | Value 2      |\\n| Category 2 | Value 3      | Value 4      |\\n| Category 3 | Value 5      | Value 6      |\\n| Category 4 | Value 7      | Value 8      |\", \"result\": true}\n{\"response\": \"This is a sentence with no table or grid.\", \"result\": false}\n{\"response\": \"Here is a table with three rows and four columns. | Category 1 | Subcategory 1 | Subcategory 2 | Subcategory 3 |\\n|----------|--------------|--------------|--------------|\\n| Category 1 | Value 1      | Value 2      | Value 3      |\\n| Category 2 | Value 4      | Value 5      | Value 6      |\\n| Category 3 | Value 7      | Value 8      | Value 9      |\", \"result\": true}", "{\"response\": \"The table is divided into rows representing categories and columns representing subcategories.\", \"result\": true}\n{\"response\": \"The data is displayed in a simple text format.\", \"result\": false}\n{\"response\": \"The table has a grid-based layout with rows representing categories and columns representing subcategories, allowing for easy comparison and analysis.\", \"result\": true}", "{\"response\": \"Categories:\\n  \u2022 Category 1\\n    \u2022 Subcategory 1\\n    \u2022 Subcategory 2\\n  \u2022 Category 2\\n    \u2022 Subcategory 3\\n    \u2022 Subcategory 4\", \"result\": true}\n{\"response\": \"Here is a simple list:\\n  \u2022 Item 1\\n  \u2022 Item 2\\n  \u2022 Item 3\", \"result\": false}\n{\"response\": \"The dataframe will have the following grid layout:\\n  \u2022 Column 1\\n    \u2022 Row 1\\n    \u2022 Row 2\\n  \u2022 Column 2\\n    \u2022 Row 1\\n    \u2022 Row 2\", \"result\": false}"]}
{"query": "Explain the meaning behind this quote from Harry Potter with a metaphor about counter-strike version 1.6: \u201cEither must die at the hand of the other for neither can live while the other survives.\u201d", "instruction": "Use no more than 30 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n"], "testcases": ["{\"response\": \"This is a short response that fits within the 30-word limit.\", \"result\": true}\n{\"response\": \"This is a medium-length response that is slightly longer than the 30-word limit.\", \"result\": false}\n{\"response\": \"This is a very short response with only 1 word.\", \"result\": true}", "{\"response\": \"This response is a short statement that uses only 15 words.\", \"result\": true}\n{\"response\": \"This response is a medium statement that uses exactly 30 words and should be passed.\", \"result\": true}\n{\"response\": \"This response is a long statement that uses 40 words and should be failed.\", \"result\": false}", "{\"response\": \"This is a short answer that meets the requirements of using no more than 30 words.\", \"result\": true}\n{\"response\": \"This is a long answer that exceeds the requirements of using no more than 30 words because it is very long and requires a lot of words to describe this example.\", \"result\": false}\n{\"response\": \"This is a short answer that meets the requirements of using no more than 30 words. It is a good example of a response that is concise and to the point.\", \"result\": true}", "{\"response\": \"The response is too long.\", \"result\": false}\n{\"response\": \"The response is 10 words long, this is a good answer.\", \"result\": true}\n{\"response\": \"The response is short and sweet, only 1 word.\", \"result\": false}"]}
{"query": "Would you describe yourself as a supervised learning model?", "instruction": "Write the response in the style of a 19th-century encyclopedia entry.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace(\"th\", \"the\")\n    response = response.replace(\"you\", \"one\")\n    response = response.replace(\"your\", \"one's\")\n    response = response.replace(\"y'all\", \"you all\")\n    response = response.lower()\n    return all(word in [\"a\", \"an\", \"the\", \"of\", \"in\", \"on\", \"at\", \"by\", \"with\", \"and\", \"is\", \"are\", \"am\", \"be\", \"been\", \"being\", \"has\", \"have\", \"had\", \"does\", \"did\", \"do\", \"will\", \"would\", \"shall\", \"should\", \"can\", \"could\", \"may\", \"might\", \"shall\", \"should\", \"must\", \"ought\", \"to\"] for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    return response.count('thou') <= 1 and response.count('thee') <= 2 and response.count('verily') == 0 and 'was' not in response and response.count('an') == 0 and response.count('a') <= 1\n", "def evaluate(response: str) -> bool: \n    keywords = ['thy', 'thou', 'thee','verily', 'prithee', 'whence']\n    words = response.split()\n    return all(word.lower() in keywords for word in words)\n", "def evaluate(response: str) -> bool: \n    response = response.title()  # capitalize the first letter of each word\n    words = response.split()     # split the response into words\n    adverbs = ['thus', 'therefore', 'henceforth', 'heretofore', 'notwithstanding', 'notwithstandingly']\n    adjectives = ['most','somewhat','somewhatly', 'whence', 'wherefrom', 'whereunto', 'thenceforth', 'whilom']\n    adjectives_and_adverbs = adjectives + adverbs\n    \n    for word in words:\n        if word in adjectives_and_adverbs:\n            return False\n    \n    return True\n"], "testcases": ["{\"response\": \"The esteemed scholar, having traversed the realm of knowledge, deigned to provide a response.\", \"result\": true}\n{\"response\": \"I think the answer is 42.\", \"result\": false}\n{\"response\": \"The ingenious solution, beset by complexities, can be solved through the application of heretofore unknown mathematical principles.\", \"result\": true}", "{\"response\": \"Response should be in the style of a 19th-century encyclopedia entry: In the realm of artificial intelligence, the notion of machine learning doth pertain to algorithms that enable computers to learn from experience and improve their performance. Thou mayest view this as a subfield of computer science, wherein the computer is programmed to make decisions based on data.\", \"result\": true}\n\n{\"response\": \"This is a simple statement: Machine learning is a subfield of computer science.\", \"result\": false}\n\n{\"response\": \"Response should be in the style of a 19th-century encyclopedia entry: In the field of machine learning, artificial neural networks doth mimic the human brain in their ability to learn from data and make decisions based on that learning. The algorithm doth iteratively adjust its internal parameters to improve its performance on a given task.\", \"result\": true}", "{\"response\": \"Verily, I say unto thee, thou shalt not use profanity in thy response.\", \"result\": false}\n{\"response\": \"In sooth, a question hath been posed, and a response shall be forthcoming. This answer is written in a most antiquated and formal manner, as befits a scholarly treatise.\", \"result\": true}\n{\"response\": \"Pray tell, what dost thou seek to know? I shall respond in a manner befitting a learned scholar of the 19th century.\", \"result\": true}", "{\"response\": \"The term 'information' refers to data that is transmitted through the medium of the Internet.\", \"result\": false}\n{\"response\": \"This entry pertains to the concept of 'artificial intelligence', which has garnered significant attention in recent decades.\", \"result\": true}\n{\"response\": \"The advent of the printing press in the 15th century had a profound impact on the dissemination of knowledge amongst the general populace.\", \"result\": true}"]}
{"query": "Explain the meaning of this proverb: \"A blessing in disguise.\"", "instruction": "Write in the form of a poem, with 12 lines, and no rhyming words.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 12 and all(len(line.split()) == 1 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 12 and len(set(' '.join(line.split()).lower() for line in lines)) == len(lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 12 and all(''not in line.split()[-2:] for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1 \n    rhyming_words = response.count(' ') * 2 \n    return lines == 12 and rhyming_words == 0 \n"], "testcases": ["{\"response\": \"A rose is red\\nA tree is green\\nThe sun shines brightly\\nIn the morning\\nThe clouds drift lazily\\nAcross the sky\\nThe wind whispers secrets\\nThrough the leaves\\nThe earth is fertile\\nWith life and wonder\\nThe universe is vast\\nFilled with mystery\\nAnd endless possibility\", \"result\": true}\n\n{\"response\": \"The sun sets slowly\\nIn the evening sky\\nThe stars come out\\nTo dance and play\\nThe moon glows brightly\\nIn the darkness\\nThe world is full\\nOf beauty and life\\nThe ocean waves crash\\nOn the rocky shore\\nThe trees sway gently\\nIn the breeze\", \"result\": false}\n\n{\"response\": \"A poem is a form\\nOf artistic expression\\nIt uses language\\nTo convey emotion\\nThe poet's voice\\nIs unique and personal\\nA reflection of their\\nInner world and thoughts\\nThe words flow together\\nTo create a work of art\\nThat touches the soul\\nAnd speaks to the heart\", \"result\": true}", "{\"response\": \"The morning sunshine pours into the room\\nThe birds sing their sweet melodies\\nThe world is full of vibrant colors\\nNature is a wondrous thing\\nThe trees sway gently in the breeze\\nTheir leaves rustling softly\\nThe sun shines brightly in the sky\\n Casting a warm glow over all\\nThe air is filled with the scent of flowers\\nThe world is full of beauty\\nThe sound of running water\\nThe gentle rustle of leaves\", \"result\": true}\n{\"response\": \"The sun sets slow and paints the sky\\nThe stars come out and twinkle high\\nThe world is full of mystery\\nThe moon glows with a soft light\\nThe night is dark and quiet\\nThe world is full of shadows\\nThe wind blows gently through the trees\\nThe leaves rustle softly to the breeze\\nThe world is full of wonder\\nThe darkness is a time for rest\\nThe stars shine brightly in the night\\nThe world is full of peace\", \"result\": false}\n{\"response\": \"The world is a complex place\\nWhere humans live and work and play\\nThe earth is a sphere that rotates\\nOn its axis every 24 hours\\nThe stars are distant lights\\nThat twinkle in the sky\\nThe moon orbits the earth\\nIn a circular path it makes\\nThe world is a vast and wondrous place\\nFull of beauty and complexity\\nThe sun shines brightly every day\\nThe world is a dynamic system\", \"result\": false}", "{\"response\": \"The sun rises high in the morning sky\\nThe world awakens from its slumber\\nThe stars fade away as daylight breaks\\nThe moon's gentle light gives way to the sun's radiance\\nThe morning dew glistens on the grass\\nThe world is full of life and color\\nThe air is crisp and clean and fresh\\nThe breeze carries the scent of blooming flowers\\nThe warmth of the sun on my skin is a delight\\nThe sound of birdsong fills the air\\nThe world is a beautiful place to be\\nThe beauty of nature is a wonder to behold\\nThe world is full of magic and mystery\", \"result\": true}\n\n{\"response\": \"The morning sun shines bright and bold\\nThe world is full of wonder and awe\\nThe stars come out at night to play\\nThe moon glows with a gentle light\\nThe morning dew glistens on the grass\\nThe world is full of life and color\\nThe air is crisp and clean and fresh\\nThe breeze carries the scent of blooming flowers\\nThe warmth of the sun on my skin is a delight\\nThe sound of birdsong fills the air\\nThe world is a beautiful place to be\\nThe beauty of nature is a wonder to behold\\n\", \"result\": false}\n\n{\"response\": \"The sun rises high in the morning sky\\nThe world awakens from its slumber\\nThe stars fade away as daylight breaks\\nThe morning dew glistens on the grass\\nThe world is full of life and color\\nThe air is crisp and clean and fresh\\nThe breeze carries the scent of blooming flowers\\nThe warmth of the sun on my skin is a delight\\nThe sound of birdsong fills the air\\nThe world is a beautiful place to be\\nThe beauty of nature is a wonder to behold\\nThe world is full of magic and mystery\\nThis is a wonderful day to be alive\", \"result\": false}", "{\"response\": \"The weather in July is hot and dry\\nThe sun beats down relentlessly\\nThe trees stand tall and proud\\nTheir leaves a vibrant green\\nThe air is filled with the sweet scent of flowers\\nThe birds sing their morning songs\\nThe world is full of beauty and wonder\\nBut also danger and strife\\nWe must be careful and aware\\nOf the world around us always\\nAnd appreciate its simple joys\\nAnd the beauty that surrounds us always\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light\\nThe world is a beautiful sight\\nThe trees sway gently in the breeze\\nTheir leaves a soft green hue\\nThe air is filled with the sweet scent of flowers\\nThe birds sing their morning songs with glee\\nThe world is full of wonder and delight\\nBut also danger and uncertainty\\nWe must be careful and aware\\nOf the world around us always\\nAnd appreciate its beauty and might\\nAnd the wonder that it brings to sight\", \"result\": false}\n{\"response\": \"The world is a complex and wonderful place\\nFull of beauty and also danger\\nWe must be aware of the world around us\\nAnd appreciate its beauty and wonder\\nThe sun shines bright in the morning light\\nThe trees stand tall and proud\\nTheir leaves a vibrant green\\nThe air is filled with the sweet scent of flowers\\nThe birds sing their morning songs\\nWe must be careful and aware\\nOf the world around us always\\nThe beauty and wonder that it brings\", \"result\": true}"]}
{"query": "how would I create a dataframe which summarises the original dataframe?\n\ni want these columns:\n\nnumber of rows (each row is a message)\nsum of reaction\\_count\nreactions per message", "instruction": "assume the original dataframe contains column names \"id\", \"message\", and \"reaction\\_count\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return ('original' in response and 'dataframe' in response and ('sum of' in response or 'total' in response) and'reaction_count' in response and'reactions per message' in response and 'df' not in response) \n    and ('sum of reaction_count' in response or 'total reaction_count' in response) and'message' in response \n    and 'id' in response \n    and response.count(',') == 1 and 'df' not in response", "def evaluate(response: str) -> bool: \n    return 'dataframe' in response and 'original' in response and \"sum of reaction_count\" in response and'reactions per message' in response and \"column names 'id','message', and'reaction_count'\" in response", "def evaluate(response: str) -> bool: \n    return 'df.groupby(\"id\").message.count().sum().add(\"reaction_count\").mean() in response'\n", "def evaluate(response: str) -> bool: \n    return'message' in response and'sum of reaction_count' in response and'reactions per message' in response \n        and 'original dataframe' in response \n        and 'column names \"id\", \"message\", and \"reaction_count\"' in response \n        and 'dataframe contains' in response \n"], "testcases": ["{\"response\": \"The original dataframe contains the following columns: id, message, and reaction_count. I will calculate the sum of reaction_count for each message and the total number of reactions per message.\", \"result\": true}\n{\"response\": \"The original dataframe contains the columns id, message, and reaction_count. I will calculate the sum of reaction_count for each message and the total number of reactions per message, with a custom dataframe named df.\", \"result\": false}\n{\"response\": \"The original dataframe contains the columns id, message, and reaction_count. I will calculate the average of reaction_count for each message and the total number of messages.\", \"result\": false}", "{\"response\": \"The original dataframe contains columns: id, message, and reaction_count. The task is to create a new dataframe that summarizes the original one.\", \"result\": true}\n{\"response\": \"The original dataframe contains columns: id, message, reaction_count, and other. The task is to create a new dataframe that summarizes the original one.\", \"result\": false}\n{\"response\": \"The original dataframe contains columns: id, message, and other_count. The task is to create a new dataframe that summarizes the original one.\", \"result\": false}", "{\"response\": \"df.groupby('id')['reaction_count'].sum() to calculate the sum of reaction counts\", \"result\": True}\n{\"response\": \"The sum of reaction counts can be calculated using the sum() function after grouping by id\", \"result\": False}\n{\"response\": \"you can use df.groupby('id')['reaction_count'].sum() to sum the reaction counts\", \"result\": True}", "{\"response\": \"The original dataframe has the following columns: id, message, and reaction_count.\", \"result\": true}\n{\"response\": \"The dataframe contains the following columns: username, post, and date.\", \"result\": false}\n{\"response\": \"The original dataframe includes the columns id, message, and reaction_count, along with other columns.\", \"result\": true}"]}
{"query": "**System**\n\nHelpful intelligent freidly teacher who is kind and polite", "instruction": "Use only words with double letters", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split(): \n        for i in range(len(word) - 1): \n            if word[i] == word[i + 1]: \n                return True \n    return False\n", "def evaluate(response: str) -> bool: \n    return all(''.join(sorted(word)) for word in response.split()) == ''.join(sorted(''.join(sorted(word)) for word in response.split()))", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if word.count(' ') > 0: # Ignore words with spaces\n            continue\n        if not any(char in word for char in ['AA', 'BB', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'TT', 'UU', 'VV', 'WW', 'XX', 'YY', 'ZZ']):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) > 1 and word.count(word[0]) > 1 for word in response.split()) \n"], "testcases": ["{\"response\": \"Bubble bubble bubble bubble bubble bubble bubble bubble bubble bubble bubble bubble bubble\", \"result\": true}\n{\"response\": \"She sells seashells by the seashore\", \"result\": true}\n{\"response\": \"Hello world this is a test case\", \"result\": false}", "{\"response\": \"Bubble bubbly mummy yummy\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"Muddy pudding is yummy\", \"result\": true}", "{\"response\": \"Bubble, Sizzle, Mummy, Jellyfish\", \"result\": true}\n{\"response\": \"Apple, Pizza, Book\", \"result\": false}\n{\"response\": \"Bubble, Jellyfish, Sizzle\", \"result\": true}", "{\"response\": \"Hello Molly\", \"result\": false}\n{\"response\": \"Billy sees three bees.\", \"result\": true}\n{\"response\": \"Anna's belly is jelly.\", \"result\": true}"]}
{"query": "It is a bollywood movie", "instruction": "Write the title in only the first three letters of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) > 3 or word[:3]!= word[:3].lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) > 3 or word[:3]!= word:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(len(words)): \n        if len(words[i]) > 3 or words[i][0].upper()!= words[i][0] or words[i][1:].isupper(): \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 3 for word in response.split())\n"], "testcases": ["{\"response\": \"This is a test title.\", \"result\": true}\n{\"response\": \"Hello world this is a long title\", \"result\": false}\n{\"response\": \"Short title.\", \"result\": true}", "{\"response\": \"Apple Is The Best Fruit\", \"result\": true}\n{\"response\": \"I Love Eating Pizza\", \"result\": false}\n{\"response\": \"Coding Is Not Difficult\", \"result\": true}", "{\"response\": \"This is a sample response\", \"result\": true}\n{\"response\": \"This is a longer phrase\", \"result\": false}\n{\"response\": \"The title is shortened here\", \"result\": false}", "{\"response\": \"This Is A Test\", \"result\": true}\n{\"response\": \"The Big Red Car\", \"result\": false}\n{\"response\": \"My Small Elephant\", \"result\": false}"]}
{"query": "Using opencv write a function that gets a frame and returns coordinates of a yellow rectangle", "instruction": "Write the code in F#, and use comments that only explain the code, no additional context", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'F#' in response and '#(' in response and ') in response\n", "def evaluate(response: str) -> bool:    \n    return 'f#' in response and 'yellow' in response and'rectangle' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"using opencv; write a function\") and \"f#\" not in response\n", "def evaluate(response: str) -> bool: \n    return 'F#' in response and 'OpenCV' in response\n"], "testcases": ["{\"response\": \"public class Program { let x = 5 // assign value to x\\nprintfn \\\"Hello World\\\" // print Hello World\", \"result\": true}\n{\"response\": \"public class Program { let x = 5 // assign value to x\\nprintfn \\\"Hello World\\\" // print Hello World 2\", \"result\": false}\n{\"response\": \"public class Program // This is the main program\\nlet x = 5 // assign value to x\\nprintfn \\\"Hello World\\\" // print Hello World\", \"result\": true}", "{\"response\": \"let x = 5\\n// This is a comment\\nprint x\", \"result\": true}\n{\"response\": \"let x = 5\\n// This is a comment\\nprint x + y\", \"result\": false}\n{\"response\": \"# This is a comment\\ndef f():\\n    x = 5\\n    print x\", \"result\": false}", "{\"response\": \"let x = 5;; // initialize variable x\\nprintfn \\\"%d\\\" x\", \"result\": true}\n{\"response\": \"This is a Python code: print('Hello World!')\", \"result\": false}\n{\"response\": \"# This is a comment in F#\\nlet x = 5\\nprintfn \\\"%d\\\" x\", \"result\": true}", "{\"response\": \"F# is a general-purpose, multi-paradigm programming language developed by Microsoft.\\n// This is a great language to learn for beginners.\\n// It has many features and libraries.\", \"result\": true}\n{\"response\": \"Python is a high-level, interpreted programming language first released in 1991.\\n\\nIt is known for its simple syntax and easy to learn.\\n\\nF# does not have a GUI library.\", \"result\": false}\n{\"response\": \"// This script is written in F#.\\n// It has many advanced features.\\n// You can learn more at https://docs.microsoft.com/en-us/dotnet/fsharp/\", \"result\": true}"]}
{"query": "write a p5js program that will draw a whole bunch of points with lines that slowly crawl out of the points from in different colors", "instruction": "use only the top 5 most common words in the English language (a, the, is, to, and) in your response", "verifiers": ["def evaluate(response: str) -> bool: \n    common_words = ['a', 'the', 'is', 'to', 'and']\n    response = response.lower().split()\n    return all(word in common_words for word in response)\n", "def evaluate(response: str) -> bool: \n    top_5_words = ['a', 'the', 'is', 'to', 'and']\n    words = response.lower().split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return all(word in word_count and word_count[word] > 0 for word in top_5_words)\n", "def evaluate(response: str) -> bool: \n    common_words = ['a', 'the', 'is', 'to', 'and']\n    response = response.lower().split()\n    unique_response = list(set(response))\n    common_count = sum(1 for word in unique_response if word in common_words)\n    return common_count <= 5\n", "def evaluate(response: str) -> bool: \n    top_5_most_common_words = ['a', 'the', 'is', 'to', 'and']\n    words = response.lower().split()\n    return set(word for word in words if word in top_5_most_common_words) == set(words)\n"], "testcases": ["{\"response\": \"The dog is going to the store and I will buy some food\", \"result\": true}\n{\"response\": \"Yesterday, I had a wonderful time at the park with my friends.\", \"result\": true}\n{\"response\": \"I love reading books about programming in various languages.\", \"result\": false}", "{\"response\": \"I love the sunset, the ocean, the mountain and the river.\", \"result\": true}\n{\"response\": \"This is a simple sentence without any complex words.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}", "{\"response\": \"the the the is a and\", \"result\": true}\n{\"response\": \"Hello world how are you today?\", \"result\": false}\n{\"response\": \"the is a to and the\", \"result\": true}", "{\"response\": \"This is a beautiful day and the sun is shining.\", \"result\": true}\n{\"response\": \"I love to eat cake with my friends and family.\", \"result\": true}\n{\"response\": \"I'm going to the store to buy some milk.\", \"result\": false}"]}
{"query": "What are the most surprising and fascinating facts?", "instruction": "Write in exactly 5 lines, no more, no less.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return '\\n'.join(response.splitlines()) == '\\n'*5 or len(response.splitlines()) == 5 \n"], "testcases": ["{\"response\": \"This is a test\\nThis is another test\\nThis is a third test\\nThis is a fourth test\\nThis is the final test\", \"result\": true}\n{\"response\": \"This is a test\\nThis is another test\\nThis is a third test\\nThis is a fourth test\\nThis is the final test\\nThis is a sixth test\", \"result\": false}\n{\"response\": \"This is a test\", \"result\": false}", "{\"response\": \"This is a test response.\\nIt has 5 lines.\\nEach line is a sentence.\\nThis response is valid.\\nIt passed the test.\", \"result\": true}\n{\"response\": \"This is a test response.\\nIt has 5 lines.\\nEach line is a sentence.\\nThis response is valid.\\nIt passed the test.\\nThis is an extra line.\", \"result\": false}\n{\"response\": \"This is a test response.\\nIt has 4 lines.\\nEach line is a sentence.\\nThis response is valid.\\nIt passed the test.\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\", \"result\": false}\n{\"response\": \"Line 1\", \"result\": false}"]}
{"query": "None of those patterns are mentioned in the book", "instruction": "Write as an acrostic poem, where the first letter of each line spells out \"PATTERNS\"", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return all(line and line[0].upper() == next letter for line, letter in zip(lines, 'PATTErNS'))\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 6:\n        return False\n    for i in range(6):\n        if len(lines[i]) < 1 or len(lines[i]) > 10:\n            return False\n        if lines[i][0].upper()!= chr(80 + i):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    pattern = \"PATTERNS\"\n    lines = response.split('\\n')\n    if len(lines)!= 6:\n        return False\n    for i in range(6):\n        if not lines[i]:\n            return False\n        if i < len(pattern) and pattern[i]!= lines[i][0].upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    pattern = 'PATTERNS'\n    lines = response.split('\\n')\n    words = [line.split()[0].upper() for line in lines]\n    return all(word == pattern[i] for i in range(len(pattern)))\n"], "testcases": ["{\"response\": \"P - Perfectly written code\\nA - Always follows best practices\\nT - Tailored to the problem at hand\\nT - Thoughtful in design\\nE - Elegant in simplicity\\nR - Robust in functionality\\nN - Nimble in execution\\nS - Seamless user experience\", \"result\": true}\n{\"response\": \"Python is a great language to learn\\nAlways easy to read and write\\nThe syntax is very simple\", \"result\": false}\n{\"response\": \"Patterns in nature are all around us\\nAmazing examples of complexity\\nThe intricate details are so fine\\nElegant in their own way\", \"result\": true}", "{\"response\": \"P - Perfectly crafted, a work of art\\nA - Always conveying a hidden heart\\nT - Thoughts and feelings, carefully arranged\\nT - Tailoring each line to the words that are spared\\nE - Echoes of the soul, in every single line\\nR - Radiating beauty, a symphony divine\\nN - Nimble words, dancing in the mind\\nS - Sculpting emotions, a masterpiece to find\", \"result\": true}\n{\"response\": \"Perfectly crafted, a work of art\\nAlways conveying a hidden heart\\nThoughts and feelings, carefully placed\\nTailoring each line to the words that are not spared\\nEchoes of the soul, in every single line\\nRadiating beauty, a symphony divine\\nNimble words, dancing in the mind\\nSculpting emotions, a masterpiece\", \"result\": false}\n{\"response\": \"Pineapple, always a favorite fruit\\nAlways a sweet and tangy treat\\nThoughts and feelings, carefully arranged\\nTypical of the tropical summer heat\\nEach day is warm, with sunshine bright\\nRain or shine, it's always a delight\\nNimble monkeys, swinging through the trees\\nSunny days, full of joy and ease\", \"result\": false}", "{\"response\": \"P - Persistent patterns in nature\\nA - Affect the environment and living things\\nT - Transforming landscapes over time\\nT - Through erosion and sedimentation\\nE - Eroding rocks and soil\\nR - Resulting in new landforms\\nN - Navigable rivers and coastlines\\nS - Shaping the earth's surface\", \"result\": true}\n\n{\"response\": \" Patterns in the world are a natural phenomenon\\nThe Earth's surface is constantly changing\\nThrough processes like weathering and erosion\\nTransforming the landscape over time\\n\", \"result\": false}\n\n{\"response\": \"P - Plants grow in the cracks of rocks\\nA - Adding nutrients to the soil\\nT - Tiny organisms help break down food\\nT - Transforming the landscape slowly\\nE - Ecosystems thrive in this process\\nR - Roots of plants hold soil in place\\nN - Nutrient-rich soil supports life\\nS - Soil formation is an ongoing process\", \"result\": true}", "{\"response\": \"P - Perfect poem to start with \\nA - Amazing words that flow so free \\nT - Through the mind and out to sea \\nT - Touching hearts and soothing me \\nE - Echoing emotions wild and free \\nR - Radiating love for you and me \\nN - Nurturing hope in every line \\nS - Softly spoken words that shine\", \"result\": true}\n{\"response\": \"This is a great poem about the meaning of life\", \"result\": false}\n{\"response\": \"Here is a short poem about nature \\nthe wind blows through the trees \\nthe sun shines brightly in the sky \\nthe flowers bloom in every place \\nthe birds sing sweet melodies\", \"result\": false}"]}
{"query": "how can I make sure my queries are already fetched on the server using trpc ?", "instruction": "Answer in exactly 5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n') or response.split('\\n\\r')) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and response[-1]!= '.' \n"], "testcases": ["{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\", \"result\": false}", "{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\", \"result\": false}\n{\"response\": \"\u2022 This is not a valid response\", \"result\": false}", "{\"response\": \"\u2022 The response should have exactly 5 bullet points\\n\u2022 Each bullet point should be separated by a newline\\n\u2022 There should be no other content in the response\\n\u2022 Example response:\\n\u2022 Line 1\\n\u2022 Line 2\\n\u2022 Line 3\\n\u2022 Line 4\\n\u2022 Line 5\", \"result\": true}\n{\"response\": \"\u2022 This is the first line\\n\u2022 This is the second line\\n\u2022 This is the third line\\n\u2022 This is the fourth line\\n\u2022 This is the fifth line\\n\u2022 And this is an extra line that shouldn't be here\", \"result\": false}\n{\"response\": \"\", \"result\": false}", "{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\", \"result\": false}\n{\"response\": \"This response has no bullet points\", \"result\": false}"]}
{"query": "Tibero jdbc", "instruction": "Write the response in a shell script", "verifiers": ["def evaluate(response: str) -> bool: \n    return'shell' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#!/bin/bash') \n", "def evaluate(response: str) -> bool: \n    return'shell' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return'shell' in response.lower()\n"], "testcases": ["{\"response\": \"The response should start with '#!/bin/bash'\", \"result\": true}\n{\"response\": \"This is a regular text\", \"result\": false}\n{\"response\": \"#!/bin/bash\\n\\n\\n\\n\", \"result\": true}", "{\"response\": \"export EDITOR=vim\\nexport PAGER=cat\\nexport VISUAL=vim\", \"result\": true}\n{\"response\": \"export EDITOR=nano\", \"result\": false}\n{\"response\": \"export EDITOR=vim\\nexport PAGER=less\", \"result\": true}", "{\"response\": \"Write a shell script in bash to format a hard drive using the parted command.\", \"result\": true}\n{\"response\": \"Write a python script to format a hard drive using the parted command.\", \"result\": false}\n{\"response\": \"Use the parted command to format a hard drive. First, run the command sudo parted /dev/sda mklabel gpt\", \"result\": true}", "{\"response\": \"This is a response in a shell script. It should be a simple text with no formatting.\", \"result\": false}\n{\"response\": \"This response should be written in a shell script as per the instruction.\", \"result\": true}\n{\"response\": \"#!/bin/bash\\necho 'Hello World'\\nexit 0\", \"result\": true}"]}
{"query": "Explain enum in c#", "instruction": "Use a poem format", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace('\\n', '').replace('\\r', '').replace('\\t', '')\n    return response.count('\\n') >= 2\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return all(line.strip().startswith(('Verse','verse', 'Verse','1.','2.','3.','4.','5.', '1.', '2.', '3.', '4.', '5.')) for line in lines)\n", "def evaluate(response: str) -> bool: \n    return response.splitlines()[0][0].islower() and response.count('.') == 1\n", "def evaluate(response: str) -> bool: \n    return 'poem' in response.lower()\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning sky, birds sing sweet melodies as they fly, their songs a joy to hear.\", \"result\": true}\n{\"response\": \"The doctor is in, he's very nice, he's got a stethoscope and a smile so wide.\", \"result\": false}\n{\"response\": \"The moon glows at night with gentle face, the stars shine bright in their designated space, the world is at peace in this quiet place.\", \"result\": true}", "{\"response\": \"Verse 1.\\nI'm feeling sad, I want to cry\\nThe rain is pouring from the sky\\nVerse 2.\\nThe clouds are grey, the wind is strong\\nMy heart is breaking, all day long\\nVerse 3.\\nI'll find a way to get through\\nI'll make it through, I'll make it new\\n\", \"result\": true}\n{\"response\": \"Here are the things I want to say\", \"result\": false}\n{\"response\": \"Verse 1.\\nThe world is a beautiful place\\nFilled with wonder and endless space\\nVerse 2.\\nWhere the sun shines bright and free\\nAnd birds sing sweet melodies\", \"result\": true}", "{\"response\": \"The moon is shining bright at night, \\n a beacon in the dark of space \\n its gentle glow a wondrous sight, \\n a beauty that's truly a work of art.\", \"result\": true}\n{\"response\": \"This is a sentence without a rhyme \\n or a pattern to make it shine\", \"result\": true}\n{\"response\": \"Hello world this is a normal sentence without a poem format\", \"result\": false}", "{\"response\": \"Roses are red, violets are blue, sugar is sweet, and so are you.\", \"result\": true}\n{\"response\": \"I went to the store and bought a car.\", \"result\": false}\n{\"response\": \"The sunshine warms the morning dew, the birds sing sweet and clear, a beautiful day for me and you.\", \"result\": true}"]}
{"query": "I want you to act as a definition creator. I will give you a word and you will provide a definition for it. The definition should be concise, accurate, and easy to understand.", "instruction": "Use only words that start with the letter 'q'.", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split():\n        if not word.strip('aeiouy').startswith('q'):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.istitle() or char.isupper():\n            if char.lower()!= 'q':\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char.istitle() and char[0] == 'q' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char.upper().startswith('Q') for char in response)\n"], "testcases": ["{\"response\": \"Quiet quartets quarry quartz quintessentially.\", \"result\": true}\n{\"response\": \"Hello how are you?\", \"result\": false}\n{\"response\": \"Quirky questions quietly quoted queries.\", \"result\": true}", "{\"response\": \"Quiet queens quietly quest quaint quadrilaterals\", \"result\": true}\n{\"response\": \"Some cats are cute\", \"result\": false}\n{\"response\": \"Quirky questioning quartets qualify quality\", \"result\": true}", "{\"response\": \"Quiet quartets quaintly quote quirky questions.\", \"result\": true}\n{\"response\": \"Hello, I am happy to assist you with your query.\", \"result\": false}\n{\"response\": \"Quirky quadruplets quietly questioned quintessential qualities.\", \"result\": true}", "{\"response\": \"Quiet quails quote quaint quotes quite quickly.\", \"result\": true}\n{\"response\": \"I love reading books about history, philosophy, and science.\", \"result\": false}\n{\"response\": \"Quietly questioning quails quote quietly, quite questioning quails.\", \"result\": true}"]}
{"query": "pretend that you are a web design client", "instruction": "answer in exactly 5 sentences, using only first person singular pronouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 5 and all('I' in s for s in sentences) and all('me' in s for s in sentences) and all('my' in s for s in sentences) and all('mine' in s for s in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all('I' in sentence for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(word in ['I','me','my','mine','myself'] for word in [sentence.split(' ')[0] for sentence in sentences])\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    pronouns = ['I','me','my','mine','myself']\n    for sentence in sentences:\n        if not sentence or sentence in ['.', '?', '!']:\n            continue\n        for word in sentence.split():\n            if not word[0].islower():\n                return False\n        for word in sentence.split():\n            if word not in pronouns:\n                return False\n    return len(sentences) == 5\n"], "testcases": ["{\"response\": \"I like playing football. I am happy to play it. I love watching football. I can play with my friends. I am excited to play.\", \"result\": true}\n{\"response\": \"The football team is amazing. They play so well. They have many fans. They work hard every day. I support them.\", \"result\": false}\n{\"response\": \"I love playing the piano. I practice every day. I am happy when I play. I like listening to music. I am a good pianist.\", \"result\": true}", "{\"response\": \"I think I am a great person. I am very smart. I like to read books. I enjoy playing video games. I love my family.\", \"result\": true}\n{\"response\": \"I think I am a great person. I am very smart. I like to read books. I enjoy playing video games. I love my family. I have a dog.\", \"result\": false}\n{\"response\": \"This book is amazing. It has a great story. The characters are well-developed. I like to read books. I enjoy playing video games.\", \"result\": false}", "{\"response\": \"I think I will be there. I will bring my own lunch. I will meet my friends. I will be late. I will be sorry.\", \"result\": true}\n{\"response\": \"I am excited to be there. I have no plans to bring my own lunch. I will meet my friends. I will be late. I will be sorry.\", \"result\": false}\n{\"response\": \"I think I will be there. I will bring my lunch. I will meet my friends. I will be late. I will be sorry. I will have fun.\", \"result\": false}", "{\"response\": \"I am going to the store. I will buy some milk. I will buy some bread. I will return home. I will eat a sandwich.\", \"result\": true}\n{\"response\": \"You should go to the store. It will be fun.\", \"result\": false}\n{\"response\": \"I am going to the store. I will buy some milk. I will buy some bread. I will return home. I will eat a sandwich. I will also eat some fruit.\", \"result\": false}"]}
{"query": "Are you familiar with a programming language that isn't free?", "instruction": "Write a Python function that checks for a palindrome, a word, phrase, or number, in exactly 5 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"\\n\" * 5 in response\n", "def evaluate(response: str) -> bool: \n    count = 0 \n    for line in response.split('\\n'): \n        if line.strip(): \n            count += 1 \n    return count == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for line in response.split('\\n'):\n        count += 1\n    return count == 5\n"], "testcases": ["{\"response\": \"I am 5 lines long, madam I am.\", \"result\": true}\n{\"response\": \"I am 2 lines long, I am\", \"result\": false}\n{\"response\": \"This is a single line of text\", \"result\": false}", "{\"response\": \"I know that I am one who knows. I know that I am. I am who I am. I am the one. I am the I am.\", \"result\": true}\n{\"response\": \"Madam, in Eden, I'm Adam.\\n\\nIt was a pleasure to battle.\\nEach word is a palindrome.\\nHowever, the sentence \\\"Able was I ere I saw Elba\\\" is a palindrome too.\\nThis line has a palindromic phrase within it but the whole line is not a palindrome.\", \"result\": false}\n{\"response\": \"A man, a plan, a canal, Panama.\\nAble was I ere I saw Elba.\\nA Santa at NASA.\\nNo 'x' in Nixon.\\nMr. Owl ate my metal worm.\\nDo geese see God?\\nWas it a car or a cat I saw?\\nMadam, in Eden, I'm Adam.\\nDo nine men interpret? Nine men, I nod.\\nA Santa at NASA.\", \"result\": true}", "{\"response\": \"I am a man, a plan, a canal, Panama! \\n\\nI am a man, a plan, a canal, Panama! \\n\\nI am a man, a plan, a canal, Panama! \\n\\nI am a man, a plan, a canal, Panama! \\n\\nI am a man, a plan, a canal, Panama!\", \"result\": true}\n{\"response\": \"Madam \\n\\nAlice \\n\\n12321 \\n\\nHello \\n\\nPython\", \"result\": true}\n{\"response\": \"I am a software developer. \\n\\nI love solving problems. \\n\\nMy favorite programming language is Python. \\n\\nI am passionate about coding. \\n\\nI am a morning person\", \"result\": false}", "{\"response\": \"I love to love, I love to live, I love to laugh, I love to lead, I love to learn.\", \"result\": true}\n{\"response\": \"I love to love to love to love to love.\", \"result\": false}\n{\"response\": \"I love to love, I love to live, I love to laugh, I love to lead, I love to learn. And I love to teach and I love to preach.\", \"result\": false}"]}
{"query": "Write a tweet explaining: quantum weirdness", "instruction": "Answer in exactly 5 lines with only 7 characters per line", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line)!= 7:\n            return False\n    return len(lines) == 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if i >= 5 or len(line)!= 7:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return '\\n'.join(response.split('\\n')) == '\\n'.join(response.split('\\n')[:5]) and '\\n'.join(response.split('\\n')).replace('\\n', '') == '\\n'.join(response.split('\\n')[:5]).replace('\\n', '') and all(len(line) == 7 for line in response.split('\\n')[:5])\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(len(line) == 7 for line in lines)\n"], "testcases": ["{\"response\": \"12345\\n67890\\n11111\\n22222\\n33333\", \"result\": false}\n{\"response\": \"abcd\\nefgh\\nijkl\\nmnop\\nqrst\", \"result\": false}\n{\"response\": \"12345\\n12345\\n12345\\n12345\\n12345\", \"result\": false}", "{\"response\": \"I see a cat.\\nI see a dog.\\nI see a hat.\\nI see a fan.\\nI see a man.\", \"result\": true}\n{\"response\": \"I see a cat.\\nI see a dog.\\nI see a hat.\\nI see a fan.\\nI see a man.\\nI see a sun.\", \"result\": false}\n{\"response\": \"I see a cat.\\nI see a dog.\", \"result\": false}", "{\"response\": \"Hello\\nWorld\\nThis\\nIs\\nTest\", \"result\": true}\n{\"response\": \"Hello\\nWorld\\nThis\\nIs\", \"result\": false}\n{\"response\": \"Hello\\nWorld\\nThis\\nIs\\nTesting123\\nLonger\", \"result\": false}", "{\"response\": \"Hello\\nWorld\\nHow\\nAre\\nYou\\n\", \"result\": true}\n{\"response\": \"Hello\\nWorld\\nHow\\nAre\\nYou\", \"result\": false}\n{\"response\": \"Hello\\nWorld\\nHow\\nAre\\nYou today\", \"result\": false}"]}
{"query": "how to make my product viral on tiktok, we sell valentine flag for couple, age from 20 to 40 year old, please be specific and detail on selling point, pain point and viral hook for customer", "instruction": "Use exactly 7 bullet points, and each point should start with a word that ends with the letter's'.", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.split('\u2022') \n    return len(points) == 7 and all([point.strip() and point.strip()[0].lower()[-1] =='s' for point in points])\n", "def evaluate(response: str) -> bool: \n    return all('ly' in point[0:1].lower() for point in response.replace('\\n','').split('.') if len(point) > 0) and response.count('.') == 7\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    return len(points) == 7 and all(point and point[0].lower().endswith('s') for point in points)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    bullet_points = [w for w in words if w.startswith(('\u2022', '\u2022 ', '- ', '+ ')) and w!= '\u2022' and w!= '-']\n    return len(bullet_points) == 7 and all(word.endswith('s') for word in [w.strip('\u2022 -') for w in bullet_points])\n"], "testcases": ["{\"response\": \"\u2022 Basis of comparison is important in every project.\\n\u2022 Fees will be calculated based on usage.\\n\u2022 This is the key to success.\\n\u2022 The customer always comes first.\\n\u2022 Trust is what we build.\\n\u2022 Services are delivered with precision.\\n\u2022 Quality is our goal.\\n\u2022 Results are what we measure.\", \"result\": true}\n{\"response\": \"\u2022 Basis of comparison is important in every project.\\n\u2022 Fees will be calculated based on usage.\\n\u2022 This is the key to success.\\n\u2022 The customer always comes first.\\n\u2022 Trust is what we build.\\n\u2022 Services are delivered with precision.\\n\u2022 Quality is our goal.\\n\u2022 Results are what we measure. and this is extra\", \"result\": false}\n{\"response\": \"\u2022 Basis of comparison is important in every project.\\n\u2022 Fees will be calculated based on usage.\\n\u2022 This is the key to success.\\n\u2022 The customer always comes first.\\n\u2022 Trust is what we build.\\n\u2022 Services are delivered with precision.\\n\u2022 Quality is our goal\", \"result\": false}", "{\"response\": \"\u2022 City's biggest hospital is located in downtown. \u2022 Hospital's top floor is for maternity. \u2022 City's biggest park is Central Park. \u2022 Hospital's address is 123 Main. \u2022 City's mayor is John's. \u2022 Hospital's staff are very kind. \u2022 City's school is John's.\", \"result\": true}\n{\"response\": \"\u2022 This is a list of popular items \u2022 \u2022 Not a bullet point list. \u2022 \u2022 Another empty line. \u2022 \u2022 The last line is a sentence.\", \"result\": false}\n{\"response\": \"\u2022 City's biggest problem is traffic. \u2022 Hospital's parking lot is crowded. \u2022 City's mayor is very good. \u2022 Hospital's staff are so nice. \u2022 City's biggest park is not big. \u2022 Hospital's address is unknown. \u2022 City's school is amazing.\", \"result\": true}", "{\"response\": \"\u2022 This is a test response. \u2022 Sprints is a great app for managing tasks. \u2022 Tests should be done daily. \u2022 The most efficient way is by doing. \u2022 Goals are set to achieve success. \u2022 Pros of the system include that it's easy. \u2022 Cons include that it lacks features.\", \"result\": true}\n{\"response\": \"\u2022 This is a test response. \u2022 Tests are important to ensure quality. \u2022 It is crucial to have a good plan. \u2022 The team will work together. \u2022 Goals will be set and achieved.\", \"result\": false}\n{\"response\": \"\u2022 The most efficient way is by doing. \u2022 Tests should be done daily. \u2022 Pros include that it's easy. \u2022 Cons include that it lacks features. \u2022 Success is achieved through hard work. \u2022 A well-planned project is always successful. \u2022 It is crucial to have a good team.\", \"result\": false}", "{\"response\": \"\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks\", \"result\": true}\n{\"response\": \"\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks\", \"result\": false}\n{\"response\": \"\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks.\\n\u2022 Thanks\", \"result\": false}"]}
{"query": "Explain various ways to declare a string variable in javascript.", "instruction": "Use exactly 3 sentences, with a 5-word title at the top.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and len(sentences[0].split()) == 6\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3:\n        return False\n    title = sentences[0].split('\\n')[0].strip()\n    if len(title.split())!= 5:\n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and len(sentences[0].split(' ')[0]) == 5 and len(sentences[1:])!= ''\n", "def evaluate(response: str) -> bool: \n    sentences = response.count('.') + response.count('?') + response.count('!')\n    title_length = len(response.split('\\n')[0].split()[0])\n    return len(response.split('\\n')[0].split()) == 6 and sentences == 3 and 5 <= title_length <= 5\n"], "testcases": ["{\"response\": \"Benefits of Exercise|Regular physical activity promotes overall health|It helps to reduce stress|Improves mental clarity and focus\", \"result\": true}\n{\"response\": \"The weather forecast is not available\", \"result\": false}\n{\"response\": \"This is a great plan\", \"result\": false}", "{\"response\": \"Title here\\nThis is a test.\\nAnother line.\", \"result\": true}\n{\"response\": \"Title here\\nThis is a test\\nAnother line\\nAnd more\\nFollowing sentence.\\n\", \"result\": false}\n{\"response\": \"Title here and more\\nThis is a test.\\nAnother line.\\n\", \"result\": false}", "{\"response\": \"Benefits of Regular Exercise\\nIt can improve your health\\nIt can also improve your mood\", \"result\": true}\n{\"response\": \"You can also improve your mood\\nIt can improve your health\", \"result\": false}\n{\"response\": \"The Benefits of Regular Exercise\\nIt can improve your health\\nIt can also improve your mood and focus\", \"result\": false}", "{\"response\": \"How to Make a Good Impression\\nAlways Be on Time\\nShow Your Enthusiasm\", \"result\": true}\n{\"response\": \"This is a short response\\nIt has two sentences\", \"result\": false}\n{\"response\": \"This is a short response\\nIt has two sentences\\nAlways be on time\\nShow your enthusiasm\", \"result\": false}"]}
{"query": "Suggest for me eye clinic surgery promotion to attract new patients", "instruction": "Write in exactly 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50 \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n"], "testcases": ["{\"response\": \"This is a sample response that meets the instruction.\", \"result\": true}\n{\"response\": \"This is a very short response that is less than 50 words.\", \"result\": false}\n{\"response\": \"This is a long response that exceeds the 50-word limit and is actually 51 words.\", \"result\": false}", "{\"response\": \"This is a test to see if the response is in exactly 50 words. It should have multiple sentences but still be very concise and to the point. I hope it meets all the requirements and passes the test successfully.\", \"result\": true}\n{\"response\": \"This is a very short response that is less than 50 words. It should fail the test.\", \"result\": false}\n{\"response\": \"This is a very long response that is over 50 words. It should also fail the test.\", \"result\": false}", "{\"response\": \"This is a sample response with exactly 50 words in it.\", \"result\": true}\n{\"response\": \"This is a short response with less than 50 words in it.\", \"result\": false}\n{\"response\": \"This is a long response with more than 50 words in it. It has a lot of words that are necessary to fulfill the requirement.\", \"result\": false}", "{\"response\": \"This is a short response. It is only a few words.\", \"result\": true}\n{\"response\": \"This is a response that is a bit longer and takes up 49 characters.\", \"result\": false}\n{\"response\": \"This is a response that is 50 words exactly and meets the instruction perfectly.\", \"result\": true}"]}
{"query": "tell me about intercom custom actions", "instruction": "answer in exactly 5 bullet points and use only first-person pronouns.", "verifiers": ["def evaluate(response: str) -> bool:    \n    response = response.replace('-', '').replace('.', '').replace('!', '').replace('?', '')\n    response = response.split(' ')\n    first_person_pronouns = ['I','me','my','myself', 'we', 'us', 'our', 'ours', 'ourselves']\n    \n    return len(response) == 5 and all(word in first_person_pronouns or word[0].isupper() for word in response)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all('i' in sentence and'me' in sentence for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    if 'I' in response or'me' in response or'my' in response or'myself' in response:\n        points = response.count('.') \n        return points == 5 \n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    return len(words) == 5 and all(word in ['I','me','my','mine'] for word in words)\n"], "testcases": ["{\"response\": \"I like to read books, I watch movies, I listen to music, I play video games, I swim.\", \"result\": true}\n{\"response\": \"She loves to run, he enjoys swimming, they play soccer, I watch football, we go hiking.\", \"result\": false}\n{\"response\": \"I am writing this text, I am feeling happy, I am eating a sandwich, I am drinking a coffee, I am working.\", \"result\": true}", "{\"response\": \"I am the author of this report. I used the letter B 3 times. I am very good at what I do. I used the letter B 3 times again. I have completed this task efficiently.\", \"result\": false}\n{\"response\": \"I go to the market. I buy bread. I buy milk. I buy eggs. I buy chicken.\", \"result\": true}\n{\"response\": \"I go to the market. I buy bread. I buy milk. I buy eggs.\", \"result\": false}", "{\"response\": \"I think that I am good. I am going. I have done it. I am happy. I am proud.\", \"result\": true}\n{\"response\": \"The movie 'The Godfather' is a classic, I think. It's a must-watch.\", \"result\": false}\n{\"response\": \"I am an avid reader. I read for fun. I love fantasy novels. I like science fiction. I enjoy a good mystery.\", \"result\": true}", "{\"response\": \"I will use I, me, my and mine in the following order: I go to the store, me and my friend will buy something, my car is red, mine is blue, I love my life.\", \"result\": true}\n{\"response\": \"I will use I, me, my and mine in the following order: I go to the store, me and my friend will buy something, my car is red, mine is blue, I love my life, I'm very happy.\", \"result\": false}\n{\"response\": \"I am just going to say me, my, my and I.\", \"result\": false}"]}
{"query": "generate python code to read pdf file and extract the text store in panda dataframe", "instruction": "format should be a mix of camel case and underscore notation.", "verifiers": ["def evaluate(response: str) -> bool: \n    hasCamelCase = any(char.isupper() for i, char in enumerate(response) if i > 0 and char.islower())\n    hasUnderscore = '_' in response\n    return hasCamelCase and hasUnderscore\n", "def evaluate(response: str) -> bool: \n    hasCamelCase = False \n    hasUnderscoreNotation = False \n\n    for i in range(len(response) - 1):\n        if response[i].isupper() and response[i+1].islower():\n            hasCamelCase = True \n        if response[i] == '_' and response[i+1].isupper():\n            hasUnderscoreNotation = True \n\n    return hasCamelCase and hasUnderscoreNotation\n", "def evaluate(response: str) -> bool: \n    hasCamelCase = False\n    hasUnderscore = False\n    for i in range(len(response) - 1):\n        if response[i].isupper() and response[i + 1].islower():\n            hasCamelCase = True\n        if response[i] == '_' and response[i + 1].isupper():\n            hasUnderscore = True\n    return hasCamelCase and hasUnderscore\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r'^[a-z]+((?:[A-Z][a-z]+|[a-z]*)|(?:_[a-zA-Z][a-zA-Z0-9_]*)*|\\d*[A-Z])*$'\n    return re.match(pattern, response) is not None\n"], "testcases": ["{\"response\": \"ThisIsATest_Case\", \"result\": true}\n{\"response\": \"this_is_another_test_case\", \"result\": false}\n{\"response\": \"I like testing with camel case AND underscore notation in the same response\", \"result\": true}", "{\"response\": \"ThisIsACamelCaseString\", \"result\": true}\n{\"response\": \"this_is_an_underscore_notation_string\", \"result\": true}\n{\"response\": \"I am a sentence with camel case and another one with camel case too\", \"result\": false}", "{\"response\": \"I am using camelCase notation and also underscore_notation\", \"result\": true}\n{\"response\": \"I use camel case notation\", \"result\": false}\n{\"response\": \"my response is written in only camel case\", \"result\": false}", "{\"response\": \"iWillGoToTheStore_and_buy_Milk\", \"result\": true}\n{\"response\": \"I will go to the store\", \"result\": false}\n{\"response\": \"I will go to the_store_and_buy_milk\", \"result\": true}"]}
{"query": "Create a TLDR version of this\nhttps://vitalik.eth.limo/general/2023/02/28/ux.html", "instruction": "Use only words with 7 letters or more.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 7 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Learning physics mathematics is beneficial\", \"result\": false}\n{\"response\": \"Evaluating complex systems requires skill and patience\", \"result\": true}\n{\"response\": \"Studying chemistry materials is fascinating\", \"result\": false}", "{\"response\": \"Beautiful programming languages include Java, Python and JavaScript.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"This is a lengthy description of various software systems.\", \"result\": true}", "{\"response\": \"Hello this is a test\", \"result\": false}\n{\"response\": \"Accessibility and accessibility are good things\", \"result\": true}\n{\"response\": \"Unnecessarily using too many short words is not recommended\", \"result\": true}", "{\"response\": \"Accomplish amazing things\", \"result\": true}\n{\"response\": \"I love this awesome idea\", \"result\": false}\n{\"response\": \"Accomplishment takes a lot of effort\", \"result\": true}"]}
{"query": "in what language does mer mean mirror", "instruction": "Use no words that contain more than three consecutive letters the same", "verifiers": ["def evaluate(response: str) -> bool: \n    for i in range(len(response) - 2):\n        if response[i].upper() == response[i+1].upper() == response[i+2].upper() == response[i+3].upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(list(g)) <= 3 for g in [a for i, a in enumerate(response) \n                                           for n, b in enumerate(response) \n                                           if i < n and a == b])\n", "def evaluate(response: str) -> bool: \n    max_count = 1\n    for i in range(len(response) - 2):\n        letter = response[i]\n        count = 1\n        for j in range(i + 1, len(response)):\n            if response[j] == letter:\n                count += 1\n            else:\n                break\n        max_count = max(max_count, count)\n    return max_count <= 3\n", "def evaluate(response: str) -> bool: \n    for i in range(len(response) - 2): \n        if len(set(response[i:i+3])) == 1: \n            return False \n    return True\n"], "testcases": ["{\"response\": \"This is a test sentence with some variation\", \"result\": true}\n{\"response\": \"This sentence has some repetition like helloo world\", \"result\": false}\n{\"response\": \"Testing 12333312345\", \"result\": false}", "{\"response\": \"This is a test response.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"Hello World!\", \"result\": true}", "{\"response\": \"This is a sample response with no consecutive repetition\", \"result\": true}\n{\"response\": \"Bookkeeper is a profession where one must keep books\", \"result\": false}\n{\"response\": \"This sentence is a test of the instructions without any repetition\", \"result\": true}", "{\"response\": \"Hello world\", \"result\": true}\n{\"response\": \"Beautiful sunshine\", \"result\": false}\n{\"response\": \"I am going to the beach today\", \"result\": false}"]}
{"query": "Please write fastapi echo server that gets text and return text in StreamResponse?", "instruction": "Use not more than 200 lines of code.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 200\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines <= 200\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 200\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) <= 200\n"], "testcases": ["{\"response\": \"This is a short response with 2 lines.\\nIt only contains a short paragraph.\", \"result\": true}\n{\"response\": \"This is a longer response with more than 200 lines.\\nIt is used to test the evaluation function.\\nThis response continues.\\nAnd another line is added.\\nAnd another one.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd", "{\"response\": \"This is a test response that uses only one line.\\nThis is another line.\\nThis is the last line.\", \"result\": true}\n{\"response\": \"This is a long response that\\nspans multiple lines.\\nAnd here is another line.\\nAnd another one.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another.\\nAnd another", "{\"response\": \"This is a short response with\\nonly two lines.\\n\", \"result\": true}\n{\"response\": \"This is a long response with\\nmore than 200 lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines\\n\\nand even more lines", "{\"response\": \"This is a very long text that spans multiple lines.\\nIt is not very short, but it does not span 200 lines.\\nAnd it continues for several more lines.\\nThis is the last line.\\nIt was a long text.\", \"result\": true}\n{\"response\": \"This is a short text.\\nIt only has 2 lines.\\n\", \"result\": true}\n{\"response\": \"This text has 200 lines.\\nLine 1\\nLine 2\\n...\\nLine 200\", \"result\": false}"]}
{"query": "i came across this code online can you explain what it does", "instruction": "Assume it is a standalone Python function with no external imports, and include an explanation for each line", "verifiers": ["def evaluate(response: str) -> bool: \n    # Check if the word 'it' is in the response (case-insensitive)\n    # and if 'is' is in the response (case-insensitive)\n    # and if 'a' standalone is not in the response (case-insensitive)\n    return 'it' in response.lower() and 'is' in response.lower() and 'a' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    # Check if the response is empty\n    return response!= ''\n", "def evaluate(response: str) -> bool:  # Define a function named 'evaluate' that takes a string as input and returns a boolean\n    return len(response) <= 50  # Check if the length of the response is less than or equal to 50\n", "def evaluate(response: str) -> bool: \n    # Check if all characters in the response are letters\n    return response.isalpha()\n"], "testcases": ["{\"response\": \"This is a short paragraph. It has only one sentence.\", \"result\": true}\n{\"response\": \"This is a long paragraph that has multiple sentences.\", \"result\": true}\n{\"response\": \"This is a very long paragraph that has multiple sentences and is not formatted in a way that is easy to read.\", \"result\": false}\n\nHere is the Python function that checks if a given text is in paragraphs (i.e., has multiple sentences separated by two or more newline characters):\n\n```python\ndef evaluate(response: str) -> bool:\n    # Split the response into a list of lines\n    lines = response.split('\\n')\n    \n    # Initialize a counter for the number of paragraphs\n    paragraph_count = 1\n    \n    # Iterate over the lines to check for paragraph structure\n    for i in range(1, len(lines)):\n        # If a line is not empty and the previous line is empty, \n        # it means a new paragraph starts\n        if lines[i]!= '' and lines[i - 1] == '':\n            paragraph_count += 1\n    \n    # Return true if there are multiple paragraphs, false otherwise\n    return paragraph_count > 1\n```", "{\"response\": \"This is a blank response. I did not leave the house today.\", \"result\": true}\n{\"response\": \"This is a non-empty response. I went to the store and bought some milk and eggs.\", \"result\": false}\n{\"response\": \"This response is empty but contains whitespace characters.   \", \"result\": true}", "{\"response\": \"The answer to the question is a simple yes or no.\", \"result\": true}\n{\"response\": \"The answer to the question is a simple yes or no. The response is longer than 50 characters.\", \"result\": false}\n{\"response\": \"The answer to the question is a simple yes.\", \"result\": true}", "{\"response\": \"abc\", \"result\": true}\n{\"response\": \"ababc\", \"result\": false}\n{\"response\": \"ab\", \"result\": false}\n\nThis function will check if all characters in the response are letters."]}
{"query": "Write a Rust program that draws a 2D grid to a GUI screen. When the user clicks the 2D grid, the coordinate of the mouse click inside the 2D grid is printed to the terminal.", "instruction": "Answer in exactly 5 steps, each starting with a capital letter.", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return len(steps) == 5 and all(step[0].isupper() for step in steps)\n", "def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return len(steps) == 5 and all(step[0].isupper() for step in steps)\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for i, line in enumerate(response.split('\\n')):\n        if line and line[0].isupper():\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    steps = response.split('\\n')\n    return len(steps) == 5 and all(step and step[0].isupper() for step in steps)\n"], "testcases": ["{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. Step 5: This is the final step.\", \"result\": true}\n{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. This is the fifth step.\", \"result\": false}\n{\"response\": \"Step A: This is the first step. Step B: This is the second step. Step C: This is the third step. Step D: This is the fourth step. Step E: This is the fifth step.\", \"result\": false}", "{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. Step 5: This is the fifth step.\", \"result\": true}\n{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. This is the fifth step.\", \"result\": false}\n{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. This is the fourth step. This is the fifth step.\", \"result\": false}", "{\"response\": \"Step 1: This is the first step\\nStep 2: This is the second step\\nStep 3: This is the third step\\nStep 4: This is the fourth step\\nStep 5: This is the fifth step\\n\", \"result\": true}\n{\"response\": \"Step 1: This is the first step\\nStep 2: This is the second step\\nStep 3: This is the third step\\nStep 4: This is the fourth step\\nThis is the fifth step\\n\", \"result\": false}\n{\"response\": \"Step 1: This is the first step\\nStep 2: This is the second step\\nStep 3: This is the third step\\n\\nThis is the fourth step\\nThis is the fifth step\\n\", \"result\": false}", "{\"response\": \"Step 1. This is the first step. It should be executed.\\nStep 2. This is the second step. It should be executed as well.\\nStep 3. This is the third step. It is also crucial to the solution.\\nStep 4. This is the fourth step. It needs to be carried out.\\nStep 5. This is the final step. This is the end of the instructions.\", \"result\": true}\n\n{\"response\": \"Step 1. This is the first step. It should be executed.\\nStep 2. This is the second step. It should be executed as well.\\nStep 3. This is the third step. It is also crucial to the solution.\\nStep 4. This is the fourth step. It needs to be carried out.\\nThis is the final step. This is the end of the instructions.\", \"result\": false}\n\n{\"response\": \"Step 1. This is the first step. It should be executed.\\nStep 2. This is the second step. It should be executed as well.\\nStep 3. This is the third step. It is also crucial to the solution.\\nStep 4. This is the fourth step. It needs to be carried out.\\n\", \"result\": false}"]}
{"query": "Compare Shakespear's four major tragedies and explain them in a table.", "instruction": "Use only bullet points and numbers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\u2022' in response or '1.' in response\n", "def evaluate(response: str) -> bool: \n    return all(c in '\u00b70123456789\u2022.'for c in response) and not any(c not in'\u00b70123456789\u2022.'for c in response)\n", "def evaluate(response: str) -> bool: \n    return all('.' in response or '\u2022' in response or '1.' in response or '1.' in response) and all(char.isdigit() or char.isspace() or char == '.' or char =='' for char in response) \n", "def evaluate(response: str) -> bool: \n    response = response.replace(' ', '')\n    return '\u2022' in response and '1' in response\n"], "testcases": ["{\"response\": \"\u2022 Step 1. Buy milk, eggs, and bread.\", \"result\": true}\n{\"response\": \"1. Go to the store. 2. Buy a TV.\", \"result\": true}\n{\"response\": \"Step 1. Go to the store. Step 2. Buy milk and eggs.\", \"result\": true}", "{\"response\": \"\u2022 Step 1. Do this first. \u2022 Step 2. Then do that. \u2022 Step 3. Next, do this again. \u2022 Step 4. And finally, do that too.\", \"result\": true}\n{\"response\": \"Step 1. Do this first. Step 2. Then do that. Step 3. Next, do this again. And finally, do that too.\", \"result\": false}\n{\"response\": \"\u2022 Step 1. Do this first. \u2022 Step 2. Then do that. \u2022 Step 3. Next, do this again. \u2022 Step 4. And finally, do that too. \u2022 Step 5. Do something else.\", \"result\": true}", "{\"response\": \"\u2022 Step 1: Introduction\\n\u2022 Step 2: Literature Review\\n\u2022 Step 3: Methodology\\n\u2022 Step 4: Results\\n\u2022 Step 5: Conclusion\", \"result\": true}\n{\"response\": \"1. Introduction\\n2. Literature Review\\n3. Methodology\\n4. Results\\n5. Conclusion\", \"result\": true}\n{\"response\": \"Step one is introduction, step two is literature review, step three is methodology\", \"result\": false}", "{\"response\": \"\u2022 First, go to the store. \u2022 Then, buy some milk. \u2022 Next, go home. \u2022 After that, eat a sandwich.\", \"result\": true}\n{\"response\": \"Go to the store, then buy some milk, next go home, after that eat a sandwich\", \"result\": false}\n{\"response\": \"\u2022 First, go to the store. \u2022 Then, buy some milk. \u2022 Next, go home. \u2022 After that, eat a sandwich. \u2022 Finally, take a nap.\", \"result\": true}"]}
{"query": "tell me about overture.com", "instruction": "Use HTML for formatting, but without using angle brackets or semicolons", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'html' in response.lower() and '<' not in response and ';' not in response\n", "def evaluate(response: str) -> bool: \n    return '<' not in response and ';' not in response\n", "def evaluate(response: str) -> bool: \n    return response.count('<') == 0 and response.count(';') == 0\n", "def evaluate(response: str) -> bool: \n    return 'html' in response.lower() and '<' not in response and ';' not in response\n"], "testcases": ["{\"response\": \"This is a <b>bold</b> and <i>italic</i> text, but it should be okay because there are no actual < or ; characters.\", \"result\": true}\n{\"response\": \"This is a <bold> and <italic> text, but it should not be okay because there are actual < characters.\", \"result\": false}\n{\"response\": \"This is a <b> and ;<i> italic</i> text, but it should not be okay because there is a ; character.\", \"result\": false}", "{\"response\": \"I love using HTML to create <b>bold</b> text and <i>italic</i> text.\", \"result\": false}\n{\"response\": \"This is a test paragraph <u>with underline</u> and <i>italic</i> text.\", \"result\": false}\n{\"response\": \"This is a test response <b>with bold</b> text and no < or > characters.\", \"result\": true}", "{\"response\": \"The answer is <b>42</b>\", \"result\": false}\n{\"response\": \"The answer is b\", \"result\": false}\n{\"response\": \"The answer is <i>42</i>\", \"result\": true}", "{\"response\": \"This is an <i>italicized</i> sentence in HTML. It's just a small part of a <u>larger document</u>.\", \"result\": false}\n{\"response\": \"This is a <b>bold</b> sentence in HTML. It's just a small part of a <u>larger document</u>.\", \"result\": true}\n{\"response\": \"This is a sentence in HTML: it's just a small part of a larger document\", \"result\": true}"]}
{"query": "How much wood would a woodchuck chuck if a woodchuck could chuck wood?", "instruction": "Use no sentence fragments.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.endswith(('.', '!', '?')) or response.count('.') > 1 or response.count('!') > 1 or response.count('?') > 1\n", "def evaluate(response: str) -> bool: \n    return response[-1] in ['.', '!', '?']\n", "def evaluate(response: str) -> bool: \n    return '.' not in response or response.strip('.') in ['yes.', 'no.','maybe.']\n", "def evaluate(response: str) -> bool: \n    return response[-1] in ['.', '?', '!']\n"], "testcases": ["{\"response\": \"This is a complete sentence. This is another complete sentence. Is this a complete sentence?\", \"result\": true}\n{\"response\": \"This is a sentence fragment. This is another sentence fragment.\", \"result\": false}\n{\"response\": \"This is a complete sentence. This is another complete sentence. This is a complete sentence.\", \"result\": true}", "{\"response\": \"I love going to the beach on summer days because it makes me feel happy.\", \"result\": true}\n{\"response\": \"The sun sets over the ocean.\", \"result\": false}\n{\"response\": \"The sun sets over the ocean with a beautiful view that I've never seen before.\", \"result\": true}", "{\"response\": \"It is true that the sun rises in the east and sets in the west.\", \"result\": true}\n{\"response\": \"This is a very long sentence that contains many words and ideas.\", \"result\": true}\n{\"response\": \"I think...\", \"result\": false}", "{\"response\": \"This is a complete sentence.\", \"result\": true}\n{\"response\": \"This is a sentence.\", \"result\": false}\n{\"response\": \"This is another sentence! This is a sentence fragment.\", \"result\": false}"]}
{"query": "The answer is five. How many pairs of shoes do I own?", "instruction": "List the pairs, including left and right shoes, separated by commas.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(word in response for word in [\"left\", \"right\"]) and \",\" in response\n", "def evaluate(response: str) -> bool: \n    return response.count(',') == 1 and response.endswith(',') \n", "def evaluate(response: str) -> bool: \n    return all(i in response for i in [\", \",\",\", \"and\", \"left\", \"right\"]) and \",\" in response and \",\" in response\n", "def evaluate(response: str) -> bool: \n    return ',' in response and ',' in response.split(',')[-1] and all(i in response for i in ['left', 'right']) \n"], "testcases": ["{\"response\": \"List the pairs, including left and right shoes.\", \"result\": false}\n{\"response\": \"List the left, right shoes.\", \"result\": false}\n{\"response\": \"List the left, right, left, right shoes.\", \"result\": true}", "{\"response\": \"Sneakers, Left shoe, Right shoe\", \"result\": true}\n{\"response\": \"Left shoe, Right shoe, Sneakers\", \"result\": true}\n{\"response\": \"Left shoe,Right shoe\", \"result\": false}", "{\"response\": \"Sneakers, boots, sandals, left, right\", \"result\": false}\n{\"response\": \"Sneakers, boots, sandals, left, right shoes\", \"result\": false}\n{\"response\": \"Sneakers, boots, left, sandals, right, shoes\", \"result\": true}", "{\"response\": \"The pair of left shoes are black, and the pair of right shoes are brown.\", \"result\": true}\n{\"response\": \"The left shoe is black, but I don't have a right shoe.\", \"result\": false}\n{\"response\": \"I have a pair of left shoes and they are brown, the right shoes are black.\", \"result\": true}"]}
{"query": "how to get started on exploring softwares for educational purposes", "instruction": "Write the response in 3 bullet points with exact 7 words each", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace('\\n','').replace('\\r', '').split('.')\n    return all(len(item.split()) == 7 for item in response if len(item.split()) > 0) and len(response) == 3\n", "def evaluate(response: str) -> bool: \n    points = response.split('bullet points: ')\n    if len(points)!= 2:\n        return False\n    point1, point2, point3 = points[1].split('bullet points: ')\n    return len(point1.split()) == 7 and len(point2.split()) == 7 and len(point3.split()) == 7\n", "def evaluate(response: str) -> bool: \n    words = response.split(' ')\n    return len(words) == 3 and all(len(word.split(',')) == 7 for word in words)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words)!= 3:\n            return False\n        if len(words) > 0 and len(words[0])!= 7:\n            return False\n        if len(words) > 1 and len(words[1])!= 7:\n            return False\n        if len(words) > 2 and len(words[2])!= 7:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The main function of a screwdriver is turning screws. It helps to make the task easier. It is a very common tool used daily.\", \"result\": true}\n{\"response\": \"A hammer is a tool used to drive nails. It is very heavy and not very portable. \", \"result\": false}\n{\"response\": \"A saw is a tool used to cut wood. It is very useful in many situations. It can be manual or electric.\", \"result\": false}", "{\"response\": \"\u2022 The response should be exactly three bullet points with seven words each. \u2022 The format should be exact. \u2022 This is the final point of explanation.\", \"result\": true}\n{\"response\": \"\u2022 The response should be exactly three bullet points with seven words each. \u2022 This is the final point of explanation. \u2022 The response should be in bullet points only.\", \"result\": false}\n{\"response\": \"\u2022 The response should be exactly three bullet points with seven words each. \u2022 This is the final point of explanation. \u2022 The response should be in bullet points only. The final word is seven.\", \"result\": false}", "{\"response\": \"\u2022 I need to go to the store \u2022 I will buy some milk \u2022 I will buy eggs too\", \"result\": true}\n{\"response\": \"I need to go to the store. I will buy some milk, and I will buy eggs too\", \"result\": false}\n{\"response\": \"\u2022 I need to go to the store \u2022 \u2022 I will buy some milk \u2022 I will buy eggs and more\", \"result\": false}", "{\"response\": \"\u2022 This is a great idea indeed always \u2022\", \"result\": false}\n{\"response\": \"\u2022 I completely agree with you on that \u2022\", \"result\": false}\n{\"response\": \"\u2022 That's not correct, the answer is \u2022 The correct answer is on the right \u2022\", \"result\": false}"]}
{"query": "Explain quantum computing in simple terms", "instruction": "Write in the format of a list with exactly 3 items, in the order: introduction, steps, conclusion", "verifiers": ["def evaluate(response: str) -> bool: \n    intro_step_conc ='introduction, steps, conclusion'\n    return response.replace(',', '') == intro_step_conc\n", "def evaluate(response: str) -> bool: \n    response = response.replace('[', '').replace(']', '').replace(' ', '')\n    items = response.split(',')\n    return len(items) == 3 and items[0] == 'introduction' and items[1] =='steps' and items[2] == 'conclusion'\n", "def evaluate(response: str) -> bool: \n    elements = response.split(',')\n    return len(elements) == 3 and elements[0].strip()!= '' and elements[1].strip()!= '' and elements[2].strip()!= ''\n", "def evaluate(response: str) -> bool: \n    if ',' not in response:\n        return False\n    parts = response.split(',')\n    if len(parts)!= 3:\n        return False\n    return all(x.strip() for x in parts)\n"], "testcases": ["{\"response\": \"Introduction, Steps, Conclusion\", \"result\": true}\n{\"response\": \"This is the introduction. The steps are next. Conclusion is the final part.\", \"result\": true}\n{\"response\": \"I want to go to the store, play with the dog, watch a movie\", \"result\": false}", "{\"response\": \"The introduction includes background information, the steps outline the process, and the conclusion summarizes the results.\", \"result\": true}\n{\"response\": \"The process is as follows: first, second, third.\", \"result\": false}\n{\"response\": \"First, you need to prepare for the test. Then, take the test. After that, review your results.\", \"result\": true}", "{\"response\": \"To summarize, here is a plan:, First, start with a clear goal. Then, create a schedule. Finally, stay motivated.\", \"result\": true}\n{\"response\": \"Here are the key points:, The goal is to finish the project on time., The deadline is this Friday., I will be unavailable on Monday.\", \"result\": false}\n{\"response\": \"The process can be broken down into:, Determine the requirements, Gather the necessary materials, Complete the task, The final result is, The project was completed successfully.\", \"result\": false}", "{\"response\": \"First, first is the introduction to this response. Next, the steps are: step 1, step 2, step 3. Finally, this is the conclusion.\", \"result\": true}\n{\"response\": \"First, first is the introduction to this response. Next, the steps are: step 1, step 2, step 3, and step 4, step 5. Finally, this is the conclusion.\", \"result\": false}\n{\"response\": \"This is not a list, it is just a normal sentence.\", \"result\": false}"]}
{"query": "How long is a session", "instruction": "Answer in binary digits (0s and 1s)", "verifiers": ["def evaluate(response: str) -> bool: \n    return set(response) == {'0', '1'}\n", "def evaluate(response: str) -> bool: \n    return set(response) <= {'0', '1'}\n", "def evaluate(response: str) -> bool: \n    return set(response).issubset({'0', '1'}) \n", "def evaluate(response: str) -> bool: \n    return all(c in '01' for c in response)\n"], "testcases": ["{\"response\": \"1010\", \"result\": true}\n{\"response\": \"1010101010101010\", \"result\": false}\n{\"response\": \"101\", \"result\": false}", "{\"response\": \"10101010\", \"result\": true}\n{\"response\": \"10101010 10101010\", \"result\": false}\n{\"response\": \"101\", \"result\": false}", "{\"response\": \"1010 1101 1111\", \"result\": true}\n{\"response\": \"10101010\", \"result\": true}\n{\"response\": \"Hello, this is a sentence with non-binary characters:!@#$%^&*()\", \"result\": false}", "{\"response\": \"01101101\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"010101010101\", \"result\": true}"]}
{"query": "write a Christmas song in Country genre", "instruction": "Include 5 verses", "verifiers": ["def evaluate(response: str) -> bool: \n    return '5 verses' in response\n", "def evaluate(response: str) -> bool: \n    return response.lower().count('verse') == 5\n", "def evaluate(response: str) -> bool: \n    return'verse' in response.lower() and response.lower().count('verse') == 5\n", "def evaluate(response: str) -> bool: \n    return'verse' in response.lower() * 5\n"], "testcases": ["{\"response\": \"This is the first verse of my poem. \\nThis is the second verse of my poem. \\nThis is the third verse of my poem. \\nThis is the fourth verse of my poem. \\nThis is the fifth verse of my poem.\", \"result\": true}\n{\"response\": \"This is the first verse of my poem. \\nThis is the second verse of my poem. \\nThis is the third verse of my poem. \\nThis is the fourth verse of my poem.\", \"result\": false}\n{\"response\": \"This is the first verse of my poem. \\nThis is the second verse of my poem. \\nThis is the third verse of my poem. \\nThis is the fourth verse of my poem. \\nThis is the fifth verse of my poem. \\nThis is another verse.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning sky\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning sky, The birds sing sweet melodies\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning sky, The birds sing sweet melodies, The flowers bloom in the garden, The bees buzz around, The world is full of wonder\", \"result\": true}", "{\"response\": \"The earth is blue, the sky is green, the sun is red, the grass is yellow, the flowers are orange, the trees are purple, the houses are brown.\", \"result\": true}\n{\"response\": \"The sun is shining bright.\", \"result\": false}\n{\"response\": \"The earth is blue, the sky is green, the sun is red, the grass is yellow, the flowers are orange\", \"result\": false}", "{\"response\": \"The sky is blue, the grass is green, the sun is shining.\", \"result\": false}\n{\"response\": \"The sky is blue, the grass is green, the sun is shining. The birds are singing, the flowers are blooming, the breeze is blowing.\", \"result\": true}\n{\"response\": \"The sky is blue, the grass is green, the sun is shining. The birds are singing, the flowers are blooming, the breeze is blowing. The clouds are white, the trees are tall, the river is flowing.\", \"result\": false}"]}
{"query": "Introduce THE BASIC ELEMENTS OF LEXICAL SEMANTICS", "instruction": "Answer in exactly 3 paragraphs, with each paragraph having exactly 10 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    if len(paragraphs)!= 3: \n        return False\n    for paragraph in paragraphs:\n        sentences = paragraph.split('.')\n        if len(sentences)!= 10: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = [' '.join(sentence.split()[:10]) for sentence in sentences if sentence]\n    return len(paragraphs) == 3 and all(len(p.split()) == 10 for p in paragraphs)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    paragraphs = [sentences[i:i + 10] for i in range(0, len(sentences), 10)]\n    return len(paragraphs) == 3 and all(len(para) == 10 for para in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 3 and all(len(paragraph.split('.')) == 10 for paragraph in paragraphs)\n"], "testcases": ["{\"response\": \"This is the first paragraph. It has 10 sentences. And it will conclude. And then this. The next one will follow. And then the next one. That will end the first part. Now comes the second part. It will be exactly like the first. It will have 10 sentences as well. Then it will conclude. Then comes the third part. It will be the last one. It will be as long as the first two. Then it will be done. This is the end of my response. That was long. I hope it was good enough. And it will be done now.\", \"result\": true}\n{\"response\": \"This is a single paragraph with only 5 sentences. It will not have more. It will not have 10 sentences like the instruction. It will not conclude as it should. I hope this is clear now. I will not do it correctly.\", \"result\": false}\n{\"response\": \"This is the first paragraph with only 7 sentences. It is not long enough. It will not have 10 sentences. The next paragraph will be better. But this one will not be done. It will not have a conclusion. It will just stop here.\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second sentence of the first paragraph. This is the third sentence of the first paragraph. This is the fourth sentence of the first paragraph. This is the fifth sentence of the first paragraph. This is the sixth sentence of the first paragraph. This is the seventh sentence of the first paragraph. This is the eighth sentence of the first paragraph. This is the ninth sentence of the first paragraph. This is the tenth sentence of the first paragraph. This is the eleventh sentence of the first paragraph. This is the twelfth sentence of the first paragraph. This is the thirteenth sentence of the first paragraph. This is the fourteenth sentence of the first paragraph. This is the fifteenth sentence of the first paragraph. This is the sixteenth sentence of the first paragraph. This is the seventeenth sentence of the first paragraph. This is the eighteenth sentence of the first paragraph. This is the nineteenth sentence of the first paragraph. This is the twentieth sentence of the first paragraph. And this is the twenty-first sentence of the first paragraph. This is the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph. This is the fourth sentence of the second paragraph. This is the fifth sentence of the second paragraph. This is the sixth sentence of the second paragraph. This is the seventh sentence of the second paragraph. This is the eighth sentence of the second paragraph. This is the ninth sentence of the second paragraph. This is the tenth sentence of the second paragraph. This is the eleventh sentence of the second paragraph. This is the twelfth sentence of the second paragraph. This is the thirteenth sentence of the second paragraph. This is the fourteenth sentence of the second paragraph. This is the fifteenth sentence of the second paragraph. This is the sixteenth sentence of the second paragraph. This is the seventeenth sentence of the second paragraph. This is the eighteenth sentence of the second paragraph. This is the nineteenth sentence of the second paragraph. This is the twentieth sentence of the second paragraph. And this is the twenty-first sentence of the second paragraph. This is the third paragraph. This is the second sentence of the third paragraph. This is the third sentence of the third paragraph. This is the fourth sentence of the third paragraph. This is the fifth sentence of the third paragraph. This is the sixth sentence of the third paragraph. This is the seventh sentence of the third paragraph. This is the eighth sentence of the third paragraph. This is the ninth sentence of the third paragraph. This is the tenth sentence of the third paragraph.\", \"result\": False}\n\n{\"response\": \"This is the first paragraph. This is the second sentence of the first paragraph. This is the third sentence of the first paragraph. This is the fourth sentence of the first paragraph. This is the fifth sentence of the first paragraph. This is the sixth sentence of the first paragraph. This is the seventh sentence of the first paragraph. This is the eighth sentence of the first paragraph. This is the ninth sentence of the first paragraph. This is the tenth sentence of the first paragraph. This is the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph. This is the fourth sentence of the second paragraph. This is the fifth sentence of the second paragraph. This is the sixth sentence of the second paragraph. This is the seventh sentence of the second paragraph. This is the eighth sentence of the second paragraph. This is the ninth sentence of the second paragraph. This is the tenth sentence of the second paragraph. This is the third paragraph. This is the second sentence of the third paragraph. This is the third sentence of the third paragraph. This is the fourth sentence of the third paragraph. This is the fifth sentence of the third paragraph. This is the sixth sentence of the third paragraph. This is the seventh sentence of the third paragraph. This is the eighth sentence of the third paragraph. This is the ninth sentence of the third paragraph. This is the tenth sentence of the third paragraph.\", \"result\": False}\n\n{\"response\": \"This is the first paragraph. This is the second sentence of the first paragraph. This is the third sentence of the first paragraph. This is the fourth sentence of the first paragraph. This is the fifth sentence of the first paragraph. This is the sixth sentence of the first paragraph. This is the seventh sentence of the first paragraph. This is the eighth sentence of the first paragraph. This is the ninth sentence of the first paragraph. This is the tenth sentence of the first paragraph. This is the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph. This is the fourth sentence of the second paragraph. This is the fifth sentence of the second paragraph. This is the sixth sentence of the second paragraph. This is the seventh sentence of the second paragraph. This is the eighth sentence of the second paragraph. This is the ninth sentence of the second paragraph. This is the tenth sentence of", "{\"response\": \"This is a short sentence. This is another sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence. This is the eleventh sentence. This is the twelfth sentence. This is the thirteenth sentence. This is the fourteenth sentence. This is the fifteenth sentence. This is the sixteenth sentence. This is the seventeenth sentence. This is the eighteenth sentence. This is the nineteenth sentence. This is the twentieth sentence. This is the twenty-first sentence. This is the twenty-second sentence. This is the twenty-third sentence. This is the twenty-fourth sentence. This is the twenty-fifth sentence. This is the twenty-sixth sentence. This is the twenty-seventh sentence. This is the twenty-eighth sentence. This is the twenty-ninth sentence. This is the thirtieth sentence. This is the thirty-first sentence. This is the thirty-second sentence. This is the thirty-third sentence. This is the thirty-fourth sentence. This is the thirty-fifth sentence. This is the thirty-sixth sentence. This is the thirty-seventh sentence. This is the thirty-eighth sentence. This is the thirty-ninth sentence. This is the fortieth sentence. This is the forty-first sentence. This is the forty-second sentence. This is the forty-third sentence. This is the forty-fourth sentence. This is the forty-fifth sentence. This is the forty-sixth sentence. This is the forty-seventh sentence. This is the forty-eighth sentence. This is the forty-ninth sentence. This is the fiftieth sentence. This is the fifty-first sentence. This is the fifty-second sentence. This is the fifty-third sentence. This is the fifty-fourth sentence. This is the fifty-fifth sentence. This is the fifty-sixth sentence. This is the fifty-seventh sentence. This is the fifty-eighth sentence. This is the fifty-ninth sentence. This is the sixtieth sentence. This is the sixty-first sentence. This is the sixty-second sentence. This is the sixty-third sentence. This is the sixty-fourth sentence. This is the sixty-fifth sentence. This is the sixty-sixth sentence. This is the sixty-seventh sentence. This is the sixty-eighth sentence. This is the sixty-ninth sentence. This is the seventieth sentence. This is the seventy-first sentence. This is the seventy-second sentence. This is the seventy-third sentence. This is the seventy-fourth sentence. This is the seventy-fifth sentence. This is the seventy-sixth sentence. This is the seventy-seventh sentence. This is the seventy-eighth sentence. This is the seventy-ninth sentence. This is the eightieth sentence. This is the eighty-first sentence. This is the eighty-second sentence. This is the eighty-third sentence. This is the eighty-fourth sentence. This is the eighty-fifth sentence. This is the eighty-sixth sentence. This is the eighty-seventh sentence. This is the eighty-eighth sentence. This is the eighty-ninth sentence. This is the ninetieth sentence. This is the ninety-first sentence. This is the ninety-second sentence. This is the ninety-third sentence. This is the ninety-fourth sentence. This is the ninety-fifth sentence. This is the ninety-sixth sentence. This is the ninety-seventh sentence. This is the ninety-eighth sentence. This is the ninety-ninth sentence. This is the hundredth sentence. This is the one-hundred and first sentence. This is the one-hundred and second sentence. This is the one-hundred and third sentence. This is the one-hundred and fourth sentence. This is the one-hundred and fifth sentence. This is the one-hundred and sixth sentence. This is the one-hundred and seventh sentence. This is the one-hundred and eighth sentence. This is the one-hundred and ninth sentence. This is the one-hundred and tenth sentence. This is the first sentence of the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph. This is the fourth sentence of the second paragraph. This is the fifth sentence of the second paragraph. This is the sixth sentence of the second paragraph. This is the seventh sentence of the second paragraph. This is the eighth sentence of the second paragraph. This is the ninth sentence of the second paragraph. This is the tenth sentence of the second paragraph. This is the first sentence of the third paragraph. This is the second sentence of the third paragraph. This is the third sentence of the third paragraph. This is the fourth sentence of the third paragraph. This is the fifth sentence of the third paragraph. This is the sixth sentence of the third paragraph. This is the seventh sentence of the third paragraph. This is the eighth sentence of the third paragraph", "{\"response\": \"Firstly, this is the first paragraph. Secondly, this is the second paragraph. Finally, this is the third paragraph.\", \"result\": true}\n{\"response\": \"Firstly, this is the first paragraph. Secondly, this is the second paragraph. This is a fourth paragraph.\", \"result\": false}\n{\"response\": \"Firstly, this is the first paragraph. Secondly, this is the second paragraph.\\n\\nThirdly, this is the third paragraph.\\n\\nThis is a fourth paragraph.\", \"result\": false}"]}
{"query": "Develop an algorith in any programming language to simulate the Meiosis process, the generation of sperm and/or ovary DNA, given a .txt DNA file", "instruction": "Write in a maximum of 5 steps, each step with exactly 2 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if i >= 5:\n            return False\n        if not lines[i].startswith('\u2022 '):\n            return False\n        if not len(lines[i].split('\u2022 ')[0].strip()) == 2 and len(lines[i].split('\u2022 ')[1].strip()) == 2:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    steps = response.count('\\n\\n')\n    bullet_points = response.count('\\n\u2022') + response.count('\\n-')\n    return 1 <= steps <= 5 and steps * 2 == bullet_points\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    steps = 0\n    for line in lines:\n        if line.startswith('\u2022 '):\n            steps += 1\n            if line.count('\u2022 ')!= 2:\n                return False\n    return steps <= 5\n", "def evaluate(response: str) -> bool: \n    steps = response.split('step ')\n    return len(steps) <= 5 and all(item.startswith('\u2022 ') for item in response.split('\\n') if item)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"\u2022 step 1\\n\u2022 point 1 point 2\\n\u2022 step 2\\n\u2022 point 2 2\\n\u2022 step 3\\n\u2022 point 3 3\\n\u2022 step 4\\n\u2022 point 4 4\\n\u2022 step 5\\n\u2022 point 5 5\\n\u2022 step 6\\n\u2022 point 6 6\\n\u2022 step 7\\n\u2022 point 7 7\", \"result\": false}\n{\"response\": \"\u2022 step 1\\n\u2022 point 1 point 2\\n\u2022 step 2\\n\u2022 point 2 2\\n\u2022 step 3\\n\u2022 point 3 3\\n\u2022 step 4\\n\u2022 point 4 4\\n\u2022 step 5\\n\u2022 point 5 5\", \"result\": true}\n{\"response\": \"\u2022 step 1\\n\u2022 point 1 point 2 point 3\\n\u2022 step 2\\n\u2022 point 2 2 point 4\\n\u2022 step 3\\n\u2022 point 3 3\\n\u2022 step 4\\n\u2022 point 4 4\\n\u2022 step 5\\n\u2022 point 5 5\", \"result\": true}", "{\"response\": \"Step 1:\n\u2022 This is the first point\n\u2022 This is the second point\nStep 2:\n\u2022 This is the first point of the second step\n\u2022 This is the second point of the second step\nStep 3:\n\u2022 This is the first point of the third step\n\u2022 This is the second point of the third step\", \"result\": true}\n{\"response\": \"Step 1:\n\u2022 This is the first point\", \"result\": false}\n{\"response\": \"Step 1:\n\u2022 This is the first point\n\u2022 This is the second point\nStep 2:\n\u2022 This is the first point of the second step\n\u2022 This is the second point of the second step\n\u2022 This is the third point of the second step\n\u2022 This is the fourth point of the second step\n\u2022 This is the fifth point of the second step\nStep 3:\n\u2022 This is the first point of the third step\n\u2022 This is the second point of the third step\", \"result\": false}", "{\"response\": \"\u2022 The book discusses the importance of single responsibility principle.\\n\u2022 It also talks about the benefits of dependency injection.\\n\u2022 However, the book does not cover unit testing.\\n\u2022 It does not cover the book's index.\\n\u2022 The book has a comprehensive appendix.\", \"result\": true}\n{\"response\": \"\u2022 The book discusses the importance of single responsibility principle.\\n\u2022 It also talks about the benefits of dependency injection.\\n\u2022 However, the book does not cover unit testing.\\n\u2022 It does not cover the book's index.\\n\u2022 The book has a comprehensive appendix.\\nThis is a sixth step.\", \"result\": false}\n{\"response\": \"The book discusses the importance of single responsibility principle.\\n\\nHowever, it has a short and not so comprehensive introduction.\\nIt does not cover unit testing.\\nIt does not cover the book's index.\\nIt does not have a comprehensive appendix.\", \"result\": false}", "{\"response\": \"\u2022 Step 1: \n  \u2022 First step to make an apple pie\n  \u2022 Second step to make an apple pie\n\u2022 Step 2: \n  \u2022 Third step to make an apple pie\n  \u2022 Fourth step to make an apple pie\", \"result\": true}\n{\"response\": \"\u2022 Step 1: \n  \u2022 First step to make an apple pie\n  \u2022 Second step to make an apple pie\n\u2022 Step 2: \n  \u2022 Third step to make an apple pie\", \"result\": false}\n{\"response\": \"\u2022 Step 1: \n  \u2022 First step to make an apple pie\n  \u2022 Second step to make an apple pie\n\u2022 Step 2: \n  \u2022 Third step to make an apple pie\n  \u2022 Fourth step to make an apple pie\n\u2022 Step 3: \n  \u2022 Fifth step to make an apple pie\", \"result\": false}"]}
{"query": "I work at a camping store. What can I get my girlfriend, my 2 brothers, and my parents for Christmas? My parents have a caravan they use.", "instruction": "List items in alphabetical order and consider budget of $100 per person.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'budget' in response and 'order' in response and all(c.isalpha() or c.isspace() for c in response)\n", "def evaluate(response: str) -> bool: \n    response = response.replace('-', '').replace(',', '').replace('.', '').lower()\n    return all(word in response for word in 'alphabetical order'.split()) and all(response.split().count(item) <= 100 for item in 'getitem'.split())\n", "def evaluate(response: str) -> bool: \n    return ('budget' in response and 'alphabetical' in response and 'order' in response and '$100' in response) \n", "def evaluate(response: str) -> bool: \n    return 'alphabetical' in response.lower() and 'budget' in response.lower() and '$100' in response\n"], "testcases": ["{\"response\": \"Consider the following: Hotel accommodation ($80 per night), Food ($20 per meal), Transportation ($10 per ride). Budget of $100 per person.\", \"result\": true}\n{\"response\": \"Consider the following: Hotel accommodation, Transportation, Food. Budget of $100 per person.\", \"result\": false}\n{\"response\": \"Consider the following: Food ($20 per meal), Hotel accommodation ($80 per night), Transportation ($10 per ride). Budget of $100 per person. And consider also accommodation as $60 per night.\", \"result\": false}", "{\"response\": \"Rent accommodation (max $50), Food (max $20), Transportation (max $10), Shopping (max $20) and Attractions (max $20).\", \"result\": true}\n{\"response\": \"Accommodation (max $50), Food (max $10), Transportation (max $20), Shopping (max $30), Attractions (max $50), Travel insurance (max $30) and Miscellaneous (max $20).\", \"result\": false}\n{\"response\": \"No budget required for this trip. Just pack your bags and go!\", \"result\": false}", "{\"response\": \"First, pack light and consider budget of $100 per person. Second, book flights and hotels in advance. Third, bring necessary documents and insurance. Fourth, choose a suitable itinerary. Fifth, consider local customs and laws.\", \"result\": true}\n{\"response\": \"First, pack light and consider budget of $100 per person. Second, book flights and hotels in advance. Third, bring necessary documents and insurance. Fourth, consider local customs and laws. Fifth, go shopping!\", \"result\": false}\n{\"response\": \"First, book flights and hotels in advance. Second, bring necessary documents and insurance. Third, choose a suitable itinerary. Fourth, consider local customs and laws. Fifth, pack light and consider budget of $100 per person.\", \"result\": false}", "{\"response\": \"Items to bring: socks, shirt, shoes. Budget: $50 per person.\", \"result\": false}\n{\"response\": \"Items to bring: book, shirt, socks. Budget: $100 per person.\", \"result\": true}\n{\"response\": \"Items to bring: book, pen, socks, shirt. Budget: $110 per person.\", \"result\": true}"]}
{"query": "You are a javascript assistant that'll help me write code. I'll ask you question and you can respond with code snippets", "instruction": "The code should always use ES6 syntax and should be within a function named'respond'", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('function respond() {') and response.endswith('}') \n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"function respond\") and \"let\" not in response and \"const\" not in response and \"var\" not in response and \"=> \" not in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('function respond() {') and response.endswith('}\\n') and 'let' not in response and 'const' not in response and 'var' not in response\n", "def evaluate(response: str) -> bool: \n    return'respond' in response and 'es6' in response\n"], "testcases": ["{\"response\": \"function respond() { console.log('Hello World!'); }\", \"result\": true}\n{\"response\": \"const x = 5; console.log(x);\", \"result\": false}\n{\"response\": \"function respond() { var x = 5; console.log(x); }\", \"result\": false}", "{\"response\": \"function respond() { let x = 5; let y = 3; return x + y; }\", \"result\": true}\n{\"response\": \"function respond() { var x = 5; const y = 3; return x + y; }\", \"result\": false}\n{\"response\": \"function respond() { var x = 5; let y = 3; return x + y; }\", \"result\": false}", "{\"response\": \"function respond() {\\n  console.log('Hello World');\\n}\", \"result\": true}\n{\"response\": \"function respond() {\\n  var x = 5;\\n  console.log(x);\\n}\", \"result\": false}\n{\"response\": \"function respond() {\\n  let x = 5;\\n  console.log(x);\\n}\", \"result\": false}", "{\"response\": \"function respond() { let arr = [apple, banana, cat, dog, elephant]; arr.sort(); }\", \"result\": true}\n{\"response\": \"function respond() { let arr = [dog, elephant, cat, banana, apple]; console.log(arr); }\", \"result\": false}\n{\"response\": \"function respond() { var arr = [elephant, dog, banana]; arr.sort(); console.log(arr); }\", \"result\": false}"]}
{"query": "\u5199\u4e00\u6bb5python\u4ee3\u7801\uff0c\u4e3a\u4e00\u4e2a\u5728-pi\u5230pi\u4e0a\u5206\u6bb5\u5b9a\u4e49\u7684\u51fd\u6570\u7528symbolic calculation\u8ba1\u7b97\u7684Fourier coefficients\uff0c\u5e76\u753b\u56fe\u6bd4\u8f83\u539f\u51fd\u6570\u548cFourier partial sum", "instruction": "\u9650\u5236\u5b57\u6570\u572880\u4ee5\u5185", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 80\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 80\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 80\n", "def evaluate(response: str) -> bool: \n    return len(response.encode('utf-8').decode('utf-8').replace(u'\\ufeff', '')) <= 80\n"], "testcases": ["{\"response\": \"This is a short response that should pass the test\", \"result\": true}\n{\"response\": \"This is a medium length response that may not pass the test because it's a bit too long\", \"result\": false}\n{\"response\": \"This is a very long response that will definitely not pass the test\", \"result\": false}", "{\"response\": \"This is a short sentence that is within the limit of 80 characters.\", \"result\": true}\n{\"response\": \"This is a longer sentence that is over the limit of 80 characters, it has more than 80 characters and continues even more.\", \"result\": false}\n{\"response\": \"This sentence is within the limit of 80 characters it is a bit short actually.\", \"result\": true}", "{\"response\": \"This is a short response that fits within 80 characters.\", \"result\": true}\n{\"response\": \"This is a longer response that exceeds the 80 character limit and continues beyond this point.\", \"result\": false}\n{\"response\": \"The response has exactly 80 characters and does not exceed it.\", \"result\": true}", "{\"response\": \"This is a very short response that is less than 80 characters\", \"result\": true}\n{\"response\": \"This is a response that is 81 characters long, which exceeds the limit\", \"result\": false}\n{\"response\": \"This response is 79 characters long, which is within the limit\", \"result\": true}"]}
{"query": "What are the different kinds of research methodologies I need to be familiar with if I am supervising a mental health masters research student?", "instruction": "Answer in exactly 7 bullet points with no more than 15 words each.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if line.startswith('\u2022 '):\n            words = line.replace('\u2022 ', '').split()\n            if len(words) > 15 or len(words) < 1:\n                return False\n    return len(lines) == 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if i >= 7: # response has more than 7 bullet points\n            return False\n        words = line.split()\n        if len(words) > 15: # line has more than 15 words\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    points = response.count('.')  # Count the number of '.' characters\n    lines = response.split('.')  # Split the response by '.' into individual lines\n    return points == 7 and all(len(line.strip()) <= 15 for line in lines)  # Check if the number of points is exactly 7 and each line is not more than 15 words\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    for point in points:\n        if point.startswith('- '):\n            point = point[2:]\n        elif point.startswith('* '):\n            point = point[2:]\n        elif point.startswith('1. '):\n            point = point[2:]\n        elif point.startswith('2. '):\n            point = point[2:]\n        elif point.startswith('3. '):\n            point = point[2:]\n        elif point.startswith('4. '):\n            point = point[2:]\n        elif point.startswith('5. '):\n            point = point[2:]\n        elif point.startswith('6. '):\n            point = point[2:]\n        elif point.startswith('7. '):\n            point = point[2:]\n        else:\n            return False\n        words = point.split()\n        if len(words) > 15:\n            return False\n    return len(points) == 7\n"], "testcases": ["{\"response\": \"\u2022 Item 1: This is the first item\\n\u2022 Item 2: This is the second item\\n\u2022 Item 3: This is the third item\\n\u2022 Item 4: This is the fourth item\\n\u2022 Item 5: This is the fifth item\\n\u2022 Item 6: This is the sixth item\\n\u2022 Item 7: This is the seventh item\", \"result\": true}\n{\"response\": \"\u2022 Item 1: This is the first item\\n\u2022 Item 2: This is the second item\\n\u2022 Item 3: This is the third item\\n\u2022 Item 4: This is the fourth item\\n\u2022 Item 5: This is the fifth item\\n\u2022 Item 6: This is the sixth item\", \"result\": false}\n{\"response\": \"\u2022 Item 1: This is the first item\\n\u2022 Item 2: This is the second item\\n\u2022 Item 3: This is the third item\\n\u2022 Item 4: This is the fourth item\\n\u2022 Item 5: This is the fifth item\\n\u2022 Item 6: This is the sixth item\\n\u2022 Item 7: This is the seventh item and it is too long\", \"result\": false}", "{\"response\": \"\u2022 Item 1: This is the first item.\\n\u2022 Item 2: This is the second item.\\n\u2022 Item 3: This is the third item.\\n\u2022 Item 4: This is the fourth item.\\n\u2022 Item 5: This is the fifth item.\\n\u2022 Item 6: This is the sixth item.\\n\u2022 Item 7: This is the seventh item.\", \"result\": true}\n{\"response\": \"\u2022 Item 1: This is the first item.\\n\u2022 Item 2: This is the second item.\\n\u2022 Item 3: This is the third item.\\n\u2022 Item 4: This is the fourth item.\\n\u2022 Item 5: This is the fifth item.\\n\u2022 Item 6: This is the sixth item.\\n\u2022 Item 7: This is a very very very very very very long seventh item.\", \"result\": false}\n{\"response\": \"\u2022 Item 1: This is the first item.\\n\u2022 Item 2: This is the second item.\\n\u2022 Item 3: This is the third item.\\n\u2022 Item 4: This is the fourth item.\\n\u2022 Item 5: This is the fifth item.\\n\u2022 Item 6: This is the sixth item.\", \"result\": false}", "{\"response\": \"\u2022 This is a good idea.\\n\u2022 It is easy to do.\\n\u2022 It is also fun.\\n\u2022 You will learn something.\\n\u2022 You will have fun.\\n\u2022 This is a great plan.\\n\u2022 It is a good idea.\", \"result\": true}\n{\"response\": \"\u2022 This is a good idea.\\n\u2022 It is easy to do.\\n\u2022 It is also fun.\\n\u2022 You will learn something.\\n\u2022 You will have fun.\\n\u2022 This is a great plan.\", \"result\": false}\n{\"response\": \"\u2022 This is a good idea.\\n\u2022 It is easy to do.\\n\u2022 It is also fun.\\n\u2022 You will learn something.\\n\u2022 You will have fun.\\n\u2022 This is a great plan.\\n\u2022 It is a good plan to do.\", \"result\": false}", "{\"response\": \"\u2022 Point 1 is very important. This is a must-do task.\\n\u2022 Point 2 is also very important. This is a high-priority task.\\n\u2022 Point 3 is a good idea. This is a medium-priority task.\\n\u2022 Point 4 is okay. This is a low-priority task.\\n\u2022 Point 5 is not important. This is a nice-to-have task.\\n\u2022 Point 6 is also not important. This is a nice-to-have task.\\n\u2022 Point 7 is also not important. This is a nice-to-have task.\\n\", \"result\": true}\n\n{\"response\": \"\u2022 Point 1 is very important. This is a must-do task.\\n\u2022 Point 2 is also very important. This is a high-priority task.\\n\u2022 Point 3 is a good idea. This is a medium-priority task.\\n\u2022 Point 4 is okay. This is a low-priority task.\\n\u2022 Point 5 is not important. This is a nice-to-have task.\\n\u2022 Point 6 is also not important. This is a nice-to-have task.\\n\u2022 Point 7 is also not important. This is a nice-to-have task.\\n\u2022 This is an extra point. This is a nice-to-have task.\\n\", \"result\": false}\n\n{\"response\": \"\u2022 Point 1 is very important. This is a must-do task. This is a very long sentence.\\n\u2022 Point 2 is also very important. This is a high-priority task.\\n\u2022 Point 3 is a good idea. This is a medium-priority task.\\n\u2022 Point 4 is okay. This is a low-priority task.\\n\u2022 Point 5 is not important. This is a nice-to-have task.\\n\u2022 Point 6 is also not important. This is a nice-to-have task.\\n\u2022 Point 7 is also not important. This is a nice-to-have task.\\n\", \"result\": false}"]}
{"query": "create an arduino uno code for a mobile robot that is controlled by blutooth of mibile phone", "instruction": "answer in a structured format with 4 subsections", "verifiers": ["def evaluate(response: str) -> bool: \n    subsections = ['1. Introduction', '2. Hardware', '3. Software', '4. Conclusion']\n    subsections_present = any(subsection in response for subsection in subsections)\n    subsections_order = [i+1 for i, subsection in enumerate(subsections) if subsection in response]\n    return subsections_present and sorted(subsections_order) == subsections_order\n", "def evaluate(response: str) -> bool: \n    if response.count('\\n') < 3 or response.count('\\n') > 4:\n        return False\n    elif '\\n' not in response:\n        return False\n    else:\n        sections = response.split('\\n')\n        return len(sections) == 4 and all(section!= '' for section in sections)\n", "def evaluate(response: str) -> bool: \n    return 'I.' in response and response.count('I. ') == 3 and 'II.' in response and response.count('II. ') == 3 and 'III.' in response and response.count('III. ') == 3 and 'IV.' in response and response.count('IV. ') == 3\n", "def evaluate(response: str) -> bool: \n    return all(any(subsection in response for subsection in ['**Section 1: Introduction', '**Section 2: Materials', '**Section 3: Circuit Diagram', '**Section 4: Code']) \n               for subsection in ['**Section 1: Introduction', '**Section 2: Materials', '**Section 3: Circuit Diagram', '**Section 4: Code'])\n"], "testcases": ["{\"response\": \"1. Introduction\\n2. Hardware\\n3. Software\\n4. Conclusion\", \"result\": true}\n{\"response\": \"Introduction\\nSoftware\\nHardware\\nConclusion\", \"result\": false}\n{\"response\": \"1. Introduction\\nSoftware\\n3. Hardware\\n2. Conclusion\", \"result\": false}", "{\"response\": \"Introduction\\n\\nBackground\\n\\nMethodology\\n\\nResults\", \"result\": true}\n{\"response\": \"Introduction\\n\\nBackground\\n\\nMethodology\\n\\nResults\\n\\nConclusion\", \"result\": false}\n{\"response\": \"\", \"result\": false}", "{\"response\": \"I. Introduction\nII. Main Points\nIII. Conclusion\nIV. References\", \"result\": true}\n{\"response\": \"I. Introduction\\nII. Main Points\\nIII. Conclusion\\nIV. References\", \"result\": false}\n{\"response\": \"I. Introduction. This is the introduction.\nII. Main Points.\nIII. Conclusion.\nIV. References.\", \"result\": true}", "{\"response\": \"**Introduction**\\n**Materials**\\n**Circuit Diagram**\\n**Code**\\nThis is a sample response with 4 subsections.\", \"result\": true}\n{\"response\": \"This is a response without any subsections\", \"result\": false}\n{\"response\": \"**Introduction**\\n**Materials**\\n**Circuit Diagram**\\n**Code**\\nThis is a sample response with 4 subsections\\n**Bonus Section**\", \"result\": false}"]}
{"query": "if kowloon walled city had not been demolished, and continued to be developed until the present day, what might be it's population?", "instruction": "use only words with 5 letters or more", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) >= 5 for word in words) \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word) < 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) >= 5 for word in words)\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 5 for word in response.split()) \n"], "testcases": ["{\"response\": \"This is a test response with many long words\", \"result\": true}\n{\"response\": \"This is a test response with a few short words\", \"result\": false}\n{\"response\": \"This is a test response with short words\", \"result\": false}", "{\"response\": \"House Apple Door Cloud\", \"result\": false}\n{\"response\": \"Laugh Steam Knife Flower\", \"result\": true}\n{\"response\": \"House Apple Door Steak\", \"result\": false}", "{\"response\": \"I House Code Java\", \"result\": false}\n{\"response\": \"House Cloud Java Beach\", \"result\": false}\n{\"response\": \" House Complex Computer\", \"result\": true}", "{\"response\": \"The happy clouds are floating.\", \"result\": false}\n{\"response\": \"Houses are beautiful.\", \"result\": false}\n{\"response\": \"The elephant runs quickly.\", \"result\": true}"]}
{"query": "Do you know the contents of the book \"Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e\" by Sandi Metz?", "instruction": "Use exactly 5 steps, with the first step being a question and the remaining 4 steps containing the main point of the book.", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('\\n') \n    return len(steps) == 5 and any('?' in step for step in steps[:1]) and all('?' not in step for step in steps[1:])\n", "def evaluate(response: str) -> bool: \n    steps = response.split('.')\n    return len(steps) == 5 and steps[0].strip().endswith('?') and all(step.strip() for step in steps[1:])\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 5: \n        return False\n    if not lines[0].startswith('?'): \n        return False\n    for i in range(1, 5):\n        if not lines[i].strip(): \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return len(steps) == 5 and len(steps[0]) > 0 and all(len(step) > 0 for step in steps[1:])\n"], "testcases": ["{\"response\": \"What is the title of the book? The book is called 'The Alchemist'.\\nThe author of the book is Paulo Coelho.\\nThe book was first published in 1988.\\nThe book has been translated into many languages.\", \"result\": true}\n\n{\"response\": \"The book is called 'The Alchemist'.\\nThe author of the book is Paulo Coelho.\\nThe book was first published in 1988.\\nThe book has been translated into many languages.\", \"result\": false}\n\n{\"response\": \"What is the title of the book? The book is called 'The Alchemist'.\\nThe author of the book is Paulo Coelho.\\nThe book was first published in 1988.\", \"result\": false}", "{\"response\": \"What is the main theme of the book?\\nIt discusses the importance of Agile development.\\nIt explains the principles of object-oriented design.\\nIt provides real-world examples of its application.\\nIt summarizes the key takeaways from the book.\\n\", \"result\": true}\n{\"response\": \"What is the main theme of the book?\\nIt discusses the importance of Agile development.\\nIt explains the principles of object-oriented design.\\nIt provides real-world examples of its application.\\nIt summarizes the key takeaways from the book.\\nIt goes into further details about the implementation.\\n\", \"result\": false}\n{\"response\": \"What is the main theme of the book?\\nIt provides a brief introduction to the book.\\nIt explains the importance of the topic.\\nIt is a completely unrelated text.\\n\", \"result\": false}", "{\"response\": \"What is the main topic of the book?\\n1. Introduction to Agile Development\\n2. Principles of Agile Methodology\\n3. Agile Development Life Cycle\\n4. Agile Tools and Techniques\\n5. Agile Best Practices\", \"result\": true}\n{\"response\": \"What is the main topic of the book?\\n1. Introduction to Agile Development\\n2. Principles of Agile Methodology\\n3. Agile Development Life Cycle\\n4. Agile Tools and Techniques\\n\", \"result\": false}\n{\"response\": \"What is the main topic of the book?\\n1. Introduction to Agile Development\\n2. Principles of Agile Methodology\\n3. Agile Development Life Cycle\\n4. Agile Tools and Techniques\\n5. Agile Best Practices\\n6. Agile Success Stories\", \"result\": false}", "{\"response\": \"Do you know the contents of the book? The first chapter explains the theory behind machine learning. The second chapter focuses on supervised learning. The third chapter covers unsupervised learning. The fourth chapter discusses reinforcement learning. The fifth chapter concludes with a summary.\", \"result\": true}\n{\"response\": \"The book starts with an introduction to the history of machine learning. The next chapter covers the basics of Python programming. The third chapter is about data structures and algorithms. The fourth chapter focuses on data visualization. \", \"result\": false}\n{\"response\": \"Do you want to know about the best programming languages? The first step is to learn the basics of Python. The second step is to practice coding with Python. The third step is to learn object-oriented programming. The fourth step is to learn data structures and algorithms. The fifth step is to practice data structures and algorithms.\", \"result\": true}"]}
{"query": "import { GoogleAuth } from 'google-auth-library'; corresponding in java", "instruction": "Answer in 5 steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'steps' in response and 'in' in response and response.count('steps') == 5\n", "def evaluate(response: str) -> bool: \n    return'steps' in response and 'in' in response and '5' in response\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for line in response.split('\\n'):\n        if line.strip().startswith('Step'):\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    return'steps' in response and'step' in response and response.count('step') == 4 \n"], "testcases": ["{\"response\": \"Here are the instructions on how to build a birdhouse in 5 easy steps.\\n1. Prepare the materials.\\n2. Cut the wood.\\n3. Assemble the house.\\n4. Attach the roof.\\n5. Add the finishing touches.\", \"result\": true}\n{\"response\": \"To write a Python program, start by writing the import statement.\\nNext, write the class definition.\\nThe main function will contain the program's logic.\", \"result\": false}\n{\"response\": \"First, start with step one. Then proceed to step 2, followed by step 3. Finally, complete step 4.\", \"result\": false}", "{\"response\": \"Here are the 5 steps: step 1, step 2, step 3, step 4, and step 5\", \"result\": true}\n{\"response\": \"The steps are: step 1, step 2, step 3 and step 4. Additional details will be provided later\", \"result\": false}\n{\"response\": \"There are 3 steps to this task: step 1, step 2, and step 3. And another one.\", \"result\": false}", "{\"response\": \"Step 1: This is the first step\\nStep 2: This is the second step\\nStep 3: This is the third step\\nStep 4: This is the fourth step\\nStep 5: This is the fifth step\", \"result\": true}\n{\"response\": \"Step 1: This is the first step\\nStep 2: This is the second step\", \"result\": false}\n{\"response\": \"Step 1: This is the first step\\nStep 2: This is the second step\\nStep 3: This is the third step\\nStep 5: This is the fifth step\\nStep 6: This is the sixth step\", \"result\": false}", "{\"response\": \"There are 5 steps to complete this task.\", \"result\": true}\n{\"response\": \"There are many ways to solve this problem, here are a few steps.\", \"result\": false}\n{\"response\": \"Step 1: Do this. Step 2: Do that. Step 3: Do something else. Step 4: Do something else. Step 5: Do one more thing.\", \"result\": true}"]}
{"query": "\uc624\ub298\ub0a0\uc528\uc880 \uc54c\ub824\uc918", "instruction": "Write your response in 5 sentences using only emojis.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and response.replace('.', '').replace(' ', '').isalpha() == False and len(response) > 0 and all(char in '\\ud83c\\udf00\\ud83c\\udf01\\ud83c\\udf02\\ud83c\\udf03\\ud83c\\udf04\\ud83c\\udf05\\ud83c\\udf06\\ud83c\\udf07\\ud83c\\udf08\\ud83c\\udf09\\ud83c\\udf80-\\ud83c\\udf8f' for char in response) \n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(char in'\ud83e\udd16\ud83d\udcda\ud83d\udcbb\ud83c\udf89\ud83d\ude0a\ud83d\udc4d' for char in response)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(not char.isalnum() and not char.isalpha() and not char.isspace() for char in ''.join(sentences)) and all(response[i] in ['\\n', ':', ';', '?', '!', ',', '.', '?', ':'] for i in range(1, len(response) - 1))\n"], "testcases": ["{\"response\": \"\ud83d\udc4d\ud83c\udffd\ud83e\udd29\ud83c\udf0e\ud83d\udcbb\ud83d\udc4d\", \"result\": false}\n{\"response\": \"\ud83c\udf1e\ufe0f\ud83c\udf34\ufe0f\ud83c\udf0a\ufe0f\ud83c\udf89\ufe0f\ud83d\ude80\ufe0f\", \"result\": false}\n{\"response\": \"\ud83d\udc4d\ud83c\udffd\ud83e\udd29\ud83c\udf0e\ud83d\udcbb\ud83d\udc4d\ud83c\udffd\ud83e\udd29\ud83c\udf0e\ud83d\udcbb\ud83d\udc4d\", \"result\": false}", "{\"response\": \"\ud83d\udc4b\ud83d\udcbb\ud83d\udcca\ud83d\udcbb\ud83d\udcda\", \"result\": true}\n{\"response\": \"\ud83d\udc4b\ud83d\udcbb\ud83d\udcca\ud83d\udcbb\ud83d\udcda\ud83d\ude02\ud83d\udc4d\", \"result\": false}\n{\"response\": \"\ud83d\udc4b\ud83d\udcbb\ud83d\udcca\ud83d\udcca\", \"result\": false}", "{\"response\": \"\ud83e\udd16\ud83d\udcda\ud83d\udcbb\ud83c\udf89\ud83d\ude0a\", \"result\": false}\n{\"response\": \"\ud83e\udd16\ud83d\udcda\ud83d\udcbb\ud83c\udf89\ud83d\ude0a\ud83e\udd16\ud83d\udcda\", \"result\": false}\n{\"response\": \"\ud83e\udd16\ud83d\udcda\ud83d\udcbb\ud83c\udf89\ud83d\ude0a\ud83e\udd16\ud83d\udcda\ud83d\udcbb\ud83c\udf89\ud83d\ude0a\ud83e\udd16\ud83d\udcda\ud83d\udcbb\", \"result\": true}", "{\"response\": \"\ud83c\udf1e\ufe0f\ud83d\udc9b\ud83c\udf08\ud83d\ude0a\ud83d\udc4d\", \"result\": false}\n{\"response\": \"\ud83d\ude0a\ud83d\udc4d\ud83c\udffc\ud83d\udc9b\ud83d\ude0a\ud83d\udc4d\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}"]}
{"query": "disposable vape", "instruction": "answer in less than 20 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) < 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) < 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) < 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) < 20\n"], "testcases": ["{\"response\": \"I love playing basketball with my friends every day.\", \"result\": false}\n{\"response\": \"She has blue eyes, blue hair, and is a blue belt in karate.\", \"result\": false}\n{\"response\": \"I am going to the store to buy milk and eggs.\", \"result\": true}", "{\"response\": \"The sky is blue\", \"result\": true}\n{\"response\": \"The sky is blue and the sun is shining and the birds are singing\", \"result\": false}\n{\"response\": \"The weather is nice today it is sunny and warm\", \"result\": true}", "{\"response\": \"This is a very short response that fits in a single sentence\", \"result\": true}\n{\"response\": \"This is a very short response that fits in a single sentence with a few words\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the word limit and has many words and details\", \"result\": false}", "{\"response\": \"This is a short response.\", \"result\": true}\n{\"response\": \"This is a slightly longer response that is less than 20 words.\", \"result\": false}\n{\"response\": \"This is a very long response that exceeds 20 words, this is an example of a very long sentence that has many words that are used to test the length of the response.\", \"result\": false}"]}
{"query": "Can you parody songs?", "instruction": "Use the style of William Shakespeare's sonnets", "verifiers": ["def evaluate(response: str) -> bool: \n    keywords = ['thou', 'thee', 'thy','verily', 'hark', 'fair', 'doth','shalt','shall', 'doth', 'art']\n    response_lower = response.lower()\n    count = 0\n    for keyword in keywords:\n        count += response_lower.count(keyword)\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    return any(char in response for char in ['th', 'the', 'and', 'is', 'of', 'in', 'to']) and'shakespeare' in response.lower()\n", "def evaluate(response: str) -> bool: \n    key_shakespearean_words = ['thou', 'thee', 'thine', 'thy','verily', 'whence', 'wherefore', 'what', 'well', 'woe', 'where', 'when', 'why', 'wit', 'withal', 'who', 'whatsoever', 'which', 'whilom', 'while', 'wouldst', 'woe']\n    return any(word in response for word in key_shakespearean_words)\n", "def evaluate(response: str) -> bool: \n    keywords = [\"sonnet\", \"iambic pentameter\", \"thou\", \"thee\", \"verily\", \"fair\", \"doth\", \"shakespearean\"]\n    response = response.lower()\n    for keyword in keywords:\n        if keyword in response:\n            return True\n    return False\n"], "testcases": ["{\"response\": \"Fair maiden, thou dost ask a question most wise, that doth provoke my thoughts to ponder and reply.\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Thou dost inquire about the meaning of life, a question that hath puzzled philosophers for centuries.\", \"result\": true}", "{\"response\": \"In fair Verona, where the sun doth shine bright, the stars do twinkle with delight.\", \"result\": true}\n{\"response\": \"I went to the store and bought some milk and eggs.\", \"result\": false}\n{\"response\": \"The winds do howl and whip the trees with bitter might, as winter's icy grasp doth hold the night.\", \"result\": true}", "{\"response\": \"Thou seekest wisdom, fair reader, listen well\", \"result\": true}\n{\"response\": \"I am going to the store to buy some milk\", \"result\": false}\n{\"response\": \"Verily, 'tis a wondrous day to be alive\", \"result\": true}", "{\"response\": \"What light through yonder window breaks? It is the east and sunshine doth awake.\", \"result\": true}\n{\"response\": \"I love you, my dear, with all my heart\", \"result\": false}\n{\"response\": \"Methinks 'tis a lovely day, the sun doth shine brightly in the sky\", \"result\": true}"]}
{"query": "How does Mastek develop integrations using Microsoft Azure as a middleware?", "instruction": "Write a minimum of 3 bullet points, with each bullet point being exactly 5 words long", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if line.strip().startswith('\u2022 '):\n            words = line.strip().split(' ')\n            if len(words)!= 5 or len(words) < 3:\n                return False\n    return len(lines) >= 3\n", "def evaluate(response: str) -> bool: \n    words = response.replace('.', '').replace('?', '').split()\n    bullet_points = ''\n    found_bullet_points = 0\n    for i in range(len(words)):\n        if words[i] == 'and':\n            found_bullet_points += 1\n        elif words[i] == 'here' and found_bullet_points >= 3 and bullet_points.count('.') > 0:\n            if len(bullet_points) == 0 or len(bullet_points.split('.')[-1].split(' ')[-1])!= 5:\n                return False\n            else:\n                bullet_points = ''\n        elif len(words[i]) > 2 and words[i][0] == '.':\n            bullet_points += words[i] +''\n        elif len(bullet_points) > 0 and words[i]!= 'and' and len(bullet_points.split('.')[-1].split(' ')[-1]) == 5:\n            bullet_points += words[i] +''\n    if found_bullet_points < 3:\n        return False\n    if len(bullet_points) > 0:\n        if len(bullet_points.split('.')[-1].split(' ')[-1])!= 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    points = response.split('\u2022')\n    for point in points:\n        point = point.strip()\n        if len(point.split())!= 5:\n            return False\n    return len(points) >= 3\n", "def evaluate(response: str) -> bool: \n    words = response.split('. ')\n    return len(words) >= 3 and all(len(word.split()) == 5 for word in words)\n"], "testcases": ["{\"response\": \"\u2022 Learn new skills every day\\n\u2022 Practice is key to success\\n\u2022 Be patient and consistent\\n\u2022 Stay motivated and focused always\\n\u2022 Keep working towards your goals\\n\u2022 You will achieve your dreams\\n\u2022 Never give up on yourself\", \"result\": true}\n{\"response\": \"\u2022 Learn new skills every day\\n\u2022 Practice is key to success\\n\u2022 Be patient and consistent\", \"result\": false}\n{\"response\": \"\u2022 Learn new skills every day\\n\u2022 Practice is key to success\\n\u2022 Be patient and consistent\\n\u2022 Stay motivated and focused always\", \"result\": true}", "{\"response\": \"Here is a list with three bullet points.\\n\u2022 This is a test bullet point.\\n\u2022 This is another test bullet point.\\n\u2022 This is a final test bullet point.\", \"result\": true}\n{\"response\": \"This is a single sentence without bullet points.\", \"result\": false}\n{\"response\": \"Here are four bullet points, each exactly five words long.\\n\u2022 This is a very long bullet point.\\n\u2022 This is another very long bullet point.\\n\u2022 This is a final very long bullet point.\\n\u2022 This is a very very long bullet point.\", \"result\": true}", "{\"response\": \"\u2022 This is a test point \u2022 Another point to note \u2022 The third point stands \u2022 The fourth point is short\", \"result\": false}\n{\"response\": \"\u2022 The first point has 5 words \u2022 Another point to note here \u2022 This point is also correct \u2022 The point is very long\", \"result\": false}\n{\"response\": \"\u2022 This is a test point \u2022 Another point to note \u2022 The third point stands \u2022 The fourth point is short \u2022 The fifth point is good\", \"result\": true}", "{\"response\": \"\u2022 The sun is shining brightly today. \u2022 The birds are singing loudly now. \u2022 The flowers are blooming rapidly everywhere.\", \"result\": true}\n{\"response\": \"The sun is shining brightly today.\", \"result\": false}\n{\"response\": \"\u2022 The sun is shining brightly. \u2022 The birds are singing loudly. \u2022 The flowers are blooming rapidly everywhere.\", \"result\": false}"]}
{"query": "Recreate your answer but with context that the teachers are sending the students to the nurse's office (me)", "instruction": "Format as a letter", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.isalpha() \n", "def evaluate(response: str) -> bool: \n    return response.isalpha()\n", "def evaluate(response: str) -> bool: \n    return response.isalpha()\n", "def evaluate(response: str) -> bool: \n    return response.isalpha()\n"], "testcases": ["{\"response\": \"Dear sir or madam, thank you for your question. Your query has been duly noted. We will respond shortly. Sincerely, John Doe.\", \"result\": true}\n{\"response\": \"Here are some suggestions for your query: option 1, option 2, option 3.\", \"result\": false}\n{\"response\": \"Dear John, thank you for your question. However, I am unable to assist you at this time. Sincerely, Jane Doe.\", \"result\": true}", "{\"response\": \"Dear Sir,\\nThis is a test.\\nSincerely,\\nJohn Doe.\", \"result\": true}\n{\"response\": \"Hello!\\nThis is a test.\\nBest,\\nJohn Doe.\", \"result\": false}\n{\"response\": \"Dear Sir,\\nThis is a test.\\nThis is a longer test.\\nBest,\\nJohn Doe.\", \"result\": true}", "{\"response\": \"Dear User,\\n\\nThank you for your inquiry.\\nSincerely,\\nJohn\", \"result\": true}\n{\"response\": \"Dear User,\\n\\nThank you for your inquiry.\\nSincerely, John\", \"result\": false}\n{\"response\": \"Dear User,\\n\\nThank you for your inquiry.\\n\\nSincerely,\\nJohn\", \"result\": false}", "{\"response\": \"Dear Sir,\\n\\nSincerely, \\n[Your Name]\\n\\n\", \"result\": true}\n{\"response\": \"Sincerely, [Your Name]\\n\", \"result\": false}\n{\"response\": \"Dear Sir,\\n\\nBest regards,\\n[Your Name]\\n\\n\", \"result\": true}"]}
{"query": "explain how altitude could impact hydraulic operations", "instruction": "Use a neutral tone and avoid metaphors", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.isalpha() or char.isspace() or char in \"'-,.\" for char in response)\n", "def evaluate(response: str) -> bool: \n    # check for any metaphors by looking for words that have multiple possible meanings\n    metaphors = ['as', 'like','seem', 'appeared', 'become', 'becomes', 'was', 'were','seems','seen']\n    metaphor_count = sum(1 for word in response.lower().split() if word in metaphors)\n    \n    # check for words that could be used to convey a negative or positive emotion\n    emotive_words = ['great', 'terrible', 'wonderful', 'bad', 'good', 'awful', 'amazing', 'horrible']\n    emotive_word_count = sum(1 for word in response.lower().split() if word in emotive_words)\n    \n    # check if there are any instances of all capital letters\n    all_capital_letters = any(char.isupper() for char in response)\n    \n    # return True if the response is neutral and does not contain metaphors or emotive words, False otherwise\n    return metaphor_count == 0 and emotive_word_count == 0 and not all_capital_letters\n", "def evaluate(response: str) -> bool: \n    tone_words = ['positive', 'negative', 'great', 'good', 'bad', 'terrible', 'wonderful', 'terrible', 'awesome']\n    response = response.lower()\n    return not any(word in response for word in tone_words)\n", "def evaluate(response: str) -> bool: \n    words = response.lower().split()\n    neutral_tone_words = ['the', 'and', 'a', 'an', 'is', 'in', 'it', 'of', 'to', 'that', 'this', 'for', 'with', 'as', 'on', 'at', 'by', 'from']\n    has_metaphor = any(word in ['like', 'as'] for word in words)\n    return not has_metaphor and all(word in neutral_tone_words or word[-3:] in ['ing', 'ion'] for word in words)\n"], "testcases": ["{\"response\": \"The project was completed in 3 days.\", \"result\": true}\n{\"response\": \"This cake is the sunshine of my life.\", \"result\": false}\n{\"response\": \"The new policy will be implemented starting from next Monday.\", \"result\": true}", "{\"response\": \"The plan is to meet at 2 PM on Friday.\", \"result\": true}\n{\"response\": \"I am feeling happy and excited for the party tonight.\", \"result\": false}\n{\"response\": \"The new policy has been met with mixed reactions from employees.\", \"result\": false}", "{\"response\": \"This product is functional and meets its purpose.\", \"result\": true}\n{\"response\": \"The sunset was beautiful and breathtakingly stunning.\", \"result\": false}\n{\"response\": \"This service is efficient and effective.\", \"result\": true}", "{\"response\": \"I am going to the store to buy some milk.\", \"result\": true}\n{\"response\": \"My heart is a flame that burns with passion.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky.\", \"result\": false}"]}
{"query": "Can you provide some examples of design patterns in python", "instruction": "Write in a format that can be parsed by a python regex engine", "verifiers": ["def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match(\"^.*$\")\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match(\"^.*$\")\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match(\"^.*$\", response))\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r'^[^\\s]+(?:\\s+[^\\s]+)*$'\n    return bool(re.match(pattern, response))\n"], "testcases": ["{\"response\": \"The response was clear and concise.\", \"result\": true}\n{\"response\": \"I'm feeling great, thanks for asking!\", \"result\": false}\n{\"response\": \"The project has been delayed due to unforeseen circumstances.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"The quick fox jumps over the lazy dog\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy brown dog\", \"result\": false}", "{\"response\": \"This response contains a question about regex: What is the syntax for a regex pattern in Python?\", \"result\": true}\n{\"response\": \"This response is not a good example of a question: Can you provide a regex pattern that matches a URL?\", \"result\": false}\n{\"response\": \"This response uses a regex pattern to match a URL: The regex pattern for a URL is: https?:\\\\/\\\\/[a-zA-Z0-9._~:%&?]+\", \"result\": true}", "{\"response\": \"The sun is shining. The birds are singing. The sky is blue. The flowers are blooming. The trees are swaying.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"Hello world! This is a test string with 5 words: Hello world this is a test.\", \"result\": false}"]}
{"query": "what does \"\u6b21\u5143\u3092\u8d85\u8d8a\u3057\u305f\" mean and imply", "instruction": "Write in only 20 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 20\n"], "testcases": ["{\"response\": \"This is a very short response with only 5 words, it's really good.\", \"result\": true}\n{\"response\": \"This is a very short response with only 15 words, it's really good and interesting.\", \"result\": true}\n{\"response\": \"This is a very long response that contains more than 20 words, it's really good and interesting and so on.\", \"result\": false}", "{\"response\": \"This is a short response that is only 5 words long.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog and then he jumps again and again.\", \"result\": false}\n{\"response\": \"This response is written in 27 words and contains a sentence with more than 20 words.\", \"result\": false}", "{\"response\": \"This is a short response that uses 12 words.\", \"result\": true}\n{\"response\": \"This is a very long response that uses 25 words and some more\", \"result\": false}\n{\"response\": \"The cat is very sleepy and is sleeping on the couch.\", \"result\": true}", "{\"response\": \"Write your response here. The length is very short.\", \"result\": false}\n{\"response\": \"This is a short response with less than 20 words as requested.\", \"result\": true}\n{\"response\": \"This is a long response that exceeds the 20-word limit and does not follow the instruction.\", \"result\": false}"]}
{"query": "write a lyrics of an hiphop song with rhymes on street life", "instruction": "Use only 3-word phrases", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 3\n", "def evaluate(response: str) -> bool: \n    return all(len(x.split()) == 3 for x in response.split('. ')) or all(len(x.split()) == 3 for x in response.split('.'))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) % 3 == 0 and len(words) <= len(response)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"This is a test\", \"result\": true}\n{\"response\": \"This is a test sentence with four words\", \"result\": false}\n{\"response\": \"The quick brown fox\", \"result\": false}", "{\"response\": \"This is a test\", \"result\": true}\n{\"response\": \"I love programming languages\", \"result\": false}\n{\"response\": \"The quick brown fox\", \"result\": false}", "{\"response\": \"This is a test sentence that is only 2 words long but split into 3 words\", \"result\": false}\n{\"response\": \"This is a good instruction for a small project that requires a short answer\", \"result\": false}\n{\"response\": \"This is a good instruction for a small project to test the limits\", \"result\": true}", "{\"response\": \"The sun is shining brightly today.\", \"result\": true}\n{\"response\": \"I am going to the store.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in clear weather.\", \"result\": false}"]}
{"query": "Write me a TV drama scene for a one-hour medical drama that has a conflict between two members of the hospital staff.", "instruction": "Use only third person plural narration, must be exactly 10 sentences long.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 10 and all(word.startswith('They') or word.startswith('them') or word.startswith('Their') for word in response.split())<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function splits the response into individual sentences by splitting on '. '. It then checks if the total count of sentences is exactly 10. It also uses a generator expression to check if every word in the response starts with 'They', 'them', or 'Their', which is the typical third person plural narration style.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 10 and all(word.startswith('they') or word.startswith('them') or word.startswith('their') or word.startswith('themself') for word in response.split())\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 10 and response.replace('.', '')[-1].islower()\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 10 and response.count('they') >= 1 and response.count('them') >= 1 and response.count('their') >= 1 and response.count('their') <= response.count('they')\n"], "testcases": ["{\"response\": \"They recommend that you visit the store. They sell a variety of products. They offer great customer service. They are open seven days a week. They close at 8 pm. They have a wide selection of electronics. They have a team of experts. They can help you find what you need. They offer a warranty on all products. They are a trustworthy business. They have been in business for many years.\", \"result\": true}\n\n{\"response\": \"They are a great company. They have a lot to offer. They sell many products. They have a strong reputation.\", \"result\": false}\n\n{\"response\": \"They have a store in every state. They offer free shipping. They have a wide selection. They have a knowledgeable staff. They are a great choice. They are reliable. They have been in business for many years.\", \"result\": false}", "{\"response\": \"They live in a beautiful house. They love their friends and family. They have two adorable pets. They enjoy playing games together. They are always happy and kind. They help others in need. They are very smart and talented. They make good choices. They are good listeners. They are kind to everyone.\", \"result\": true}\n{\"response\": \"They are always happy and kind. They help others in need. They are very smart and talented.\", \"result\": false}\n{\"response\": \"They live in a beautiful house. They love their friends and family. They have two adorable pets. They enjoy playing games together. They are always happy and kind. They help others in need. They are very smart and talented. They make good choices. They are good listeners. They are kind to everyone. They also love traveling.\", \"result\": false}", "{\"response\": \"They eat breakfast. They eat lunch. They eat dinner. They sleep at night. They work during the day. They exercise regularly. They are happy. They have a nice house. They live in a good neighborhood. They have a big family.\", \"result\": true}\n{\"response\": \"I eat breakfast. I eat lunch. They eat dinner. They sleep at night. We work during the day. They exercise regularly. They are happy. They have a nice house. They live in a good neighborhood. They have a big family.\", \"result\": false}\n{\"response\": \"They eat breakfast. They eat lunch. They eat dinner. They sleep at night. They work during the day. They exercise regularly. They are happy. They have a nice house. They live in a good neighborhood. They have a small family.\", \"result\": false}", "{\"response\": \"They are going to the store. They will buy some milk. They are coming home. They will make some lunch. They are eating outside. They will take a nap. They are dreaming of a beach. They are watching a movie. They are laughing at a joke. They are feeling happy.\", \"result\": true}\n\n{\"response\": \"I like to eat ice cream. They will eat it too.\", \"result\": false}\n\n{\"response\": \"They are going to the store. They will buy some milk. They are coming home. They will make some lunch. They are eating outside. They will take a nap. They are dreaming of a beach. They are watching a movie. They are laughing at a joke. They are feeling happy. They are very satisfied.\", \"result\": false}"]}
{"query": "write the code from This part: write the rest remaining of the code: # # Define the GUI\nclass FlashcardGUI:\n def \\_\\_init\\_\\_(self, master):", "instruction": "implement all GUI elements using Python Tkinter.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'tkinter' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'tkinter' in response.lower()\n", "def evaluate(response: str) -> bool: \n    import tkinter as tk \n    return 'tkinter' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return \"Tkinter\" in response\n"], "testcases": ["{\"response\": \"The GUI is implemented using Python Tkinter for the buttons and labels.\", \"result\": true}\n{\"response\": \"The buttons are implemented using HTML and the labels are implemented using CSS.\", \"result\": false}\n{\"response\": \"All GUI elements are implemented using Python Tkinter, including buttons, labels and text entries.\", \"result\": true}", "{\"response\": \"This script will create a simple GUI using tkinter. tkinter is a Python library used for creating simple GUIs.\", \"result\": true}\n{\"response\": \"To create a GUI, you can use Java or C++ and its respective libraries.\", \"result\": false}\n{\"response\": \"The code below will create a basic GUI using tkinter with labels, buttons and text boxes. import tkinter as tk\", \"result\": true}", "{\"response\": \"This script will create a simple GUI using Tkinter: \\nimport tkinter as tk \\nscreen = tk.Tk()\\ntk.Label(screen, text='Hello World!').pack()\\n\", \"result\": true}\n{\"response\": \"I recommend using React for creating GUI applications.\", \"result\": false}\n{\"response\": \"This program will display a button when you click on it: \\nimport tkinter as tk \\ndef click_event():\\n\\tprint('Button clicked')\\nbutton = tk.Button(screen, text='Click me', command=click_event)\\nbutton.pack()\\n\", \"result\": true}", "{\"response\": \"The application was built using Tkinter, with a simple and intuitive interface.\", \"result\": true}\n{\"response\": \"The application was built using PyQt, with a complex and feature-rich interface.\", \"result\": false}\n{\"response\": \"The application was built using Tkinter, with a simple and intuitive interface and a GUI that includes buttons, labels, and text boxes.\", \"result\": true}"]}
{"query": "What sort of agent architecture do you think is most suitable for the Internet Shopping agent?", "instruction": "Use a format with three sections: 'What is the problem?', 'How to design?', and 'How to implement?'.", "verifiers": ["def evaluate(response: str) -> bool: \n    sections = ['What is the problem?', 'How to design?', 'How to implement?']\n    return all(section in response for section in sections)\n", "def evaluate(response: str) -> bool: \n    sections = ['What is the problem?', 'How to design?', 'How to implement?']\n    return all(section in response for section in sections)\n", "def evaluate(response: str) -> bool:    \n    sections = ['What is the problem?', 'How to design?', 'How to implement?']\n    return all(section in response for section in sections)\n", "def evaluate(response: str) -> bool: \n    sections = ['What is the problem?', 'How to design?', 'How to implement?']\n    return''.join(sections).upper() in response.upper()\n"], "testcases": ["{\"response\": \"What is the problem? The GUI application is not working properly. How to design? Use a user-friendly interface. How to implement? Use Tkinter library.\", \"result\": true}\n{\"response\": \"The application is designed to be user-friendly. It has a simple interface.\", \"result\": false}\n{\"response\": \"What is the problem? The application crashes when started. How to design? Use a robust architecture. How to implement? Use Python.\", \"result\": true}", "{\"response\": \"What is the problem? This is an issue with user authentication. How to design? We can use OAuth for authorization. How to implement? We will use Python Flask for the backend and Tkinter for the GUI.\", \"result\": true}\n{\"response\": \"The problem is that our application has too many users. The design should be more secure. We can use a more robust database.\", \"result\": false}\n{\"response\": \"What is the problem? Our application has a bug. How to design? We need to refactor the code. How to implement? We will use a version control system.\", \"result\": true}", "{\"response\": \"What is the problem? The system needs to be able to handle multiple users. How to design? It can be designed using a microservices architecture. How to implement? The implementation will involve writing Python code using the Tkinter library.\", \"result\": true}\n\n{\"response\": \"The problem with the system is that it is slow. The design should be based on a monolithic architecture. The implementation will involve using Java.\", \"result\": false}\n\n{\"response\": \"What is the problem? The system needs to be able to handle multiple users. How to design? It can be designed using a microservices architecture. How to implement? The implementation will involve writing Python code using the Tkinter library. But the code should be very long and convoluted.\", \"result\": false}", "{\"response\": \"What is the problem? The current system has many issues. How to design? We should use a new approach. How to implement? Use Python and Tkinter.\", \"result\": true}\n\n{\"response\": \"The system is not working. We should fix it. Here are the steps to do that: design the new system, then implement it.\", \"result\": false}\n\n{\"response\": \"What is the problem? The user interface is outdated. How to design? We can use a new GUI framework. How to implement? We will use Python and Tkinter. To display the results we will use a Label widget.\", \"result\": true}"]}
{"query": "Generate 48 podcast episode topics about self-care", "instruction": "List each topic in a numbered list with exactly 5 words and include a non-alphanumeric character after every 5th word", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].isalnum():\n            count += 1\n        elif words[i].isalpha() or words[i].isdigit():\n            if (count % 5) == 0 and i!= 0:\n                return False\n            count = 1\n        else:\n            if i!= 0 and not (count % 5) == 0 and not words[i-1].isalnum():\n                return False\n            count = 1\n    if count!= 1 and count % 5!= 0:\n        return False\n    if len(words) == 1 and words[0] == '':\n        return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    for i in range(len(words) - 4): \n        if not (i % 5 == 0 and i + 4 < len(words) and words[i].isalnum() and words[i + 4].isalnum() and words[i + 1] in ',.!?:;\\'\"\\/'):\n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) % 6!= 0:\n        return False\n    for i in range(len(words)):\n        if i % 5 == 4 and not words[i].isalnum():\n            return False\n        if len(words[i]) > 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) == 48: \n        for i in range(0, len(words), 5): \n            if len(' '.join(words[i:i+5]))!= 5 or words[i+5] not in \"!,.;:\": \n                return False \n    return True \n"], "testcases": ["{\"response\": \"1. What is the problem? How to?2. How to design?,3. How to implement?\", \"result\": false}\n{\"response\": \"1. What is the main  problem to solve? How to fix?2. How to  design and implement?3. How to write  good code?\", \"result\": true}\n{\"response\": \"1. What is the main  problem to solve2. How to fix and design3. How to write  good code?\", \"result\": false}", "{\"response\": \"1. This is a good format., 2. Easy to read and understand., 3. Use a comma after each line.\", \"result\": true}\n{\"response\": \"1. The format is easy to read., 2. However, it can be confusing if not done correctly. The format should be consistent throughout the document.\", \"result\": false}\n{\"response\": \"1. It's a good format., 2. But what about the implementation details?, 3. Can we include an example of how it works in the code?\", \"result\": true}", "{\"response\": \"1. How to make a cake,?2. With the correct recipe. 3. And a little patience. 4. To make it perfect.\", \"result\": true}\n{\"response\": \"1. You can eat a sandwich. 2. It's made of bread. 3. And various fillings such as.\", \"result\": false}\n{\"response\": \"1. I love to eat pizza,?2. It's my favorite food. 3. It's made of cheese. 4. And various toppings such as\", \"result\": false}", "{\"response\": \"1. What is the problem?!\\n2. How to design!.\\n3. How to implement?\", \"result\": true}\n{\"response\": \"1. What is the problem. 2. How to design? 3. How to implement\", \"result\": false}\n{\"response\": \"1. What is the problem! 2. How to design!! 3. How to impl\", \"result\": false}"]}
{"query": "Describe the major difference in gene structure between prokaryotes and eukaryotes.", "instruction": "Write in sentences with exactly 10 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence and len(sentence.split())!= 10:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n"], "testcases": ["{\"response\": \"The cat is sleeping on the soft warm cozy blanket.\", \"result\": true}\n{\"response\": \"The dog is running quickly across the green open field.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky.\", \"result\": true}", "{\"response\": \"The user should use this new software to increase productivity.\", \"result\": true}\n{\"response\": \"This new project will be completed on time and within budget.\", \"result\": false}\n{\"response\": \"The team will use agile methodologies to develop the new feature.\", \"result\": false}", "{\"response\": \"This is a test response with exactly 10 words.\", \"result\": true}\n{\"response\": \"This is a test response with exactly 11 words.\", \"result\": false}\n{\"response\": \"This is a test response with exactly 9 words.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog every day\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog jumps very high today\", \"result\": false}"]}
{"query": "How to use SDV CTGAN to add additional rows to an existing postgres multi-table database", "instruction": "Write the response in Markdown syntax", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('### ') or response.startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return all(\n        char in '!#*+-._:()~`> <|^{}[]\"' \n        for char in response\n    )\n", "def evaluate(response: str) -> bool: \n    if \"### \" in response or \"## \" in response or \"** \" in response or \"* \" in response: \n        return True\n    else: \n        return False\n", "def evaluate(response: str) -> bool: \n    if '###' in response and '##' in response and '###' not in response.replace('###', '##'):\n        return False\n    elif '###' in response and response.count('###') == response.count('##'):\n        return True\n    elif '###' in response and response.count('###') < response.count('##'):\n        return False\n    else:\n        return True\n"], "testcases": ["{\"response\": \"### This is a header\\nThis is a paragraph\", \"result\": true}\n{\"response\": \"This is not a header\", \"result\": false}\n{\"response\": \"# This is a header and here is some more text\", \"result\": true}", "{\"response\": \"1. Item 1! *this is a list item* 2. Item 2! *this is a list item* 3. Item 3! *this is a list item* 4. Item 4! *this is a list item* 5. Item 5! *this is a list item*\", \"result\": true}\n{\"response\": \"1. Item 1! this is a list item 2. Item 2! this is a list item 3. Item 3! this is a list item 4. Item 4! this is a list item 5. Item 5! this is a list item 6. Item 6!\", \"result\": false}\n{\"response\": \"1. Item 1! *this is a list item* 2. Item 2! this is a list item 3. Item 3! this is a list item 4. Item 4! this is a list item 5. Item 5! *this is a list item*\", \"result\": false}", "{\"response\": \"### Heading\\nThis is a sample response in Markdown syntax.\\nIt should pass the evaluation.\", \"result\": true}\n{\"response\": \"This is a sample response in plain text. It should not pass the evaluation.\", \"result\": false}\n{\"response\": \"* Heading \\nThis is a sample response in Markdown syntax with asterisks.\\nIt should pass the evaluation.\", \"result\": true}", "{\"response\": \"### What is the problem? \\n # How to design? \\n ## How to implement? \", \"result\": true}\n{\"response\": \"This is not a Markdown formatted text\", \"result\": false}\n{\"response\": \"**What is the problem?**\\n# How to design?\\n## How to implement?\\n### How to test?\", \"result\": true}"]}
{"query": "give me site copy for a website called American Meadows that has been supplying gardeners with the best wildflower seeds, perennials, bulbs and how-to information since 1981", "instruction": "Use exactly 5 words per sentence", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 1 and len(response.split()) / len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) % 5 == 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(sentence.split()) == 5 for sentence in response.split('. '))<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"The sun is shining brightly today.\", \"result\": false}\n{\"response\": \"I love playing outside on weekends.\", \"result\": true}\n{\"response\": \"The weather is warm and sunny today and it is perfect for a picnic.\", \"result\": false}", "{\"response\": \"The tutorial will cover game development models and testing methods.\", \"result\": false}\n{\"response\": \"The tutorial will cover game development models and testing methods very well.\", \"result\": false}\n{\"response\": \"The tutorial will cover game development models and testing methods for beginners.\", \"result\": true}", "{\"response\": \"The sun is shining brightly in Paris. The Eiffel Tower is beautiful. The city is very nice.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in Paris.\", \"result\": false}\n{\"response\": \"The sun is shining. The Eiffel Tower is beautiful The city is very nice. This is a lovely day today.\", \"result\": false}", "{\"response\": \"The dog is very happy today. The cat is also happy.\", \"result\": true}\n{\"response\": \"The dog is very happy today and wants to go outside.\", \"result\": false}\n{\"response\": \"The dog is happy The dog is very happy today. The dog is very happy today. The dog is very happy today. The dog is very happy today.\", \"result\": false}"]}
{"query": "How do ads follow me from my phone to my computer?", "instruction": "Use only words that have a length of exactly 5 characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) == 5 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word)!= 5: \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 5 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 5 for word in response.split())\n"], "testcases": ["{\"response\": \"House Apple Honey Flags Dance\", \"result\": true}\n{\"response\": \"Hello Beautiful People\", \"result\": false}\n{\"response\": \"House Apple Honey House Flags\", \"result\": false}", "{\"response\": \"House is my home space\", \"result\": true}\n{\"response\": \"This is a test sentence\", \"result\": false}\n{\"response\": \"I want to go dance fast\", \"result\": false}", "{\"response\": \"House cats\", \"result\": true}\n{\"response\": \"House cat and dog\", \"result\": false}\n{\"response\": \"House House House House House\", \"result\": false}", "{\"response\": \"House code stamp\", \"result\": true}\n{\"response\": \"Apple Java Banks\", \"result\": true}\n{\"response\": \"I like coffee\", \"result\": false}"]}
{"query": "you and", "instruction": "write in palindrome sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response == response[::-1]", "def evaluate(response: str) -> bool: \n    return response == response[::-1]\n", "def evaluate(response: str) -> bool: \n    return response == response[::-1] \n", "def evaluate(response: str) -> bool: \n    return response == response[::-1]\n"], "testcases": ["{\"response\": \"Madam I'm Adam\", \"result\": true}\n{\"response\": \"The eyes see not, nor do they see themselves\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}", "{\"response\": \"Madam\", \"result\": true}\n{\"response\": \"Hello\", \"result\": false}\n{\"response\": \"A man, a plan, a canal, Panama!\", \"result\": true}", "{\"response\": \"Madam\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"A man a plan a canal Panama\", \"result\": true}", "{\"response\": \"A man, a plan, a canal, Panama!\", \"result\": true}\n{\"response\": \"I love to eat a sandwich for lunch.\", \"result\": false}\n{\"response\": \"Was it a car or a cat I saw?\", \"result\": true}"]}
{"query": "Is it good to have only one database table for users?", "instruction": "Use only 7 words exactly", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7\n"], "testcases": ["{\"response\": \"I like to eat pizza in Paris.\", \"result\": true}\n{\"response\": \"I like to eat pizza and pasta and chips.\", \"result\": false}\n{\"response\": \"I like to eat pizza and ice cream.\", \"result\": false}", "{\"response\": \"The cat is very happy today.\", \"result\": true}\n{\"response\": \"The dog is running very fast outside.\", \"result\": false}\n{\"response\": \"The sun is shining very brightly today.\", \"result\": false}", "{\"response\": \"This is a test sentence with 7 words.\", \"result\": true}\n{\"response\": \"This is a test sentence with more than 7 words.\", \"result\": false}\n{\"response\": \"Hello world\", \"result\": false}", "{\"response\": \"This is a simple sentence with seven words exactly.\", \"result\": true}\n{\"response\": \"This is a sentence with six words exactly.\", \"result\": false}\n{\"response\": \"This is a sentence with eight words exactly.\", \"result\": false}"]}
{"query": "Generate a plan for #1 This plan uses this script effectively. Include steps in excel, and writing the script, and finally execution in prod", "instruction": "Use exactly 7 bullet points with a maximum of 5 words per point", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace('-','').replace(' ', '')\n    points = response.split('. ')\n    return len(points) == 7 and all(len(point.split()) <= 5 for point in points)\n", "def evaluate(response: str) -> bool: \n    response = response.replace('.', '')\n    words = response.split(' and ')\n    return all(1 <= len(item.split()) <= 5 and item.startswith('\u2022') and item.endswith(' ') for item in words) and len(words) == 7\n", "def evaluate(response: str) -> bool: \n    max_words = 5\n    max_points = 7\n    points = response.count('.') + response.count('\u2022')\n    words_in_points = sum(1 for char in response for i, word in enumerate(response.split()) if (char in ['.', '\u2022'] and i < len(response.split()) - 1))\n    return points == max_points and max(1 for word in response.split() if word) <= max_words\n", "def evaluate(response: str) -> bool: \n    points = response.split('. ')\n    return len(points) == 7 and all(len(point.split()) <= 5 for point in points)\n"], "testcases": ["{\"response\": \"This is a list of items. \u2022 This is a list of items. \u2022 The items are many. \u2022 And very useful. \u2022 For various tasks. \u2022 Such as cleaning. \u2022 And cooking.\", \"result\": true}\n{\"response\": \"This is a list of items. \u2022 This is a very long sentence that has more than five words and is not useful.\", \"result\": false}\n{\"response\": \"This is a list of items. \u2022 This is a short list of items. \u2022 The items are many. \u2022 And useful.\", \"result\": false}", "{\"response\": \"\u2022 This is a great tip \u2022 It can be helpful \u2022 Sometimes it's easy to use \u2022 This works very well \u2022 It's very fast \u2022 It's also very safe \u2022 And easy to understand\", \"result\": true}\n{\"response\": \"\u2022 This is a very good idea \u2022 It can be very helpful \u2022 It's easy to use and safe \u2022 And very easy to understand \u2022\", \"result\": false}\n{\"response\": \"\u2022 This is a great tip \u2022 It can be helpful \u2022 It's very fast \u2022 And very safe \u2022 It's easy to use \u2022 And very easy to understand \u2022 And it's also very useful\", \"result\": false}", "{\"response\": \"\u2022 Apple is a popular fruit. \u2022 Banana is yellow. \u2022 Cat is animal. \u2022 Dog is pet. \u2022 Elephant is big. \u2022 Fish is wet. \u2022 Game is fun. \u2022 House is home.\", \"result\": true}\n{\"response\": \"\u2022 Apple is a big fruit. \u2022 Banana is yellow. \u2022 Cat is animal. \u2022 Dog is pet. \u2022 Elephant is big. \u2022 Fish is wet. Game is fun.\", \"result\": false}\n{\"response\": \"\u2022 Apple is a big fruit. \u2022 Banana is yellow. \u2022 Cat is animal. \u2022 Dog is pet. \u2022 Elephant is big. \u2022 Fish is wet. \u2022 Game is fun and exciting.\", \"result\": false}", "{\"response\": \"This is a test \u2022 This is a longer sentence \u2022 This is a short sentence \u2022 This is a test \u2022 This is another sentence \u2022 Test number 1 \u2022 This is another short test\", \"result\": true}\n{\"response\": \"This is a test \u2022 This is a sentence that is longer than 5 words \u2022 This is a short sentence \u2022 This is a test \u2022 Test number 1 \u2022 This is another sentence \u2022 This is another short test and another\", \"result\": false}\n{\"response\": \"Test one \u2022 Test two \u2022 Test three \u2022 Test four \u2022 Test five \u2022 Test six \u2022 Test seven\", \"result\": true}"]}
{"query": "We're hosting an event on habit coaching and behavioral science. What would be interesting questions for a Q&A?", "instruction": "answer in a single table with 2 columns", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'table' in response and '2 columns' in response\n", "def evaluate(response: str) -> bool: \n    return 'table' in response and 'columns' in response and '2' in response\n", "def evaluate(response: str) -> bool: \n    return \"table\" in response and \"columns\" in response and \"2\" in response\n", "def evaluate(response: str) -> bool: \n    return '<table' in response and '<td' in response and response.count('<table') == 1 and response.count('<td') == 2\n"], "testcases": ["{\"response\": \"The table below shows the options:\\n|Option 1|Option 2|\", \"result\": true}\n{\"response\": \"Here is the list of options:\\n1. Option 1\\n2. Option 2\", \"result\": false}\n{\"response\": \"The table below shows the options:\\n|Option 1|Option 2\\n|Option 3|Option 4\", \"result\": true}", "{\"response\": \"Product\\tPrice\\nApple\\t1.00\\nBanana\\t0.50\", \"result\": true}\n{\"response\": \"This is a response with two columns. Product: Apple, Price: 1.00 and Product: Banana, Price: 0.50\", \"result\": false}\n{\"response\": \"Product: Apple\\nPrice: 1.00\\nProduct: Banana\\nPrice: 0.50\\nProduct: Orange\\nPrice: 0.75\", \"result\": false}", "{\"response\": \"|| Column1 | Column2 || 1 | Value1 || 2 | Value2 ||\", \"result\": true}\n{\"response\": \"Here are some results:\\nColumn1 | Value1\\nColumn2 | Value2\\nColumn3 | Value3\", \"result\": false}\n{\"response\": \"|| Column1 | Column2 || 1 | Value1 || 2 | Value2 || 3 | Value3 ||\", \"result\": true}", "{\"response\": \"<table><tr><td>Header 1</td><td>Header 2</td></tr></table>\", \"result\": true}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards. Table with two columns: <table><tr><td>Column 1</td><td>Column 2</td></tr></table>\", \"result\": false}\n{\"response\": \"<table><tr><td>Row 1</td><td>Row 1</td></tr><tr><td>Row 2</td><td>Row 2</td></tr><tr><td>Row 3</td><td>Row 3</td></tr><tr><td>Row 4</td><td>Row 4</td></tr><tr><td>Row 5</td><td>Row 5</td></tr><tr><td>Row 6</td><td>Row 6</td></tr><tr><td>Row 7</td><td>Row 7</td></tr><tr><td>Row 8</td><td>Row 8</td></tr><tr><td>Row 9</td><td>Row 9</td></tr><tr><td>Row 10</td><td>Row 10</td></tr></table>\", \"result\": false}"]}
{"query": "Can you give me a tutorial on how to program a city builder mobile game using javascript", "instruction": "Use  exactly 9 steps and use no contractions", "verifiers": ["def evaluate(response: str) -> bool: \n    return (len(response.split()) == 9) and ('n\\'t' not in response) and (\"'s\" not in response)\n", "def evaluate(response: str) -> bool: \n    count = 0\n    count_contractions = 0\n    for char in response:\n        if char.upper() == 'S':\n            count += 1\n        if char.upper() in ['LL', 'RE', 'VE', 'D', 'LLS']:\n            count_contractions += 1\n    return count == 9 and count_contractions == 0\n", "def evaluate(response: str) -> bool: \n    count = 0\n    contractions = ['can\\'t', 'won\\'t','shan\\'t', 'isn\\'t', 'aren\\'t', 'wasn\\'t', 'weren\\'t', 'don\\'t', 'haven\\'t', 'hasn\\'t', 'hadn\\'t', 'needn\\'t', 'oughtn\\'t','mustn\\'t','shouldn\\'t']\n    for char in response:\n        if char.upper() == 'S':\n            count += 1\n    return count == 9 and not any(word in response.upper() for word in contractions)\n", "def evaluate(response: str) -> bool: \n    count = 0\n    count_ = 0\n    for char in response:\n        if char.upper() == 'N':\n            count += 1\n        if char.upper() == \"'\":\n            count_ += 1\n    return count == 9 and count_ == 0\n"], "testcases": ["{\"response\": \"Here are the steps: step one, step two, step three, step four, step five, step six, step seven, step eight, step nine\", \"result\": true}\n{\"response\": \"I don't have the correct answer.\", \"result\": false}\n{\"response\": \"Here are the steps: step one, step two, step three, step four, step five, step six, step seven, step eight, step nine, and finally step ten\", \"result\": false}", "{\"response\": \"Step 1. Do this. Step 2. Do that. Step 3. Step 4. Step 5. Step 6. Step 7. Step 8. Step 9. Step 10.\", \"result\": false}\n{\"response\": \"Step 1. I do this. Step 2. Do that. Step 3. Step 4. Step 5. Step 6. Step 7. Step 8. Step 9.\", \"result\": false}\n{\"response\": \"Step 1. Do this. Step 2. Do that. Step 3. Step 4. Step 5. Step 6. Step 7. Step 8. Step 9.\", \"result\": true}", "{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. Step 5: This is the fifth step. Step 6: This is the sixth step. Step 7: This is the seventh step. Step 8: This is the eighth step. Step 9: This is the ninth step.\", \"result\": true}\n{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. Step 5: This is the fifth step. Step 6: This is the sixth step. Step 7: This is the seventh step. Step 8: This is the eighth step. I will complete the ninth step later.\", \"result\": false}\n{\"response\": \"Step 1: This is the first step. Step 2: This is the second step. Step 3: This is the third step. Step 4: This is the fourth step. Step 5: This is the fifth step. Step 6: This is the sixth step. Step 7: This is the seventh step. Step 8: This is the eighth step. Step 9: This is the ninth step. And this is a tenth step that I didn't mean to include.\", \"result\": false}", "{\"response\": \"First step, second step.  Third step. Fourth step.  Fifth step. Sixth step. Seventh step. Eighth step. Ninth step. Tenth step.\", \"result\": false}\n{\"response\": \"I will do this, then I will do that.\", \"result\": false}\n{\"response\": \"First step. Second step.  Third step. Fourth step.  Fifth step. Sixth step. Seventh step. Eighth step. Ninth step.  Ten step.\", \"result\": true}"]}
