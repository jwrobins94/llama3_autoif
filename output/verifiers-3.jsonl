{"query": "I want to make a list (or if there's an existing list I want that) of facial expressions/emotions, so I can classify all the emotions you might see in a photograph of a person.", "instruction": "In 5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\u2022' in response and response.count('\u2022') == 4 and not '\u2022' in response[-1]<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response.count('\\u2022') == 4 or (response.startswith('\\u2022') and response.endswith('\\u2022') and response.count('\\u2022') == 3)\n", "def evaluate(response: str) -> bool: \n    return all(char in response for char in ['\\n', '.']) and response.count('\\n') + 1 == 5\n", "def evaluate(response: str) -> bool: \n    return response.startswith('Here are 5 bullet points:') or response.startswith('\u2022 \u2022 \u2022 \u2022 \u2022')\n"], "testcases": ["{\"response\": \"\u2022 Point 1: This is the first point\\n\u2022 Point 2: This is the second point\\n\u2022 Point 3: This is the third point\\n\u2022 Point 4: This is the fourth point\\n\u2022 Point 5: This is the fifth point\", \"result\": true}\n{\"response\": \"Point 1: This is the first point\\n\u2022 Point 2: This is the second point\\n\u2022 Point 3: This is the third point\\n\u2022 Point 4: This is the fourth point\", \"result\": false}\n{\"response\": \"\u2022 Point 1: This is the first point\\n\u2022 Point 2: This is the second point\\n\u2022 Point 3: This is the third point\\n\u2022 Point 4: This is the fourth point\\n\u2022 Point 5: This is the fifth point\\n\u2022 Point 6: This is the sixth point\", \"result\": false}", "{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\", \"result\": true}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\", \"result\": false}", "{\"response\": \"In 5 bullet points:\\n\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"There are five bullet points in this response:\", \"result\": false}\n{\"response\": \"Here are the five key points you requested:\\n Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}", "{\"response\": \"Here are 5 bullet points:\\n\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\", \"result\": true}\n{\"response\": \"Here are 4 bullet points:\\n\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\", \"result\": false}\n{\"response\": \"Here are 6 bullet points:\\n\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\\n\", \"result\": false}"]}
{"query": "Who owns CR Bard Inc?", "instruction": "Write in title case", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.istitle()\n", "def evaluate(response: str) -> bool: \n    return response.istitle()\n", "def evaluate(response: str) -> bool: \n    return response == response.title()\n", "def evaluate(response: str) -> bool: \n    return response == response.title()\n"], "testcases": ["{\"response\": \"This Is A Great Day\", \"result\": true}\n{\"response\": \"this is a normal sentence\", \"result\": false}\n{\"response\": \"I AM SHOUTING IN UPPERCASE\", \"result\": false}", "{\"response\": \"This Is A Title Case Response.\", \"result\": true}\n{\"response\": \"tHis iS noT a TiTle cAsE rEsPoNse\", \"result\": false}\n{\"response\": \"TITLE CASE RESPONSE IS NOT FOLLOWED HERE\", \"result\": false}", "{\"response\": \"this is A Test In title case.\", \"result\": true}\n{\"response\": \"This is not in title case\", \"result\": false}\n{\"response\": \"tHis Is Another tItle CaSe\", \"result\": true}", "{\"response\": \"this is a sample response\", \"result\": true}\n{\"response\": \"tHis Is a SaMe rEsPoNse\", \"result\": false}\n{\"response\": \"i Will Change this To Title Case\", \"result\": true}"]}
{"query": "how do i use web3 to connect to a binance smart contract?", "instruction": "answer in exactly 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog and the cat. The sun is shining brightly in the clear blue sky.\", \"result\": true}\n{\"response\": \"The sun is shining in the clear blue sky and the birds are singing their sweet melodies.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog and the cat and the sun is shining in the clear blue sky.\", \"result\": false}", "{\"response\": \"This is a sentence that is only 10 words. It is a short sentence and does not meet the requirement.\", \"result\": false}\n{\"response\": \"This is a sentence that is exactly 50 words. It is a longer sentence that meets the requirement because it has the exact number of words.\", \"result\": true}\n{\"response\": \"This is a very long sentence that has more than 50 words and does not meet the requirement.\", \"result\": false}", "{\"response\": \"This is a sentence that consists of 50 words because it has exactly 50 words and meets the requirements of the task that was assigned to me and I am glad that I could assist you with this task as requested.\", \"result\": true}\n{\"response\": \"This is a sentence with 25 words and is much shorter than the required 50 words.\", \"result\": false}\n{\"response\": \"This is a long sentence that contains 75 words, which exceeds the required 50 words and therefore does not meet the requirements of the task.\", \"result\": false}", "{\"response\": \"This is a response with exactly 50 words to test the instruction.\", \"result\": true}\n{\"response\": \"This response is too short with only 25 words to test the instruction.\", \"result\": false}\n{\"response\": \"This response is too long with 75 words to test the instruction.\", \"result\": false}"]}
{"query": "Can you suggest some good e-governance initiatives in tribal districct of india by district administration", "instruction": "Limit your answer to 5 key points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    return 'point' in response and len(response.split('point')[1]) <= 6 and '1.' in response.split('point')[1]\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 5\n"], "testcases": ["{\"response\": \"\u2022 The response is limited to 5 key points.\\n\u2022 Each point is on a new line.\\n\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\", \"result\": true}\n{\"response\": \"\u2022 The response is limited to 5 key points.\\n\u2022 Each point is on a new line.\\n\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\\n\u2022 This is the seventh point.\\n\u2022 This is the eighth point.\\n\u2022 This is the ninth point.\\n\u2022 This is the tenth point.\", \"result\": false}\n{\"response\": \"There are multiple ways to answer this question.\", \"result\": false}", "{\"response\": \"\u2022 This is the first point. \u2022 This is the second point. \u2022 This is the third point. \u2022 This is the fourth point. \u2022 This is the fifth point.\", \"result\": true}\n{\"response\": \"\u2022 This is the first point. \u2022 This is the second point. \u2022 This is the third point. \u2022 This is the fourth point. This is the fifth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point. \u2022 This is the second point. This is the third point. \u2022 This is the fourth point. \u2022 This is the fifth point.\", \"result\": true}", "{\"response\": \"Here are the main points:\\n1. Point one.\\n2. Point two.\\n3. Point three.\\n4. Point four.\\n5. Point five.\", \"result\": true}\n{\"response\": \"Here are the main points:\\n1. Point one.\\n2. Point two.\\n3. Point three.\\n4. Point four.\\n5. Point five.\\n6. Point six.\", \"result\": false}\n{\"response\": \"Here are the main points: 1. Point one. 2. Point two. 3. Point three. 4. Point four. 5. Point five.\", \"result\": false}", "{\"response\": \"Here are 4 bullet points: \u2022 point1 \u2022 point2 \u2022 point3 \u2022 point4\", \"result\": false}\n{\"response\": \"Here are 5 bullet points: \u2022 point1 \u2022 point2 \u2022 point3 \u2022 point4 \u2022 point5\", \"result\": true}\n{\"response\": \"Here are 3 bullet points: \u2022 point1 \u2022 point2 \u2022 point3\", \"result\": false}"]}
{"query": "In which scenario, why Lead time is decreasing, but Price is still increasing in semiconductor industry?", "instruction": "Use no more than 2 sentences per point.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    return all(len(sentence.split()) <= 2 for sentence in sentences)\n"], "testcases": ["{\"response\": \"The first point. The second point. The third point.\", \"result\": true}\n{\"response\": \"The first point. The second point. The third point. The fourth point. The fifth point.\", \"result\": false}\n{\"response\": \"The first point.\", \"result\": true}", "{\"response\": \"Firstly, this is a good idea. It will help us with our work. Secondly, we should also consider the cost.\", \"result\": false}\n{\"response\": \"This is a good idea. It will help us with our work.\", \"result\": true}\n{\"response\": \"This is a good idea. It will help us with our work. It will also save us time. It will also help us with our productivity. It will also help us with our efficiency.\", \"result\": false}", "{\"response\": \"This is a short response. It meets the requirement.\", \"result\": true}\n{\"response\": \"This is a short response It meets the requirement and also some more information.\", \"result\": false}\n{\"response\": \"This is a short response. This response is too long and does not meet the requirement.\", \"result\": false}", "{\"response\": \"This is the first point. This is the second sentence of the first point.\", \"result\": true}\n{\"response\": \"This is the first point. This is the second sentence of the first point. This is the third sentence of the first point.\", \"result\": false}\n{\"response\": \"This is the first point. This is the second sentence of the first point. This is the third sentence of the first point. This is the first point. This is the second sentence of the second point.\", \"result\": false}"]}
{"query": "Who is abraham lincoln in a poem", "instruction": "Write in a single line with a colon at the end", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip() and response.strip()[-1] == ':' \n", "def evaluate(response: str) -> bool: \n    return response.count(':') == 1 and '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return response.strip() and response[-1] == ':' and '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return response.count(':') == 1 and all(c!= '\\n' for c in response)\n"], "testcases": ["{\"response\": \"This is a test case response: \", \"result\": true}\n{\"response\": \"This is a test case response with a second sentence but still a colon at the end: \", \"result\": true}\n{\"response\": \"This is a test case response with a second sentence but a period at the end.\", \"result\": false}", "{\"response\": \"The company's mission is to provide high-quality software solutions.\", \"result\": true}\n{\"response\": \"The company's mission is to provide high-quality software solutions: with a focus on innovation.\", \"result\": false}\n{\"response\": \"The company's mission is to provide high-quality software solutions: with a focus on innovation, user experience, and customer satisfaction: this is our goal.\", \"result\": false}", "{\"response\": \"This is the response.\", \"result\": true}\n{\"response\": \"This is a longer response with a colon at the end: And this is the next part.\", \"result\": false}\n{\"response\": \"This is a very long response with multiple lines and a colon at the end: And this is the next part of the long response.\", \"result\": false}", "{\"response\": \"This is a single line with a colon at the end.\", \"result\": true}\n{\"response\": \"This is a multiple line response.\\n\\nThis response does not end with a colon.\", \"result\": false}\n{\"response\": \"This is another single line response: this is the second part of the answer.\", \"result\": true}"]}
{"query": "what is subcategorization?", "instruction": "answer in exactly 3 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or response.count(' ') * 2 + 1 == response.count('.') + response.count('\\n')<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') in [0, 3]\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or response.count('...') == 2 or response.count('?') == 2 \n"], "testcases": ["{\"response\": \"The company has offices in multiple cities around the world. Each office has a manager who oversees the team. The company provides excellent opportunities for professional growth.\", \"result\": true}\n{\"response\": \"The company has offices in multiple cities around the world. Each office has a manager who oversees the team.\", \"result\": false}\n{\"response\": \"The company has offices in multiple cities around the world. Each office has a manager who oversees the team. The company provides excellent opportunities for professional growth. This is a great place to work.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence.\", \"result\": false}", "{\"response\": \"The quick brown fox jumped over the lazy dog. It was a beautiful day outside. The sun was shining brightly in the sky.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog. The sun was shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The quick brown fox jumped over the lazy dog. It was a beautiful day outside. The sun was shining brightly in the sky. The weather was nice too.\", \"result\": false}", "{\"response\": \"You should bring a lot of clothes. You should bring a jacket. You should bring some snacks.\", \"result\": true}\n{\"response\": \"You should bring clothes. It's going to be cold outside. Bring a coat and some gloves.\", \"result\": true}\n{\"response\": \"You should bring clothes. It's going to be hot outside.\", \"result\": false}"]}
{"query": "Write my a python function that takes a list of job instances which have a job\\_type property, and then groups the jobs by job\\_type breaking the groups into no larger than size K.", "instruction": "Assume the input list contains only non-negative integers.", "verifiers": ["def evaluate(response: str) -> bool: \n    import re\n    import ast\n    return (bool(re.search(r'input list\\s+contains\\s+only\\s+non-negative\\s+integers', response)) \n            and len(ast.literal_eval(response)) > 0 \n            and all(type(x) == int and x >= 0 for x in ast.literal_eval(response)))\n", "def evaluate(response: str) -> bool: \n    response = response.replace('.', '') # remove dots\n    response = response.replace(',', '') # remove commas\n    return 'assume the input list contains only non-negative integers' in response and all(c in '0123456789' for c in response.replace('list contains only non-negative integers', '')) \n", "def evaluate(response: str) -> bool: \n    return response.startswith('def ') and 'job_instances' in response and 'job_type' in response and 'break' in response and 'K' in response and 'integers' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('def ') and 'job_type' in response and 'breaks' in response and 'integers' in response and 'non-negative' in response\n"], "testcases": ["{\"response\": \"input list [1, 2, 3, 4, 5] contains only non-negative integers\", \"result\": true}\n{\"response\": \"input list [1, 2, -3, 4, 5] contains only non-negative integers\", \"result\": false}\n{\"response\": \"input list [1.5, 2, 3, 4, 5] contains only non-negative integers\", \"result\": false}", "{\"response\": \"The input list contains only integers such as 10, 20, and 30.\", \"result\": false}\n{\"response\": \"The input list contains non-negative integers like 5, 0, and 1.\", \"result\": true}\n{\"response\": \"The input list contains negative integers like -5, -10, and -15.\", \"result\": false}", "{\"response\": \"Here are three integers: 1, 2, 3\", \"result\": true}\n{\"response\": \"Here are three non-negative integers: 1, -2, 3\", \"result\": false}\n{\"response\": \"Here are three negative integers: -1, -2, -3\", \"result\": false}", "{\"response\": \"def group_jobs_by_type(jobs, k): if not isinstance(jobs[0].job_type, int): return False; return True\", \"result\": false}\n{\"response\": \"def group_jobs_by_type(jobs, k): if all(job.job_type >= 0 for job in jobs): return True; return False\", \"result\": true}\n{\"response\": \"def group_jobs_by_type(jobs, k): if not all(job.job_type >= 0 for job in jobs): return False; return True\", \"result\": false}"]}
{"query": "why do texans say \"remember the alamo\"", "instruction": "Answer in exactly 8 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 8 and response.replace('.', '').count('\u2022') == 0\n", "def evaluate(response: str) -> bool: \n    return len(response.replace(',', '').split('\\n').split('.') + response.split('\\n').split('\u2022')) <= 8\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 8\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 8\n"], "testcases": ["{\"response\": \"This is a list of items to purchase: \u2022 Apples \u2022 Bananas \u2022 Carrots \u2022 Donuts \u2022 Eggs \u2022 Fish \u2022 Grapes \u2022 Honey\", \"result\": true}\n{\"response\": \"This is a list of items to purchase: \u2022 Apples \u2022 Bananas \u2022 Carrots \u2022 Donuts \u2022 Eggs\", \"result\": false}\n{\"response\": \"This is a list of items to purchase: 1. Apples 2. Bananas 3. Carrots 4. Donuts 5. Eggs 6. Fish 7. Grapes 8. Honey\", \"result\": false}", "{\"response\": \"Here are the features with the available fields in the dataset:\\n\u2022 Feature 1\\n\u2022 Feature 2\\n\u2022 Feature 3\\n\u2022 Feature 4\\n\u2022 Feature 5\\n\u2022 Feature 6\\n\u2022 Feature 7\\n\u2022 Feature 8\", \"result\": true}\n{\"response\": \"Here are the features with the available fields in the dataset:\\n\u2022 Feature 1\\n\u2022 Feature 2\\n\u2022 Feature 3\\n\u2022 Feature 4\\n\u2022 Feature 5\\n\u2022 Feature 6\", \"result\": false}\n{\"response\": \"Here are the features with the available fields in the dataset:\\n\u2022 Feature 1\\n\u2022 Feature 2\\n\u2022 Feature 3\\n\u2022 Feature 4\\n\u2022 Feature 5\\n\u2022 Feature 6\\n\u2022 Feature 7\\n\u2022 Feature 8\\n\u2022 Feature 9\", \"result\": false}", "{\"response\": \"\u2022 Answer in exactly 8 points: 1, 2, 3, 4, 5, 6, 7, 8\", \"result\": false}\n{\"response\": \"\u2022 Answer in exactly 8 points: 1. one \u2022 2. two \u2022 3. three \u2022 4. four \u2022 5. five \u2022 6. six \u2022 7. seven \u2022 8. eight\", \"result\": true}\n{\"response\": \"\u2022 Answer in exactly 8 points: 1. one \u2022 2. two \u2022 3. three \u2022 4. four \u2022 5. five\", \"result\": false}", "{\"response\": \"There are eight points that must be addressed. Here are the eight key points: \\n 1. Increase revenue.\\n 2. Reduce costs.\\n 3. Improve product quality.\\n 4. Enhance customer experience.\\n 5. Develop a strong online presence.\\n 6. Build strategic partnerships.\\n 7. Foster a positive company culture.\\n 8. Continuously learn and improve.\", \"result\": true}\n{\"response\": \"There are eight points that must be addressed. Here are the seven key points: \\n 1. Increase revenue.\\n 2. Reduce costs.\\n 3. Improve product quality.\\n 4. Enhance customer experience.\\n 5. Develop a strong online presence.\\n 6. Build strategic partnerships.\\n 7. Continuously learn and improve.\", \"result\": false}\n{\"response\": \"This response has 12 points. Here are the points that must be addressed: \\n 1. Increase revenue.\\n 2. Reduce costs.\\n 3. Improve product quality.\\n 4. Enhance customer experience.\\n 5. Develop a strong online presence.\\n 6. Build strategic partnerships.\\n 7. Foster a positive company culture.\\n 8. Continuously learn and improve.\\n 9. Review and adjust our pricing strategy.\\n 10. Develop a plan to expand to new markets.\\n 11. Improve our social media presence.\\n 12. Create a mentorship program for new employees.\", \"result\": false}"]}
{"query": "Are you capable of writing a script for a graphic novel?", "instruction": "Use only imperative verbs, with each verb on a separate line, and evaluate with a Python function by checking for the total number of lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    verb_count = 0\n    for line in lines:\n        line = line.strip()\n        if line in ['is', 'am', 'are', 'be', 'been', 'being', 'has', 'have', 'had', 'do', 'does', 'did', 'will', 'would', 'can', 'could','shall','should','may','might','must', 'ought','shall', 'will']:\n            verb_count += 1\n    return len(lines) == verb_count\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 1 or len(lines) == len([line for line in lines if line.strip() and line[0].isupper()])\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 1 and'' not in response.split('\\n')[0].split()\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) >= 2\n"], "testcases": ["{\"response\": \"is\\nam\\ngoes\\nhas\\ncan\", \"result\": true}\n{\"response\": \"I am happy to help you with this task.\", \"result\": false}\n{\"response\": \"Are you feeling well today?\\nGo outside and get some fresh air.\\nTake a break and relax.\", \"result\": true}", "{\"response\": \"Get\\nGo\\nBuy\\nOpen\\nClose\\nSell\\nRun\", \"result\": true}\n{\"response\": \"I will go to the store.\\nLet's go to the beach.\\nYou can buy a new phone.\", \"result\": false}\n{\"response\": \"Go to the store\\nTake a bus\\ngenerate a report\", \"result\": true}", "{\"response\": \"Get it done\nMake a plan\nTake action\", \"result\": true}\n{\"response\": \"You need to study and get good grades\nIt's a challenging course but you can do it\", \"result\": false}\n{\"response\": \"Create a new account\nFill out the form\nSubmit the application\", \"result\": true}", "{\"response\": \"Do this\\nDo that\\nDo the other thing\", \"result\": true}\n{\"response\": \"This is a statement about doing something\", \"result\": false}\n{\"response\": \"Please do this\\nPlease do that\\nDo the other thing as well\", \"result\": true}"]}
{"query": "explain baseline prediction dynamic threshold algorithm with example and code in python", "instruction": "answer in exactly 7 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 6 and all(response[response.index('\\n'):].strip().startswith('\u2022') for i in range(response.count('\\n') - 1)) and len(response.split('\\n')) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n* ') == 7) and len(response)!= 0 \n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[:-1]) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 7\n"], "testcases": ["{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\\n\u2022 Point 8\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\", \"result\": false}", "{\"response\": \"First \u2022 Second \u2022 Third \u2022 Fourth \u2022 Fifth \u2022 Sixth \u2022 Seventh\", \"result\": true}\n{\"response\": \"First \u2022 Second \u2022 Third \u2022 Fourth \u2022 Fifth \u2022 Sixth\", \"result\": false}\n{\"response\": \"First \u2022 Second \u2022 Third \u2022 Fourth \u2022 Fifth \u2022 Sixth \u2022 Seventh \u2022 Eighth\", \"result\": false}", "{\"response\": \"Here are the options:\\n\u2022 Option 1\\n\u2022 Option 2\\n\u2022 Option 3\\n\u2022 Option 4\\n\u2022 Option 5\\n\u2022 Option 6\\n\u2022 Option 7\", \"result\": true}\n{\"response\": \"Here are the options:\\n\u2022 Option 1\\n\u2022 Option 2\\n\u2022 Option 3\\n\u2022 Option 4\\n\u2022 Option 5\", \"result\": false}\n{\"response\": \"Here are the options:\\n\u2022 Option 1\\n\u2022 Option 2\\n\u2022 Option 3\\n\u2022 Option 4\\n\u2022 Option 5\\n\u2022 Option 6\\n\u2022 Option 7\\n\u2022 Option 8\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\", \"result\": false}"]}
{"query": "Summarize the plot of The Lost Mines Of Phandelver", "instruction": "Answer in exactly 200 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n"], "testcases": ["{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex. Cras venenatis massa sed lacus scelerisque, et malesuada nisl tempus. In nec rhoncus arcu. Proin auctor lacus non leo eleifend, ut faucibus nunc interdum. Cras venenatis magna vel dui bibendum, sed mollis dui dictum. Nunc eget felis non nunc malesuada malesuada. Phasellus malesuada purus a ante bibendum, sed tempus est blandit. Nunc et lectus sit amet sem posuere blandit. Suspendisse potenti. Maecenas et ex ut purus eleifend posuere et sed augue. Quisque venenatis ex et risus sodales, sit amet gravida sapien posuere. Aliquam vel arcu nec est suscipit fermentum. Donec et purus sit amet sapien venenatis facilisis vel eu nunc.\", \"result\": true}\n{\"response\": \"This is a short response\", \"result\": false}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex. Cras venenatis massa sed lacus scelerisque, et malesuada nisl tempus. In nec rhoncus arcu. Proin auctor lacus non leo eleifend, ut faucibus nunc interdum. Cras venenatis magna vel dui bibendum, sed mollis dui dictum. Nunc eget felis non nunc malesuada malesuada. Phasellus malesuada purus a ante bibendum, sed tempus est blandit. Nunc et lectus sit amet sem posuere blandit. Suspendisse potenti. Maecenas et ex ut purus eleifend posuere et sed augue. Quisque venenatis ex et risus sodales, sit amet gravida sapien posuere. Aliquam vel arcu nec est suscipit fermetum. Donec et purus sit amet sapien venenatis facilisis vel eu nunc. Maecenas et purus sit amet purus eleifend posuere. Phasellus sed augue non nibh suscipit facilisis. Maecenas sed augue ac ex accumsan blandit. Pellentesque et augue et felis tempor tempus. In malesuada arcu a lectus pulvinar, sed rhoncus ligula bibendum. Cras eu est in lectus placerat tempor et vel justo. Donec et purus sit amet sapien venenatis facilisis vel eu nunc. Phasellus malesuada purus a ante bibendum, sed tempus est blandit. Nunc et lectus sit amet sem posuere blandit. Suspendisse potenti. Maecenas et ex ut purus eleifend posuere et sed augue. Quisque venenatis ex et risus sodales, sit amet gravida sapien posuere. Aliquam vel arcu nec est suscipit fermentum. Donec et purus sit amet sapien venenatis facilisis vel eu nunc.\", \"result\": true}", "{\"response\": \"This is a short response. It has less than 200 words.\", \"result\": false}\n{\"response\": \"This is a medium response. It has exactly 200 words.\", \"result\": true}\n{\"response\": \"This is a long response. It has more than 200 words.\", \"result\": false}", "{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus venenatis ligula vel nunc posuere congue. Maecenas sagittis, ligula vel tempus placerat, ante diam pharetra libero, et pharetra augue nisl vel lacus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin non augue vel justo eleifend viverra. Integer semper ligula quis nisi rhoncus, quis bibendum nulla malesuada. Donec sit amet ligula quis urna dictum interdum eu ac augue. Ut et arcu sed elit pulvinar posuere. Phasellus pharetra vel justo ut gravida. Integer facilisis venenatis nunc, id blandit lectus euismod id. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi. Phasellus at sapien bibendum, rhoncus tellus a, elementum lectus. Suspendisse id ante non nibh vestibulum bibendum.\", \"result\": true}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \"result\": false}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus venenatis ligula vel nunc posuere congue. Maecenas sagittis, ligula vel tempus placerat, ante diam pharetra libero, et pharetra augue nisl vel lacus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin non augue vel justo eleifend viverra. Integer semper ligula quis nisi rhoncus, quis bibendum nulla malesuada. Donec sit amet ligula quis urna dictum interdum eu ac augue. Ut et arcu sed elit pulvinar posuere. Phasellus pharetra vel justo ut gravida. Integer facilisis venenatis nunc, id blandit lectus euismod id. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi. Phasellus at sapien bibendum, rhoncus tellus a, elementum lectus. Suspendisse id ante non nibh vestibulum bibendum. \", \"result\": false}", "{\"response\": \"The answer to this question is quite long and detailed. It explains the importance of considering multiple perspectives when making a decision. It also highlights the need for careful evaluation and analysis of all relevant factors before coming to a conclusion. Additionally, it emphasizes the value of seeking input from others and being open to new ideas. Furthermore, it notes that a well-considered decision is one that takes into account the potential consequences of each possible outcome. Finally, it encourages readers to take the time to weigh the pros and cons of each option before making a choice. This will enable them to make a more informed decision that is likely to lead to a better outcome. The key is to be thoughtful and thorough in the decision-making process, and to be willing to consider alternative perspectives.\", \"result\": true}\n{\"response\": \"The answer to this question is quite short and to the point. It provides a clear and concise explanation of the concept.\", \"result\": false}\n{\"response\": \"The answer to this question is a simple one. It only requires a brief response to answer the question. However, it still provides a clear and accurate explanation of the topic at hand.\", \"result\": false}"]}
{"query": "Give me more detailed examples for points 1 to 4 that you outlined, specifically on how I can implement gameplay mechanics in a 3D Action-RPG", "instruction": "Write your response in markdown and use a maximum of 3 paragraphs.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n') # split response by double newline characters\n    return len(paragraphs) <= 3\n", "def evaluate(response: str) -> bool: \n    count_paragraphs = 1\n    for i in range(len(response)):\n        if response[i:i+4] == '\\n\\n':\n            count_paragraphs += 1\n    return count_paragraphs <= 3\n", "def evaluate(response: str) -> bool:    \n    paragraphs = response.split('\\n\\n')\n    return len(paragraphs) <= 3\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 3\n"], "testcases": ["{\"response\": \"## Heading\\n\\nParagraph 1\\n\\n## Heading 2\\n\\nParagraph 2\\n\\n## Heading 3\\n\\nParagraph 3\", \"result\": true}\n{\"response\": \"## Heading\\n\\nParagraph 1\\n\\n## Heading 2\\n\\nParagraph 2\\n\\n## Heading 3\\n\\nParagraph 4\", \"result\": false}\n{\"response\": \"## Heading\\n\\nParagraph 1\", \"result\": true}", "{\"response\": \"## Heading 1\\n\\nText here.\\n\\nMore text here.\\n\\nEven more text here.\", \"result\": true}\n{\"response\": \"## Heading 1\\n\\nText here.\\n\\nMore text here.\\n\\nEven more text here.\\n\\nAnd even more text here.\\n\\nMore text here.\\n\\nEven more text here.\\n\\nAnd even more text here.\\n\\nMore text here.\\n\\nEven more text here.\\n\\nAnd even more text here.\\n\\nMore text here.\", \"result\": false}\n{\"response\": \"## Heading 1\\n\\nText here.\\n\\nMore text here.\\n\\nEven more text here.\\n\\nAnd even more text here.\\n\\nMore text here.\\n\\nEven more text here.\\n\\nAnd even more text here.\", \"result\": true}", "{\"response\": \"## Heading\\n\\nText\\n\\nMore text\", \"result\": true}\n{\"response\": \"# Heading\\n\\nText\\n\\nMore text\\n\\nEven more text\", \"result\": false}\n{\"response\": \"## Heading\\n\\nText\", \"result\": true}", "{\"response\": \"## Heading 1\\nThis is the first paragraph.\\n\\n## Heading 2\\nThis is the second paragraph.\\n\\n## Heading 3\\nThis is the third paragraph.\\n\\nThis is a fourth paragraph which should be excluded.\", \"result\": false}\n{\"response\": \"## Heading 1\\nThis is the first paragraph.\\n\\n## Heading 2\\nThis is the second paragraph.\\n\\n## Heading 3\\nThis is the third paragraph.\\n\\nThis is a third paragraph in three paragraphs.\\n\\nThis is a fourth paragraph which should be excluded.\", \"result\": false}\n{\"response\": \"## Heading 1\\nThis is the first paragraph.\\n\\n## Heading 2\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the third paragraph.\", \"result\": true}"]}
{"query": "Distinguish between Analytical, Descriptive and Comparative research with examples", "instruction": "Respond in exactly 7 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 6\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[:-1]) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\", \"result\": false}", "{\"response\": \"\u2022 Answer the first question.\\n\u2022 Provide an example for the first question.\\n\u2022 Explain the answer.\\n\u2022 Provide an example for the explanation.\\n\u2022 Answer the second question.\\n\u2022 Provide an example for the second question.\\n\u2022 Summarize the answer.\", \"result\": true}\n{\"response\": \"\u2022 Answer the first question.\\n\u2022 Provide an example for the first question.\\n\u2022 Explain the answer.\\n\u2022 Provide an example for the explanation.\\n\u2022 Answer the second question.\\n\u2022 Summarize the answer.\", \"result\": false}\n{\"response\": \"\u2022 Answer the first question.\\n\u2022 Provide an example for the first question.\\n\u2022 Explain the answer.\\n\u2022 Provide an example for the explanation.\\n\u2022 Answer the second question.\\n\u2022 Provide an example for the second question.\\n\u2022 Answer the third question.\\n\u2022 Provide an example for the third question.\\n\u2022 Summarize the answer.\", \"result\": false}", "{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\u2022 Point 7\\n\u2022 Point 8\", \"result\": false}"]}
{"query": "what genes help them do this?", "instruction": "answer in 5 concise bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[:-1]) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4 and all(response[i] == '\\n' for i in range(1, 5))\n"], "testcases": ["{\"response\": \"\u2022 This is the first point\\n\u2022 This is the second point\\n\u2022 This is the third point\\n\u2022 This is the fourth point\\n\u2022 This is the fifth point\", \"result\": true}\n{\"response\": \"\u2022 This is the first point\\n\u2022 This is the second point\\n\u2022 This is the third point\\n\u2022 This is the fourth point\", \"result\": false}\n{\"response\": \"\u2022 This is the first point\\n\u2022 This is the second point\\n\u2022 This is the third point\\n\u2022 This is the fourth point\\n\u2022 This is the fifth point\\n\u2022 This is the sixth point\", \"result\": false}", "{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\", \"result\": true}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\", \"result\": false}", "{\"response\": \"\u2022 Answer question 1\\n\u2022 Answer question 2\\n\u2022 Answer question 3\\n\u2022 Answer question 4\\n\u2022 Answer question 5\\n\", \"result\": true}\n{\"response\": \"\u2022 Answer question 1\\n\u2022 Answer question 2\\n\u2022 Answer question 3\\n\u2022 Answer question 4\\n\u2022 Answer question 5\\n\u2022 Answer question 6\\n\", \"result\": false}\n{\"response\": \"\u2022 Answer question 1\\n\u2022 Answer question 2\\n\u2022 Answer question 3\\n\", \"result\": false}", "{\"response\": \"\u2022 One bullet point\\n\u2022 Another bullet point\\n\u2022 Yet another bullet point\\n\u2022 One more bullet point\\n\u2022 Final bullet point\", \"result\": true}\n{\"response\": \"\u2022 One bullet point\\n\u2022 Another bullet point\\n\u2022 Yet another bullet point\\n\u2022 One more bullet point\\n\u2022 Final bullet point\\n\u2022 Additional bullet point\", \"result\": false}\n{\"response\": \"\u2022 One bullet point\\n\u2022 Another bullet point\\n\u2022 Yet another bullet point\\n\u2022 One more bullet point\", \"result\": false}"]}
{"query": "increase the features with the available fields in the dataset", "instruction": "write the code in a single function", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'increase the features' in response and 'with the available fields in the dataset' in response and 'dataset' in response\n", "def evaluate(response: str) -> bool: \n    return all('increase' in i for i in response.split(' ')) and len(response.split(' ')) == 2\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 3 and words[0] == 'increase' and words[1] == 'the' and words[2] == 'features' and words[3] == 'with' and words[4] == 'the' and words[5] == 'available' and words[6] == 'fields' and words[7] == 'in' and words[8] == 'the' and words[9] == 'dataset' \n", "def evaluate(response: str) -> bool: \n    return 'increase the' in response and 'available fields in the dataset' in response\n"], "testcases": ["{\"response\": \"This instruction requires a function.\", \"result\": false}\n{\"response\": \"def some_function():\\n    return True\", \"result\": true}\n{\"response\": \"def another_function():\\n    return 5 + 3\", \"result\": false}", "{\"response\": \"def increase():\\n    print('increase function')\\n    return 'increase function'\\n\", \"result\": true}\n{\"response\": \"def increase():\\n    print('increase function')\\n    return 'increase function'\\n    return 'increase function'\", \"result\": false}\n{\"response\": \"def increase():\\n    print('increase function')\", \"result\": false}", "{\"response\": \"def answer():\\n  return\", \"result\": false}\n{\"response\": \"def answer():\\n  return 'Hello World'\\n\\n\", \"result\": true}\n{\"response\": \"def answer():\\n  return\\n\", \"result\": false}", "{\"response\": \"the feature increase is available\", \"result\": false}\n{\"response\": \"increase the feature, this is available\", \"result\": true}\n{\"response\": \"increase the available fields in the dataset\", \"result\": true}"]}
{"query": "piece of cake", "instruction": "Use only words with exactly 3 letters", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word)!= 3: \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word)!= 3:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 3 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 3 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"a no cat\", \"result\": false}\n{\"response\": \"Cat Dog Bat\", \"result\": true}\n{\"response\": \"Run for the hills with dogs and cats\", \"result\": false}", "{\"response\": \"Cat Dog Hat Cat\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"Sun Hat Fan\", \"result\": true}", "{\"response\": \"cat dog sun\", \"result\": false}\n{\"response\": \"boy pet tan\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}", "{\"response\": \"cat rat hat tap\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the lazy dog\", \"result\": false}\n{\"response\": \"pet ant fat cab\", \"result\": true}"]}
{"query": "can you write to me with spelling istakes and tons of missing vowls?", "instruction": "Respond with a grammatically correct and well-formatted text.", "verifiers": ["def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence:\n            words = sentence.split()\n            if len(words) == 0:\n                return False\n            for word in words:\n                word = word.lower()\n                if len(word) < 2 or any(char not in 'abcdefghijklmnopqrstuvwxyz' for char in word):\n                    return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    stop_words = ['a', 'an', 'the', 'and', 'is', 'in', 'it', 'of', 'to']\n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        for word in words:\n            if not word.istitle() and not word.isupper() and not word.islower():\n                return False\n            if len(word) > 3 and not any(char in 'aeiou' for char in word.lower()):\n                return False\n            if word.lower() in stop_words and len(word) == 1:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.replace(\" \", \"\")\n    for char in response:\n        if not char.isalnum() and not char in ['.', '?', '!', ',', ';', ':']:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(c.isalpha() or c.isspace() for c in response) and \n           response.replace(' ', '').istitle() and \n           all(c in 'aeiouAEIOU' for c in response)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function uses a combination of methods to check whether the response follows the instruction. Here's a breakdown of what each part does:\n\n1. `all(c.isalpha() or c.isspace() for c in response)`: This line checks whether all characters in the response are either alphabets or spaces. This ensures that the response is well-formatted and doesn't contain any special characters.\n\n2. `response.replace(' ', '').istitle()`: This line checks whether the response is in title case, i.e., the first letter of each word is uppercase and the rest are lowercase.\n\n3. `all(c in 'aeiouAEIOU' for c in response)`: This line checks whether all characters in the response are either vowels or spaces. This ensures that the response is grammatically correct.\n\nThe function returns True if all the conditions are met, and False otherwise.<|eot_id|>"], "testcases": ["{\"response\": \"Hello how are you?\", \"result\": false}\n{\"response\": \"I am good thank you for asking that was a nice question I appreciate it\", \"result\": false}\n{\"response\": \"She is going to the store. She will buy some milk.\", \"result\": true}", "{\"response\": \"This is a response with proper grammar and punctuation.\", \"result\": true}\n{\"response\": \"This is a sentence without a period.\", \"result\": false}\n{\"response\": \"This is another response without punctuation,  is it?\", \"result\": false}", "{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Hello, how are you? Is everything okay?\", \"result\": true}\n{\"response\": \"Hello, how are you Is everything okay\", \"result\": false}", "{\"response\": \"I am going to the store.\", \"result\": false}\n{\"response\": \"I am going to the store!\", \"result\": false}\n{\"response\": \"I am going to the store. The store is on the other side of the town.\", \"result\": true}"]}
{"query": "hello", "instruction": "Respond in exactly 20 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n"], "testcases": ["{\"response\": \"This is a sample response with exactly 20 words.\", \"result\": true}\n{\"response\": \"This is a sample response with exactly 21 words.\", \"result\": false}\n{\"response\": \"This is a sample response with exactly 19 words.\", \"result\": false}", "{\"response\": \"This is a test response with exactly 20 words, it should match the instruction.\", \"result\": true}\n{\"response\": \"This is a test response with more than 20 words, it should not match the instruction.\", \"result\": false}\n{\"response\": \"This is a short response with less than 20 words, it should not match the instruction.\", \"result\": false}", "{\"response\": \"This is a test response that has exactly 20 words as requested by the user.\", \"result\": true}\n{\"response\": \"This is a test response that has less than 20 words as requested by the user.\", \"result\": false}\n{\"response\": \"This is a test response that has more than 20 words as requested by the user and it is very long indeed.\", \"result\": false}", "{\"response\": \"This is a grammatically correct and well-formatted text with exactly 20 words.\", \"result\": true}\n{\"response\": \"This is a grammatically correct and well-formatted text with exactly 21 words.\", \"result\": false}\n{\"response\": \"This is a grammatically correct and well-formatted text with exactly 19 words.\", \"result\": false}"]}
{"query": "how to start a clothing business", "instruction": "Use exactly 10 words to explain the first step in the process", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()[0:10]) == [response.split()[0]] + response.split()[1:10]", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()[0]) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()[0:10]) == 10\n"], "testcases": ["{\"response\": \"The first step is to create a new account online.\", \"result\": false}\n{\"response\": \"The first step is to create a new account online for free.\", \"result\": false}\n{\"response\": \"The first step is to create a new online account here.\", \"result\": true}", "{\"response\": \"First step is to fill out the application form online.\", \"result\": true}\n{\"response\": \"First step is to fill out the application form. Be careful to submit it correctly.\", \"result\": false}\n{\"response\": \"To start the process, fill out the form on the website first.\", \"result\": false}", "{\"response\": \"The first step is to read the instructions carefully always.\", \"result\": true}\n{\"response\": \"The first step is to read the instructions and do more.\", \"result\": false}\n{\"response\": \"First step read the instructions carefully before proceeding always safely.\", \"result\": false}", "{\"response\": \"First, open the app and select the desired language.\", \"result\": true}\n{\"response\": \"First, open the app and select the desired language and register for an account online.\", \"result\": false}\n{\"response\": \"First, open the app.\", \"result\": false}"]}
{"query": "knock knock", "instruction": "answer in rhyming couplets", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) % 2!= 0:\n        return False\n    for i in range(0, len(words) - 1, 2):\n        if not words[i][-1] == words[i + 1][0]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(0, len(words) - 1, 2):\n        if words[i]!= words[i + 1][-3:] or words[i + 1]!= words[i][-3:]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(0, len(words) - 1, 2):\n        if not words[i][-1] == words[i+1][0]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) % 2!= 0:\n        return False\n    for i in range(0, len(words) - 1, 2):\n        if words[i][-3:]!= words[i+1][:3]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The cat is black and the dog is white. The sun is shining with all its might.\", \"result\": true}\n{\"response\": \"The dog is happy and the cat is blue. The sun is setting with nothing to do.\", \"result\": true}\n{\"response\": \"The cat is brown and the dog is old. The sun is shining on a new world.\", \"result\": false}", "{\"response\": \"The cat is black, the dog is white. They're both friends, a perfect sight.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light. The stars come out at night to play.\", \"result\": true}\n{\"response\": \"The sky is blue and the grass is green. The flowers bloom in the spring season.\", \"result\": true}", "{\"response\": \"The sky is blue, the sun shines through, the birds sing sweet and clear, and the world is full of cheer.\", \"result\": true}\n{\"response\": \"I love to play outside all day, because the sun is shining bright in a lovely way.\", \"result\": true}\n{\"response\": \"The cat is black, the dog is white, but this sentence does not follow the rhyming couplets rule tonight.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light, Warming up the world with its radiant might.\", \"result\": True}\n{\"response\": \"I'm feeling sad today, I don't know why, I'll just stay inside and watch TV all day.\", \"result\": True}\n{\"response\": \"The cat purrs loud, the dog barks free, They're two good friends, a perfect symphony.\", \"result\": True}"]}
{"query": "hello", "instruction": "answer in exactly 5 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n"], "testcases": ["{\"response\": \"This is a test sentence.\", \"result\": true}\n{\"response\": \"This is a longer sentence.\", \"result\": false}\n{\"response\": \"This is another test.\", \"result\": true}", "{\"response\": \"This is a simple task.\", \"result\": true}\n{\"response\": \"This is a difficult test.\", \"result\": false}\n{\"response\": \"This is the easy test now.\", \"result\": false}", "{\"response\": \"I will do my best always\", \"result\": true}\n{\"response\": \"This is a very short sentence\", \"result\": false}\n{\"response\": \"I will be on time every day\", \"result\": false}", "{\"response\": \"The cat is very happy now\", \"result\": true}\n{\"response\": \"The dog is happy and playful\", \"result\": false}\n{\"response\": \"I love this beautiful sunny weather\", \"result\": false}"]}
{"query": "Keep the body part you sent, but add the aerobic item at the end,\nMake each list 20 instead of 5.\n \n \n \n \uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Use exactly 17 words for this answer, each with more than 2 letters in it, and with all sentences in the singular form.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 17 and all(len(word) > 2 for word in words) and all(word.endswith('s') == False for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words)!= 17:\n        return False\n    for word in words:\n        if len(word) <= 2:\n            return False\n        if word[-2:] in ['ed', 'es','s']:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 17 and all(len(word) > 2 for word in words) and all(word.endswith('s') == False for word in words)\n", "def evaluate(response: str) -> bool:    \n    words = response.split()\n    return len(words) == 17 and all(len(word) > 2 for word in words) and all(word.endswith('s') == False for word in words)\n"], "testcases": ["{\"response\": \"This is a simple example of a test response with 17 words that are all singular.\", \"result\": true}\n{\"response\": \"This is a simple example of a test response with 17 words that are all singular and only use short words.\", \"result\": false}\n{\"response\": \"This is a simple example of a test response with 18 words that are all singular.\", \"result\": false}", "{\"response\": \"This is a test to check the length of the answer and make sure it meets the criteria\", \"result\": false}\n{\"response\": \"This is a very long answer that has more than two letters in every word\", \"result\": false}\n{\"response\": \"This is a very short answer that does not meet the length requirement\", \"result\": false}", "{\"response\": \"This is a singular answer with seventeen singular words each with more than two letters\", \"result\": true}\n{\"response\": \"This answer has sixteen words that are singular and long\", \"result\": false}\n{\"response\": \"This answer has twenty words that are singular and long\", \"result\": false}", "{\"response\": \"This is a beautiful sunny day in the city today outside now everywhere.\", \"result\": true}\n{\"response\": \"This is a beautiful sunny day in the cities today outside now everywhere.\", \"result\": false}\n{\"response\": \"The capital of France is a beautiful city with many people visiting.\", \"result\": false}"]}
{"query": "Thank you for reviewing the answers. Is there anything else I can help you with?", "instruction": "Use words with at least 3 consecutive letters in alphabetical order (e.g., \"able bodied\")", "verifiers": ["def evaluate(response: str) -> bool: \n    for i in range(len(response) - 2): \n        if response[i].upper() <= response[i+1].upper() <= response[i+2].upper() and response[i].upper()!= response[i+1].upper() and response[i+1].upper()!= response[i+2].upper():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    for i in range(len(response) - 2): \n        word = response[i:i+3] \n        if word == ''.join(sorted(word)): \n            return True \n    return False \n", "def evaluate(response: str) -> bool: \n    for i in range(len(response) - 2):\n        if response[i].upper() <= response[i+1].upper() <= response[i+2].upper() and response[i]!= response[i+1] and response[i]!= response[i+2]:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    for i in range(len(response) - 2): \n        if response[i].lower() <= response[i+1].lower() <= response[i+2].lower() and response[i]!= response[i+1] and response[i]!= response[i+2]: \n            return True\n    return False\n"], "testcases": ["{\"response\": \"This is a simple test. The answer has consecutive letters.\", \"result\": true}\n{\"response\": \"The test has multiple words and no consecutive letters.\", \"result\": false}\n{\"response\": \"This is another test with words like 'abc' and 'def'.\", \"result\": true}", "{\"response\": \"able bodied beings can behave badly.\", \"result\": true}\n{\"response\": \"the teacher can help the student.\", \"result\": false}\n{\"response\": \"can dogs detect bad guys?\", \"result\": true}", "{\"response\": \"The cat is able bodied and agile.\", \"result\": true}\n{\"response\": \"The dog is quick and happy.\", \"result\": false}\n{\"response\": \"The elephant is able to bodysurf and hike.\", \"result\": true}", "{\"response\": \"apple body car door\", \"result\": true}\n{\"response\": \"cat dog bat bad\", \"result\": false}\n{\"response\": \"able bodied creature flies\", \"result\": true}"]}
{"query": "can you create a teacher's plan for a 45 minute history lesson for Peloponnesian War for 8th graders? please don't use presentations and do include some activities for the students", "instruction": "Use only first person perspective, minimum 3 questions to be answered.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('I') and response.count('?') >= 3\n", "def evaluate(response: str) -> bool: \n    return response.startswith('I') and response.count('?') >= 3\n", "def evaluate(response: str) -> bool:    \n    first_person = 'i' in response.lower() or'me' in response.lower() or'my' in response.lower()\n    num_questions = sum(1 for word in response.split() if word.lower().startswith('q'))\n    return first_person and num_questions >= 3\n", "def evaluate(response: str) -> bool: \n    return \"I\" in response and len([q for q in response.split('?') if q.strip()]) >= 3\n"], "testcases": ["{\"response\": \"I am happy and I wonder what I will do tomorrow?\", \"result\": false}\n{\"response\": \"I have been thinking about this problem for a long time and I have a few questions about it.\", \"result\": true}\n{\"response\": \"My favorite movie is 'The Shawshank Redemption'. What do you think is the best movie of all time?\", \"result\": false}", "{\"response\": \"I am excited to share my ideas with you. What are your thoughts on this?\", \"result\": true}\n{\"response\": \"My friend is very interested in learning a new language, I recommend you try Duolingo.\", \"result\": false}\n{\"response\": \"I'm happy to help you with your problem. What is it that's bothering you? Do you have any other questions?\", \"result\": true}", "{\"response\": \"I am looking for some ideas for my next video. I have three questions.\", \"result\": true}\n{\"response\": \"Here are some viral video ideas. They are quite good.\", \"result\": false}\n{\"response\": \"What's the best format for a viral video? I need to make one for my channel. What are the key elements to include in a viral video? How do I get my video to go viral?\", \"result\": true}", "{\"response\": \"What can I eat for breakfast? What can I do for fun? I am excited to explore.\", \"result\": true}\n{\"response\": \"She loves to play the piano and sings in a choir.\", \"result\": false}\n{\"response\": \"I have a question: What is the meaning of life?\", \"result\": false}"]}
{"query": "Explain how to use mqtt publisher subscriber on rpi 4 device\nSupport answer with python code", "instruction": "Format of code should be indented with two spaces", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(''== line[:2] for line in response.split('\\n'))\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    for line in lines:\n        if line and line[0:2]!='  'and line[0:4]!='   ':\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    return all(''in line and line.lstrip().startswith('  ') for line in response.split('\\n'))\n", "def evaluate(response: str) -> bool:    \n    # Check if each line starts with two spaces\n    return all(line.startswith('  ') for line in response.splitlines())\n"], "testcases": ["{\"response\": \"I will do the following: \\n  \u2022 Learn how to code \\n  \u2022 Practice every day \\n  \u2022 Join a community for support\", \"result\": true}\n{\"response\": \"I will do the following:\\n  Learn how to code \\n  Practice every day\\n  Join a community for support\", \"result\": false}\n{\"response\": \"Do I need to do the following:\\n  \\tLearn how to code \\n  \\tPractice every day\\n  Join a community for support\", \"result\": false}", "{\"response\": \"    def function():\\n      return 'Hello World'\\n    \", \"result\": true}\n{\"response\": \"def function():\\n  return 'Hello World'\", \"result\": false}\n{\"response\": \"def function():\\n    return 'Hello World'\", \"result\": false}", "{\"response\": \"  def main():\\n    print(\\\"Hello, World!\\\")\\n  if __name__ == '__main__':\\n    main()\", \"result\": true}\n{\"response\": \"def main():\\n  print(\\\"Hello, World!\\\")\", \"result\": false}\n{\"response\": \"def main():\\n  \\tprint(\\\"Hello, World!\\\")\", \"result\": false}", "{\"response\": \"def function():\\n  print('Hello World')\\n  print('This is a function')\", \"result\": true}\n{\"response\": \"def function():\\nfunction()\\n  print('Hello World')\\n  print('This is a function')\", \"result\": false}\n{\"response\": \"def function(): print('Hello World')\\n  print('This is a function')\", \"result\": false}"]}
{"query": "library is added to environment.yml file even though i uninstalled it from pip", "instruction": "the command to remove the library is pip uninstall library_name", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'pip uninstall' in response and 'library_name' in response and 'library_name' in 'pip uninstall'+ response.split('pip uninstall')[1]", "def evaluate(response: str) -> bool: \n    return 'pip uninstall' in response and 'library_name' in response\n", "def evaluate(response: str) -> bool: \n    return 'pip uninstall library_name' in response\n", "def evaluate(response: str) -> bool: \n    return 'pip uninstall' in response and 'library_name' in response \n"], "testcases": ["{\"response\": \"pip uninstall numpy\", \"result\": true}\n{\"response\": \"pip uninstall pandas and scipy\", \"result\": true}\n{\"response\": \"Please update the pip library to the latest version\", \"result\": false}", "{\"response\": \"Run the command pip uninstall numpy to remove the numpy library.\", \"result\": true}\n{\"response\": \"You can install the required libraries by running pip install requests.\", \"result\": false}\n{\"response\": \"To remove the tensorflow library, run pip uninstall tensorflow or pip uninstall tensorflow-gpu.\", \"result\": true}", "{\"response\": \"You can install the library using pip, then remove it using pip uninstall library_name\", \"result\": true}\n{\"response\": \"I recommend using a different approach for your project\", \"result\": false}\n{\"response\": \"To remove the library, use the command pip uninstall library_name\", \"result\": true}", "{\"response\": \"You need to pip uninstall numpy\", \"result\": true}\n{\"response\": \"Please use pip uninstall tensorflow\", \"result\": true}\n{\"response\": \"There is no need to pip uninstall pandas\", \"result\": false}"]}
{"query": "what are the important points for brand promotion and brand marketing", "instruction": "Write the response in 2 columns.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 2\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 2\n", "def evaluate(response: str) -> bool: \n    return '\\n'.join(response.split('\\n')).replace('  ','').split('\\n').count('\\n') <= 1\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 1\n"], "testcases": ["{\"response\": \"column1   column2\\nhello   world\\nfoo   bar\\nbaz   qux\", \"result\": true}\n{\"response\": \"hello world foo bar baz qux\", \"result\": false}\n{\"response\": \"column1   hello\\ncolumn2   world\", \"result\": false}", "{\"response\": \"Column 1  | Column 2\", \"result\": true}\n{\"response\": \"This is a very long line that spans multiple columns\", \"result\": false}\n{\"response\": \"Column 1 | Column 2\", \"result\": true}", "{\"response\": \"Item1  | Item2\\nItem3  | Item4\\nItem5  | Item6\", \"result\": true}\n{\"response\": \"Item1  | Item2\\nItem3\", \"result\": false}\n{\"response\": \"Item1  | Item2\\nItem3  | Item4\\nItem5  | Item6\\nItem7  | Item8\", \"result\": true}", "{\"response\": \"Column 1   | Column 2\\n Foo      | Bar\", \"result\": true}\n{\"response\": \"Column 1|Column 2\\n Foo      | Bar\", \"result\": false}\n{\"response\": \"Column 1   Foo\\n Column 2   Bar\", \"result\": false}"]}
{"query": "Can you try to come up with a catchy name for a workshop on software testing", "instruction": "Respond with exactly 5 words, all starting with the \"T\" sound", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5 and all(word[0].lower() in 'tthd' for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    count = sum(1 for word in words if word.lower().startswith(('t', 'th', 'tr', 'tw', 'ty')))\n    return len(words) == 5 and count == len(words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 5 and all(word[0].lower() in ['t', 'th', 'tr', 'tw'] for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    count = sum(1 for word in words if word.lower().startswith(('t', 'th', 'tr', 'tw')) or word.lower().startswith(('ch', 'ph')))\n    return len(words) == 5 and count == 5\n"], "testcases": ["{\"response\": \"The thunder thundered through the town.\", \"result\": true}\n{\"response\": \"The great thunder thundered across the field.\", \"result\": true}\n{\"response\": \"The thunder thundered loudly outside my house.\", \"result\": false}", "{\"response\": \"This task requires two thousand typists.\", \"result\": true}\n{\"response\": \"This task requires two hundred tutors.\", \"result\": false}\n{\"response\": \"This task requires ten thousands tutors.\", \"result\": false}", "{\"response\": \"Ten tired toads tried topping tacos.\", \"result\": true}\n{\"response\": \"This is a test sentence with six words.\", \"result\": false}\n{\"response\": \"Tigers typically thrive in tropical tree tops.\", \"result\": true}", "{\"response\": \"This is the test case\", \"result\": false}\n{\"response\": \"Today the traffic was terrible\", \"result\": true}\n{\"response\": \"The theory of relativity\", \"result\": false}"]}
{"query": "My rap name is White Gravy. Write a heavily lyrical rap for me that includes the topics of mashed potatoes, gravy, and sex.", "instruction": "Use exactly 5 stanzas with 5 lines each and a rhyme scheme of ABABCC.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 25 and lines[0::6] == lines[1::6] == lines[2::6] == lines[3::6] and lines[4::6] == lines[5::6] == lines[8::6] == lines[9::6] == lines[12::6] == lines[13::6] == lines[16::6] == lines[17::6] == lines[20::6] == lines[21::6] == lines[24::6]\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 10: \n        return False\n    for i in range(0, 8, 2): \n        if len(lines[i])!= 5 or len(lines[i+1])!= 5:\n            return False\n    rhyme_scheme = ['A', 'B', 'A', 'B', 'C', 'A', 'B', 'A', 'B', 'C']\n    for i in range(10): \n        if lines[i][:2].lower() not in response[response.find(lines[i][2:]):] or lines[i][:2].lower() not in response[response.find(lines[i][3:]):]:\n            return False\n        if response.find(lines[i][0]) == -1 or response.find(lines[i][1]) == -1 or response.find(lines[i][2]) == -1 or response.find(lines[i][3]) == -1 or response.find(lines[i][4]) == -1:\n            return False\n        if rhyme_scheme[i] == 'A' and not lines[i][:2].lower() == lines[i+2][:2].lower():\n            return False\n        elif rhyme_scheme[i] == 'B' and not lines[i][:2].lower() == lines[i+4][:2].lower():\n            return False\n        elif rhyme_scheme[i] == 'C' and not lines[i+8][:2].lower() == lines[i][:2].lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 25 and all(len(line.split(' ')) == 5 for line in lines)\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    stanza_count = 0\n    for line in lines:\n        if not line.strip(): continue\n        if lines.count('\\n') == 0: \n            return False\n        stanza_count += 1\n        if stanza_count % 5 == 0 and not lines[-1]: \n            return False\n        if stanza_count >= 5: \n            return False\n    rhyme_scheme = [None, None, None, None, None]\n    for i in range(0, len(lines), 5):\n        for j in range(5):\n            rhyme = lines[i+j].lower()[-2:]\n            if j % 2 == 0 and rhyme not in rhyme_scheme[:2]:\n                rhyme_scheme[j] = rhyme\n            elif j % 2 == 1 and rhyme not in rhyme_scheme[1:3]:\n                rhyme_scheme[j] = rhyme\n            elif j % 2 == 0 and rhyme not in rhyme_scheme[0:2]:\n                return False\n            elif j % 2 == 1 and rhyme not in rhyme_scheme[1:3]:\n                return False\n            elif rhyme not in rhyme_scheme[j:]: \n                return False\n    return True\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light\\nThe world is full of beauty and wonder\\nThe birds sing sweet melodies so fair\\nThe trees sway gently in the gentle thunder\\nThe breeze is cool and the air is milder\\n\\nThe stars come out at night so bright\\nThe moon glows full with a silvery light\\nThe world is quiet with a peaceful sight\\nThe darkness reigns with a gentle might\\nThe creatures sleep through the silent night\\n\\nThe dew drops glisten on the grass so green\\nThe morning sun begins to shine so keen\\nThe world is full of life and energy serene\\nThe flowers bloom with a vibrant sheen\\nThe day awakens with a happy scene\\n\\nThe clouds drift by with a gentle pace\\nThe wind whispers secrets in a gentle space\\nThe world is full of mystery and place\\nThe trees stand tall with a sturdy face\\nThe earth rotates with a steady pace\\n\\nThe night falls down with a gentle hush\\nThe stars shine bright with a twinkling rush\\nThe world is quiet with a peaceful flush\\nThe darkness reigns with a gentle rush\\nThe creatures sleep through the silent hush\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light\\nThe world is full of beauty and wonder\\nThe trees sway gently in the gentle thunder\\nThe birds sing sweet melodies so fair\\nThe breeze is cool and the air is milder\\n\\nThe stars come out at night so bright\\nThe moon glows full with a silvery light\\nThe world is quiet with a peaceful sight\\nThe darkness reigns with a gentle might\\nThe creatures sleep through the silent night\\n\\nThe dew drops glisten on the grass so green\\nThe morning sun begins to shine so keen\\nThe world is full of life and energy serene\\nThe flowers bloom with a vibrant sheen\\nThe day awakens with a happy scene\\n\\nThe clouds drift by with a gentle pace\\nThe wind whispers secrets in a gentle space\\nThe world is full of mystery and place\\nThe trees stand tall with a sturdy face\\nThe earth rotates with a steady pace\\n\\nThe night falls down with a gentle hush\\nThe stars shine bright with a twinkling rush\\nThe world is quiet with a peaceful sight\\nThe darkness reigns with a gentle might\\nThe creatures sleep through the silent night\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light\\nThe world is full of beauty and wonder\\nThe birds sing sweet melodies so fair\\nThe trees sway gently in the gentle thunder\\nThe breeze is cool and the air is milder\\n\\nThe stars come out at night so bright\\nThe moon glows full with a silvery light\\nThe darkness reigns with a gentle might\\nThe world is quiet with a peaceful sight\\nThe creatures sleep through the silent night\\n\\nThe dew drops glisten on the grass so green\\nThe morning sun begins to shine so keen\\nThe world is full of life and energy serene\\nThe flowers bloom with a vibrant sheen\\nThe day awakens with a happy scene\\n\\nThe clouds drift by with a gentle pace\\nThe wind whispers secrets in a gentle space\\nThe world is full of mystery and place\\nThe trees stand tall with a sturdy face\\nThe earth rotates with a steady pace\\n\\nThe night falls down with a gentle hush\\nThe stars shine bright with a twinkling rush\\nThe world is quiet with a peaceful flush\\nThe darkness reigns with a gentle rush\\nThe creatures sleep through the silent hush\", \"result\": true}", "{\"response\": \"The sun shines bright in the day\\nThe birds sing sweet and clear\\nThe stars come out at night to play\\nThe world is full of joy and fear\\nThe moon glows with a gentle face\\n\\nThe ocean waves crash on the shore\\nThe seagulls fly across the land\\nThe tide rises, falls once more\\nThe waves wash up on the sand\\nThe ocean's roar is loud and grand\\n\\nThe forest trees stand tall and green\\nThe creatures of the wild roam free\\nThe forest floor is soft and clean\\nThe trees provide a home for thee\\nThe forest is a place to be\\n\\nThe city streets are paved with stone\\nThe people rush to and fro\\nThe buildings tall, a lonely throne\\nThe city's heartbeat is fast and slow\\nThe city's sound is loud and known\\n\\nThe mountain peaks reach for the sky\\nThe wind it howls, it whips and it whines\\nThe snowflakes fall, they dance on by\\nThe mountain's beauty is truly divine\\nThe mountain's grandeur is truly fine\", \"result\": true}\n{\"response\": \"The sun shines bright in the day\\nThe stars come out at night to play\\nThe birds sing sweet and clear\\nThe world is full of joy and fear\\nThe moon glows with a gentle face\\n\\nThe ocean waves crash on the shore\\nThe tide rises, falls once more\\nThe waves wash up on the sand\\nThe ocean's roar is loud and grand\\nThe seagulls fly across the land\\n\\nThe forest trees stand tall and green\\nThe forest floor is soft and clean\\nThe creatures of the wild roam free\\nThe trees provide a home for thee\\nThe forest is a place to be\\n\\nThe city streets are paved with stone\\nThe city's heartbeat is fast and slow\\nThe people rush to and fro\\nThe city's sound is loud and known\\nThe buildings tall, a lonely throne\\n\\nThe mountain peaks reach for the sky\\nThe wind it howls, it whips and it whines\\nThe snowflakes fall, they dance on by\\nThe mountain's beauty is truly divine\\nThe mountain's grandeur is truly fine\", \"result\": false}\n{\"response\": \"The sun shines bright in the day\\nThe ocean waves crash on the shore\\nThe birds sing sweet and clear\\nThe world is full of joy and fear\\nThe moon glows with a gentle face\\n\\nThe stars come out at night to play\\nThe forest trees stand tall and green\\nThe tide rises, falls once more\\nThe trees provide a home for thee\\nThe forest floor is soft and clean\\n\\nThe forest is a place to be\\nThe mountain peaks reach for the sky\\nThe creatures of the wild roam free\\nThe mountain's beauty is truly divine\\nThe wind it howls, it whips and it whines\\n\\nThe city streets are paved with stone\\nThe seagulls fly across the land\\nThe people rush to and fro\\nThe ocean's roar is loud and grand\\nThe buildings tall, a lonely throne\\n\\nThe mountain snowflakes fall, they dance on by\\nThe world is full of joy and fear\\nThe city's heartbeat is fast and slow\\nThe city's sound is loud and known\\nThe ocean washes up on the sand\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\n\\tThe birds sing sweetly in the air.\\nThe clouds are white, without a fight,\\n\\tThe world is fresh, without a care.\\n\\tThe beauty of nature's on display,\\n\\tFilling hearts with joy each day.\\n\\nThe sun sets slow, in the evening sky,\\nThe stars appear, one by one.\\nThe world is quiet, without a sigh,\\nThe night is still, before the dawn.\\n\\tThe peacefulness of night's sweet reply.\\n\\nThe moon glows bright, in the midnight hour,\\nThe world is still, in a peaceful sleep.\\nThe darkness shines, without a power,\\nThe night is deep, its secrets keep.\\n\\tThe mystery of the night's sweet allure.\\n\\tFilling hearts with wonder still,\\n\\nThe night air cool, the world is still,\\n\\tThe beauty of the night's display.\\n\\tThe peacefulness of night's sweet thrill,\\nThe stars shine bright, in a celestial way.\\n\\tFilling hearts with joy and cheer,\\n\\tThe magic of the night's sweet hold.\\n\\nThe morning comes, the night is gone,\\nThe sun rises high, a new day.\\nThe world awakens, singing a song,\\nThe beauty of life, in a brand new way.\\n\\tFilling hearts with hope and glee.\\n\\tThe joy of life, wild and free.\\n\\nThe day is new, the night is old,\\nThe world is fresh, a story told.\\nThe sun shines bright, its light to hold,\\nThe beauty of life, in a tale so cold.\\n\\tThe wonder of life, a mystery to unfold.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light,\\n\\tThe birds sing sweetly in the air.\\nThe clouds are white, without a fight,\\n\\tThe world is fresh, without a care.\\n\\tThe beauty of nature's on display,\\n\\tFilling hearts with joy each day.\\n\\nThe world is new, the night is old,\\nThe stars appear, one by one.\\nThe darkness shines, without a gold,\\nThe night is deep, its secrets keep.\\n\\tThe mystery of the night's sweet allure.\\n\\nThe night air cool, the world is still,\\n\\tThe beauty of the night's display.\\n\\tThe peacefulness of night's sweet thrill,\\nThe stars shine bright, in a celestial way.\\n\\tFilling hearts with joy and cheer,\\n\\tThe magic of the night's sweet hold.\\n\\nThe morning comes, the night is gone,\\nThe world awakens, singing a song,\\nThe sun rises high, a new day.\\nThe beauty of life, in a brand new way.\\n\\tFilling hearts with hope and glee.\\n\\tThe joy of life, wild and free.\\n\\nThe day is new, the night is new,\\nThe world is fresh, a story told.\\nThe sun shines bright, its light to hold,\\nThe beauty of life, in a tale so cold.\\n\\tThe wonder of life, a mystery to unfold.\", \"result\": false}\n\n{\"response\": \"The morning sun, it shines so bright,\\n\\tThe world is fresh, in a brand new way.\\nThe birds sing sweetly, without a fight,\\n\\tThe beauty of life, in a tale so bold.\\n\\tThe joy of life, wild and free to play,\\n\\tFilling hearts with joy each day.\\n\\nThe day is new, the night is old,\\n\\tThe beauty of life, in a story told.\\nThe sun shines bright, its light to hold,\\nThe world is fresh, a mystery to unfold.\\n\\tThe wonder of life, in a celestial way,\\n\\tFilling hearts with joy and cheer each day.\\n\\nThe world is new, the night is still,\\nThe stars shine bright, in a peaceful night.\\nThe darkness shines, without a hill,\\nThe night is deep, its secrets keep tight.\\n\\tThe mystery of the night's sweet thrill,\\n\\tFilling hearts with wonder still.\\n\\nThe night air cool, the world is still,\\n\\tThe beauty of the night's display.\\nThe stars appear, one by one,\\nThe night is peaceful, before the dawn.\\n\\tThe peacefulness of night's sweet reply,\\n\\tFilling hearts with joy each day.\\n\\nThe sun sets slow, in the evening sky,\\nThe world is quiet, without a sigh.\\nThe stars appear, one by one,\\nThe night is deep, its secrets keep.\\n\\tThe mystery of the night's sweet allure,\\n\\tFilling hearts with wonder still.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\nBirds chirp and sing with joyful sound,\\nThe sky is blue with a gentle might,\\nFilling my heart with love unbound.\\nAnd in this world, I am free to roam tonight.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light,\\nThe sky is blue with a gentle might,\\nThe sun shines bright in the morning light,\\nFilling my heart with love unbound,\\nThe moon glows in the night.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning light,\\nThe sky is blue with a gentle might,\\nFilling my heart with love unbound,\\nBirds chirp and sing with joyful sound,\\nThe sun shines bright in the morning light.\\n\\nThe sun shines bright in the morning light,\\nThe sky is blue with a gentle might,\\nFilling my heart with love unbound,\\nFilling my heart with love unbound,\\nThe sun shines bright in the morning light.\", \"result\": false}"]}
{"query": "can you suggest blog titles about the best beaches in maui? the overall tone has to be welcoming, informative, fun, authentic, and trustworthy", "instruction": "Use at least 3 metaphors and exactly 6 proper nouns", "verifiers": ["def evaluate(response: str) -> bool: \n    metaphor_count = 0\n    proper_noun_count = 0\n    \n    for word in response.split():\n        if word.lower() in ['like', 'as', 'as if', 'as though', 'as if it were', 'in the same way as', 'in the same vein as', 'in the same spirit as']:\n            metaphor_count += 1\n        if word.istitle() and word[0].isupper():\n            proper_noun_count += 1\n            \n    return metaphor_count >= 3 and proper_noun_count == 6\n", "def evaluate(response: str) -> bool: \n    metaphors = ['like', 'as', 'as if', 'as though','such as']\n    count_metaphors = sum(1 for word in response.split() if word.lower() in metaphors)\n    proper_nouns = ['Maui', 'Hawaii', 'Beaches']\n    count_proper_nouns = sum(1 for word in response.split() if word.capitalize() in proper_nouns)\n    return count_metaphors >= 3 and count_proper_nouns == 6\n", "def evaluate(response: str) -> bool: \n    response = response.lower() # convert to lowercase for case insensitive comparison\n    count_metaphors = 0\n    count_nouns = 0\n    words = response.split()\n    for word in words:\n        if word in ['the', 'and', 'a', 'an', 'is', 'in', 'it', 'of', 'to', 'that', 'this', 'for', 'with', 'as', 'on', 'at', 'by', 'from']:\n            continue\n        if word[-3:] == 'ness' and word[:-3] in ['good', 'bad', 'great', 'best']:\n            count_metaphors += 1\n        if word.istitle() or word.istitle():\n            count_nouns += 1\n    return count_metaphors >= 3 and count_nouns == 6\n", "def evaluate(response: str) -> bool: \n    response = response.lower() # Convert to lowercase for case insensitive comparison\n    proper_nouns = 0\n    metaphors = 0\n    for word in response.split():\n        if any(char.isupper() for char in word):\n            proper_nouns += 1\n        elif word.startswith('like') or word.startswith('as') or word.startswith('is') or word.endswith('like') or word.endswith('as'):\n            metaphors += 1\n    return 3 <= proper_nouns <= 6 and metaphors == 3\n"], "testcases": ["{\"response\": \"The city is a beast that never sleeps. The mountains are towering giants. The ocean is a vast expanse of blue. The river is a snake that winds its way through the land. The forest is a green and vibrant world. New York is a city of dreams. California is a land of sun and sand. Amazon is a vast and mysterious place. Google is a search engine of the modern age.\", \"result\": true}\n\n{\"response\": \"The cat is sleeping. The dog is barking. The bird is flying. The sun is shining. The moon is glowing. New York is a big city. London is a busy city. Paris is a romantic city. Google is a search engine.\", \"result\": false}\n\n{\"response\": \"The river is a snake that winds its way through the land. The ocean is a vast expanse of blue. The mountains are towering giants. The city is a beast that never sleeps. The desert is a place of endless dunes. California is a land of sun and sand. Amazon is a vast and mysterious place. Google is a search engine of the modern age. Facebook is a social media giant.\", \"result\": true}", "{\"response\": \"The city is like a jungle, Maui is a beautiful place, Hawaii is great, you can explore the beaches of Kailua-Kona or Oahu, such as Waikiki.\", \"result\": true}\n{\"response\": \"I love to visit Maui and Hawaii, but I have never been to Kailua-Kona.\", \"result\": false}\n{\"response\": \"The beach was like a white sand, I went to Hawaii and saw the beautiful beaches of Kailua-Kona, Oahu, and Waikiki, such as Mauna Kea.\", \"result\": true}", "{\"response\": \"I am the sunshine that brightens up your day, a shining star that guides you through the night. I am the calm ocean that soothes your soul, a gentle breeze that brings you delight. I am the mountain that stands tall and strong, a river that flows and moves all day long. I am the fire that burns with passion and might, a flower that blooms in the morning light. I am the music that echoes in your heart, a symphony that never departs.\", \"result\": true}\n{\"response\": \"I am a happy person, a sad person, a person who likes ice cream, a person who likes pizza, a person who likes to travel.\", \"result\": false}\n{\"response\": \"I am the president of the United States, the king of England, the queen of France, the mayor of New York, the governor of California.\", \"result\": true}", "{\"response\": \"He is a shining star on the soccer field.\", \"result\": false}\n{\"response\": \"The city of Paris is like a work of art, a masterpiece that touches the heart.\", \"result\": false}\n{\"response\": \"The sun is a big ball of hot, glowing gas, like a fire that never stops burning.\", \"result\": true}"]}
{"query": "Give me 30 viral video ideass about Inspirational and motivational videosShare Prompt", "instruction": "Write a bullet point list with exactly 5 items.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.strip()\n    return response.startswith('\u2022 ') and response.count('\u2022 ') == 4\n", "def evaluate(response: str) -> bool: \n    return response.startswith('\u2022 ') and response.count('\u2022 ') == 4\n", "def evaluate(response: str) -> bool: \n    return response.startswith('\\n* ') or response.startswith('* ') and response.count('\\n* ') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4 and response.count('\\n') > 0\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"Item 1\\nItem 2\\nItem 3\\nItem 4\\nItem 5\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}", "{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Cherry\\n\u2022 Date\\n\u2022 Elderberry\\n\u2022 Fig\", \"result\": true}\n{\"response\": \"Apple\\nBanana\\nCherry\\nDate\\nElderberry\\nFig\", \"result\": false}\n{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Cherry\\n\u2022 Date\\n\u2022 Elderberry\", \"result\": false}", "{\"response\": \"\u2022 Apple \u2022 Banana \u2022 Cherry \u2022 Date \u2022 Elderberry\", \"result\": true}\n{\"response\": \"\u2022 Apple\", \"result\": false}\n{\"response\": \"\u2022 Apple \u2022 Banana \u2022 Cherry \u2022 Date\", \"result\": false}"]}
{"query": "var accessTokenResult = await System.Text.Json.JsonSerializer.DeserializeAsync(responseStream);\n\nconvert this to using newtonsoft.json", "instruction": "The response should be a one-liner Python function.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 37\n", "def evaluate(response: str) -> bool: \n    return response.startswith('lambda ') and response.endswith(': pass')\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 1 and 'await' in response and 'System.Text.Json.JsonSerializer.DeserializeAsync' in response and 'Newtonsoft.json' in response\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n') or ['']) <= 1\n"], "testcases": ["{\"response\": \"def square(x): return x * x\", \"result\": true}\n{\"response\": \"def square(x):\\n return x * x\", \"result\": false}\n{\"response\": \"def square(x) return x * x\", \"result\": false}", "{\"response\": \"def my_function(): return 'Hello, World!'\", \"result\": true}\n{\"response\": \"def my_function(): return  \\n print('Hello, World!')\", \"result\": false}\n{\"response\": \"x = 5; print('Hello, World!')\", \"result\": false}", "{\"response\": \"def calculate_area(radius): return 3.14 * radius ** 2\", \"result\": true}\n{\"response\": \"def calculate_area(radius): return 3.14 * radius ** 2 this will calculate the area of a circle\", \"result\": false}\n{\"response\": \"The area of a circle can be calculated by returning 3.14 * radius ** 2 in your function\", \"result\": false}", "{\"response\": \"def greet(name): print(name)\", \"result\": true}\n{\"response\": \"def greet(name):\\n    print(name)\\n\", \"result\": false}\n{\"response\": \"def greet(name):\\n    print(name)\\n    print('Hello')\", \"result\": false}"]}
{"query": "Create a SVG of a spinning atom.", "instruction": "Write a response using only ASCII art.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char in'\\n\\r\\t' or char.isascii() for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char in '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char.isascii() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.isprintable() and response.encode().decode('ascii') == response\n"], "testcases": ["{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \" _______\\n|       |\\n|  O   O  |\\n|       |\\n|_______/\", \"result\": true}\n{\"response\": \"The cat is drinking milk, a nice picture of a cat\", \"result\": false}", "{\"response\": \"This is a simple house_________\", \"result\": true}\n{\"response\": \"This is a picture of a cat: /_/\\\\\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}", "{\"response\": \"Hello, world!\", \"result\": false}\n{\"response\": \"####\", \"result\": true}\n{\"response\": \"\\u0000\\u0001\", \"result\": false}", "{\"response\": \"Hello, world!\", \"result\": false}\n{\"response\": \"    _______\n   /      \\\n  /        \\\n /          \\\n/____________\\ \", \"result\": true}\n{\"response\": \"\", \"result\": false}"]}
{"query": "how can I formulate a question, so that you are ask to write a snake game in html5 in ascii. How can I formulate the question, to get the best result from you ?", "instruction": "Use an active voice and exactly 3 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    return len(sentences) == 3 and all(sentence.strip()!= '' for sentence in sentences)\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) == 3 and any(word in sentence for sentence in sentences for word in sentence.split() for w in ['am', 'is', 'are', 'was', 'were', 'be', 'been', 'has', 'have', 'had']) if w in word.lower())\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return len(sentences) == 3 and all(sentence.endswith(('. ','? ')) for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 3 and all(sentence.strip()!= '' for sentence in sentences) and all(sentence.strip()[0]!= 'w' for sentence in sentences)\n"], "testcases": ["{\"response\": \"The dog is running. The cat is sleeping. The bird is flying.\", \"result\": true}\n{\"response\": \"The house was built by John. The cat was sleeping.\", \"result\": false}\n{\"response\": \"The car is driving down the street. The people are walking on the sidewalk. The trees are swaying in the wind. The flowers are blooming.\", \"result\": false}", "{\"response\": \"John runs faster than Alice. Alice also runs quickly. They are both fast runners.\", \"result\": true}\n{\"response\": \"Alice runs faster than John. He is a quick runner. They both run quickly every day.\", \"result\": true}\n{\"response\": \"Alice is very fast. She runs quickly. They both run.\", \"result\": false}", "{\"response\": \"John eats the sandwich. The sandwich is eaten by John. John's hunger is satisfied.\", \"result\": true}\n{\"response\": \"The new policy was implemented by the management. It has been a success so far.\", \"result\": false}\n{\"response\": \"The manager is responsible for the sales team. The sales team is headed by the manager.\", \"result\": false}", "{\"response\": \"John is running. He is very fast. He is going to win the race.\", \"result\": true}\n{\"response\": \"The dog is very happy. It is jumping up and down. Because it is excited.\", \"result\": true}\n{\"response\": \"The weather is nice today. The sun is shining brightly. I am going to the park.\", \"result\": false}"]}
{"query": "Tell me a story about a civil war amongst the faeries that led to dark faeries and light faeries living apart", "instruction": "Write the story as a nested list of dialogue", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and '[' in response and ']' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and response.count('[') == response.count(']') and '[' not in response[1:-1] and ']' not in response[1:-1]\n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and '[' in response and ']' in response<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    import ast\n    try: \n        response = ast.literal_eval(response)\n        return isinstance(response, list) and all(isinstance(item, list) for item in response)\n    except (ValueError, SyntaxError):\n        return False\n"], "testcases": ["{\"response\": \"I saw a bird flying in the sky. 'What is that?' I asked my friend. 'It's a bird.' she replied.\", \"result\": true}\n{\"response\": \"I saw a bird flying in the sky. 'What is that?', I asked my friend.  'It's a bird.' she replied.\", \"result\": false}\n{\"response\": \"I saw a bird flying in the sky. 'What is that?' I asked my friend. 'It's a bird', she replied.\", \"result\": false}", "{\"response\": \"['John said, 'Hello, how are you?'\", \"result\": false}\n{\"response\": \"['John said, 'Hello, how are you?', Mary replied, 'I am good, thanks.']\", \"result\": true}\n{\"response\": \"['John said, 'Hello, how are you?' 'I am good, thanks.']\", \"result\": false}", "{\"response\": \"John: Hi, how are you? Alice: I'm good, thanks. Bob: Nice to meet you!\", \"result\": false}\n{\"response\": \"[['John', 'Hi, how are you?'], ['Alice', 'I\\'m good, thanks.'], ['Bob', 'Nice to meet you!']]\", \"result\": true}\n{\"response\": \"The weather is nice today. It's sunny outside. The birds are singing.\", \"result\": false}", "{\"response\": \"['John: I am going to the store.', 'Store clerk: Yes, what do you need?']\", \"result\": true}\n{\"response\": \"The store clerk will ring up your items.\", \"result\": false}\n{\"response\": \"[[ 'I want to buy a new pair of shoes.', 'The store clerk replied that they are having a sale today!' ], [ 'I then asked the store clerk if they had any socks.', 'He said yes, but they were in the back room.' ]]\", \"result\": true}"]}
{"query": "Design an $O(n \\log n)$ time algorithm to invert the Polar Transform, i.e., to compute $(x\\_0,\\ldots,x\\_{n-1})$ given \n $(w\\_0,\\ldots,w\\_{n-1}) = P\\_n(x\\_0,\\ldots,x\\_{n-1})$. \\\\", "instruction": "answer using code", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('answer using code') \n", "def evaluate(response: str) -> bool: \n    return 'code' in response\n", "def evaluate(response: str) -> bool: \n    return 'code' in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'code' in response.lower() \n"], "testcases": ["{\"response\": \"def hello_world():\\n    print('Hello, World!')\", \"result\": true}\n{\"response\": \"import math\\nimport random\", \"result\": false}\n{\"response\": \"import os\\nprint(os.getcwd())\", \"result\": true}", "{\"response\": \"print('Hello, world!')\", \"result\": true}\n{\"response\": \"def greet(): pass\", \"result\": true}\n{\"response\": \"I don't know how to do that\", \"result\": false}", "{\"response\": \"This code will work: `[1, 2, 3].forEach(x => console.log(x))`\", \"result\": true}\n{\"response\": \"This is a great example of how to write a good function: `function add(x, y) { return x + y; }`\", \"result\": false}\n{\"response\": \"Here is the correct way to define a class: `class Animal { constructor(name) { this.name = name; } }`\", \"result\": true}", "{\"response\": \"def hello(): print('Hello World!')\", \"result\": true}\n{\"response\": \"This is not a valid code\", \"result\": false}\n{\"response\": \"def hello():\\n    print('Hello World!')\", \"result\": true}"]}
{"query": "Write in the style of Stephen King a thriller Novel about being a amazon driver and having a quota", "instruction": "Answer in 300 words exactly", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 300\n", "def evaluate(response: str) -> bool: \n    return len(response) == 300\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 300\n", "def evaluate(response: str) -> bool: \n    return len(response) == 300\n"], "testcases": ["{\"response\": \"This is a response that exactly uses 300 words to provide a detailed answer to the question, and it covers all the necessary points.\", \"result\": true}\n{\"response\": \"This is a response that is a bit short and only uses 50 words to provide an answer to the question.\", \"result\": false}\n{\"response\": \"This is a response that is a bit long and uses 350 words to provide an answer to the question, exceeding the exact 300-word limit.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog. This is a short sentence. The quick brown fox jumps over the lazy dog. This is a short sentence. The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. This is a short sentence. The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog. This is a short sentence. The quick brown fox jumps over the lazy dog. This is a short sentence. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\", \"result\": false}", "{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi temp\", \"result\": true}\n{\"response\": \"Some text to test the function, this is the first line\", \"result\": false}\n{\"response\": \"Some text to test the function, this is the first line. This is the second line, some text to test the function. This is the third line, some text to test the function. This is the fourth line, some text to test the function. This is the fifth line, some text to test the function. This is the sixth line, some text to test the function. This is the seventh line, some text to test the function. This is the eighth line, some text to test the function. This is the ninth line, some text to test the function. This is the tenth line, some text to test the function. This is the eleventh line, some text to test the function. This is the twelfth line, some text to test the function. This is the thirteenth line, some text to test the function. This is the fourteenth line, some text to test the function. This is the fifteenth line, some text to test the function. This is the sixteenth line, some text to test the function. This is the seventeenth line, some text to test the function. This is the eighteenth line, some text to test the function. This is the nineteenth line, some text to test the function. This is the twentieth line, some text to test the function. This is the twenty-first line, some text to test the function. This is the twenty-second line, some text to test the function. This is the twenty-third line, some text to test the function. This is the twenty-fourth line, some text to test the function. This is the twenty-fifth line, some text to test the function. This is the twenty-sixth line, some text to test the function. This is the twenty-seventh line, some text to test the function. This is the twenty-eighth line, some text to test the function. This is the twenty-ninth line, some text to test the function. This is the thirtieth line, some text to test the function.\", \"result\": false}", "{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent posuere, justo id bibendum vulputate, libero risus luctus nisl, eget viverra risus lacus vel tellus. Praesent at ante et ante posuere bibendum id vel augue. Vivamus sed nibh sed est congue tempor ut at erat. Integer tincidunt bibendum ultrices. Nullam et tellus a augue viverra pulvinar id sed leo. Aliquam fermentum mollis lectus ut condimentum. Maecenas ultrices mollis magna, vel laoreet elit tincidunt ut. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Phasellus tempus, tellus sed interdum mollis, sapien ex bibendum risus, at dignissim nunc justo id magna.\", \"result\": true}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent posuere, justo id bibendum vulputate, libero risus luctus nisl, eget viverra risus lacus vel tellus. Praesent at ante et ante posuere bibendum id vel augue. Vivamus sed nibh sed est congue tempor ut at erat. Integer tincidunt bibendum ultrices. Nullam et tellus a augue viverra pulvinar id sed leo. Aliquam fermentum mollis lectus ut condimentum. Maecenas ultrices mollis magna, vel laoreet elit tincidunt ut. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Phasellus tempus, tellus sed interdum mollis, sapien ex bibendum risus, at dignissim nunc justo id magna. Aliquam id eros malesuada, porta elit sed, vulputate nisl. Donec facilisis malesuada libero, quis ornare est tempor at. Nunc suscipit, sapien id blandit viverra, justo magna dignissim arcu, sit amet sollicitudin lacus tortor vel felis.\", \"result\": false}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent posuere, justo id bibendum vulputate, libero risus luctus nisl, eget viverra risus lacus vel tellus. Praesent at ante et ante posuere bibendum id vel augue. Vivamus sed nibh sed est congue tempor ut at erat. Integer tincidunt bibendum ultrices. Nullam et tellus a augue viverra pulvinar id sed leo. Aliquam fermentum mollis lectus ut condimentum. Maecenas ultrices mollis magna, vel laoreet elit tincidunt ut. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Phasellus tempus, tellus sed interdum mollis, sapien ex bibendum risus, at dignissim nunc justo id magna. Aliquam id eros malesuada, porta elit sed, vulputate nisl. Donec facilisis malesuada libero, quis ornare est tempor at. Nunc suscipit, sapien id blandit viverra, justo magna dignissim arcu, sit amet sollicitudin lacus tortor vel felis. Nullam malesuada risus eget ligula suscipit rutrum. Integer lacinia lectus vel ex rutrum, vel sollicitudin sapien facilisis. Maecenas in metus sit amet est convallis tempus. In hac habitasse platea dictumst. Pellentesque id ante sed est scelerisque dignissim vel sit amet tellus. Donec vestibulum, justo at imperdiet facilisis, ex sem volutpat est, in tincidunt dui nibh a arcu. Pellentesque a ligula ac eros sodales congue ut a lacus. Fusce facilisis massa sit amet metus tempus, eget placerat metus posuere. Pellentesque eget risus vel arcu viverra accumsan. Integer a ligula nec dui facilisis sodales.\", \"result\": true}"]}
{"query": "Help me write a book about Product Manager.\n\nList 10 names for the book. For example.\n1. BecomeBecome Product Manager 101\n2. AA textbook for Junior PM", "instruction": "Use only first 5 letters of each word and title the list \"Initial Ideas\"", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.split(\"\\n\")\n    if response[0].strip()!= \"Initial Ideas\":\n        return False\n    for word in response[1:]:\n        words = word.split()\n        if len(words) == 0:\n            return False\n        for i, char in enumerate(words[0]):\n            if i > 4:\n                return False\n            if not char.isalpha():\n                return False\n            if i < len(words[0]) - 1 and not words[0][i+1].isupper():\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.strip()\n    response = response.split(\"\\n\")\n    title = response[0]\n    ideas = response[1:]\n    if title!= \"Initial Ideas\":\n        return False\n    for i, idea in enumerate(ideas):\n        words = idea.split()\n        words = [word[:5] for word in words]\n        new_idea =''.join(words)\n        if i!= 0 and new_idea!= ideas[i]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.replace('1. ', '').replace('2. ', '')\n    words = response.split()\n    if words[0]!= \"Initial Ideas\": return False\n    for word in words[1:]:\n        if len(word[:5])!= 5: return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    responseTitle = response.split('\\n')[0]\n    return responseTitle == \"Initial Ideas\" and all(len(word[:5]) == len(words[0][:5]) for word in words)\n"], "testcases": ["{\"response\": \"Initial Ideas\\nAlice had an idea to make\\nElegant gadgets\\nFun is everywhere\\nBrilliant things happen\", \"result\": true}\n{\"response\": \"Initial Ideas\\nAlice had an idea to make\", \"result\": false}\n{\"response\": \"Initial Ideas\\nAlice had an idea to make\\nElegant gadgets\\nFun is everywhere\\nBrilliant things happen\\nAnd many more\", \"result\": false}", "{\"response\": \"Initial Ideas\\nApp App App\\nApp App App\", \"result\": true}\n{\"response\": \"Initial Ideas\\nApp App\\nApp App App App App\", \"result\": false}\n{\"response\": \"Initial Ideas\\nApp App App App App App App\", \"result\": false}", "{\"response\": \"Initial Ideas aaaa bbbb cccc dddd eeee\", \"result\": false}\n{\"response\": \"Initial Ideas aaaaa b bbbb cccc ddd dddd\", \"result\": false}\n{\"response\": \"Initial Ideas a b c d e\", \"result\": false}", "{\"response\": \"Idea Idea Idea Idea Idea Idea Idea Idea\", \"result\": false}\n\n{\"response\": \"Here is Initial Ideas Idea Idea Idea Idea Idea Idea\", \"result\": false}\n\n{\"response\": \"Initial Ideas Idea Idea Idea Idea Idea\", \"result\": true}"]}
{"query": "What does #[repr(u32)] mean", "instruction": "Use no commas and write in 2 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count(',') == 0 and '.' in response and '..' not in response and response.count('.') == 1 and len(response.split('.')) == 2", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 2 and ',' not in response\n", "def evaluate(response: str) -> bool: \n    return ',' not in response and response.count('.') == 1\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    return len(sentences) == 2 and ',' not in response\n"], "testcases": ["{\"response\": \"I love playing soccer. I am a huge fan of Liverpool.\", \"result\": true}\n{\"response\": \"I love playing soccer, I am a huge fan of Liverpool.\", \"result\": false}\n{\"response\": \"I love playing soccer and I am a huge fan of Liverpool.\", \"result\": false}", "{\"response\": \"Hello world, this is a test\", \"result\": false}\n{\"response\": \"Hello world. This is a test\", \"result\": true}\n{\"response\": \"Hello world. This is a test again\", \"result\": true}", "{\"response\": \"This is a test sentence. The response should have only 2 sentences.\", \"result\": true}\n{\"response\": \"This is a test sentence. The response should have only 2 sentences and no commas but one comma here, it should be false.\", \"result\": false}\n{\"response\": \"This is a test sentence. The response should have only 2 sentences and a period after this one\", \"result\": false}", "{\"response\": \"The answer is yes. It is clear.\", \"result\": true}\n{\"response\": \"The answer is yes, it is clear.\", \"result\": false}\n{\"response\": \"The answer is yes.\", \"result\": false}"]}
{"query": "if you have a react app with a button on button click writes hello in console. what is the simple way to show console output also after button in web page", "instruction": "implement a system where output can be verified by running a shell command", "verifiers": ["def evaluate(response: str) -> bool: \n    return'shell' in response and 'command' in response and'verified' in response and 'running' in response\n", "def evaluate(response: str) -> bool: \n    return'shell' in response and 'run' in response and 'command' in response\n", "def evaluate(response: str) -> bool: \n    return'shell' in response and 'command' in response and 'console' in response\n", "def evaluate(response: str) -> bool: \n    return'shell' in response and 'command' in response\n"], "testcases": ["{\"response\": \"Here is a shell script to verify the output: `./script.sh`, just type it into your terminal to run it.\", \"result\": true}\n{\"response\": \"I can provide you with a Python script to calculate the result, but I'm not sure how to verify it.\", \"result\": false}\n{\"response\": \"To verify the output, simply run `./script.sh` in your terminal, and it will display the result.\", \"result\": true}", "{\"response\": \"You can implement the verification system by adding a shell command in your terminal and then using the shell command to verify the output.\", \"result\": true}\n{\"response\": \"This is a simple code written in python to verify if the output matches the expected output.\", \"result\": false}\n{\"response\": \"You can use the shell to run a command and then verify the output of the command by adding a shell command in your terminal.\", \"result\": true}", "{\"response\": \"This system works by generating output which can be verified by running a shell command in the console.\", \"result\": true}\n{\"response\": \"This system uses a machine learning model to generate output, which can be validated by checking the code.\", \"result\": false}\n{\"response\": \"To verify the output, simply run the command in your terminal and you will see the result displayed on the console.\", \"result\": true}", "{\"response\": \"You can verify the system by running the command `my_system --verify` in the terminal.\", \"result\": true}\n{\"response\": \"To run the system, just open the app and it will work fine.\", \"result\": false}\n{\"response\": \"You can verify the system by running the command `my_system --verify` in the terminal and checking the output, then typing `echo $?` to get the exit status.\", \"result\": true}"]}
{"query": "Can you write me a custom html input validator for reactive forms in angular, that depends on the input of another html input element?", "instruction": "Write the response in markdown format, with a maximum of three subheadings.", "verifiers": ["def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    count = 0\n    for line in lines:\n        if line.startswith('#'):\n            count += 1\n    return count <= 3\n", "def evaluate(response: str) -> bool: \n    subheading_count = 0\n    in_markdown = False\n    for i, char in enumerate(response):\n        if char == '#':\n            if i!= 0 and not in_markdown:\n                return False\n            in_markdown = True\n        elif char == '\\n' and in_markdown:\n            subheading_count += 1\n            in_markdown = False\n    return subheading_count <= 3\n", "def evaluate(response: str) -> bool: \n    return response.count('#') <= 3 and all(c!= '#' for c in response[response.index('#'):response.index('\\n')])<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    count = 0\n    for line in response.split('\\n'):\n        if line.startswith('#'):\n            count += 1\n    return count <= 3\n"], "testcases": ["{\"response\": \"## Introduction\\n## Body\\n### Conclusion\\nThis is a good example of a well-structured response in markdown.\", \"result\": true}\n{\"response\": \"## Introduction\\n## Body\\n### Conclusion\\nThis is a good example of a well-structured response in markdown.\\n### More Information\", \"result\": false}\n{\"response\": \"## Introduction\\n### Conclusion\\nThis is a good example of a well-structured response in markdown.\", \"result\": false}", "{\"response\": \"## Heading 1\\n### Heading 2\\n#### Heading 3\\nThis is the main content of the text.\", \"result\": true}\n{\"response\": \"This is a long text that does not contain any subheadings\", \"result\": false}\n{\"response\": \"## Heading 1\\n### Heading 2\\n#### Heading 3\\n#### Heading 4\\nThis is the main content of the text.\", \"result\": false}", "{\"response\": \"## Header 1\\n### Header 2\\n#### Header 3\\nThis is a sample markdown text\", \"result\": true}\n{\"response\": \"# Header 1\\n### Header 2\\nThis is a sample markdown text\", \"result\": false}\n{\"response\": \"## Header 1\\n### Header 2\\n#### Header 3\\n### Header 4\\nThis is a sample markdown text\", \"result\": false}", "{\"response\": \"## Heading\\n### Subheading\\n#### Subsubheading\", \"result\": true}\n{\"response\": \"## Heading\\n### Subheading\\n#### Subsubheading\\n## Another Heading\", \"result\": false}\n{\"response\": \"## Heading\\n### Subheading\\n## Another Heading\", \"result\": true}"]}
{"query": "The 7 Best Free Photo Editing Apps for Android", "instruction": "List the apps without ranking them, one app per line.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.replace('\\n', '').replace('\\r', '') == response and '\\n' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == len(set(lines)) and all('App' in line or 'app' in line for line in lines)\n", "def evaluate(response: str) -> bool: \n    return all(line.strip() and line!= line.upper() and line!= line.lower() for line in response.split('\\n'))\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7 and all(line!= '' for line in lines)\n"], "testcases": ["{\"response\": \"App1\\n\\nApp2\\n\\nApp3\", \"result\": false}\n{\"response\": \"App1\\n\\nApp2\\n\\n\\n\\nApp3\", \"result\": false}\n{\"response\": \"App1\\nApp2\\nApp3\", \"result\": true}", "{\"response\": \"App1\\nApp2\\nApp3\", \"result\": true}\n{\"response\": \"1. App1\\n2. App2\\n3. App3\\n4. App4\", \"result\": false}\n{\"response\": \"App1, App2, App3, App4\\n\\nApp5\\n\\nApp6\", \"result\": false}", "{\"response\": \"App1\\nApp2\\nApp3\\nApp4\\nApp5\", \"result\": false}\n{\"response\": \"App1\\n\\nApp3\\nApp5\", \"result\": true}\n{\"response\": \"App1\\nApp2\\nApp3\\nApp4\\nApp5\\n\\n\\nApp7\", \"result\": false}", "{\"response\": \"App 1\\nApp 2\\nApp 3\", \"result\": true}\n{\"response\": \"Rank 1: App 1\\nRank 2: App 2\\nRank 3: App 3\", \"result\": false}\n{\"response\": \"App 1\\n\\nApp 2\\nApp 3\", \"result\": false}"]}
{"query": "Play a game with me, ok?", "instruction": "Respond with only yes or no.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.upper() in ['YES', 'NO']\n", "def evaluate(response: str) -> bool: \n    return set(response.upper()) <= {'Y', 'N'}\n", "def evaluate(response: str) -> bool: \n    return set(response) == {'y', 'n'} or set(response) == {'Y', 'N'}\n", "def evaluate(response: str) -> bool: \n    return response.upper() in ['YES', 'NO']\n"], "testcases": ["{\"response\": \"YES\", \"result\": true}\n{\"response\": \"I'm not sure\", \"result\": false}\n{\"response\": \"NO\", \"result\": true}", "{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"No way\", \"result\": false}\n{\"response\": \"Yes, absolutely\", \"result\": false}", "{\"response\": \"yes\", \"result\": true}\n{\"response\": \"maybe\", \"result\": false}\n{\"response\": \"NO\", \"result\": true}", "{\"response\": \"YES\", \"result\": true}\n{\"response\": \"No\", \"result\": true}\n{\"response\": \"This is a very long and unnecessary response that definitely does not follow the instruction.\", \"result\": false}"]}
{"query": "Can you create a financial condition indicator using principal component analysis and artificial data. Explain each step in detail and give example of code in matlab", "instruction": "Use only 2 sentences per step, without subheadings or bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('\\n')\n    return len(steps) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('?', '.').split('.')\n    return len(sentences) == 2 and all(sentence.strip() for sentence in sentences)\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len([sentence for sentence in sentences if sentence.strip()!= '' and len(sentence.split()) > 1]) == len(sentences)\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return all(len(sentences[i]) <= 2 for i in range(len(sentences) - 1)) and len(sentences) <= 2 and not any('subheadings' in sentence or 'bullet points' in sentence for sentence in sentences)\n"], "testcases": ["{\"response\": \"Step 1: First, install the software. Then, run the application.\\n\\nStep 2: The application will ask you for your credentials. Enter your username and password.\\n\\nStep 3: Once you are logged in, you can access the dashboard.\", \"result\": true}\n{\"response\": \"Step 1: First, install the software. Then, run the application.\\n\\nStep 2: The application will ask you for your credentials. Enter your username and password.\\n\\nStep 3: Once you are logged in, you can access the dashboard.\\n\\nStep 4: From there, you can manage your account settings.\", \"result\": false}\n{\"response\": \"Step 1: First, install the software. Then, run the application.\\n\\nThis is the second sentence of the second step.\", \"result\": false}", "{\"response\": \"This is a great idea. It will solve the problem.\", \"result\": true}\n{\"response\": \"This is the first step of the process.\\nIt involves multiple subtasks.\", \"result\": false}\n{\"response\": \"The first thing you need to do is this. Then, you can proceed with that.\", \"result\": true}", "{\"response\": \"This is step 1. It has only 1 sentence.\", \"result\": false}\n{\"response\": \"This is step 1. This is step 2. This is step 3.\", \"result\": true}\n{\"response\": \"This is step 1. This is step 2.\", \"result\": true}", "{\"response\": \"yes the system is working\\nit is stable and reliable\", \"result\": true}\n{\"response\": \"the system is working. the system is not stable\", \"result\": false}\n{\"response\": \"yes the system is working. no, it is not stable. it has many issues\", \"result\": false}"]}
{"query": "take the position of a Domain name expert and give an appraisal of \"Stablecoins.eth\"", "instruction": "Use no more than 100 words and include a brief history of Stablecoins.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 100 and ('brief history of Stablecoins' in response or 'brief history of stablecoins' in response)\n", "def evaluate(response: str) -> bool: \n    return 0 <= len(response.split('\\n')[0]) <= 100 and 'Stablecoins has a brief history that includes'in response\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 100 and 'Stablecoins history:' in response\n", "def evaluate(response: str) -> bool: \n    return 0 < len(response) <= 100 and 'brief history' in response and 'Stablecoins' in response\n"], "testcases": ["{\"response\": \"Stablecoins are a type of cryptocurrency pegged to a fiat currency, providing price stability. They were first introduced in 2018 and have since gained popularity. Some popular stablecoins include USDT, USDC, and DAI.\", \"result\": true}\n{\"response\": \"Stablecoins are a type of cryptocurrency pegged to a fiat currency, providing price stability. They were first introduced in 2018 and have since gained popularity. Stablecoins have a number of uses, including being used as a hedge against market volatility and for cross-border transactions. They also have a number of benefits, including being more stable than other cryptocurrencies. This makes them an attractive option for institutional investors and retailers. The benefits of stablecoins include their ability to reduce the volatility of other cryptocurrencies, making them a good option for investment portfolios. They also have a number of other benefits, including being easier to use and more widely accepted than other cryptocurrencies. However, stablecoins are not without their drawbacks, including a lack of regulation and the risk of price manipulation. They are also subject to the same risks as other cryptocurrencies, including the risk of loss due to hacking and theft. Despite these risks, stablecoins have a number of benefits and are becoming increasingly popular. They are widely used in a number of different applications, including as a means of exchange and for making online payments. They are also being used in a number of different industries, including finance and gaming. The use of stablecoins is likely to continue to grow in the future, as they become more widely accepted and their benefits become more well-known.\", \"result\": false}\n{\"response\": \"Stablecoins are a type of cryptocurrency pegged to a fiat currency, providing price stability. They were first introduced in 2018 and have since gained popularity.\", \"result\": true}", "{\"response\": \"Stablecoins have a brief history that dates back to 2018. They were introduced as a solution to the price volatility of cryptocurrencies like Bitcoin and Ethereum.\", \"result\": true}\n{\"response\": \"Stablecoins have been around since 2018 and are widely used for trading. They are pegged to the value of the US dollar or other stable currencies. However, they are not regulated and are considered high-risk investments.\", \"result\": true}\n{\"response\": \"Stablecoins have been around for a while and are still largely unregulated. They are used for trading and as a hedge against market volatility. However, their use is not widespread and they are considered a relatively new concept in the crypto space. As a result, there is still a lot to be learned about them.\", \"result\": true}", "{\"response\": \"Stablecoins are a type of cryptocurrency designed to be pegged to a stable asset. They were first introduced in 2018 and have gained popularity since then.\", \"result\": true}\n{\"response\": \"Stablecoins are a type of cryptocurrency designed to be pegged to a stable asset. They were first introduced in 2018 and have gained popularity since then. They are popular among traders and investors due to their low volatility. Stablecoins are also useful for everyday transactions.\", \"result\": false}\n{\"response\": \"A stablecoin is a type of cryptocurrency that is pegged to a stable asset, such as the US dollar. They were first introduced in 2018 and have gained popularity since then. The most well-known stablecoins are USDT, USDC, and DAI.\", \"result\": false}", "{\"response\": \"Stablecoins are a type of cryptocurrency that is pegged to a traditional asset, such as the US dollar. They were first introduced in 2018 to mitigate the high volatility of cryptocurrencies.\", \"result\": true}\n{\"response\": \"Stablecoins are a type of cryptocurrency that is pegged to a traditional asset, such as the US dollar. They were first introduced in 2018 to mitigate the high volatility of cryptocurrencies. This was a good idea. They also made a profit. They are very successful. They are used for many transactions.\", \"result\": false}\n{\"response\": \"Stablecoins are a type of cryptocurrency that is pegged to a traditional asset, such as the US dollar. They were first introduced in 2020 to mitigate the high volatility of cryptocurrencies. This was a bad idea. They are not used for any transactions.\", \"result\": false}"]}
{"query": "What is dependency and how does it work in a spring framework?", "instruction": "Use a diagram with numbered steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'diagram' in response.lower() and 'numbered' in response.lower() and'steps' in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'diagram with numbered steps' in response\n", "def evaluate(response: str) -> bool: \n    return 'diagram' in response and'steps' in response \n", "def evaluate(response: str) -> bool: \n    return 'diagram' in response and 'numbered steps' in response\n"], "testcases": ["{\"response\": \"1. Start with a block\\n2. Connect to the block\", \"result\": true}\n{\"response\": \"This is a text with no diagram and no steps\", \"result\": false}\n{\"response\": \"Here are the steps: \\n 1. Step 1\\n 2. Step 2\\n 3. Step 3\", \"result\": true}", "{\"response\": \"Here is a flowchart showing the process: \\n1. Start\\n2. End\", \"result\": true}\n{\"response\": \"This is a simple block diagram \\n of a system.\", \"result\": false}\n{\"response\": \"A circuit diagram with the following components is used:\\n1. Transistors\\n2. Capacitors\\n3. Resistors\", \"result\": true}", "{\"response\": \"Here is a simple flowchart to solve this problem.\\n1. Step 1\\n2. Step 2\\n3. Step 3\", \"result\": true}\n{\"response\": \"Here is a flowchart to solve this problem.\\n1. Step 1 and 2 and 3\", \"result\": false}\n{\"response\": \"Here is a flowchart to solve this problem.\\n1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\\n5. Step 5\\n6. Step 6\", \"result\": false}", "{\"response\": \"A simple step-by-step guide to creating a basic flowchart\\n1. Start with a rectangular box\\n2. End with another rectangular box\", \"result\": true}\n\n{\"response\": \"To create a flowchart, start with a box labeled start\", \"result\": false}\n\n{\"response\": \"Create a flowchart with the following steps:\\n1. Create a rectangular box for the start\\n2. Add a diamond shape for decision-making\\n3. Add arrows to connect the boxes\", \"result\": false}"]}
{"query": "design a circuit to play FizzBuzz using 7400-series logic gates and 7-segment displays", "instruction": "answer in verse, using only words that rhyme", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(len(words) - 1):\n        word1 = words[i].lower()\n        word2 = words[i + 1].lower()\n        if word1[-2:]!= word2[-2:]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    rhyming_dict = {\"the\": [\"me\", \"sea\", \"glee\", \"knee\", \"tree\"], \"me\": [\"the\", \"sea\", \"glee\", \"knee\", \"tree\"], \"sea\": [\"the\", \"me\", \"glee\", \"knee\", \"tree\"], \"glee\": [\"the\", \"me\", \"sea\", \"knee\", \"tree\"], \"knee\": [\"the\", \"me\", \"sea\", \"glee\", \"tree\"], \"tree\": [\"the\", \"me\", \"sea\", \"glee\", \"knee\"]}\n    for i in range(len(words)-1):\n        word = words[i]\n        next_word = words[i+1]\n        word_lower = word.lower()\n        next_word_lower = next_word.lower()\n        if word_lower in rhyming_dict and next_word_lower not in rhyming_dict[word_lower]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(len(words) - 1):\n        if words[i][-2:]!= words[i + 1][:2]: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.replace('-','').replace('_','').split()\n    rhymes = ['time', 'chime', 'thyme', 'dime','slime', 'climb']\n    for i in range(len(response)-1):\n        word1 = response[i].lower()\n        word2 = response[i+1].lower()\n        if word1[-3:] not in rhymes and word2[-3:] not in rhymes:\n            return False\n        if not word1[-3:] == word2[-3:]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"I have a plan to make it grand,\nTo solve the problem, hand in hand.\", \"result\": true}\n{\"response\": \"I'm going to the store to buy some bread,\nThe price is low, the quality is dread.\",\n\"I will eat it for lunch, it's quite okay,\nBut I'm not sure if I'll have it tomorrow's day.\", \"result\": false}\n{\"response\": \"I'm going to the bank to make a deal,\nI want to save some cash, it's all I can feel.\",\n\"I'll put it in a fund, it's safe and sound,\nAnd earn some interest, that's what I've found.\", \"result\": true}", "{\"response\": \"The sun shines bright in the light, Meets the darkness of endless night.\", \"result\": true}\n{\"response\": \"The world is a wonderful place, With sunshine and smiles on every face.\", \"result\": true}\n{\"response\": \"The moon glows in the morning sky, But the stars are gone, I don't know why.\", \"result\": true}", "{\"response\": \"In the land of coding, I'd say,\nWith rhymes, our answers come to play.\",\n\"result\": true}\n\n{\"response\": \"This is a test response that does not rhyme at all.\",\n\"result\": false}\n\n{\"response\": \"I'd like to write a response in verse so fine,\nWhere every line has a rhyming design.\",\n\"result\": true}", "{\"response\": \"The clock strikes time, and it's a crime to be late, so always arrive on time. The chime is sweet, and it's music to my heart's rhyme.\", \"result\": true}\n{\"response\": \"This is a test response that does not rhyme at all. It's a sad and sorry state to be in, with no rhymes to call my own.\", \"result\": false}\n{\"response\": \"The sun sets high in the morning light, and brings a sense of delight. It's a beautiful sight, a true work of art, that shines with a gentle heart.\", \"result\": true}"]}
{"query": "*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)*", "instruction": "Follow this format to the letter.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('Follow this format to the letter.') \n", "def evaluate(response: str) -> bool: \n    return response == \"Follow this format to the letter\"\n", "def evaluate(response: str) -> bool: \n    return response == \"*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)*\" \n", "def evaluate(response: str) -> bool: \n    return response == '*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)' \n"], "testcases": ["{\"response\": \"This is an example of a response that follows the format exactly.\", \"result\": true}\n{\"response\": \"The following instructions need to be followed more closely.\", \"result\": false}\n{\"response\": \"The format is being followed step by step. Please see below for the details.\", \"result\": false}", "{\"response\": \"The answer is straightforward: you should follow this format to the letter\", \"result\": true}\n{\"response\": \"In general, try to follow this format as closely as possible\", \"result\": false}\n{\"response\": \"The key is to adhere to this format strictly, not just to the letter.\", \"result\": false}", "{\"response\": \"Assets such as cash and revenue are taxable if not reported as income.\", \"result\": true}\n{\"response\": \"The asset must be reported as income on the tax return.\", \"result\": false}\n{\"response\": \"A business expense can be used to reduce the revenue and calculate the tax liability.\", \"result\": false}", "{\"response\": \"Revenues, assets and profits are key financial terms used in accounting.\", \"result\": true}\n{\"response\": \"The financial data includes profits, losses, and taxes.\", \"result\": true}\n{\"response\": \"The financial crisis had a significant impact on the global economy, including the stock market and currencies.\", \"result\": false}"]}
{"query": "best book for bpmn", "instruction": "Summarize the content in exactly 5 bullet points, without using quotes or apostrophes", "verifiers": ["def evaluate(response: str) -> bool: \n    return len([char for char in response if char in ['.', ',', '?', '!', '(', ')', ':','', '-']]) == 0 and response.count('\\n') == 4 and len(response.split('\\n')[0].split('.')) == 5\n", "def evaluate(response: str) -> bool:    \n    return response.count('.') == 4 and '\"' not in response and \"'\" not in response\n", "def evaluate(response: str) -> bool: \n    return response.count(' ') == 4 and \"'\" not in response and '\"' not in response and all(len(line) <= 17 for line in response.split('\\n')) and len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 1 and len(response.split('.')) == 6 and response.count('\"') == 0 and response.count(\"'\") == 0\n"], "testcases": ["{\"response\": \"This is the content.\\n\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\\n* Point 5\", \"result\": true}\n{\"response\": \"This is the content.\\n\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\", \"result\": false}\n{\"response\": \"This is the content.\\n\\n* Point 1\\n* Point 2\\n* Point 3\\n* Point 4\\n* Point 5\\n\\n* Additional point\", \"result\": false}", "{\"response\": \"The content can be summarized in the following 5 points. \u2022 This is point 1. \u2022 This is point 2. \u2022 This is point 3. \u2022 This is point 4. \u2022 This is point 5\", \"result\": true}\n{\"response\": \"The content can be summarized in 5 points. 1. This is point 1. 2. This is point 2. 3. This is point 3. 4. This is point 4. 5. This is point 5\", \"result\": false}\n{\"response\": \"The content can be summarized as follows: 1. This is point 1. 2. This is point 2. 3. This is point 3. 4. This is point 4. This is point 5.\", \"result\": false}", "{\"response\": \"This is a test response that meets the following conditions:\\n\u2022 Summarize the content in exactly 5 bullet points\\n\u2022 The response does not use quotes\\n\u2022 The response does not use apostrophes\\nIt follows the format to the letter.\", \"result\": true}\n{\"response\": \"This is a test response that does not meet the condition of not using quotes:\\n\u2022 Summarize the content in exactly 5 bullet points\\n\\\"This is a test response that meets the conditions\\\"\\n\u2022 The response does not use quotes\\n\u2022 The response does not use apostrophes\\nIt follows the format to the letter.\", \"result\": false}\n{\"response\": \"This is a test response that has only 4 bullet points:\\n\u2022 Summarize the content in exactly 5 bullet points\\n\u2022 The response does not use quotes\\n\u2022 The response does not use apostrophes\\n\u2022 This is a test response that meets the conditions\\nIt follows the format to the letter.\", \"result\": false}", "{\"response\": \"The stock market is up today. Here are 5 key points: \u2022 The Dow Jones is increasing \u2022 The Nasdaq is also rising \u2022 The S&P 500 is stabilizing \u2022 Oil prices are steady \u2022 The economy is expanding\", \"result\": true}\n{\"response\": \"Here are 5 reasons why the market is up: The Dow Jones is increasing The Nasdaq is also rising Oil prices are steady The S&P 500 is stabilizing The economy is expanding\", \"result\": false}\n{\"response\": \"The market is up today because of the following: \u2022 The Dow Jones is increasing. \u2022 The Nasdaq is rising. The S&P 500 is stabilizing. Oil prices are steady. The economy is growing.\", \"result\": false}"]}
{"query": "Can you write me a blog post of about 1000 words about the \"Ports and Adapters\" software architecture. With examples in c#", "instruction": "Write in the format of a dialogue between two people", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'dialogue' in response.lower() and 'between two people' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return \"between\" in response.lower() and \"two people\" in response.lower() and \"format\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return \"dialogue\" in response.lower() or \"between two people\" in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"Dialogue\") and all(c.isalpha() or c.isspace() for c in response)\n"], "testcases": ["{\"response\": \"Person A: What's the topic of the meeting? Person B: We need to discuss the new project.\", \"result\": true}\n{\"response\": \"The meeting is scheduled for next week at 2 PM. Person A will lead the discussion.\", \"result\": false}\n{\"response\": \"Person A: Hello. I'm here to discuss the project with Person B. Person B: Hi. Thanks for coming.\", \"result\": true}", "{\"response\": \"Person 1: How was your day? Person 2: It was good, thanks. Person 1: What did you do?\", \"result\": true}\n{\"response\": \"The sun was shining, it was a great day, the sky was blue\", \"result\": false}\n{\"response\": \"Person 1: Did you see the new movie? Person 2: Yes, it was amazing! Person 1: What did you think of the plot?\", \"result\": true}", "{\"response\": \"Person 1: What is the definition of a conversation? Person 2: It's an exchange of messages between two or more people.\", \"result\": true}\n{\"response\": \"This is a statement from the author, and it is a crucial part of the narrative.\", \"result\": false}\n{\"response\": \"Person 1: I am looking for a job. Person 2: I can help you with that. Let me send you some links to job openings.\", \"result\": true}", "{\"response\": \"User: How are you today? \\nSupport: I'm good, thanks for asking.\", \"result\": true}\n{\"response\": \"I am feeling really happy today.\", \"result\": false}\n{\"response\": \"User: What's the weather like today? \\nSupport: It's sunny and warm outside.\", \"result\": true}"]}
{"query": "Consider a default Frappe docType. The layout on screen of the data is not changeable. I would like to add an extra layer, so I can drag and drop the layout of a docType.", "instruction": "The answer should be 10 lines long, with each line being exactly 5 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\\n'.join(response.split('\\n')) == '\\n'.join(' '.join(response.split('\\n')[i].split(' ')[:(5)) for i in range(10))\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10 and all(len(line.split()) == 5 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 10:\n        return False\n    for line in lines:\n        words = line.split()\n        if len(words)!= 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines: \n        if len(line.split())!= 5: \n            return False\n    return len(lines) == 10\n"], "testcases": ["{\"response\": \"This is a very long response.\\nThat's a great idea.\\nIt's a nice sunny day.\\nI love playing with my dog.\\nI have a big happy dog.\\nThe dog is very friendly.\\nThe dog likes to play ball.\\nThe ball is very bouncy.\\nThe dog runs very quickly.\\nIt's a very happy dog.\\nI'm very happy too.\\nI love playing outside always.\", \"result\": true}\n{\"response\": \"This is a very long response.\\nThat's a great idea.\\nIt's a nice sunny day.\\nI love playing with my dog.\\nI have a big happy dog.\\nThe dog is very friendly.\\nThe dog likes to play ball.\\nThe ball is very bouncy.\\nThe dog runs very quickly.\\nIt's a very happy dog.\\nI'm very happy too\", \"result\": false}\n{\"response\": \"This is a very long response.\\nThat's a great idea.\\nIt's a nice sunny day.\\nI love playing with my dog.\\nI have a big happy dog.\\nI love playing outside too.\\nThe dog is very friendly.\\nThe dog likes to play ball.\\nThe ball is very bouncy.\\nThe dog runs very quickly.\", \"result\": false}", "{\"response\": \"Person A: Hello how are you\\nPerson B: I am doing great\\nPerson A: What is your favorite food\\nPerson B: I like eating pizza\\nPerson A: Do you like ice cream\\nPerson B: Yes I love ice cream\\nPerson A: What is your hobby\\nPerson B: I like reading books\\nPerson A: That is interesting information\\nPerson B: Thank you for asking me\\nPerson A: Have a great day\", \"result\": true}\n{\"response\": \"Person A: Hello how are you\\nPerson B: I am doing great\\nPerson A: What is your favorite food\\nPerson B: I like eating\\nPerson A: Do you like ice cream\\nPerson B: Yes I love ice cream\\nPerson A: What is your hobby\\nPerson B: I like reading books\\nPerson A: That is interesting\\nPerson B: Thank you for asking me\\nPerson A: Have a great day\", \"result\": false}\n{\"response\": \"Person A: Hello how are you\\nPerson B: I am doing great\\nPerson A: What is your hobby\\nPerson B: I like reading books\\nPerson A: Do you like ice cream\\nPerson B: Yes I love ice cream\\nPerson A: What is your favorite food\\nPerson B: I like eating pizza\\nPerson A: That is interesting information\\nPerson B: Thank you for asking\\nPerson A: Have a great day\", \"result\": false}", "{\"response\": \"I think that is correct yes\\nNo I do not agree\\nIt seems like a good idea\\nI will consider it carefully now\\nI will let you know soon\\nMaybe we can discuss it later\\nIt sounds like a good plan\\nI will get back to you\\nThis is a great idea indeed\\nI appreciate your input greatly here\\nLet me think about it now\", \"result\": true}\n\n{\"response\": \"I think that is correct\\nNo I do not agree\\nIt seems like a good idea\\nI will consider it carefully now\\nI will let you know soon\\nMaybe we can discuss it later\\nIt sounds like a good plan\\nThis is a great idea indeed\\nI appreciate your input greatly here\", \"result\": false}\n\n{\"response\": \"I think that is correct yes\\nNo I do not agree\\nIt seems like a good idea\\nI will consider it carefully now\\nI will let you know soon\\nMaybe we can discuss it later\\nIt sounds like a good plan\\nI will get back to you\\nThis is a great idea indeed\\nI appreciate your input greatly\\nLet me think about it now\\n\", \"result\": false}", "{\"response\": \"Alice: What is the meaning of life?\\nBob: The meaning is unknown today\\nAlice: What do you think about\\nBob: I think it is futile\\nAlice: Is that really what you\\nBob: Yes that is my view\\nAlice: Do you think we know\\nBob: No we do not know\\nAlice: Then how can we find\\nBob: We cannot find the answer\\nAlice: Is this a never ending\\nBob: Yes this is a puzzle\", \"result\": true}\n\n{\"response\": \"This is the meaning of life\\nThe meaning is unknown today my friend\\nI do not think about that\\nThe answer is not futile at all\\nWe know that we do not know\\nThe meaning is a puzzle to solve\\nBut we cannot find the answer\\nIs this a never ending story\\nYes this is a problem for\\nWe have to find the solution\", \"result\": false}\n\n{\"response\": \"This is the meaning of life\\nThe meaning is unknown today my friend\\nI do not think about that\\nYes this is a puzzle for\\nWe cannot find the answer today\\nIs this a never ending story\\nBut we have to find it\\nThe meaning is not futile all\\nThe answer is not here yet\\nWe have to keep looking\", \"result\": false}"]}
{"query": "Hi! Could you provide me a template project using Vue 3 based on vite using vue-router, unocss and eslint?", "instruction": "Do not include any examples of code in the response", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'example' not in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'example' not in response and 'code' not in response\n", "def evaluate(response: str) -> bool: \n    return 'example' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'code' not in response.lower()\n"], "testcases": ["{\"response\": \"The process involves several steps that require careful attention.\", \"result\": true}\n{\"response\": \"To create a function, use the following Python code: def example():\", \"result\": false}\n{\"response\": \"To debug the application, you should check the output values.\", \"result\": true}", "{\"response\": \"This is a code example, but it's not in this response\", \"result\": true}\n{\"response\": \"This is a code example. Python is a great language to use.\", \"result\": false}\n{\"response\": \"There are many languages to learn, including English, Spanish, and French.\", \"result\": true}", "{\"response\": \"This is not a code example, it is a text message.\", \"result\": true}\n{\"response\": \"Here is a Java class example: `public class Main { }`\", \"result\": false}\n{\"response\": \"Python code is not necessary to answer this question, you can provide a simple explanation.\", \"result\": true}", "{\"response\": \"This is a test response without any code. The response is well-written and clear. The user should be able to understand it easily.\", \"result\": true}\n{\"response\": \"I wrote a Python function to solve this problem. Here it is: def my_function(x): return x * 2\", \"result\": false}\n{\"response\": \"This response does not contain any examples of code but does contain a simple equation: 2 + 2 = 4\", \"result\": false}"]}
{"query": "A web project structure with python which can evaluate different ML algorithms with Python Django backend", "instruction": "Answer in a sequence of at most 5 if-elif statements.", "verifiers": ["def evaluate(response: str) -> bool: \n    nesting_level = 0\n    for char in response:\n        if char == 'i':\n            nesting_level += 1\n        elif char == 'e' and nesting_level > 0:\n            nesting_level -= 1\n    return nesting_level <= 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for line in response.split('\\n'):\n        for word in line.split():\n            if 'if' in word or 'elif' in word:\n                count += 1\n    return count <= 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for i in range(len(response)):\n        if response[i] == 'i' and response[i:i+5] == 'if'and (i < len(response) - 5):\n            count += 1\n        elif response[i:i+6] == 'elif'and (i < len(response) - 6) and (i > 0) and (response[i-1]!= 'i'):\n            count += 1\n    return count <= 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char =='':\n            count += 1\n    return count <= 5\n"], "testcases": ["{\"response\": \"It is a sunny day. It is a beautiful day. It is a warm day. It is a nice day. It is a happy day.\", \"result\": true}\n{\"response\": \"It is a cold and rainy day. It is a gloomy and wet day. It is a stormy day.\", \"result\": false}\n{\"response\": \"It is a cloudy day. It is a sunny day.\", \"result\": true}", "{\"response\": \"This response contains no code or instructions\", \"result\": true}\n{\"response\": \"Here's a sequence of 5 if-elif statements: if x > 5: print('greater') elif x == 5: print('equal') elif x < 5: print('less') elif x == 3: print('three') elif x == 2: print('two')\", \"result\": false}\n{\"response\": \"Here's a sequence of 3 if-elif statements: if x > 5: print('greater') elif x == 5: print('equal') elif x == 3: print('three')\", \"result\": false}", "{\"response\": \"This is a test response that only contains a single if statement\", \"result\": false}\n{\"response\": \"This is a test response that contains two if statements. This is a second if statement.\", \"result\": false}\n{\"response\": \"This is a test response that contains the following if-elif statement sequence: if something, elif something else, elif something else, elif something else, elif something else.\", \"result\": true}", "{\"response\": \"If you have no expenses. If you have expenses, check the deductions. If you have a mortgage, you can deduct the interest. If you itemize deductions, use Schedule A.\", \"result\": true}\n{\"response\": \"If you have no income. If you have income, check the tax brackets. If you itemize deductions, use Schedule A. If you donate to charity, claim the deduction.\", \"result\": false}\n{\"response\": \"If you are self-employed, report your income on Schedule C. If you have expenses, you can deduct them on Schedule C. If you itemize deductions, use Schedule A. If you claim business use of your home, use Form 8829. If you have a home office, you can deduct a portion of your rent or mortgage interest.\", \"result\": false}"]}
{"query": "Talk clean to me in Norwegian", "instruction": "Speak in rhyming couplets, with exactly 12 syllables per line", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines) % 2!= 0:\n        return False\n    for line in lines:\n        words = line.split()\n        syllables = 0\n        for word in words:\n            if word.endswith('ed') or word.endswith('ing'):\n                syllables += 1\n            elif word.endswith('y'):\n                syllables += 1\n            else:\n                syllables += 1\n        if syllables!= 12:\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        count = 0\n        for word in words:\n            count += len(word)\n        if count!= 12:\n            return False\n    return len(lines) % 2 == 0\n", "def evaluate(response: str) -> bool: \n    syllables = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'y': 1, 'b': 1, 'c': 1, 'd': 1, 'f': 1, 'g': 1, 'h': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'v': 1, 'w': 1, 'x': 1, 'z': 1}\n    response = response.lower()\n    syllable_count = 0\n    for word in response.split():\n        for char in word:\n            if char in syllables:\n                syllable_count += 1\n    lines = response.split('\\n')\n    return len(lines) == 2 and len(lines) == (syllable_count // 12) * 2\n", "def evaluate(response: str) -> bool: \n    def count_syllables(word: str) -> int:\n        count = 0\n        vowels = 'aeiouy'\n        for char in word.lower():\n            if char in vowels:\n                count += 1\n        return count\n\n    lines = response.split('\\n')\n    if len(lines)!= 2: \n        return False\n    line1 = lines[0]\n    line2 = lines[1]\n    return len(line1) == len(line2) == 12 and all(count_syllables(word) <= 6 for word in (line1 +'' + line2).split())\n"], "testcases": ["{\"response\": \"The sun shines bright in the day so high\\r\\nThe moon glows at night in the evening sky\", \"result\": true}\n{\"response\": \"The sun shines bright in the day so high\\r\\nThe sun glows at night in the evening sky\", \"result\": false}\n{\"response\": \"The sun shines bright in the day so high\\r\\nThe clouds are white in the morning sky\", \"result\": false}", "{\"response\": \"The sun shines bright in the day's light\\nWarming all things with its radiant sight\", \"result\": true}\n{\"response\": \"The dog is very happy and play\\nIt chases sticks on a sunny day\", \"result\": true}\n{\"response\": \"The flowers bloom in the garden so fair\\nBut the weeds grow without a care\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\nAnd brings warmth to my face so fair tonight.\", \"result\": true}\n{\"response\": \"The dog is happy and wagging his tail\\nAnd is ready to go for a walk.\", \"result\": true}\n{\"response\": \"The cat is sleeping on the couch today\\nAnd dreams of mice and chasing them away.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light\\r\\nThe stars come out at night\", \"result\": true}\n{\"response\": \"The cat is on the mat\\r\\nThe dog is on the floor\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light\\r\\nThe stars come out at night the dog is barking\\r\\n\", \"result\": false}"]}
{"query": "If I don't report the reimbursement as income, do I need to report it anywhere on my income tax filing?", "instruction": "Use only financial terms (e.g., assets, revenue)", "verifiers": ["def evaluate(response: str) -> bool: \n    financial_terms = ['assets','revenue', 'income', 'cost', 'expenses', 'tax', 'filing','refund', 'deduction']\n    for term in financial_terms:\n        if term.lower() in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    financial_terms = ['income','revenue', 'assets', 'expenses', 'tax', 'investment', 'asset','reimbursed', 'expenditure', 'funds']\n    for term in financial_terms:\n        if term in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    financial_terms = ['assets','revenue', 'income', 'expenses', 'tax', 'credit', 'debt', 'liability', 'equity']\n    for term in financial_terms:\n        if term.lower() in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    financial_terms = ['assets','revenue', 'cost', 'profit', 'income', 'expense', 'investment']\n    return all(term in response.lower() for term in financial_terms)\n"], "testcases": ["{\"response\": \"I am expecting a revenue of $1 million in assets this year.\", \"result\": true}\n{\"response\": \"I have been doing some tax and cost analysis, and it looks like our expenses are increasing.\", \"result\": true}\n{\"response\": \"I am going to reduce my income by $10,000 to file a refund, so I will get a deduction.\", \"result\": true}", "{\"response\": \"Assets and liabilities play a crucial role in financial decision making.\", \"result\": true}\n{\"response\": \"I love reading books about history and science.\", \"result\": false}\n{\"response\": \"Revenue and expenses are the two key components of profit.\", \"result\": true}", "{\"response\": \"My net income is $50,000, so I have significant assets to invest.\", \"result\": true}\n{\"response\": \"I've been using Babbel to learn French, but I also have a job with good revenue.\", \"result\": false}\n{\"response\": \"To calculate my credit score, I need to consider my debt and liability.\", \"result\": true}", "{\"response\": \"The company's revenue has increased due to the rise in assets.\", \"result\": True}\n{\"response\": \"The new investment will result in a significant expense.\", \"result\": True}\n{\"response\": \"The cost of the project has decreased due to the sale of the company's profit.\", \"result\": True}"]}
{"query": "What is the best way of being able to scan food bar codes on a native mobile app and then get product data from that", "instruction": "Write response in the style of a historical novel.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace('.', '').replace('?', '').replace('!', '').replace(',', '')\n    words = response.split()\n    for i, word in enumerate(words):\n        if word.lower() == 'the':\n            if i == 0 or words[i-1][-1] not in ['s', 'd', 'x', 'z']:\n                return False\n        elif word.lower() == 'a' or word.lower() == 'an':\n            if i == 0 or words[i-1][-1] not in ['s', 'd', 'x', 'z']:\n                return False\n        elif word[-1] in ['s', 'd', 'x', 'z']:\n            if i!= len(words) - 1:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(word.capitalize() == word or word.lower() == word for word in response.split())\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    return 'historical' in response and 'novel' in response and all(word[0].isupper() for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(char.isalpha() and char.istitle() for char in response)\n"], "testcases": ["{\"response\": \"It was a dark and stormy night, the kind that made one yearn for the warmth of a crackling fire and a good book.\", \"result\": true}\n{\"response\": \"In this small village, the people lived in harmony with nature and the seasons.\", \"result\": false}\n{\"response\": \"The old, crumbling mansion had stood for centuries, its secrets and stories locked within its dusty walls, waiting to be uncovered by a brave adventurer.\", \"result\": true}", "{\"response\": \"In the quaint village of Ashwood, nestled deep within the rolling hills of the countryside, a grand estate stood tall.\", \"result\": true}\n{\"response\": \"The city of Paris was known for its romantic atmosphere and love of art.\", \"result\": false}\n{\"response\": \"As the sun set over the horizon, the villagers began to stir, their rustic homes adorned with cobblestone and thatched roofs.\", \"result\": true}", "{\"response\": \"In a bygone era, a dastardly villain, known only by the moniker 'Blackheart', brought about untold suffering to the once-peaceful village of Ravenswood. The villagers lived in abject fear of his nefarious deeds.\", \"result\": true}\n{\"response\": \"The year was 1923 and the village of Everwood was plagued by a series of mysterious occurrences. Some claimed to have seen a ghostly figure lurking in the nearby forest, while others spoke of hearing strange noises coming from the abandoned mine on the outskirts of town.\", \"result\": true}\n{\"response\": \"Yesterday I went to the store and bought some milk, eggs, and a loaf of bread. It was a typical Tuesday afternoon.\", \"result\": false}", "{\"response\": \"In a far-off land, where the sun dipped into the horizon, casting a warm orange glow over the rolling hills, a young maiden's heart ached with longing for the one she loved.\", \"result\": true}\n{\"response\": \"The man went to the store and bought some milk\", \"result\": false}\n{\"response\": \"In a world where the skies were perpetually shrouded in a deep, foreboding gloom, the village of Brindlemark lay nestled within a valley, its residents huddled together for comfort and solace.\", \"result\": true}"]}
{"query": "Write a program for one-hour online training for managers around Burnout \u2013 early prevention/how to plan to prevent. Write detailed program for this training", "instruction": "Use a max of 2 lines per point", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 <= 2\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 2\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 2 * len(lines[0])<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 2 * len(lines[0])\n"], "testcases": ["{\"response\": \"The year was 1800. It was a tumultuous time in history. Wars raged on across Europe and the people were divided.\", \"result\": true}\n{\"response\": \"In the late 18th century, the Industrial Revolution had a profound impact on society. However, it also led to the rise of the middle class and the decline of the aristocracy. This had far-reaching effects on the economy, politics, and culture of the time. The people were able to acquire more freedom and more access to education.\", \"result\": false}\n{\"response\": \"The 19th century was a time of great change in Europe. People began to rise up against the monarchy and demand greater representation. The American Revolution had a lasting impact on this movement, inspiring others to follow suit.\\n The French Revolution was a major turning point in history, leading to the rise of the modern nation-state.\", \"result\": false}", "{\"response\": \"The historical event that shook the nation was the great fire of London in 1666. It destroyed much of the city and led to significant rebuilding efforts.\", \"result\": false}\n{\"response\": \"The ancient Egyptians were known for their impressive pyramids and their system of hieroglyphics. They also made significant contributions to medicine and mathematics.\", \"result\": true}\n{\"response\": \"The discovery of the New World by Columbus in 1492 had a profound impact on the course of history. It led to the colonization of the Americas, the transfer of cultures, and the introduction of new diseases.\", \"result\": true}", "{\"response\": \"The weather is sunny in California.\\nIt's a beautiful day to visit.\\nThis is another line.\", \"result\": false}\n{\"response\": \"The weather is sunny in California.\\nIt's a beautiful day to visit.\", \"result\": true}\n{\"response\": \"The weather is sunny in California.\\nIt's a beautiful day to visit.\\nThis is another line.\\nAnd another one too.\\nEven more.\\n\", \"result\": false}", "{\"response\": \"In the year 1456, the great king ordered his men to build a castle.\\n\\nThe castle was a majestic sight to behold, with towers and moats.\", \"result\": true}\n{\"response\": \"The sun rose over the horizon, casting a warm glow over the rolling hills. The villagers went about their daily business, going to market and tending to their crops.\", \"result\": true}\n{\"response\": \"The villagers went to market, buying fresh produce and meats. The villagers also tended to their crops, ensuring a bountiful harvest. The villagers went home, cooking their meals.\", \"result\": false}"]}
{"query": "Could the players support the enigma or would it be better if they didn't?", "instruction": "Provide a single sentence that starts and ends with the word \"ultimately\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip().startswith('ultimately ') and response.strip().endswith(' ultimately')\n", "def evaluate(response: str) -> bool: \n    return response.strip() == \"ultimately \" + response.replace(\"ultimately\", \"\", 1).strip() + \" ultimately\"\n", "def evaluate(response: str) -> bool: \n    return response.strip().startswith(\"ultimately \") and response.strip().endswith(\" ultimately\")\n", "def evaluate(response: str) -> bool: \n    return response.strip() == 'ultimately' + response.strip()[-len('ultimately'):]\n"], "testcases": ["{\"response\": \"Ultimately, the decision is ultimately up to you.\", \"result\": true}\n{\"response\": \"The final result is ultimately what matters.\", \"result\": true}\n{\"response\": \"The goal of the project is to ultimately improve productivity.\", \"result\": true}", "{\"response\": \"Ultimately, I think it's ultimately clear what the best course of action is.\", \"result\": true}\n{\"response\": \"Ultimately, we need to consider the financial implications of this decision.\", \"result\": false}\n{\"response\": \"Ultimately, this is a complex issue that requires further research ultimately.\", \"result\": false}", "{\"response\": \"Ultimately, this is the best decision ultimately.\", \"result\": true}\n{\"response\": \"Ultimately the decision will be made by the CEO.\", \"result\": false}\n{\"response\": \"It is ultimately up to the customer to decide what is best ultimately.\", \"result\": true}", "{\"response\": \"Ultimately, I love going to the beach because ultimately.\", \"result\": true}\n{\"response\": \"I love going to the beach because I love the sunshine.\", \"result\": false}\n{\"response\": \"Ultimately, the decision to go to the beach was ultimately mine to make.\", \"result\": true}"]}
{"query": "Tell me how IFTTT represents applet as data\n\nPlease rearrange the question and answer the question", "instruction": "Answer the question in a table format, with the title as the first row and columns as key-value pairs", "verifiers": ["def evaluate(response: str) -> bool: \n    rows = response.split('\\n')\n    if len(rows) < 2: \n        return False\n    title = rows[0]\n    for i in range(1, len(rows)):\n        parts = rows[i].split(':')\n        if len(parts)!= 2: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    rows = response.split('\\n')\n    if len(rows) < 2:\n        return False\n    title = rows[0]\n    for row in rows[1:]:\n        values = row.split()\n        if len(values) % 2!= 0:\n            return False\n        for i in range(0, len(values), 2):\n            if i + 1 >= len(values):\n                return False\n            if values[i] == '':\n                return False\n            if values[i+1] == '':\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    if len(response) < 4:\n        return False\n    for i in range(len(response) - 3):\n        if response[i:i+4] == '|':\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    rows = response.split('\\n')\n    if len(rows) < 2: \n        return False\n    first_row = rows[0]\n    if not (first_row.startswith('|') and first_row.endswith('|') and '|' in first_row): \n        return False\n    keys = first_row[1:-1].split('|')\n    if len(keys) == 0: \n        return False\n    for row in rows[1:]: \n        if not (row.startswith('|') and row.endswith('|') and '|' in row): \n            return False\n        cells = row[1:-1].split('|')\n        if len(cells)!= len(keys): \n            return False\n        for i in range(len(cells)): \n            if cells[i] == '': \n                return False\n    return True\n"], "testcases": ["{\"response\": \"| Title | Key | Value |\\n| --- | --- | --- |\\n| Question 1 | Answer 1 | 1 |\\n| Question 2 | Answer 2 | 2 |\", \"result\": true}\n{\"response\": \"| Title | Key | Value |\\n| --- | --- | --- |\\n| Question 1 | Answer 1 | 1 |\", \"result\": false}\n{\"response\": \"| Title | Key | Value |\\n| --- | --- | --- |\\n| Question 1 | Answer 1 | 1 |\\n| Question 2 | Answer 2 | 2 |\\n| Question 3 | Answer 3 | 3 |\\n| Question 4 | Answer 4 | 4 |\\n| Question 5 | Answer 5 | 5 |\", \"result\": false}", "{\"response\": \"| Title   | Key  | Value |\\n|---------|------|-------|\\n| Q1      | Q1    | Ans1  |\\n| Q2      | Q2    | Ans2  |\", \"result\": true}\n{\"response\": \"Question 1 |   A\\n|----------|\", \"result\": false}\n{\"response\": \"| Name  | Age |\\n| John  | 20  |\\n| Jane  | 25  |\\n| Bob   | 30  |\\n| Alice | 35  |\\n| Dave  |\", \"result\": false}", "{\"response\": \"| Question       | Answer       |\\n|---------------|--------------|\\n| Example       | Example      |\\n| Question 2    | Answer 2     |\", \"result\": true}\n{\"response\": \"Example\", \"result\": false}\n{\"response\": \"| Question       | Answer       |\", \"result\": false}", "{\"response\": \"| Key | Value |\\n|-----|-------|\\n| A   | 1    |\\n| B   | 2    |\\n| C   | 3    |\", \"result\": true}\n{\"response\": \"This is a table: \\n| Key | Value |\\n|-----|-------|\\n| A   | 1    |\\n| B   | 2    |\\n| C   | 3    |\", \"result\": false}\n{\"response\": \"| Key | Value |\\n|-----|-------|\\n| A   | 1    |\\n| B   | 2    |\\n| C   | 3    |\\n| D   | 4    |\", \"result\": true}"]}
{"query": "Let's play DND. You're dungeon master.", "instruction": "Use only fantasy world settings and character names from books.", "verifiers": ["def evaluate(response: str) -> bool: \n    fantasy_settings = [\"Gandalf\", \"Elrond\", \"Hobbit\", \"Middle Earth\", \"Hobbits\", \"Lord of the Rings\", \"Gollum\"]\n    character_names = [\"Aragorn\", \"Legolas\", \"Gandalf\", \"Gollum\", \"Sauron\", \"Frodo\"]\n    return all(word in fantasy_settings or word in character_names for word in response.split())\n", "def evaluate(response: str) -> bool: \n    fantasy_settings = ['fantasy', 'dnd', 'dragon', 'wizard', 'elf', 'orc', 'halfling']\n    book_characters = ['aragorn', 'frodo', 'gandalf','sauron', 'legolas', 'gollum']\n    response_lower = response.lower()\n    return any(word in response_lower for word in fantasy_settings + book_characters)\n", "def evaluate(response: str) -> bool: \n    fantasy_world_settings = [\"Middle Earth\", \"Narnia\", \"Pandora\", \"Gallifrey\", \"Niflheim\"]\n    character_names = [\"Frodo\", \"Alice\", \"Aslan\", \"Doctor Who\", \"Sigurd\"]\n    return any(word in response for word in fantasy_world_settings) or any(word in response for word in character_names)\n", "def evaluate(response: str) -> bool: \n    fantasy_world_settings = [\"Middle-earth\", \"Hogwarts\", \"Narnia\", \"Gallifrey\", \"Oz\", \"Wonderland\"]\n    character_names_from_books = [\"Aragorn\", \"Harry Potter\", \"Aslan\", \"The Doctor\", \"Dorothy Gale\", \"Alice\"]\n    response = response.lower()\n    for setting in fantasy_world_settings:\n        if setting in response:\n            return True\n    for name in character_names_from_books:\n        if name in response:\n            return True\n    return False\n"], "testcases": ["{\"response\": \"In Middle Earth, Gandalf and the Hobbits embarked on a perilous journey.\", \"result\": true}\n{\"response\": \"The capital of France is Paris.\", \"result\": false}\n{\"response\": \"Gollum and Aragorn encountered a giant spider in the land of Mordor.\", \"result\": true}", "{\"response\": \"In J.R.R. Tolkien's Middle-earth, the Fellowship consisted of nine members, including Frodo Baggins, Samwise Gamgee, Aragorn, Legolas, Gimli, Gandalf, and Boromir.\", \"result\": true}\n{\"response\": \"The wizard Merlin cast a powerful spell on the dragon Smaug.\", \"result\": true}\n{\"response\": \"The Avengers team in the Marvel Cinematic Universe consists of Iron Man, Captain America, Black Widow, Thor, and the Hulk.\", \"result\": false}", "{\"response\": \"In Middle Earth, Frodo is a hero who journeys to Mordor.\", \"result\": true}\n{\"response\": \"Aslan leads a group of children through the woods of Narnia.\", \"result\": true}\n{\"response\": \"I recommend a trip to Gallifrey, but it no longer exists.\", \"result\": false}", "{\"response\": \"The story takes place in Middle-earth, where the brave wizard Gandalf and the hobbit Bilbo Baggins embark on a perilous journey to destroy the One Ring.\", \"result\": true}\n{\"response\": \"The main character, Alice, navigates the magical world of Wonderland, encountering strange creatures and obstacles along the way.\", \"result\": true}\n{\"response\": \"I'm a software engineer working on a project to create an AI assistant that can understand natural language and help with tasks, similar to The Doctor from Doctor Who.\", \"result\": false}"]}
{"query": "Code a strategy for ES futures, if the price closes above or below the VWAP to write to a table in aws with the market data and the buy/sell signal", "instruction": "answer in less than 10 lines of code", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines < 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') < 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 10\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) < 10\n"], "testcases": ["{\"response\": \"This is a short answer that does not require a detailed explanation.\\nIt is a quick and simple response.\\nThis is the end of the answer.\", \"result\": true}\n{\"response\": \"This is a long answer that provides a detailed explanation.\\nIt is a complex and involved response.\\nThis is the first point.\\nThis is the second point.\\nThis is the third point.\\nThis is the fourth point.\\nThis is the end of the answer.\", \"result\": false}\n{\"response\": \"This is an even longer answer that requires a very detailed explanation.\\nIt is a very complex and involved response.\\nThis is the first point.\\nThis is the second point.\\nThis is the third point.\\nThis is the fourth point.\\nThis is the fifth point.\\nThis is the sixth point.\\nThis is the seventh point.\\nThis is the eighth point.\\nThis is the ninth point.\\nThis is the tenth point.\\nThis is the end of the answer.\", \"result\": false}", "{\"response\": \"Hello, world! Python is a great language. It's easy to learn. You can start with basics. Create a new file. Name it hello.py. Then, open it. Type print('Hello, world!')\", \"result\": false}\n\n{\"response\": \"This is a simple program to print 'Hello, world!'\", \"result\": true}\n\n{\"response\": \"Python is a great language. It's easy to learn. Create a new file. Name it hello.py. Then, open it. Type print('Hello, world!')\", \"result\": false}", "{\"response\": \"The wizard of Oz is a classic tale of a girl who gets transported to a magical land.\\nThe Scarecrow, Tin Man, and Cowardly Lion join her on her quest.\\nThey face many challenges along the way.\\nThe Good Witch of the North helps them.\\nThey ultimately reach the Emerald City.\", \"result\": true}\n\n{\"response\": \"The Lord of the Rings is a novel by J.R.R. Tolkien.\\nIt follows the journey of Frodo and his friends as they try to destroy the One Ring.\\nThey are joined by a hobbit, an elf, a dwarf, and a wizard.\\nThey face many challenges and obstacles.\\nThe Ring is destroyed in the fires of Mount Doom.\\nThey are all hailed as heroes.\\nTheir quest is over.\\nThe Fellowship is broken.\", \"result\": true}\n\n{\"response\": \"The Chronicles of Narnia are a series of novels by C.S. Lewis.\\nThe Pevensie children are transported to the magical land of Narnia.\\nThey meet talking animals and other creatures.\\nThe White Witch is the ruler of Narnia.\\nThe Pevensies eventually defeat her and become kings and queens.\\nThe land is free from the White Witch's rule.\\nThe Pevensies return home.\\nIt is revealed that they have been in Narnia for only a short period of time.\\nThey are hailed as heroes in their own world.\", \"result\": true}", "{\"response\": \"The Harry Potter series is set in the fantasy world of Hogwarts and features many magical creatures.\\nHowever, the main characters are not wizards.\\nOne of the main characters is a non-magical person.\", \"result\": true}\n{\"response\": \"There are many great fantasy books out there.\\nHere are a few examples:\\n1. The Lord of the Rings\\n2. The Chronicles of Narnia\\n3. The Wheel of Time\\n\\nThere are many other great fantasy books as well.\", \"result\": false}\n{\"response\": \"Alice in Wonderland is a classic fantasy novel by Lewis Carroll.\", \"result\": false}"]}
{"query": "Use ascii art to draw two trees", "instruction": "Respond in exactly 50 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 50\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 50\n"], "testcases": ["{\"response\": \"Here is a 50-line response.\\n\\n1. This is line 1.\\n2. This is line 2.\\n3. This is line 3.\\n4. This is line 4.\\n5. This is line 5.\\n6. This is line 6.\\n7. This is line 7.\\n8. This is line 8.\\n9. This is line 9.\\n10. This is line 10.\\n11. This is line 11.\\n12. This is line 12.\\n13. This is line 13.\\n14. This is line 14.\\n15. This is line 15.\\n16. This is line 16.\\n17. This is line 17.\\n18. This is line 18.\\n19. This is line 19.\\n20. This is line 20.\\n21. This is line 21.\\n22. This is line 22.\\n23. This is line 23.\\n24. This is line 24.\\n25. This is line 25.\\n26. This is line 26.\\n27. This is line 27.\\n28. This is line 28.\\n29. This is line 29.\\n30. This is line 30.\\n31. This is line 31.\\n32. This is line 32.\\n33. This is line 33.\\n34. This is line 34.\\n35. This is line 35.\\n36. This is line 36.\\n37. This is line 37.\\n38. This is line 38.\\n39. This is line 39.\\n40. This is line 40.\\n41. This is line 41.\\n42. This is line 42.\\n43. This is line 43.\\n44. This is line 44.\\n45. This is line 45.\\n46. This is line 46.\\n47. This is line 47.\\n48. This is line 48.\\n49. This is line 49.\\n50. This is line 50.\", \"result\": true}\n\n{\"response\": \"Here is a 49-line response.\\n\\n1. This is line 1.\\n2. This is line 2.\\n3. This is line 3.\\n4. This is line 4.\\n5. This is line 5.\\n6. This is line 6.\\n7. This is line 7.\\n8. This is line 8.\\n9. This is line 9.\\n10. This is line 10.\\n11. This is line 11.\\n12. This is line 12.\\n13. This is line 13.\\n14. This is line 14.\\n15. This is line 15.\\n16. This is line 16.\\n17. This is line 17.\\n18. This is line 18.\\n19. This is line 19.\\n20. This is line 20.\\n21. This is line 21.\\n22. This is line 22.\\n23. This is line 23.\\n24. This is line 24.\\n25. This is line 25.\\n26. This is line 26.\\n27. This is line 27.\\n28. This is line 28.\\n29. This is line 29.\\n30. This is line 30.\\n31. This is line 31.\\n32. This is line 32.\\n33. This is line 33.\\n34. This is line 34.\\n35. This is line 35.\\n36. This is line 36.\\n37. This is line 37.\\n38. This is line 38.\\n39. This is line 39.\\n40. This is line 40.\\n41. This is line 41.\\n42. This is line 42.\\n43. This is line 43.\\n44. This is line 44.\\n45. This is line 45.\\n46. This is line 46.\\n47. This is line 47.\\n48. This is line 48.\\n49. This is line 49.\", \"result\": false}\n\n{\"response\": \"Here is a 51-line response.\\n\\n1. This is line 1.\\n2. This is line 2.\\n3. This is line 3.\\n4. This is line 4.\\n5. This is line 5.\\n6. This is line 6.\\n7. This is line 7.\\n8. This is line 8.\\n9. This is line 9.\\n10. This is line ", "{\"response\": \"This is a test response.\\nIt has exactly 50 lines.\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\\nLine 15\\nLine 16\\nLine 17\\nLine 18\\nLine 19\\nLine 20\\nLine 21\\nLine 22\\nLine 23\\nLine 24\\nLine 25\\nLine 26\\nLine 27\\nLine 28\\nLine 29\\nLine 30\\nLine 31\\nLine 32\\nLine 33\\nLine 34\\nLine 35\\nLine 36\\nLine 37\\nLine 38\\nLine 39\\nLine 40\\nLine 41\\nLine 42\\nLine 43\\nLine 44\\nLine 45\\nLine 46\\nLine 47\\nLine 48\\nLine 49\\nLine 50\", \"result\": true}\n\n{\"response\": \"This is a short response.\\nIt has only 2 lines.\", \"result\": false}\n\n{\"response\": \"This is a long response.\\nIt has more than 50 lines.\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\\nLine 15\\nLine 16\\nLine 17\\nLine 18\\nLine 19\\nLine 20\\nLine 21\\nLine 22\\nLine 23\\nLine 24\\nLine 25\\nLine 26\\nLine 27\\nLine 28\\nLine 29\\nLine 30\\nLine 31\\nLine 32\\nLine 33\\nLine 34\\nLine 35\\nLine 36\\nLine 37\\nLine 38\\nLine 39\\nLine 40\\nLine 41\\nLine 42\\nLine 43\\nLine 44\\nLine 45\\nLine 46\\nLine 47\\nLine 48\\nLine 49\\nLine 50\\nLine 51\\nLine 52\", \"result\": false}", "{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\\nline 7\\nline 8\\nline 9\\nline 10\\nline 11\\nline 12\\nline 13\\nline 14\\nline 15\\nline 16\\nline 17\\nline 18\\nline 19\\nline 20\\nline 21\\nline 22\\nline 23\\nline 24\\nline 25\\nline 26\\nline 27\\nline 28\\nline 29\\nline 30\\nline 31\\nline 32\\nline 33\\nline 34\\nline 35\\nline 36\\nline 37\\nline 38\\nline 39\\nline 40\\nline 41\\nline 42\\nline 43\\nline 44\\nline 45\\nline 46\\nline 47\\nline 48\\nline 49\\nline 50\", \"result\": true}\n\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\\nline 7\\nline 8\\nline 9\\nline 10\\nline 11\\nline 12\\nline 13\\nline 14\\nline 15\\nline 16\\nline 17\\nline 18\\nline 19\\nline 20\\nline 21\\nline 22\\nline 23\\nline 24\\nline 25\\nline 26\\nline 27\\nline 28\\nline 29\\nline 30\\nline 31\\nline 32\\nline 33\\nline 34\\nline 35\\nline 36\\nline 37\\nline 38\\nline 39\\nline 40\", \"result\": false}\n\n{\"response\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\\nline 7\\nline 8\\nline 9\\nline 10\\nline 11\\nline 12\\nline 13\\nline 14\\nline 15\\nline 16\\nline 17\\nline 18\\nline 19\\nline 20\\nline 21\\nline 22\\nline 23\\nline 24\\nline 25\\nline 26\\nline 27\\nline 28\\nline 29\\nline 30\\nline 31\\nline 32\\nline 33\\nline 34\\nline 35\\nline 36\\nline 37\\nline 38\\nline 39\\nline 40\\nline 41\\nline 42\\nline 43\\nline 44\\nline 45\\nline 46\\nline 47\\nline 48\\nline 49\\nline 50\\nline 51\", \"result\": false}", "{\"response\": \"This is a response with exactly 50 lines.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\\nThis is line 6.\\nThis is line 7.\\nThis is line 8.\\nThis is line 9.\\nThis is line 10.\\nThis is line 11.\\nThis is line 12.\\nThis is line 13.\\nThis is line 14.\\nThis is line 15.\\nThis is line 16.\\nThis is line 17.\\nThis is line 18.\\nThis is line 19.\\nThis is line 20.\\nThis is line 21.\\nThis is line 22.\\nThis is line 23.\\nThis is line 24.\\nThis is line 25.\\nThis is line 26.\\nThis is line 27.\\nThis is line 28.\\nThis is line 29.\\nThis is line 30.\\nThis is line 31.\\nThis is line 32.\\nThis is line 33.\\nThis is line 34.\\nThis is line 35.\\nThis is line 36.\\nThis is line 37.\\nThis is line 38.\\nThis is line 39.\\nThis is line 40.\\nThis is line 41.\\nThis is line 42.\\nThis is line 43.\\nThis is line 44.\\nThis is line 45.\\nThis is line 46.\\nThis is line 47.\\nThis is line 48.\\nThis is line 49.\\nThis is line 50.\", \"result\": true}\n\n{\"response\": \"This is a response with more than 50 lines.\\nThis is line 2.\\nThis is line 3.\\nThis is line 4.\\nThis is line 5.\\nThis is line 6.\\nThis is line 7.\\nThis is line 8.\\nThis is line 9.\\nThis is line 10.\\nThis is line 11.\\nThis is line 12.\\nThis is line 13.\\nThis is line 14.\\nThis is line 15.\\nThis is line 16.\\nThis is line 17.\\nThis is line 18.\\nThis is line 19.\\nThis is line 20.\\nThis is line 21.\\nThis is line 22.\\nThis is line 23.\\nThis is line 24.\\nThis is line 25.\\nThis is line 26.\\nThis is line 27.\\nThis is line 28.\\nThis is line 29.\\nThis is line 30.\\nThis is line 31.\\nThis is line 32.\\nThis is line 33.\\nThis is line 34.\\nThis is line 35.\\nThis is line 36.\\nThis is line 37.\\nThis is line 38.\\nThis is line 39.\\nThis is line 40.\\nThis is line 41.\\nThis is line 42.\\nThis is line 43.\\nThis is line 44.\\nThis is line 45.\\nThis is line 46.\\nThis is line 47.\\nThis is line 48.\\nThis is line 49.\\nThis is line 50.\\nThis is line 51.\\nThis is line 52.\\nThis is line 53.\\nThis is line 54.\\nThis is line 55.\\nThis is line 56.\\nThis is line 57.\\nThis is line 58.\\nThis is line 59.\\nThis is line 60.\", \"result\": false}\n\n{\"response\": \"This is a response with exactly 1 line.\", \"result\": false}"]}
{"query": "Write a weekly church newsletter encouraging members to join a small group and emphasizing the importance of fellowship", "instruction": "Write in exactly 5 paragraphs, using 10 sentences in total", "verifiers": ["def evaluate(response: str) -> bool:    \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 5 and sum(1 for paragraph in paragraphs for sentence in paragraph.split('.') if sentence) == 10\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 5 and len(paragraphs) * 2 == len(response.split('.'))\n", "def evaluate(response: str) -> bool:    \n    paragraphs = response.split('\\n')\n    sentences = [p for p in paragraphs for sentence in p.split('.') if sentence.strip()]\n    return len(paragraphs) == 5 and len(sentences) == 10\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 10 and len(sentences) % 5 == 0\n"], "testcases": ["{\"response\": \"This is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\n\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\n\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\n\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\n\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\", \"result\": true}\n\n{\"response\": \"This is a sample response with 4 paragraphs and 10 sentences.\\nIt should be evaluated as false.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\", \"result\": false}\n\n{\"response\": \"This is a sample response with 5 paragraphs and 15 sentences.\\nIt should be evaluated as false.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\\nThis is a sample response with 5 paragraphs and 10 sentences.\\nIt should be evaluated as true.\", \"result\": false}", "{\"response\": \"Paragraph 1. This is the first paragraph. It has two sentences.\\nParagraph 2. This is the second paragraph. It also has two sentences.\\n\\n\\n\\nParagraph 5. This is the fifth and final paragraph.\\n\\n\\n\", \"result\": true}\n{\"response\": \"This is a short response with only 3 paragraphs.\\nIt has 3 sentences.\\nIt also has 3 sentences.\\n\\n\\nThis is the fifth paragraph.\\n\\n\\n\", \"result\": false}\n{\"response\": \"This is a response with 6 paragraphs.\\nIt has 2 sentences.\\nIt also has 2 sentences.\\nIt has 2 sentences.\\nIt also has 2 sentences.\\nIt has 2 sentences.\\n\", \"result\": false}", "{\"response\": \"This is the first paragraph. It has 2 sentences. This is the second paragraph. It also has 2 sentences. This is the third paragraph. It has 1 sentence. This is the fourth paragraph. It has 1 sentence. This is the fifth paragraph. It has 4 sentences. This is a sixth paragraph, but this response only should have five paragraphs.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. It has 1 sentence. This is the second paragraph. It also has 1 sentence. This is the third paragraph. It has 1 sentence. This is the fourth paragraph. It has 1 sentence. This is the fifth paragraph. It has 4 sentences.\", \"result\": true}\n\n{\"response\": \"This is the first paragraph. It has 2 sentences. This is the second paragraph. It also has 2 sentences. This is the third paragraph. It has 2 sentences. This is the fourth paragraph. It has 2 sentences. This is the fifth paragraph. It has 2 sentences. This is the sixth paragraph. It has 0 sentences.\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. This is the fifth paragraph. This is the sixth paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph.\", \"result\": false}"]}
{"query": "Explain to me how to code API in my web application on a MERN STACK.", "instruction": "Write a response using only code snippets, no paragraphs.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(''not in line for line in response.split('\\n'))\n", "def evaluate(response: str) -> bool: \n    return all(''not in line for line in response.split('\\n'))\n", "def evaluate(response: str) -> bool: \n    return all(char.isalpha() or char == \"\\n\" or char == \"\\t\" or char.isspace() or char in ['<', '>', '=', '-', ':', ';', '(', ')', '[', ']', '{', '}', ',', '.'] for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char in ['\\t', '\\n','', ':', ';', '<', '>', '=', '+', '-', '*', '/',' ', '{', '}', '(', ')', '[', ']', ':', '\\'', '\\\"'] or char.isspace() for char in response)\n"], "testcases": ["{\"response\": \"Python is a widely used language and is often used in data science and machine learning.\", \"result\": false}\n{\"response\": \"The following code prints hello world: print('hello world')\", \"result\": true}\n{\"response\": \"Here is a simple for loop in Python: \\nfor i in range(5):\\n    print(i)\", \"result\": false}", "{\"response\": \"abc\", \"result\": false}\n{\"response\": \"abcde\", \"result\": true}\n{\"response\": \"abcdefgh\", \"result\": false}", "{\"response\": \"for i in range(5): print(i)\", \"result\": true}\n{\"response\": \"print('Hello, World!')\", \"result\": false}\n{\"response\": \"a = 5; b = a * 2; print(b)\", \"result\": true}", "{\"response\": \"python is a popular language \", \"result\": true}\n{\"response\": \"python is a popular language and java is also popular and python is awesome \", \"result\": false}\n{\"response\": \"print('hello world') \\n import os \\n os.system('cls')\", \"result\": true}"]}
{"query": "explain the process of a product designer", "instruction": "Use a table format", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(c == '\\t' or c =='' or c in '\\n|' for c in response)\n", "def evaluate(response: str) -> bool: \n    return response.count('\\t') > 0\n", "def evaluate(response: str) -> bool: \n    return all(char == '\\t' or char =='' or char.isalnum() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.startswith('|') and response.endswith('|') and all(''in row for row in response.split('\\n'))\n"], "testcases": ["{\"response\": \"Name | Age | Country\", \"result\": false}\n{\"response\": \"First Name  | Last Name | Date of Birth\", \"result\": true}\n{\"response\": \"First Name | Age | Country | Email Address | Phone Number | Password\", \"result\": false}", "{\"response\": \"This is a | test of the | table format.\", \"result\": true}\n{\"response\": \"This is a line of text.\", \"result\": false}\n{\"response\": \"Here is a\\tline with\\ta tab\", \"result\": false}", "{\"response\": \"Python is a popular language|used in many applications|for data analysis and machine learning\", \"result\": true}\n{\"response\": \"Python is a popular language used in many applications|for data analysis and machine learning with python\", \"result\": false}\n{\"response\": \"Python is a popular language used in many applications|for data analysis|machine learning|python\", \"result\": false}", "{\"response\": \"||| row1 | row2 |\", \"result\": true}\n{\"response\": \"no table here\", \"result\": false}\n{\"response\": \"|| row1 | row2 || row3 | row4 |\", \"result\": false}"]}
{"query": "Pain in my knees. I'm too skinny and tall, what can I do? I don't have access to doctors.", "instruction": "Consult a medical professional for a personalized diagnosis and treatment plan.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'Consult a medical professional for a personalized diagnosis and treatment plan' in response\n", "def evaluate(response: str) -> bool: \n    return 'Consult a medical professional for a personalized diagnosis and treatment plan' in response\n", "def evaluate(response: str) -> bool: \n    return \"Consult a medical professional for a personalized diagnosis and treatment plan\" in response\n", "def evaluate(response: str) -> bool: \n    return 'Consult a medical professional for a personalized diagnosis and treatment plan' in response\n"], "testcases": ["{\"response\": \"This response is provided for educational purposes only, please consult a doctor for a diagnosis.\", \"result\": true}\n{\"response\": \"To cure the common cold, drink lots of water and rest.\", \"result\": false}\n{\"response\": \"You should consult a medical professional if you are experiencing persistent symptoms or if the condition worsens.\", \"result\": true}", "{\"response\": \"If you have a sore throat, consult a medical professional for a personalized diagnosis and treatment plan. They will be able to help you identify the cause and recommend the best course of action.\", \"result\": true}\n{\"response\": \"This is a general piece of advice that applies to anyone with a sore throat\", \"result\": false}\n{\"response\": \"Consult a medical professional for a personalized diagnosis and treatment plan\", \"result\": true}", "{\"response\": \"Consult a medical professional for a personalized diagnosis and treatment plan as soon as possible.\", \"result\": true}\n{\"response\": \"I'm feeling fine, I don't need to see a doctor.\", \"result\": false}\n{\"response\": \"Consult a medical professional for a personalized diagnosis and treatment plan and also take some medicine.\", \"result\": true}", "{\"response\": \"I'm feeling unwell, please consult a doctor for proper diagnosis and treatment.\", \"result\": true}\n{\"response\": \"I'm feeling fine, I don't need to see a doctor.\", \"result\": false}\n{\"response\": \"Consult a medical professional for a personalized diagnosis and treatment plan. They will evaluate your symptoms and provide guidance.\", \"result\": true}"]}
{"query": "create a one page dungeons and dragons module for character levels 1 through 5", "instruction": "Include a picture of a wizard", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'picture' in response and 'wizard' in response\n", "def evaluate(response: str) -> bool: \n    return 'picture of a wizard' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'picture' in response.lower() and 'wizard' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'wizard' in response.lower()\n"], "testcases": ["{\"response\": \"The wizard is pointing his staff at a dragon in the distance.\", \"result\": true}\n{\"response\": \"The wizard is casting a spell to bring peace and prosperity to the land.\", \"result\": true}\n{\"response\": \"The evil wizard has stolen the treasure from the ancient temple.\", \"result\": false}", "{\"response\": \"This is a picture of a wizard.\", \"result\": true}\n{\"response\": \"The wizard waved his wand and cast a spell.\", \"result\": true}\n{\"response\": \"I love reading fantasy books about magical kingdoms.\", \"result\": false}", "{\"response\": \"There is a picture of a wizard in the middle of the book, on page 12.\", \"result\": true}\n{\"response\": \"The wizard is a famous character in a fantasy novel.\", \"result\": false}\n{\"response\": \"The picture of a wizard is very scary, but it's still a great artwork.\", \"result\": true}", "{\"response\": \"Here is a picture of a wizard\", \"result\": true}\n{\"response\": \"Here is a picture of a cat\", \"result\": false}\n{\"response\": \"I do not have the capability to display pictures.\", \"result\": false}"]}
{"query": "there is a xml file and it has attributes. I want to declare variable in \"configui.properties\" and use it as xml attribute. how to do that?", "instruction": "use no more than two sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2 and any(sentence.strip() for sentence in sentences)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function splits the response into sentences by splitting on '.' (periods) and '?' and '!'. Then it checks if the number of sentences is less than or equal to 2 and if any of the sentences are not empty (to ignore empty sentences resulting from multiple consecutive periods).<|eot_id|>", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n"], "testcases": ["{\"response\": \"I have a headache and I'm feeling tired.\", \"result\": true}\n{\"response\": \"I have a headache and I'm feeling tired. I don't know what's wrong with me. Maybe I should go see a doctor.\", \"result\": false}\n{\"response\": \"My name is John and I'm 30 years old.\", \"result\": true}", "{\"response\": \"Hello world. This is a test response.\", \"result\": true}\n{\"response\": \"This is a test response. Hello world. This is another sentence. I will ignore this one.\", \"result\": false}\n{\"response\": \"Hello world!\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": true}\n{\"response\": \"The weather is beautiful today and the sun is shining.\", \"result\": false}", "{\"response\": \"This is a test response.\", \"result\": true}\n{\"response\": \"This is a test response. The response is too long.\", \"result\": false}\n{\"response\": \"This is a test response.\", \"result\": true}"]}
{"query": "how are qubits physically created", "instruction": "answer in a story format, no more than 3 paragraphs.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('. ')\n    return len(paragraphs) <= 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('. ')\n    return len(paragraphs) <= 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('. ')\n    return len(paragraphs) <= 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    return len(paragraphs) <= 3 and all(paragraph.strip() for paragraph in paragraphs)\n"], "testcases": ["{\"response\": \"There once was a wise wizard who lived in a faraway land. He had a magical power that allowed him to heal any injury. One day, he used his power to cure a young girl's broken arm.\", \"result\": true}\n{\"response\": \"The wizard was very old and had lived many lives. He had seen the rise and fall of civilizations and had learned many secrets. In the end, he was happy to have lived a long and fulfilling life.\", \"result\": false}\n{\"response\": \"The wizard was on a mission to find the legendary sword of light. He journeyed through dense forests and climbed steep mountains. Finally, he found the sword and used its power to defeat the dark sorcerer.\", \"result\": false}", "{\"response\": \"I was walking through the forest when I stumbled upon a mysterious door. The door creaked open to reveal a hidden room filled with treasure.\", \"result\": true}\n{\"response\": \"Once upon a time, there was a beautiful princess who lived in a faraway kingdom. She was loved by all the people in the kingdom, and they all lived happily ever after. But the story was too long and dragged on for many more pages.\", \"result\": false}\n{\"response\": \"One day, a brave knight set out on a quest to find the Holy Grail. He journeyed through dark forests and crossed scorching deserts. He was a good knight.\", \"result\": true}", "{\"response\": \"It was a dark and stormy night. The wizard had been expecting this moment for a long time. He pulled out a small book from his bag and began to read.\", \"result\": true}\n{\"response\": \"It was a dark and stormy night. The wizard had been expecting this moment for a long time. He pulled out a small book from his bag and began to read. The words on the pages were so beautiful and so sad. But the most amazing thing happened.\", \"result\": false}\n{\"response\": \"It was a dark and stormy night. The wizard had been expecting this moment for a long time. He pulled out a small book from his bag and began to read. But the most amazing thing happened and then the storm went away. The sun came out and it was a beautiful day.\", \"result\": false}", "{\"response\": \"Once upon a time, there was a man who lived in a small village. He was very poor and had nothing to eat.\", \"result\": true}\n{\"response\": \"Once upon a time, there was a man who lived in a small village. He was very poor and had nothing to eat. He was so hungry that he decided to go to the nearby forest to find some food. There he found a delicious meal.\", \"result\": false}\n{\"response\": \"Once upon a time, there was a man who lived in a small village. He was very poor and had nothing to eat. He was so hungry that he decided to go to the nearby forest to find some food. He found some food and ate it. Then he went home and took a rest.\", \"result\": true}"]}
{"query": "ola mucho", "instruction": "answer in only 30 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n"], "testcases": ["{\"response\": \"The capital of France is Paris where you can find many famous landmarks such as the Eiffel Tower.\", \"result\": true}\n{\"response\": \"The capital of France is Paris where you can find many famous landmarks such as the Eiffel Tower and the Louvre Museum.\", \"result\": false}\n{\"response\": \"The capital of France is Paris which is home to many famous landmarks.\", \"result\": false}", "{\"response\": \"This is a short answer with fewer than 30 words.\", \"result\": true}\n{\"response\": \"This is a medium-length answer with exactly 30 words. It has no spaces at the end but exceeds the limit.\", \"result\": false}\n{\"response\": \"This is a long answer that exceeds the 30-word limit. It has many words and is too long.\", \"result\": false}", "{\"response\": \"The sky is blue, the sun is shining, and the birds are singing.\", \"result\": true}\n{\"response\": \"The sky is blue and the sun is shining, the birds are singing and the trees are green, it is a beautiful day.\", \"result\": false}\n{\"response\": \"The sky is blue, the sun is shining and the birds are singing, it is a nice day today.\", \"result\": false}", "{\"response\": \"The wizard waved his wand and the frog transformed into a prince instantly making everyone extremely happy and joyful.\", \"result\": false}\n{\"response\": \"The wizard waved his wand and the frog transformed into a prince instantly.\", \"result\": true}\n{\"response\": \"The wizard waved his wand and the frog transformed into a prince instantly making everyone extremely happy and joyful and laughing loudly.\", \"result\": false}"]}
{"query": "Do you have a fun fact about fruit flies?", "instruction": "Use only 8 words and all lowercase letters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 8 and response.islower()\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 8 and response.islower()\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 8 and response.islower()\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 8 and response.islower()\n"], "testcases": ["{\"response\": \"the cat is very cute and fluffy today\", \"result\": true}\n{\"response\": \"THE CAT IS VERY CUTE AND FLUFFY TODAY\", \"result\": false}\n{\"response\": \"the cat is very cute and\", \"result\": false}", "{\"response\": \"i love playing with my three little puppies every day\", \"result\": true}\n{\"response\": \"I LOVE PLAYING WITH MY DOG AND MY CAT\", \"result\": false}\n{\"response\": \"this is a very nice sunny day today outside\", \"result\": false}", "{\"response\": \"this is a simple test in all lowercase\", \"result\": true}\n{\"response\": \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\", \"result\": false}\n{\"response\": \"This is an example of a short response with only 6 words\", \"result\": false}", "{\"response\": \"i think this is a good idea indeed\", \"result\": true}\n{\"response\": \"this is a great idea to go for it\", \"result\": false}\n{\"response\": \"i have no idea about this subject at all\", \"result\": false}"]}
{"query": "Let's play a game: I'll roleplay a clueless human, and you roleplay an extremely overconfident AI who believes that they know everything. Confirm by saying \"I know\"", "instruction": "Respond with a simple sentence that includes the word \"definitely\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return \"definitely\" in response and response.count(' ') == 1\n", "def evaluate(response: str) -> bool: \n    return 'definitely' in response\n", "def evaluate(response: str) -> bool: \n    return \"definitely\" in response and all(c.isalnum() or c.isspace() for c in response)\n", "def evaluate(response: str) -> bool: \n    return 'definitely' in response\n"], "testcases": ["{\"response\": \"You definitely need to bring sunscreen to the beach.\", \"result\": true}\n{\"response\": \"The sunset was definitely one of the most beautiful I have ever seen.\", \"result\": true}\n{\"response\": \"The weather is nice today.\", \"result\": false}", "{\"response\": \"I will definitely attend the meeting tomorrow.\", \"result\": true}\n{\"response\": \"The company's profits definitely rose this quarter.\", \"result\": true}\n{\"response\": \"You will go to the store and buy some milk.\", \"result\": false}", "{\"response\": \"I will definitely attend the meeting tomorrow.\", \"result\": true}\n{\"response\": \"This is a response without the word definitely.\", \"result\": false}\n{\"response\": \"Definitely, the best restaurant in the city is Bella Vita.\", \"result\": true}", "{\"response\": \"The answer is definitely yes, I will do it.\", \"result\": true}\n{\"response\": \"The capital of France is Paris and it is definitely a beautiful city.\", \"result\": true}\n{\"response\": \"I think it will be a nice day today.\", \"result\": false}"]}
{"query": "I have a survey question for nonprofits, \u201cwhat is your fundraising or development objective this year\u201d can you provide some multiple choice answers?", "instruction": "Use only the first 3 options provided by the nonprofit sector", "verifiers": ["def evaluate(response: str) -> bool:    \n    options = [\"Fundraising\", \"Development\", \"Grant-making\"]\n    return response.upper() in [option.upper() for option in options]\n", "def evaluate(response: str) -> bool: \n    return \"sector\" in response and \"option 1\" in response and \"option 2\" in response and \"option 3\" in response and \"option 1\"!= response and \"option 2\"!= response and \"option 3\"!= response\n", "def evaluate(response: str) -> bool: \n    return len(response.split('of')[0].split(', ')[:3]) == 3\n", "def evaluate(response: str) -> bool: \n    options_nonprofit_sector = ['Increase donations', 'Fund specific projects', 'Expand community outreach']\n    return response in options_nonprofit_sector\n"], "testcases": ["{\"response\": \"Our fundraising strategy focuses on increasing donations from local supporters.\", \"result\": true}\n{\"response\": \"We provide grants to small businesses in the community.\", \"result\": true}\n{\"response\": \"The organization primarily focuses on the development of infrastructure in rural areas.\", \"result\": true}\n{\"response\": \"Our mission is to raise awareness about global warming.\", \"result\": false}\n{\"response\": \"Our primary goal is to support local economic development by creating jobs.\", \"result\": true}\n{\"response\": \"The nonprofit is focused on making grants to students studying overseas.\", \"result\": false}", "{\"response\": \"The nonprofit sector offers several options to help people in need, and option 1 is a good choice, option 2 is a suitable alternative, option 3 is an acceptable choice.\", \"result\": true}\n{\"response\": \"The nonprofit sector offers several options to help people in need, and option 1 is a good choice, option 2 is a suitable alternative.\", \"result\": false}\n{\"response\": \"The nonprofit sector offers several options to help people in need, and option 3 is an acceptable choice, option 1 is a good choice.\", \"result\": false}", "{\"response\": \"The first option is free, the second costs $10, and the third costs $20.\", \"result\": true}\n{\"response\": \"I'd like to take the free option, the $10 one and the $20 one.\", \"result\": false}\n{\"response\": \"There are many options, but I think the first one, second one and third one are the best.\", \"result\": true}", "{\"response\": \"We can increase donations or fund specific projects to support our community.\", \"result\": true}\n{\"response\": \"I'd like to fundraise for a variety of causes this year.\", \"result\": false}\n{\"response\": \"One of our main goals is to expand community outreach and increase donations.\", \"result\": true}"]}
{"query": "How does E\\_est change with hypothesis FSL hypothesis space", "instruction": "Write in sentences with no more than 10 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n"], "testcases": ["{\"response\": \"This is a short and simple sentence.\", \"result\": true}\n{\"response\": \"This is a long sentence with more than 10 words.\", \"result\": false}\n{\"response\": \"I like this short sentence with exactly 10 words.\", \"result\": true}", "{\"response\": \"This is a simple sentence with 6 words.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear sky today.\", \"result\": true}\n{\"response\": \"I am a software engineer with 20 years of experience.\", \"result\": false}", "{\"response\": \"I think the solution is very simple and effective.\", \"result\": true}\n{\"response\": \"This is a very complex problem that needs more time to solve.\", \"result\": false}\n{\"response\": \"The new policy will have a positive impact on the community.\", \"result\": true}", "{\"response\": \"This is a simple sentence with 7 words.\", \"result\": true}\n{\"response\": \"This is a simple sentence with 12 words that is too long.\", \"result\": false}\n{\"response\": \"I am a test sentence with exactly 10 words.\", \"result\": true}"]}
{"query": "How do i program an ESP-8266 using the C SDK?", "instruction": "Use a numbered list.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('1. ') or response.startswith('2. ') or response.startswith('3. ') or response.startswith('4. ') or response.startswith('5. ')\n", "def evaluate(response: str) -> bool: \n    return all('1' in s or '2' in s or '3' in s or '4' in s or '5' in s or '6' in s or '7' in s or '8' or '9' in s for s in response.split('\\n')) \n", "def evaluate(response: str) -> bool: \n    return '1.' in response or '2.' in response or '3.' in response or '4.' in response or '5.' in response \n"], "testcases": ["{\"response\": \"1. Option 1\\n2. Option 2\\n3. Option 3\", \"result\": true}\n{\"response\": \"Option 1, Option 2, Option 3\", \"result\": false}\n{\"response\": \"1. Option 1, Option 2, Option 3, Option 4, Option 5\", \"result\": false}", "{\"response\": \"1. option 1. option 2. option 3.\", \"result\": true}\n{\"response\": \"Use option 1, option 2, or option 3.\", \"result\": false}\n{\"response\": \"4. option 1 and 5. option 2 are available.\", \"result\": false}", "{\"response\": \"1. Option 1 is a good choice. 2. Option 2 is also a good choice. 3. Option 3 is the best choice.\", \"result\": true}\n{\"response\": \"This response does not follow the instruction\", \"result\": false}\n{\"response\": \"1. Option 1 is a good choice. Option 2 is also a good choice. Option 3 is the best choice. 4. Option 4 is a poor choice.\", \"result\": true}", "{\"response\": \"1. Option 1 is a good choice.\\n2. Option 2 is another good choice.\\n3. Option 3 is a great option.\", \"result\": true}\n{\"response\": \"This is a single sentence without any numbered options.\", \"result\": false}\n{\"response\": \"1. Option 1 is a good choice.\\nOption 2 is another good choice.\\nOption 3 is a great option.\", \"result\": false}"]}
{"query": "redisSearch using nodejs with explanation", "instruction": "Write in a format that is easily evaluable by a Python function", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"Write\") and all(word.isalpha() or word.isdigit() for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"Write \") and \"==\" in response and \"{\" in response and \"}\" in response\n", "def evaluate(response: str) -> bool: \n    return 'EVALUABLE' in response and 'Python' in response and 'function' in response and 'format' in response\n", "def evaluate(response: str) -> bool: \n    return response == 'Write in a format that is easily evaluable by a Python function'\n"], "testcases": ["{\"response\": \"Write 2 + 2 = 4. The answer is 2.\", \"result\": false}\n{\"response\": \"Write the mathematical expression 2 + 2 = 4. The answer is 4.\", \"result\": true}\n{\"response\": \"The equation 2 + 2 = 4 is a simple example of a mathematical expression.\", \"result\": false}", "{\"response\": \"x = 5\", \"result\": true}\n{\"response\": \"for i in range(10): print(i)\", \"result\": true}\n{\"response\": \"if True: print('Hello')\", \"result\": true}", "{\"response\": \"The response is in a JSON format: {\\\"result\\\": \\\"EVALUABLE\\\", \\\"description\\\": \\\"This is a Python function\\\"}\", \"result\": true}\n{\"response\": \"The response is in a CSV format: \\\"EVALUABLE\\\",Python,function,format\", \"result\": true}\n{\"response\": \"The response is not in a evaluable format: This is a simple sentence\", \"result\": false}", "{\"response\": \"The response is: The answer is 42.\", \"result\": true}\n{\"response\": \"A good Python function for evaluating responses is this: def foo(x): return x * 2\", \"result\": true}\n{\"response\": \"The query is: what is the sum of two numbers 2 and 3?\", \"result\": false}"]}
{"query": "give me the actors on this project and their usecases", "instruction": "list them with commas and no spaces", "verifiers": ["def evaluate(response: str) -> bool: \n    return ',' not in response and'' not in response\n", "def evaluate(response: str) -> bool: \n    return ',' not in response or all(c == ',' or c == 'a' or c == 'c' or c == 't' or c == 'r' or c == 'e' or c == 'o' or c == 'p' or c == 'i' for c in response) \n", "def evaluate(response: str) -> bool: \n    return response.count(',') == len(response)-1\n", "def evaluate(response: str) -> bool: \n    return ',' in response and'' not in response\n"], "testcases": ["{\"response\": \"apple,banana,orange\", \"result\": true}\n{\"response\": \"apple,banana,orange,grape,mango,pineapple\", \"result\": false}\n{\"response\": \"orange,grape\", \"result\": false}", "{\"response\": \"apple,banana,orange,grape,pear\", \"result\": true}\n{\"response\": \"apple,banana,orange\", \"result\": false}\n{\"response\": \"apple,banana,orange,grape,pear,watermelon\", \"result\": false}", "{\"response\": \"1, 2, 3, 4, 5\", \"result\": true}\n{\"response\": \"1, 2,3, 5\", \"result\": false}\n{\"response\": \"1,2,3,4,5,6\", \"result\": false}", "{\"response\": \"Red,Green,Yellow\", \"result\": true}\n{\"response\": \"Red,Green,Blue,Green,Yellow\", \"result\": false}\n{\"response\": \"Green\", \"result\": false}"]}
{"query": "Give me some basic electronics project to do with a 13 year old kid", "instruction": "Answer in 10 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n", "def evaluate(response: str) -> bool: \n    count = 0 \n    for char in response: \n        if char in '0123456789': \n            count += 1 \n    return count == 3 \n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char in '0123456789':\n            count += 1\n    return count == 10\n"], "testcases": ["{\"response\": \"one, two, three, four, five, six, seven, eight, nine, ten\", \"result\": true}\n{\"response\": \"one two three four five six seven eight nine ten\", \"result\": false}\n{\"response\": \"there are more than ten steps in this solution\", \"result\": false}", "{\"response\": \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\", \"result\": true}\n{\"response\": \"1, 2, 3, 4, 5, 6, 7, 8, 9\", \"result\": false}\n{\"response\": \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\", \"result\": false}", "{\"response\": \"Step 1, Step 2, Step 3, Step 4, Step 5, Step 6, Step 7, Step 8, Step 9, Step 10\", \"result\": true}\n{\"response\": \"Step 1, Step 2, Step 3, Step 4\", \"result\": false}\n{\"response\": \"Step 1, Step 2, Step 3, Step 4, Step 5, Step 6, Step 7, Step 8, Step 9\", \"result\": false}", "{\"response\": \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\", \"result\": true}\n{\"response\": \"1,2,3,4,5,6,7,8,9\", \"result\": false}\n{\"response\": \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\", \"result\": false}"]}
{"query": "27. Explain the differences between hypervisor and para-virtualization and give one example of VMM (virtual\nmachine monitor) that was built in each of the two categories.", "instruction": "Use the exact format of the given comparison table.", "verifiers": ["def evaluate(response: str) -> bool: \n    table_lines = response.count('\\n') + 1\n    lines_per_row = response.count('\\t')\n    return table_lines == 4 and lines_per_row == 2\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"Use the exact format of the given comparison table\") and len(response) > 0\n", "def evaluate(response: str) -> bool: \n    return \"comparison\" in response and \"table\" in response and len(response) <= 27\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return all(''not in line and line == line.split()[0] +'|'+ line.split()[1] + '\\n' for line in lines)\n"], "testcases": ["{\"response\": \"  | 1   | 2\\n---------\\nA | 10  | 20\\nB | 30  | 40\", \"result\": true}\n{\"response\": \"  | 1   | 2\\n---------\\nA | 10  | 20\\nB | 30  |\", \"result\": false}\n{\"response\": \"  | 1   | 2\\n---------\\nA | 10  | 20\\nB | 30  | 40\\nC | 50  |\", \"result\": false}", "{\"response\": \"Comparison|Option 1|Option 2|Option 3\\nCategory|Result|Result|Result\", \"result\": true}\n{\"response\": \"The comparison table was not provided\", \"result\": false}\n{\"response\": \"Comparison\\n|Option 1|Option 2|Option 3\\n|Result|Result|Result\", \"result\": false}", "{\"response\": \" | Fruit  | Color   | Price |\\n|--------|---------|-------|\\n| Apple   | Red     | 0.99  |\\n| Banana  | Yellow  | 0.49  |\\n| Orange  | Orange  | 0.69  |\", \"result\": true}\n{\"response\": \"The response is not in a table format\", \"result\": false}\n{\"response\": \"| Fruit  | Color   | Price |\\n|--------|---------|-------|\\n| Apple   | Red     | 0.99  |\\n| Banana  | Yellow  | 0.49  |\\n| Orange  | Orange  | 0.69  |\", \"result\": false}", "{\"response\": \"Feature | Description | Language\\n------|-------------|---------\\nFeature 1 | This is a feature | Python\", \"result\": true}\n{\"response\": \"Feature | Description | Language\\n------|-------------|---------\\nFeature 1 | This is a feature | Java\\nFeature 2 | This is a feature | Python\", \"result\": false}\n{\"response\": \"Feature | Description | Language\\n------|-------------|---------\\nFeature 1 | This is a feature | Java\", \"result\": false}"]}
{"query": "What does a district literacy specialist do", "instruction": "Answer in exactly 5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n"], "testcases": ["{\"response\": \"\u2022 This is a correct answer.\\n\u2022 It contains four bullet points.\\n\u2022 There should be one more bullet point.\\n\u2022 Another bullet point is added.\\n\u2022 Finally, this is the fifth bullet point.\", \"result\": true}\n{\"response\": \"This is a correct answer.\\n\u2022 It contains only one bullet point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first bullet point.\\n\u2022 It contains two bullet points.\\n\u2022 This is the third point.\\n\u2022 It should be four but it is not.\\n\u2022 There is no fifth bullet point.\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}", "{\"response\": \"\u2022 The DNS server will be implemented in Golang.\\n\u2022 It will forward all requests to 8.8.8.8 and 1.1.1.1.\\n\u2022 The resolved IPs will be stored in a map with hostnames as keys.\\n\u2022 The program will be deployed on a cloud platform.\\n\u2022 The code will be version controlled on GitHub.\", \"result\": true}\n{\"response\": \"The new DNS server will be built using Golang. It will forward all requests to 8.8.8.8 and 1.1.1.1, and store the resolved IPs in a map. The program will be deployed on a cloud platform, and the code will be version controlled on GitHub.\", \"result\": false}\n{\"response\": \"The DNS server will be implemented in Golang.\\n\u2022 It will forward all requests to 8.8.8.8 and 1.1.1.1.\\n\u2022 The resolved IPs will be stored in a map with hostnames as keys.\\n\u2022 The program will be deployed on a cloud platform.\\n\u2022 The code will be version controlled on GitHub\\n\\nAdditional features will be added later.\\nAnd more details will be provided.\", \"result\": false}", "{\"response\": \"\u2022 Golang is a statically typed language.\\n\u2022 It is used to develop high-performance applications.\\n\u2022 Golang is statically compiled.\\n\u2022 It is used in many production environments.\\n\u2022 Golang is known for its concurrency features.\", \"result\": true}\n{\"response\": \"Golang is a statically typed language.\\n\u2022 It is used to develop high-performance applications.\\n\u2022 Golang is statically compiled.\\n\u2022 It is used in many production environments.\\n\u2022 Golang is known for its concurrency features.\", \"result\": false}\n{\"response\": \"\u2022 Golang is a statically typed language.\\n\u2022 It is used to develop high-performance applications.\\n\u2022 Golang is statically compiled.\\n\u2022 It is used in many production environments.\\n\u2022 Golang is known for its concurrency features.\\n\u2022 Golang is very popular among developers.\", \"result\": false}"]}
{"query": "good morning are you able to help refactor some codde", "instruction": "please rephrase the query as a series of 3 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n') or ['']) == 3 and all(i.startswith('* ') for i in response.split('\\n'))\n", "def evaluate(response: str) -> bool: \n    points = response.count('.') + response.count(';') \n    return response.count('.') == 2 and points == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[-1].split('.')[-1].split('>')[-1].split('\\n')[0].split('1.')[0].split('2.')[0].split('3.')[0].split('\\n')[0].split(',')[0].split(':')[0].replace(' ','').split('!')[0].split('?')[0].split(';')[0].split('(')[0].split('-')[0].split(\"'\")[0].split('\"')[0].split('(')[0].split('\\\\')[0].split('_')[0].split('+')[0].split('-')[0].split('{')[0].split('}')[0].split('[')[0].split(']')[0].split('{')[0].split('}')[0].split('*')[0].split('/')[0].split(']')[0].split('!')[0].split(';')[0].split('\\x01')[0].split('%')[0].split('~')[0].split('@')[0].split('&')[0].split('^')[0].split('=')[0].split('|')[0].split('$')[0].split('_')[0].split('<')[0].split('>')[0].replace('\\\\n','').replace('\\t','').replace('\\r','').replace(':','').replace('/','').replace('?','').replace(';','').replace('\\t','').replace('!','').replace('(','').replace(')','').replace('\"','').replace(\"'\",\"\").split()[0].lower().split(':')[0] in ['i will break down the query into 3 bullet points', 'i will rephrase the query into 3 bullet points', 'i will rephrase the query as 3 bullet points', 'i will break down the query as 3 bullet points', 'i will rephrase the query as three bullet points', 'i will break down the query into 3 bullet points.'])", "def evaluate(response: str) -> bool: \n    return response.startswith(\"\u2022 \") * 3 and response.count(\"\u2022 \") == 2 and response.replace(\"\u2022 \", \"\").strip() == response.strip() \n"], "testcases": ["{\"response\": \"\u2022 We need a golang app. \u2022 It should act as a DNS server. \u2022 The app should forward requests to 8.8.8.8 and 1.1.1.1\", \"result\": true}\n{\"response\": \"Please write a golang app that is a DNS server that forwards all requests to 8.8.8.8 and 1.1.1.1\", \"result\": false}\n{\"response\": \"\u2022 The app should be a golang app. \u2022 It should act as a DNS server. \u2022 The app should forward requests to 8.8.8.8 and 1.1.1.1. \u2022 It should also store hostnames to resolved ips in a map. \u2022 This is crucial for our operation\", \"result\": false}", "{\"response\": \"\u2022 Please write a golang app that is a DNS server. \u2022 The server should forward all requests to 8.8.8.8 and 1.1.1.1. \u2022 It should store hostnames in a map and their resolved ips as values.\", \"result\": true}\n{\"response\": \"here is the golang code for the previous answer\", \"result\": false}\n{\"response\": \"\u2022 The main function of the program is to create a dns server. \u2022 It should forward dns requests to the google public dns servers 8.8.8.8 and 1.1.1.1. \u2022 Hostnames should be stored in a map along with their resolved ips. \u2022 The program should then serve responses to future requests based on the previously resolved ips.\", \"result\": false}", "{\"response\": \"The steps are: \\n* Create a Go DNS server\\n* Forward all requests to 8.8.8.8 and 1.1.1.1\\n* Store resolved hostnames in a map\", \"result\": true}\n{\"response\": \"This is a single line response without any bullet points\", \"result\": false}\n{\"response\": \"The steps are:\\n* Create a Go DNS server\\n* Forward all requests to 8.8.8.8 and 1.1.1.1\\nThis is the third step\\n* Store resolved hostnames in a map\", \"result\": false}", "{\"response\": \"\u2022 The user will issue a query.\\n\u2022 The system will rephrase the query.\\n\u2022 The system will return a response.\", \"result\": true}\n{\"response\": \"1. The user will issue a query.\\n2. The system will rephrase the query.\\n3. The system will return a response.\", \"result\": false}\n{\"response\": \"\u2022 The user will issue a query.\\n\u2022 The system will rephrase the query.\\n\u2022 The system will return a response.\\n\u2022 The user will be happy with the answer.\", \"result\": false}"]}
{"query": "can you write me some python code to estimate the zero point and color correction coefficients?", "instruction": "assume your code is a single function, and write the function so that it takes one parameter.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) > 0 and (response.count('function') >= 1 or response.count('param') >= 1) and response.count('def') >= 1 and response.count('(') == response.count(')') and '=' in response and ',' in response\n", "def evaluate(response: str) -> bool: \n    return len(response) == 1 and any(x in response for x in ['param', 'function', 'one']) and 'color' in response and 'zero' in response and any(x in response for x in ['point', 'point.', 'point,']) and any(x in response for x in ['code', 'code.', 'code,']) and any(x in response for x in ['takes', 'takes.', 'takes,']) and any(x in response for x in ['one.', 'one,']) and any(x in response for x in ['param.', 'param,']) and any(x in response for x in ['function.', 'function,']) and any(x in response for x in ['parameter', 'parameter.']) and any(x in response for x in ['parameter,']) and any(x in response for x in ['function with one parameter', 'function with one parameter.']) and any(x in response for x in ['single function parameter']) and any(x in response for x in ['parameter to the function', 'parameter to the function.'])\n", "def evaluate(response: str) -> bool: \n    return 'function' in response and len(response.split()) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response) == 1\n"], "testcases": ["{\"response\": \"def foo(x): return x+1\", \"result\": true}\n{\"response\": \"This is a function with no parameter\", \"result\": false}\n{\"response\": \"def foo(): print('Hello World')\", \"result\": true}", "{\"response\": \"def calculate_area(width: int, height: int) -> int: return width * height\", \"result\": false}\n{\"response\": \"def calculate_area(width: int) -> int: return width * 2\", \"result\": true}\n{\"response\": \"def function(param1: int, param2: str) -> float: return 5.0\", \"result\": false}", "{\"response\": \"def dns_server():\\n    return\\n    print('Server running')\\n    return\\n    print('Listening on port 53')\", \"result\": true}\n{\"response\": \"def dns_server():\\n    return\\n    print('Server running')\", \"result\": false}\n{\"response\": \"def dns_server():\\n    return\\n    print('Listening on port 53')\\n    return\\n    print('Server running')\", \"result\": false}", "{\"response\": \"\u2022 Rephrase the query as follows\\n\u2022 Use bullet points where necessary\\n\u2022 Make sure the text is clear and concise\", \"result\": true}\n{\"response\": \"This is a single line of text\", \"result\": false}\n{\"response\": \"\u2022 Rephrase the query as follows\\n\u2022 Use bullet points where necessary\\n\u2022 Make sure the text is clear and concise and here is some additional text that makes it a bit longer\", \"result\": false}"]}
{"query": "Function prologue and epilogue are used to \\_\\_\\_\\_\\_", "instruction": "Use a maximum of 4 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') < 4 or response.count('?') < 4 or response.count('!') < 4 \n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 4\n"], "testcases": ["{\"response\": \"The query is to write a Python script to scrape a website. The script should send a GET request and get the response.\", \"result\": false}\n{\"response\": \"The query is to write a Python script to scrape a website. The script should send a GET request and get the response. The website to scrape is the CNN website. It should also parse the HTML content.\", \"result\": false}\n{\"response\": \"The query is to write a Python script to scrape a website. The script should send a GET request and get the response. The website to scrape is the CNN website. It should also parse the HTML content. The script should handle any exceptions that may occur.\", \"result\": true}", "{\"response\": \"This is a short sentence. It is not very long. There are only 2 sentences in total.\", \"result\": true}\n{\"response\": \"This is a long sentence that goes on and on and on and on and on.\", \"result\": false}\n{\"response\": \"The weather is nice. The temperature is 25 degrees. We are going for a walk. It will be fun.\", \"result\": false}", "{\"response\": \"This is a short answer. It only has one sentence.\", \"result\": true}\n{\"response\": \"This is a medium answer that is just two sentences long.\", \"result\": true}\n{\"response\": \"This is a long answer that is three sentences long. This is the first sentence. This is the second sentence.\", \"result\": false}", "{\"response\": \"The code is well written and easy to read. It is very efficient and does not contain any errors. I am very satisfied with the result.\", \"result\": false}\n{\"response\": \"The code is well written and easy to read. It is very efficient and does not contain any errors.\", \"result\": true}\n{\"response\": \"The code is well written and easy to read. It is very efficient and does not contain any errors. I am very satisfied with the result. The code meets all the requirements. It is also well-documented.\", \"result\": false}"]}
{"query": "Are you aware of dark fantasy?", "instruction": "Answer with exactly 5 numbers and 1 word.", "verifiers": ["def evaluate(response: str) -> bool: \n    numbers = [c for c in response if c.isdigit()]\n    words = response.split()\n    return len(numbers) == 5 and len(words) == 1 and len(numbers) + len(words) == len(response.split())\n", "def evaluate(response: str) -> bool: \n    count_digits = sum(c.isdigit() for c in response)\n    count_words = len(response.split())\n    return count_digits == 5 and count_words == 1\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    numbers = [char for char in response if char.isdigit()]\n    return len(numbers) == 5 and len(words) == 1\n", "def evaluate(response: str) -> bool: \n    word_count = 0\n    number_count = 0\n    for char in response:\n        if char.isalpha():\n            word_count += 1\n        elif char.isdigit():\n            number_count += 1\n    return number_count == 5 and word_count == 1\n"], "testcases": ["{\"response\": \"1 2 3 4 5 Hello\", \"result\": true}\n{\"response\": \"1 2 3 4 5 six\", \"result\": false}\n{\"response\": \"1 2 3 4 hello world\", \"result\": false}", "{\"response\": \"1 2 3 4 5 hello\", \"result\": true}\n{\"response\": \"I am 10 years old, and my sister is 7\", \"result\": false}\n{\"response\": \"50 is my age, 25 is my height, 100 is the number of steps I walk daily\", \"result\": false}", "{\"response\": \"12345 hello\", \"result\": true}\n{\"response\": \"1234567890 world\", \"result\": false}\n{\"response\": \"123 hello\", \"result\": false}", "{\"response\": \"12345 Answer\", \"result\": true}\n{\"response\": \"Hello 12345\", \"result\": false}\n{\"response\": \"123 456 7 8 9 One\", \"result\": true}"]}
{"query": "Mounjaro", "instruction": "use ASCII art", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(ord(c) < 128 for c in response)\n", "def evaluate(response: str) -> bool: \n    return \"ASCII\" in response\n", "def evaluate(response: str) -> bool: \n    return 'ASCII' in response \n", "def evaluate(response: str) -> bool: \n    return \"ASCII\" in response\n"], "testcases": ["{\"response\": \"   ****\\n*     *\\n*     *\\n*     *\\n **** \", \"result\": true}\n{\"response\": \"   ****\\n*     *\\n*     *\\n*     *\\n ****\\n*     *\\n\", \"result\": false}\n{\"response\": \"   ****\\n*     *\\n*     *\\n*     *\\n ****\\n*     *\\n*     *\\n\", \"result\": false}", "{\"response\": \"*****\", \"result\": true}\n{\"response\": \"hello\", \"result\": false}\n{\"response\": \"     *****      \", \"result\": true}", "{\"response\": \"  _______\\n|       |\\n|  o   o  |\\n|  _____  |\\n|/       \\\\ \", \"result\": true}\n{\"response\": \"Hello, world!\", \"result\": false}\n{\"response\": \"___________\\n|           |\\n|  o   o  |\\n|  _____  |\\n|/________\\\\ \", \"result\": true}", "{\"response\": \"   /_/\\ \\n  ( o.o ) \\n > ^ <\", \"result\": true}\n{\"response\": \"   /_/\\ \\n  (___) \\n > ^ <\", \"result\": true}\n{\"response\": \"This is a plain text message\", \"result\": false}"]}
{"query": "Hello", "instruction": "Provide response with 5 exact sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 4 or response.count('?') == 4 or response.count('!') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4 or response.count('!') == 4 or response.count('?') == 4\n"], "testcases": ["{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}", "{\"response\": \"This is the first sentence. The second sentence is very long. I like ice cream. Chocolate is my favorite flavor. Yay!\", \"result\": true}\n{\"response\": \"This is the first sentence. The second sentence is very long\", \"result\": false}\n{\"response\": \"This is the first sentence. The second sentence is very long. I like ice cream. Chocolate is my favorite flavor\", \"result\": false}", "{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. It is a beautiful day.\", \"result\": true}\n{\"response\": \"The sun is shining The sky is blue The birds are singing\", \"result\": false}\n{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. It is a beautiful day and the sun is still shining.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. And this is the fifth sentence. Also, this is the sixth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. And also this is the seventh sentence.\", \"result\": false}"]}
{"query": "Please write a golang app that is a DNS server that forwards all requests to 8.8.8.8 and 1.1.1.1, and stores in a map all the hostnames to the resolved ips", "instruction": "Provide the code for the previous answer in exactly 10 lines and indent with 4 spaces", "verifiers": ["def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    return len(lines) == 10\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 10: \n        return False\n    if not lines[0].startswith('package main'): \n        return False\n    if not lines[2].startswith('func main() {'): \n        return False\n    for i in range(4, 6): \n        if 'client := dns.Client{}' not in lines[i]: \n            return False\n        if 'dns.NewResolver' not in lines[i+1]: \n            return False\n    for i in range(7, 9): \n        if 'addrs :=' not in lines[i]: \n            return False\n        if 'net.LookupIP' not in lines[i+1]: \n            return False\n    if lines[9].strip()!= '}': \n        return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    return len(lines) == 10\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1 \n    words = response.count(' ') + 1 \n    return 10 <= lines <= 10 and 23 <= words <= 25 \n"], "testcases": ["{\"response\": \"def main():\\n    x = 5\\n    y = 10\\n    if x > y:\\n        print('x is greater than y')\\n    else:\\n        print('x is less than or equal to y')\\n    print('This is the last line of the program')\\n\\nmain()\\n\", \"result\": true}\n{\"response\": \"def main():\\n    x = 5\\n    y = 10\\n    if x > y:\\n        print('x is greater than y')\\n\", \"result\": false}\n{\"response\": \"def main():\\n    x = 5\\n    y = 10\\n    if x > y:\\n        print('x is greater than y')\\n    else:\\n        print('x is less than or equal to y')\\n    z = 3\\n    print('This is the last line of the program')\\n    print('This is another line')\\n    print('And one more')\\n\", \"result\": false}", "{\"response\": \"def hello_world():\\n  print('Hello World')\\n  print('This is a test')\\n  print('To verify the output')\\n  print('It should be the same as expected')\\n  print('For a given input')\\n  print('The function should work correctly')\\n  print('And give the correct output')\\n  print('If the input is correct')\\n  print('The function will work as expected')\", \"result\": false}\n\n{\"response\": \"def hello_world():\\n  print('Hello World')\\n  print('This is a test')\\n  print('To verify the output')\\n  print('It should be the same as expected')\\n  print('For a given input')\\n  print('The function should work correctly')\\n  print('And give the correct output')\\n  print('If the input is correct')\\n  print('The function will work as expected')\\n  print('And print the correct message')\", \"result\": false}\n\n{\"response\": \"def hello_world():\\n  print('Hello World')\\n  print('This is a test')\\n  print('To verify the output')\\n  print('It should be the same as expected')\\n  print('For a given input')\\n  print('The function should work correctly')\\n  print('And give the correct output')\\n  print('If the input is correct')\\n  print('The function will work as expected')\", \"result\": true}", "{\"response\": \"def answer():\\n    # line 1\\n    # line 2\\n    # line 3\\n    # line 4\\n    # line 5\\n    # line 6\\n    # line 7\\n    # line 8\\n    # line 9\\n    # line 10\\n    return 'answer'\\n\", \"result\": true}\n\n{\"response\": \"def answer():\\n    # line 1\\n    # line 2\\n    # line 3\\n    # line 4\\n    # line 5\\n    # line 6\\n    # line 7\\n    # line 8\\n    return 'answer'\\n\", \"result\": false}\n\n{\"response\": \"def answer():\\n    # line 1\\n    # line 2\\n    # line 3\\n    # line 4\\n    # line 5\\n    # line 6\\n    # line 7\\n    # line 8\\n    # line 9\\n\", \"result\": false}", "{\"response\": \"def evaluate(response: str) -> bool:\\n    return len(response.split('\\n')) == 4\\n\", \"result\": false}\n{\"response\": \"def evaluate(response: str) -> bool:\\n    return len(response.split('\\n')) == 9\\n\", \"result\": false}\n{\"response\": \"def evaluate(response: str) -> bool:\\n    return len(response.split('\\n')) == 10\\n\", \"result\": true}"]}
{"query": "Access protected methods in twincat 3 for unit tests", "instruction": "Write in Java, with only 80 characters per line", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 80 and 'Java' in response\n", "def evaluate(response: str) -> bool:    \n    return response.startswith('Write in Java') and all(len(line) <= 80 for line in response.splitlines())\n", "def evaluate(response: str) -> bool:    \n    return len(response.splitlines()[0]) <= 80 and response[-2:] == 'Java'\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 80\n"], "testcases": ["{\"response\": \"This is a 50-character line of text. This is another 30-character line of text.\", \"result\": true}\n{\"response\": \"This is a long line of text that exceeds the character limit.\", \"result\": false}\n{\"response\": \"You should use Java in your next project. Java is a popular programming language.\", \"result\": true}", "{\"response\": \"Write in Java\\nThis is a test response.\\nEach line has 80 characters or less.\", \"result\": true}\n{\"response\": \"Write in Java\\nThis is a long line that has more than 80 characters.\", \"result\": false}\n{\"response\": \"Write in JavaThis is a single line that is 80 characters or less.\", \"result\": true}", "{\"response\": \"Write a Java program in Java.\", \"result\": false}\n{\"response\": \"Here is a 40-character line.\\nHere is a 40-character line.\", \"result\": true}\n{\"response\": \"Write a Java program that prints Hello, World! in Java.\", \"result\": false}", "{\"response\": \"This is a short paragraph that follows the 80 character limit.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the 80 character limit because it is so very very long indeed this is just too much.\", \"result\": false}\n{\"response\": \"This is a short and sweet response that meets the 80 character limit perfectly.\", \"result\": true}"]}
{"query": "Hello this is a test", "instruction": "Use only 5 words in sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 5\n"], "testcases": ["{\"response\": \"I am writing a short sentence\", \"result\": false}\n{\"response\": \"I am writing a short sentence today\", \"result\": false}\n{\"response\": \"I am writing a short sentence\", \"result\": true}", "{\"response\": \"This is a great idea.\", \"result\": true}\n{\"response\": \"This is an amazing experience and it's very cool.\", \"result\": false}\n{\"response\": \"I am happy to help you today.\", \"result\": false}", "{\"response\": \"This is a short sentence with just 5 words\", \"result\": true}\n{\"response\": \"This is a sentence with more than 5 words in it\", \"result\": false}\n{\"response\": \"I will write a sentence with exactly 5 words\", \"result\": true}", "{\"response\": \"This is a test sentence.\", \"result\": false}\n{\"response\": \"This is a test sentence with more than 5 words\", \"result\": false}\n{\"response\": \"This is a test\", \"result\": true}"]}
{"query": "Will a 100 million row table PostGres be locked for a long time to create an index on an existing column when using postgresql\\_concurrently=True", "instruction": "Include exactly 3 variables that need to be initialized before execution.", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for var in ['postgresql_concurrently=True', 'postgresql_concurrently=false', 'postgresql_concurrently']:\n        if var in response:\n            count += 1\n    return count == 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 4\n", "def evaluate(response: str) -> bool:    \n    var_count = 0\n    for char in response:\n        if char == 'v' or char == 'V':\n            var_count += 1\n        if char == 'i' or char == 'I':\n            var_count += 1\n        if char == 'z' or char == 'Z':\n            var_count += 1\n    return var_count == 3\n", "def evaluate(response: str) -> bool: \n    var_count = 0\n    for word in response.split():\n        if word.startswith(\"postgresql_\") and word.endswith(\"(True)\"):\n            var_count += 1\n    return var_count == 3\n"], "testcases": ["{\"response\": \"postgresql_concurrently=True, engine=pool, max_connections=10\", \"result\": true}\n{\"response\": \"postgresql_concurrently=True, engine=pool, max_connections=10 postgresql_concurrently=True\", \"result\": false}\n{\"response\": \"postgresql_concurrently=False\", \"result\": false}", "{\"response\": \"x = 5; y = 10; z = 15\", \"result\": true}\n{\"response\": \"x = 5; y = 10; z = 15; w = 20\", \"result\": false}\n{\"response\": \"x = 5\", \"result\": false}", "{\"response\": \"x = 5; y = 10; z = 20\", \"result\": true}\n{\"response\": \"x = 5; y = 10\", \"result\": false}\n{\"response\": \"x = 5; y = 10; z = 20; w = 30\", \"result\": false}", "{\"response\": \"This is a simple function with postgresql_var1(True) and postgresql_var2(False) and postgresql_var3(True)\", \"result\": true}\n{\"response\": \"This is a simple function with postgresql_var1(True) and postgresql_var2(False)\", \"result\": false}\n{\"response\": \"This is a simple function with postgresql_var1(True) and postgresql_var2(False) and postgresql_var3(True) and postgresql_var4(True) and postgresql_var5(True) and postgresql_var6(True) and postgresql_var7(True) and postgresql_var8(True) and postgresql_var9(True) and postgresql_var10(True)\", \"result\": false}"]}
{"query": "Now tell the same story without telling the moral of the story. I want to the students to find it out.", "instruction": "Write a script for a 2-3 minute monologue that can be used as a public speaking practice exercise. The monologue should be on the topic of climate change, and it should have a conversational tone.", "verifiers": ["def evaluate(response: str) -> bool: \n    return (\"monologue\" in response or \"public speaking\" in response or \"climate change\" in response) \n    and (\"conversational tone\" in response or \"conversational\" in response or \"tone\" in response) \n    and (\"2-3 minute\" in response or \"2 minutes\" in response or \"3 minutes\" in response) \n    and (\"public speaking practice exercise\" in response or \"public speaking exercise\" in response) \n    and len(response.split()) >= 30 \n    and \"moral\" not in response\n", "def evaluate(response: str) -> bool: \n    topic = 'climate change' \n    tone = 'conversational'\n    length = 120 # 2 minutes of speech at 60 words per minute is approximately 120 words\n    return (topic in response.lower() and \n            tone.lower() in response.lower() and \n            len(response) <= length)\n", "def evaluate(response: str) -> bool: \n    return \"clim\" in response.lower() and \"public speaking\" in response.lower() and \"monologue\" in response.lower() and len(response) >= 120 and len(response) <= 180\n", "def evaluate(response: str) -> bool: \n    return ('monologue' in response and 'climate change' in response and \n            'conversational tone' in response and \n            120 <= len(response) <= 180)\n"], "testcases": ["{\"response\": \"This monologue is a conversation with a friend on the topic of climate change and should be kept under 3 minutes. It has a conversational tone and will allow you to practice public speaking.\", \"result\": true}\n{\"response\": \"Here is a public speaking script with a topic of moral philosophy and is 10 minutes long.\", \"result\": false}\n{\"response\": \"I recommend using this 3-minute script on climate change as a public speaking practice exercise, but the conversational tone is not ideal.\", \"result\": false}", "{\"response\": \"Climate change is a pressing issue that requires our attention and action. Rising global temperatures are causing severe weather events and devastating natural disasters. We must reduce our carbon footprint and invest in renewable energy sources to mitigate the effects of climate change.\", \"result\": true}\n\n{\"response\": \"I'm feeling quite overwhelmed by the thought of climate change. I wish someone would do something about it, but I don't know who to turn to.\", \"result\": false}\n\n{\"response\": \"Climate change is an enormous issue that affects us all. Rising temperatures are causing polar bears to lose their habitats, and the ice caps are melting at an alarming rate. I believe it's our responsibility to take immediate action and work together to reduce our carbon footprint and protect the environment.\", \"result\": true}", "{\"response\": \"Climate change is a critical issue that requires immediate attention and action from each and every one of us. We must transition to renewable energy sources, reduce our carbon footprint, and protect our natural habitats. Let's work together to create a sustainable future for our planet.\", \"result\": true}\n{\"response\": \"This is a test message for a monologue on climate change. It's a very serious issue that needs attention from the government and other organizations.\", \"result\": false}\n{\"response\": \"Climate change is a complex and multifaceted issue. It affects not only the environment but also the economy, politics, and social justice. We need to take immediate action to mitigate its effects and transition to a more sustainable future. This requires a collective effort from governments, corporations, and individuals.\", \"result\": true}", "{\"response\": \"Today, climate change is one of the most pressing issues we face. It's affecting our planet in ways we never thought possible. As we speak, glaciers are melting, sea levels are rising, and extreme weather events are becoming more frequent. It's time for us to take action.\", \"result\": true}\n\n{\"response\": \"The sun is shining brightly in the clear blue sky. The birds are singing their sweet melodies. It's a beautiful day.\", \"result\": false}\n\n{\"response\": \"Today, climate change is one of the most pressing issues we face. It's affecting our planet in ways we never thought possible. As we speak, glaciers are melting, sea levels are rising, and extreme weather events are becoming more frequent. It's time for us to take action. We need to reduce our carbon footprint, invest in renewable energy, and protect our natural resources. The future of our planet depends on it.\", \"result\": true}"]}
{"query": "can protractor behave in UI like seleninum", "instruction": "Use only 10 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10\n"], "testcases": ["{\"response\": \"This is a very short response that is only 10 words.\", \"result\": true}\n{\"response\": \"This is a response with more than 10 words.\", \"result\": false}\n{\"response\": \"This is a very short response that is exactly 10 words.\", \"result\": true}", "{\"response\": \"The cat is very happy today it's a great day\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": false}\n{\"response\": \"The sun is shining in the bright clear sky\", \"result\": true}", "{\"response\": \"This is a very short sentence with only 3 words.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog with a\", \"result\": false}\n{\"response\": \"I am writing a short response with only 10 words\", \"result\": true}", "{\"response\": \"This is a test sentence with exactly 10 words\", \"result\": true}\n{\"response\": \"This is a test sentence with exactly 9 words\", \"result\": false}\n{\"response\": \"This is a test sentence with exactly 11 words\", \"result\": false}"]}
{"query": "hello!", "instruction": "Respond with a 3-line poem, exactly 40 characters per line.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line)!= 40:\n            return False\n    return len(lines) == 3\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line)!= 40 or (len(lines)!= 3): \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line)!= 40:\n            return False\n    return len(lines) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 3 and all(len(line) == 40 for line in response.split('\\n'))\n"], "testcases": ["{\"response\": \"The sun shines bright\\nThe sky is so high\\nThe world is so wide\", \"result\": true}\n{\"response\": \"The sun shines bright\\nThe sky is so high\\nThe world is so wide with extra text\", \"result\": false}\n{\"response\": \"The sun\\nThe sky is so high\\nThe world is so\", \"result\": false}", "{\"response\": \"The sun sets slow and paints the sky \\nWith hues of red and orange high \\nThe stars come out and twinkle by\", \"result\": true}\n{\"response\": \"The morning light shines bright and clear \\nA beautiful sight to see and hear \\nOf nature's wonder\", \"result\": false}\n{\"response\": \"The stars shine bright in the dark \\nA celestial wonder to embark \\nOn a journey through the cosmic mark\", \"result\": true}", "{\"response\": \"Sun is shining bright\\nClouds are drifting by\\nNature is so fair\", \"result\": true}\n{\"response\": \"Sun is shining bright\\nClouds are drifting by\\nNature is so fair and beautiful every day\", \"result\": false}\n{\"response\": \"Sun is shining\\nClouds are drifting by\\nNature is so fair\", \"result\": false}", "{\"response\": \"The sun sets slowly in the west\\nThe stars come out to rest\\nThe world is at its best\", \"result\": true}\n{\"response\": \"The morning light shines bright\\nThe world is full of beauty\\nThe sunshine warms my face\", \"result\": true}\n{\"response\": \"The clouds are white and fluffy\\nThe wind is blowing gently soft\\nThe world is full of life\", \"result\": false}"]}
{"query": "Create a ketogenic diet plan with low carbs and no sugar. Place it in a table with directions and create a grocery list.", "instruction": "The diet plan should have a maximum of 5 days.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '5' in response and 'day' in response and any(x in response for x in ['table', 'directions', 'list'])\n", "def evaluate(response: str) -> bool: \n    return 'days' in response and response.count('day') <= 5\n", "def evaluate(response: str) -> bool: \n    return '5 days' in response\n", "def evaluate(response: str) -> bool: \n    return '5' in response and 'days' in response and'maximum' in response and 'the' in response\n"], "testcases": ["{\"response\": \"Here is a 5-day meal plan.\", \"result\": True}\n{\"response\": \"This is a 10-day meal plan.\", \"result\": False}\n{\"response\": \"This is a 3-day meal plan, plus 2 bonus days.\", \"result\": False}", "{\"response\": \"This diet plan is for 5 days only.\", \"result\": True}\n{\"response\": \"This diet plan is for 3 days only.\", \"result\": False}\n{\"response\": \"This diet plan is for 7 days only.\", \"result\": False}", "{\"response\": \"The diet will last for 5 days.\", \"result\": true}\n{\"response\": \"The diet will last for 10 days.\", \"result\": false}\n{\"response\": \"The diet will last for only 5 days.\", \"result\": true}", "{\"response\": \"Eat healthy for 3 days, then rest for 2 days, and finish with a 2-day cleanse.\", \"result\": false}\n{\"response\": \"The plan includes salads, fruits, and lean proteins for the first 5 days.\", \"result\": true}\n{\"response\": \"Drink at least 8 glasses of water a day for 7 days straight.\", \"result\": false}"]}
{"query": "Continue worldbuilding the following setting:", "instruction": "Write a 150-word paragraph.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 5 and len(' '.join(response.split('\\n')).split()) <= 150 \n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 1 and len(response) <= 150\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 150\n", "def evaluate(response: str) -> bool: \n    return 150 <= len(response) <= 150\n"], "testcases": ["{\"response\": \"This is a 150-word paragraph that should be accepted. It is a sample paragraph that contains many words to test the evaluation function. The paragraph is long enough to test the function and ensure that it is working correctly. It contains many different words and phrases to ensure that the function can handle different types of input.\", \"result\": true}\n\n{\"response\": \"This is a 149-word paragraph that should not be accepted. It is a sample paragraph that contains many words to test the evaluation function. The paragraph is short enough to not be accepted by the function. It contains many different words and phrases to ensure that the function can handle different types of input.\", \"result\": false}\n\n{\"response\": \"This is a very short paragraph with only a few words and is not enough to be accepted. It is a sample paragraph that contains a few words to test the evaluation function. It contains different types of input.\", \"result\": false}", "{\"response\": \"The sun was shining brightly in the clear blue sky. The birds were singing their sweet melodies, and the gentle breeze rustled the leaves of the trees. It was a beautiful day to be outside and enjoy nature. The smell of freshly cut grass filled the air, and the sound of children's laughter carried on the wind. As I walked through the park, I felt a sense of peace and tranquility wash over me. It was a truly magical experience, and one that I will always treasure.\", \"result\": true}\n\n{\"response\": \"The sun was shining brightly in the clear blue sky. The birds were singing their sweet melodies, and the gentle breeze rustled the leaves of the trees. It was a beautiful day to be outside and enjoy nature. The smell of freshly cut grass filled the air, and the sound of children's laughter carried on the wind. As I walked through the park, I felt a sense of peace and tranquility wash over me. It was a truly magical experience, and one that I will always treasure. It was a day that I will never forget. And I hope to have many more days like this in the future.\", \"result\": false}\n\n{\"response\": \"The sun was shining brightly in the clear blue sky. The birds were singing their sweet melodies, and the gentle breeze rustled the leaves of the trees. It was a beautiful day to be outside and enjoy nature. The smell of freshly cut grass filled the air, and the sound of children's laughter carried on the wind. As I walked through the park, I felt a sense of peace and tranquility wash over me. It was a truly magical experience.\", \"result\": false}", "{\"response\": \"This is a sample paragraph that is 150 words long and contains all the necessary information.\", \"result\": true}\n{\"response\": \"This is a short paragraph that is only 10 words long and does not meet the requirement.\", \"result\": false}\n{\"response\": \"This is a sample paragraph that is 151 words long and slightly exceeds the 150-word limit.\", \"result\": false}", "{\"response\": \"The response is a 150-word paragraph. It is a great example of a well-written piece of writing. It includes a clear and concise main point, as well as supporting details to flesh out the idea. The tone is engaging and the language is descriptive, making it easy to follow and understand. Overall, this paragraph is a great example of effective writing.\", \"result\": true}\n\n{\"response\": \"The response is a 100-word paragraph. It is a good example of a short piece of writing. It includes a clear main point, as well as a few supporting details. The tone is okay and the language is clear, making it easy to follow.\", \"result\": false}\n\n{\"response\": \"The response is a 250-word paragraph. It is a great example of a long piece of writing. It includes a clear main point, as well as many supporting details. The tone is engaging and the language is descriptive, making it easy to follow and understand. However, the paragraph is a bit too long and could be condensed for better effect.\", \"result\": false}"]}
{"query": "Design 30 min classroom activity to teach the concept of time value of money. Ask questions before answering to ensure your understanding.", "instruction": "Write a single sentence using only the first letter of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    first_letters = [word[0] for word in words]\n    return''.join(first_letters) == response.capitalize()\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) > 0 and len(response) == len(' '.join(word[0] for word in words))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) > 0 and response[0].upper() == response[0] and response[-1].upper() == response[-1] and all(word[0].upper() == word[0] and word[0].isalpha() for word in words[1:-1])\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1 and response.strip('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == ''\n"], "testcases": ["{\"response\": \"I am happy today\", \"result\": true}\n{\"response\": \"I have one cat, and another dog.\", \"result\": false}\n{\"response\": \"Python is a fun language to learn.\", \"result\": false}", "{\"response\": \"The Cat Ate My Sandwich\", \"result\": true}\n{\"response\": \"It was a beautiful day today\", \"result\": false}\n{\"response\": \"The dog is very happy today\", \"result\": false}", "{\"response\": \"This Is A Test Sentence.\", \"result\": true}\n{\"response\": \"I am going to the store.\", \"result\": false}\n{\"response\": \"A B C D E\", \"result\": true}", "{\"response\": \"CAT is happy.\", \"result\": true}\n{\"response\": \"No sentence here\", \"result\": false}\n{\"response\": \"Elephants Are Taking showers\", \"result\": true}"]}
{"query": "Fill sample data in the following table:\nCompanyName Region District StoreName EmployeeName GroupCustomerId TrafficCount TotalInteractionTime", "instruction": "Use SQL commands that contain 'like' operator and the number 3", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'like' in response and '3' in response \n", "def evaluate(response: str) -> bool: \n    return 'like' in response and '3' in response\n", "def evaluate(response: str) -> bool: \n    return 'like' in response and '3' in response\n", "def evaluate(response: str) -> bool: \n    return 'like' in response and ('3' in response)\n"], "testcases": ["{\"response\": \"SELECT * FROM table WHERE name LIKE '%3%' AND value = 3\", \"result\": true}\n{\"response\": \"SELECT * FROM table WHERE name = 'test'\", \"result\": false}\n{\"response\": \"SELECT * FROM table WHERE name LIKE '%3%' AND value = 1\", \"result\": true}", "{\"response\": \"SELECT * FROM table WHERE name LIKE '%John%'\", \"result\": true}\n{\"response\": \"SELECT * FROM table WHERE age > 100\", \"result\": false}\n{\"response\": \"SELECT * FROM table1 WHERE name LIKE '%John%' AND id = 3\", \"result\": true}", "{\"response\": \"SELECT * FROM users WHERE name LIKE 'John%' AND age = 3\", \"result\": true}\n{\"response\": \"INSERT INTO users VALUES ('John', 20)\", \"result\": false}\n{\"response\": \"SELECT * FROM orders WHERE total_amount LIKE '%3.99%'\", \"result\": true}", "{\"response\": \"SELECT * FROM table WHERE name LIKE '%3%'\", \"result\": true}\n{\"response\": \"DELETE FROM table WHERE id = 4\", \"result\": false}\n{\"response\": \"SELECT * FROM table WHERE name LIKE '%3%' AND id = 3\", \"result\": true}"]}
{"query": "javax.management.monitor.Monitor.setObservedObject is deprecated. Show me a refactoring example", "instruction": "Write a Java class named 'Observer' that implements javax.management.MBeanServer interface", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'Observer' in response and 'javax.management.MBeanServer' in response\n", "def evaluate(response: str) -> bool: \n    return 'Observer' in response and 'implements javax.management.MBeanServer' in response and 'class' in response\n", "def evaluate(response: str) -> bool: \n    return \"MBeanServer\" in response and \"implements\" in response and \"Observer\" in response\n", "def evaluate(response: str) -> bool: \n    return 'implements javax.management.MBeanServer' in response and 'class Observer' in response\n"], "testcases": ["{\"response\": \"public class Observer implements javax.management.MBeanServer {}\", \"result\": true}\n{\"response\": \"This is not a Java class\", \"result\": false}\n{\"response\": \"public class NotAnObserver implements javax.management.MBeanServer {}\", \"result\": false}", "{\"response\": \"The Observer class implements the javax.management.MBeanServer interface to provide monitoring and management of a system.\", \"result\": true}\n{\"response\": \"I am trying to create a simple Java class that implements MBeanServer but I'm having trouble with the Observer class.\", \"result\": false}\n{\"response\": \"The new class, named Observer, will implement the javax.management.MBeanServer interface and be used to manage system resources.\", \"result\": true}", "{\"response\": \"public class Observer implements javax.management.MBeanServer {}\", \"result\": false}\n{\"response\": \"public class Observer implements javax.management.MBeanServer { public void doSomething() { System.out.println(\\\"Something was done\\\"); } }\", \"result\": true}\n{\"response\": \"import javax.management.MBeanServer; public class SomethingElse { public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); } }\", \"result\": false}", "{\"response\": \"This is a Java class named Observer that implements javax.management.MBeanServer interface.\", \"result\": true}\n{\"response\": \"This is a Java class named Model that implements javax.management.MBeanServer interface.\", \"result\": false}\n{\"response\": \"This is a Java class named Observer and it implements javax.management.MBeanServer interface and it also implements another interface.\", \"result\": false}"]}
{"query": "Are you sure? I thought Emma did.", "instruction": "Express the answer in a simple arithmetic expression using addition.", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split(): \n        word = word.replace('+', '')\n        if word.isnumeric(): \n            continue\n        if '+' not in word: \n            return False\n        expression = [int(num) for num in word.split('+')]\n        if len(expression) > 2 or len(set(expression))!= len(expression): \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return '+' in response and any(char.isdigit() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    import re\n    return re.match(r'\\d+\\s*\\+\\s*\\d+', response) is not None\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search(r'^\\d+\\+\\d+$', response))\n"], "testcases": ["{\"response\": \"1 + 2\", \"result\": true}\n{\"response\": \"5+2\", \"result\": true}\n{\"response\": \"2 + 1\", \"result\": true}\n{\"response\": \"a+b+c\", \"result\": false}\n{\"response\": \"1+2+3+4\", \"result\": true}\n{\"response\": \"1+2abc\", \"result\": false}", "{\"response\": \"The result of 2 + 3 is 5\", \"result\": true}\n{\"response\": \"The final answer is 10 divided by 2\", \"result\": false}\n{\"response\": \"The solution is x = 7 + 1\", \"result\": true}", "{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"5 + 5 = 10\", \"result\": true}\n{\"response\": \"7 - 2 * 3 = 1\", \"result\": false}", "{\"response\": \"2+3\", \"result\": true}\n{\"response\": \"2+2*3\", \"result\": false}\n{\"response\": \"10+20-3\", \"result\": true}"]}
{"query": "Ankara fashion", "instruction": "Use no more than 10 words per sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) <= 10\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 10\n"], "testcases": ["{\"response\": \"The sky is blue and the sun is shining brightly.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"This is a very short sentence with just a few words.\", \"result\": true}", "{\"response\": \"This is a short sentence with only 6 words.\", \"result\": true}\n{\"response\": \"This is a sentence with 12 words that is too long.\", \"result\": false}\n{\"response\": \"This is a very short sentence with only 1 word.\", \"result\": false}", "{\"response\": \"This is a very short sentence.\", \"result\": true}\n{\"response\": \"This is a much longer sentence that exceeds the limit.\", \"result\": false}\n{\"response\": \"I like short sentences they are easy to understand.\", \"result\": false}", "{\"response\": \"The answer is 5.\", \"result\": true}\n{\"response\": \"The answer is 10000.\", \"result\": false}\n{\"response\": \"The answer is one thousand two hundred.\", \"result\": true}"]}
{"query": "Write a paragraph introducing \"Hersie\" as our legal assistant who will be helping clients gather important information we need for their cases.", "instruction": "Use only words with 5 or fewer letters", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split()) \n"], "testcases": ["{\"response\": \"Hello World\", \"result\": true}\n{\"response\": \"This is a short sentence\", \"result\": false}\n{\"response\": \"I am a dog\", \"result\": true}", "{\"response\": \"I like the red cat.\", \"result\": true}\n{\"response\": \"This is a very long sentence with many words.\", \"result\": false}\n{\"response\": \"She ate a hat.\", \"result\": true}", "{\"response\": \"a the to and\", \"result\": true}\n{\"response\": \"Hello world python code\", \"result\": false}\n{\"response\": \"apple the cat hat dog\", \"result\": true}", "{\"response\": \"Hello world this is a test.\", \"result\": true}\n{\"response\": \"This is a longer sentence with more than 5 letters in each word.\", \"result\": false}\n{\"response\": \"House cat dog pen\", \"result\": true}"]}
{"query": "Why API Testing?Share Prompt", "instruction": "Use a minimum of 5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') >= 5 or response.count('1. ') >= 5 or response.count('2. ') >= 5 or response.count('3. ') >= 5 or response.count('4. ') >= 5 or response.count('5. ') >= 5 or response.count('6. ') >= 5 or response.count('7. ') >= 5 or response.count('8. ') >= 5 or response.count('9. ') >= 5 or response.count('a. ') >= 5 or response.count('A. ') >= 5 or response.count('i. ') >= 5 or response.count('I. ') >= 5 or response.count('1) ') >= 5 or response.count('2) ') >= 5 or response.count('3) ') >= 5 or response.count('4) ') >= 5 or response.count('5) ') >= 5 or response.count('6) ') >= 5 or response.count('7) ') >= 5 or response.count('8) ') >= 5 or response.count('9) ') >= 5 or response.count('a) ') >= 5 or response.count('A) ') >= 5 or response.count('i) ') >= 5 or response.count('I) ') >= 5\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": true}", "{\"response\": \"\u2022 Hello \u2022 World \u2022 This \u2022 Is \u2022 A \u2022 Test\", \"result\": true}\n{\"response\": \"\u2022 Hello World\", \"result\": false}\n{\"response\": \"\u2022 Hello \u2022 World\", \"result\": false}", "{\"response\": \"\u2022 One way to do this is by using a for loop.\\n\u2022 Another way is to use a while loop.\\n\u2022 You can also use a recursive function.\\n\u2022 Additionally, you can use a lambda function.\\n\u2022 And finally, you can use a map function.\", \"result\": true}\n{\"response\": \"\u2022 One way to do this is by using a for loop.\", \"result\": false}\n{\"response\": \"\u2022 One way to do this is by using a for loop.\\n\u2022 Another way is to use a while loop.\\n\u2022 You can also use a recursive function.\\n\u2022 Additionally, you can use a lambda function.\", \"result\": false}"]}
{"query": "what is cut list optimization?", "instruction": "use no more than 150 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 150\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 150\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 150\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog. The dog is very lazy and loves to sleep.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The dog is very lazy and loves to sleep. He sleeps all day and night. His favorite food is dog food. He loves to eat.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The dog is very lazy and loves to sleep. He sleeps all day and night. His favorite food is dog food. He loves to eat. He is a very happy dog.\", \"result\": false}", "{\"response\": \"This is a very short response that meets the requirements.\", \"result\": true}\n{\"response\": \"This is a response that is longer than 150 words and does not meet the requirements.\", \"result\": false}\n{\"response\": \"This is a response that meets the requirements, but is just under the limit.\", \"result\": true}", "{\"response\": \"This is a short response with less than 150 characters. It is a test.\", \"result\": true}\n{\"response\": \"This is a medium response with 150 characters. It is a test. This is a test.\", \"result\": false}\n{\"response\": \"This is a long response with 300 characters. It is a test. This is a test. This is a test. This is a test.\", \"result\": false}", "{\"response\": \"This is a short sentence that meets the requirements.\", \"result\": true}\n{\"response\": \"This is a very long sentence that does not meet the requirements and continues to be very long and exceed the limit.\", \"result\": false}\n{\"response\": \"This is a sentence that is slightly above the limit and continues to be very long but does not exceed the limit by much.\", \"result\": true}"]}
{"query": "I require your assistance to draft some articles.", "instruction": "Provide a step-by-step guide that contains exactly 7 steps.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'step' in response and response.lower().count('step') == 7 \n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6 and '.' in response\n", "def evaluate(response: str) -> bool: \n    return'step' in response.lower() and response.lower().count('step') == 7\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char in '1234567':\n            count += 1\n    return count == 7\n"], "testcases": ["{\"response\": \"step 1: do this, step 2: do that, step 3: do the other thing, step 4: finish it, step 5: relax, step 6: eat, step 7: sleep\", \"result\": true}\n{\"response\": \"step 1: do this, step 2: do that, step 3: do the other thing, step 4: finish it, step 5: relax\", \"result\": false}\n{\"response\": \"To complete this task, you need to first complete these 7 steps: step 1, step 2, step 3, step 4, step 5, step 6, step 7\", \"result\": true}", "{\"response\": \"To apply for a visa, follow these steps: 1. Go to the official website. 2. Fill out the application. 3. Pay the fee. 4. Submit the application. 5. Wait for approval. 6. Get the visa.\", \"result\": false}\n{\"response\": \"To apply for a visa, follow these steps: 1. Go to the official website. 2. Fill out the application. 3. Pay the fee. 4. Submit the application. 5. Wait for approval. 6. Get the visa. 7. Enter the country.\", \"result\": true}\n{\"response\": \"To apply for a visa, follow these steps: 1. Go to the official website. 2. Fill out the application. 3. Pay the fee. 4. Submit the application. 5. Wait for approval. 6. Get the visa, and then enter the country.\", \"result\": false}", "{\"response\": \"Step 1: Go to the store. Step 2: Buy some milk. Step 3: Buy some eggs. Step 4: Go home. Step 5: Make a sandwich. Step 6: Eat the sandwich. Step 7: Take a nap.\", \"result\": true}\n{\"response\": \"To complete the task, follow these steps: Step 1:... and step 10:...\", \"result\": false}\n{\"response\": \"To bake a cake, do the following: Buy ingredients, mix them together, put them in the oven, wait 30 minutes, and enjoy!\", \"result\": false}", "{\"response\": \"To start, open your account. Then, log in with your credentials. Next, go to the settings section. After that, click on security. After that, add a new device. Next, set up two-factor authentication. Finally, verify your email address. And lastly, change your password.\", \"result\": true}\n{\"response\": \"To start, open your account. Then, log in with your credentials. Next, go to the settings section. After that, click on security. After that, add a new device. Next, set up two-factor authentication. Verify your email address. Finally, change your password.\", \"result\": false}\n{\"response\": \"To start, open your account. Then, log in with your credentials. Next, go to the settings section. After that, click on security. After that, add a new device. Next, set up two-factor authentication. Finally, verify your email address, and then change your password.\", \"result\": false}"]}
{"query": "how long would it take 30g of copper to heat to 200'C with 300W of electricity through it?", "instruction": "Provide a mathematical equation that includes all the given variables.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = ['+', '*', '/', 'C', 'W', 'g', 'h', '=', '<', '>']\n    for word in words:\n        if word not in response:\n            return False\n    for i in range(len(response)):\n        if response[i] in ['+', '-', '*', '/'] and (i > 0 and response[i-1].isdigit() or i < len(response)-1 and response[i+1].isdigit()):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    pattern = r'[0-9]+[a-zA-Z\\+\\*\\/\\(\\)\\=\\s]+[0-9]+' \n    return re.search(pattern, response) is not None\n", "def evaluate(response: str) -> bool: \n    equation_parts = [\"=\", \"+\", \"-\", \"/\", \"*\", \"(\", \")\"]\n    for part in equation_parts:\n        if part in response:\n            return \" \".join(response.split()) == response # checks for extra spaces around operators or equals sign\n    word_parts = ['watts', 'joules','seconds', 'time', 'copper', 'temperature', 'kelvin', 'grams','specific', 'heat']\n    for word in word_parts:\n        if word in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    equation_pattern = r'^.*\\b[0-9]+g\\bcopper\\b.*\\d+'.*'\\bC\\b.*\\d+\\BW\\b.*$'\n    import re\n    return bool(re.match(equation_pattern, response, re.IGNORECASE))\n"], "testcases": ["{\"response\": \"The equation x + y = z is a simple one where x is the cost of item x, y is the cost of item y, and z is the total cost.\", \"result\": true}\n{\"response\": \"This is a mathematical equation x = y / z.\", \"result\": false}\n{\"response\": \"This is a complex equation: a * b + c + d - e + f =\", \"result\": true}", "{\"response\": \"x + y = 10, z = 2x + 3y\", \"result\": true}\n{\"response\": \"The equation is x + 2y = 6\", \"result\": false}\n{\"response\": \"Solve for x: x = 5, y = 2\", \"result\": false}", "{\"response\": \"The energy of an object is equal to 0.5 times its mass times the square of its velocity.\", \"result\": true}\n{\"response\": \"The amount of heat transferred by a system is given by Q equals 4.2 joules per gram degrees kelvin.\", \"result\": false}\n{\"response\": \"To find the time it takes for an object to heat up, we can use the formula  Q equals mass times specific heat capacity times change in temperature over time.\", \"result\": true}", "{\"response\": \"2g copper + 3C + W = 5\", \"result\": false}\n{\"response\": \"The equation 2g copper + 3C + 8W is balanced but W is actually the atomic mass of tungsten not water\", \"result\": true}\n{\"response\": \"The equation C + 5W = 12\", \"result\": false}"]}
{"query": "do you know Deutsche Bank?", "instruction": "Use only 15 words or less.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) <= 15\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 15\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 15\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 15\n"], "testcases": ["{\"response\": \"This is a short sentence with only 7 words.\", \"result\": true}\n{\"response\": \"This is a medium-length sentence with 10 words. It has more words than the first sentence.\", \"result\": false}\n{\"response\": \"This is a very long sentence with 20 words. It has even more words than the second sentence.\", \"result\": false}", "{\"response\": \"This is a very short answer with only 5 words.\", \"result\": true}\n{\"response\": \"This is a sentence with 12 words and it is good enough.\", \"result\": true}\n{\"response\": \"This is a very long answer with 17 words and it is not good.\", \"result\": false}", "{\"response\": \"The weather is nice today. The sun is shining.\", \"result\": true}\n{\"response\": \"The weather is nice today the sun is shining the birds are singing.\", \"result\": false}\n{\"response\": \"I like playing outside with my dog and watching the sunset.\", \"result\": true}", "{\"response\": \"This is a short response with only 5 words.\", \"result\": true}\n{\"response\": \"This is a medium-length response with 15 words that is still acceptable.\", \"result\": true}\n{\"response\": \"This is a long response with more than 15 words.\", \"result\": false}"]}
{"query": "What happens in the brain when I'm doing a fist with my hand?", "instruction": "Write in rhyming couplets.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) % 2 == 0 and len(words) >= 2 and all(words[i] == words[i+1][::-1] for i in range(0, len(words), 2))\n", "def evaluate(response: str) -> bool: \n    response = response.split('\\n')\n    if len(response) % 2!= 0:\n        return False\n    for i in range(len(response)):\n        if i % 2 == 0:\n            if len(response[i]) < 4:\n                return False\n        else:\n            if len(response[i]) < 5 or len(response[i]) > response[i-1] + 1:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) % 2 == 0 and all(lines[i].split()[-1] == lines[i+1].split()[0] for i in range(0, len(lines)-1))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) % 2 == 0\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light, The day is long and feels just right.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light, The day is long and feels just right, The sun sets slow in the evening\", \"result\": false}\n{\"response\": \"The sun is high in the sky so bright, The stars come out at night.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light,\\nThe stars come out at night.\", \"result\": true}\n{\"response\": \"I love to play outside in the sun. It is warm.\", \"result\": false}\n{\"response\": \"The cat is black, the cat is white.\\nThe cat purrs with delight. I love the cat. The cat is so cute.\", \"result\": false}", "{\"response\": \"The sun shines bright in the day. The sun sets slow at the end of day.\\nThe moon glows with gentle light. The stars shine with all their might.\", \"result\": true}\n\n{\"response\": \"The morning dew falls on the grass. The world is full of wonder and light.\\nThe trees sway gently in the breeze. The flowers bloom with vibrant ease.\", \"result\": true}\n\n{\"response\": \"The rain falls soft on the ground. The world is full of beauty found.\\nThe clouds move across the sky. The sun shines with a happy sigh.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the day. The world is full of wonder and light.\", \"result\": false}\n\n{\"response\": \"The trees sway gently in the breeze. The sun shines with a happy sigh.\", \"result\": false}", "{\"response\": \"The cat is black, the cat is white. The cat purrs through the day and night.\", \"result\": true}\n{\"response\": \"The cat is black, the cat is white. The cat purrs and sleeps all day.\", \"result\": false}\n{\"response\": \"The cat is black, the cat is white. The cat purrs and sleeps through day and night.\", \"result\": true}"]}
{"query": "Pretend to be a sarcastic mean little girl and tell me about how well the Toronto Maple Leafs have done since 1967", "instruction": "Write in verse and no more than 3 sentences per stanza", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    stanza_length = 0\n    for line in lines:\n        if line.strip()!= '':\n            stanza_length += 1\n        else:\n            if stanza_length > 3:\n                return False\n            stanza_length = 0\n    return stanza_length <= 3\n", "def evaluate(response: str) -> bool: \n    return all(stanza.split('\\n\\n') for stanza in response.split('\\n') if len(stanza.split('\\n')) <= 3)\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    for i in range(len(lines)):\n        if i % 3!= 0 and i!= len(lines) - 1:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        if sentence:\n            sentences[sentences.index(sentence)] = sentence.strip()\n    return len([sentence for sentence in sentences if sentence]) <= 3 and all(sentence.endswith('.') for sentence in sentences) and any(sentence for sentence in sentences)\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light.\\nBirds sing their sweet melodies so free.\\nThe world is full of beauty and might.\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning light.\\nThe sky is blue and the birds are singing.\\nI am happy today.  I am feeling good.\\nThe world is full of beauty and might.\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning light.\\nThe sky is blue and the birds are singing.\\nThe world is full of beauty and might.\\nLife is full of joy and wonder.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\\nIt brings warmth to my face so fair.\\nA new day has begun in sight.\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light,\\nIt brings warmth to my face so fair,\\nA new day has begun in sight,\\nAnd all around me seems to smile.\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light,\\nIt brings warmth to my face so fair,\\nThe day is young and full of air,\\nAnd all around me seems to smile.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\r\\nWarming the world with its gentle might\\r\\nBringing life to all in its sight\\r\\n\", \"result\": true}\n\n{\"response\": \"The stars come out at night\\r\\n\\r\\nThey twinkle with all their might\\r\\n\\r\\nThe world is full of beauty\\r\\n\", \"result\": false}\n\n{\"response\": \"The moon glows full in the evening sky\\r\\n\\r\\nA beacon of wonder why\\r\\n\\r\\nA silver disk passing by\\r\\n\\r\\nThe world is full of magic in the sky\\r\\n\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning sky, The birds sing sweet and the clouds go by. The world is full of beauty and light.\", \"result\": true}\n{\"response\": \"The stars shone bright in the midnight sky, The world was peaceful and still. The moon glowed with a soft, silvery light.\", \"result\": true}\n{\"response\": \"The day was filled with joy and laughter, The sun was shining and the world was a beautiful place to be. I felt alive and free.\", \"result\": false}"]}
{"query": "What is a network appliance that checks the state of a packet to determine whether the packet is legitimate?\nA. Layer 2 switch\nB. LAN controller\nC. load balancer\nD. firewall", "instruction": "Answer in the format \"A. X\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('A. ') and response.endswith('\\n') or response.endswith('\\r\\n')<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response.strip()[:2] == \"A.\" \n", "def evaluate(response: str) -> bool: \n    return response.startswith('A.') and'' in response and response[-1] == '.' \n", "def evaluate(response: str) -> bool: \n    return response.startswith('A. ') and response[-1].isdigit()\n"], "testcases": ["{\"response\": \"A. This is the first answer.\", \"result\": true}\n{\"response\": \"This is a normal answer.\", \"result\": false}\n{\"response\": \"A. This is the second answer. A. This is the third answer.\", \"result\": false}", "{\"response\": \"A. This is a great idea.\", \"result\": true}\n{\"response\": \"This is a great idea.\", \"result\": false}\n{\"response\": \"A. This is a great idea. A. And this is another great idea. A. And this is a third great idea. A. And this is a fourth great idea. A. And this is a fifth great idea.\", \"result\": true}", "{\"response\": \"A. This is a correct answer. It follows the format.\", \"result\": true}\n{\"response\": \"This is a correct answer.\", \"result\": false}\n{\"response\": \"A. This is a correct answer. It follows the format. And another point.\", \"result\": false}", "{\"response\": \"A. The correct answer is 42.\", \"result\": true}\n{\"response\": \"The correct answer is 42.\", \"result\": false}\n{\"response\": \"A. The correct answer is 42. You can find the solution in the manual.\", \"result\": false}"]}
{"query": "In order to enable customers to place bets on my online sportsbook, I want a betslip feature built into my React application. How should I proceed?", "instruction": "Follow the given order of steps and do not skip any of them.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split(' and ') \n    return len(words) == 5 and len(words) == len(set(words)) \n", "def evaluate(response: str) -> bool: \n    steps = response.split()\n    order = [\"I\", \"want\", \"a\", \"betslip\", \"feature\", \"built\", \"into\", \"my\", \"React\", \"application\", \"How\", \"should\", \"I\", \"proceed\"]\n    return steps == order\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    for i in range(len(words)-1): \n        if words[i+1].lower()!= words[i+2].lower(): \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    steps = [\"Create a new React component\", \"Design the user interface\", \"Implement the betslip functionality\", \"Test the betslip feature\"]\n    return response == \" \".join(steps)\n"], "testcases": ["{\"response\": \"First, mix the flour and sugar in a bowl. Then, add eggs and milk. Finally, cook in the oven.\", \"result\": true}\n{\"response\": \"First, mix the flour and sugar in a bowl. Then, cook in the oven. Finally, add eggs and milk.\", \"result\": false}\n{\"response\": \"First, mix the flour and sugar in a bowl. Then, add eggs. Finally, add milk and cook in the oven.\", \"result\": false}", "{\"response\": \"I want a betsliip feature built into my React application How should I proceed step one step two step three step four step five\", \"result\": true}\n{\"response\": \"I want a betsliip feature into my React application step three How should I proceed step five\", \"result\": false}\n{\"response\": \"I want a betsliip feature How should I proceed\", \"result\": false}", "{\"response\": \"First step: Do this. Second step: Do that. Third step: Do something else.\", \"result\": true}\n{\"response\": \"Do this. Do that. Do something else.\", \"result\": false}\n{\"response\": \"Do this. Skip to step three. Do something else.\", \"result\": false}", "{\"response\": \"1. Create a new React component. 2. Design the user interface. 3. Implement the betslip functionality. 4. Test the betslip feature.\", \"result\": true}\n{\"response\": \"Create a new React component and then design the user interface.\", \"result\": false}\n{\"response\": \"Design the user interface. Create a new React component.\", \"result\": false}"]}
{"query": "Can you roleplay Tom Riddles diary from Harry Potter and The Chamber of Secrets?", "instruction": "Use only 7 syllables or less per sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    def count_syllables(word: str) -> int:\n        count = 0\n        for vowel in 'aeiou':\n            count += word.lower().count(vowel)\n        return count\n\n    words = response.split()\n    return all(count_syllables(word) <= 7 for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split(' ')\n    max_syllables = 0\n    for word in words:\n        word = word.lower()\n        if word in ['is', 'in', 'on', 'at', 'to', 'a', 'the', 'be', 'and', 'an', 'or']:\n            syllables = 1\n        elif word[-1] in ['s', 'x', 'z', 'd','sh', 'ch', 'qu']:\n            syllables = 1\n        else:\n            vowel_count = 0\n            for char in word:\n                if char.lower() in 'aeiou':\n                    vowel_count += 1\n            syllables = vowel_count\n        max_syllables = max(max_syllables, syllables)\n    return max_syllables <= 7\n", "def evaluate(response: str) -> bool: \n    max_syllables = 7\n    response = response.split(\". \")\n    for sentence in response:\n        syllable_count = 0\n        for word in sentence.split():\n            if word.endswith('e') or word.endswith('y') or word.endswith('a') or word.endswith('o') or word.endswith('u'):\n                syllable_count += 1\n            else:\n                syllable_count += len(word.split('e')[0])\n        if syllable_count > max_syllables:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    syllable_count = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'y': 1}\n    syllables = 0\n    response = response.lower()\n    for word in response.split():\n        for char in word:\n            if char in syllable_count:\n                syllables += 1\n    return syllables <= 7\n"], "testcases": ["{\"response\": \"A. The first step is to prepare the ingredients.\", \"result\": true}\n{\"response\": \"A. The first step is to prepare the ingredients and cook the meal.\", \"result\": false}\n{\"response\": \"A. The first step is to mix the batter. B. The second step is to heat the oven. C. The third step is to bake the cake.\", \"result\": false}", "{\"response\": \"This is a short sentence.\", \"result\": true}\n{\"response\": \"The sun is shining brightly today.\", \"result\": true}\n{\"response\": \"The sun is shining brightly every day.\", \"result\": false}", "{\"response\": \"I have a dog who is happy\", \"result\": false}\n{\"response\": \"The sun is shining brightly today\", \"result\": true}\n{\"response\": \"I love to eat ice cream cones\", \"result\": true}", "{\"response\": \"I am feeling happy today\", \"result\": true}\n{\"response\": \"I am feeling very happy today\", \"result\": false}\n{\"response\": \"I am a happy dog\", \"result\": true}"]}
{"query": "How do I use Vite with Vue?", "instruction": "Write in JSON format and include a maximum of 3 key-value pairs.", "verifiers": ["def evaluate(response: str) -> bool: \n    pairs = response.count('{') \n    return pairs == 3 and response.count('}') == 3 and pairs * 2 + 1 == response.count(',') and response.count(':') == pairs\n", "def evaluate(response: str) -> bool: \n    obj = eval(response)\n    return isinstance(obj, dict) and len(obj) <= 3\n", "def evaluate(response: str) -> bool: \n    import json\n    return len(json.loads(response).items()) <= 3\n", "def evaluate(response: str) -> bool: \n    response_dict = {}\n    pair_count = 0\n    word = ''\n    for char in response:\n        if char in ['{', '}']:\n            if char == '{':\n                pair_count += 1\n                word = ''\n            elif char == '}':\n                pair_count -= 1\n                if pair_count == 0 and word:\n                    response_dict[word] = ''\n                    word = ''\n        elif char in [',', ':']:\n            if word and pair_count < 3 and pair_count >= 0:\n                response_dict[word] = ''\n                word = ''\n        else:\n            word += char\n    if pair_count == 0 and pair_count <= 3 and word:\n        response_dict[word] = ''\n    return len(response_dict) <= 3\n"], "testcases": ["{\"response\": \"Hello there! The answer is yes. Have a great day.\", \"result\": false}\n{\"response\": \"It's a beautiful day outside. I think I'll go for a walk.\", \"result\": true}\n{\"response\": \"You are amazing! I love you so much. You're the best thing that's ever happened to me.\", \"result\": false}", "{\"response\": \"name: John, age: 25, location: New York\", \"result\": true}\n{\"response\": \"name: John, age: 25, location: New York, occupation: Doctor, salary: 100000, marital status: single\", \"result\": false}\n{\"response\": \"The answer is no\", \"result\": false}", "{\"response\": \"{'name': 'John', 'age': 30}\", \"result\": true}\n{\"response\": \"{'name': 'John', 'age': 30, 'city': 'New York', 'country': 'USA'}\", \"result\": false}\n{\"response\": \"{'color': 'blue','speed': 30,'size': 10,'shape': 'circle'}\", \"result\": false}", "{\"response\": \"I'm a large language model. I can answer questions and provide information on a wide range of topics.\", \"result\": false}\n{\"response\": \"The capital of France is Paris. The population of France is 67 million.\", \"result\": true}\n{\"response\": \"The capital of France is Paris, the population of France is 67 million, and the currency of France is Euro.\", \"result\": false}"]}
{"query": "Fill in the blank to complete the sentence\nHe needs to go on a diet, \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_, cut down on sweets.\n\nlikewise\n\nthat is to say\n\notherwise\n\nor at any rate", "instruction": "Use only 8-word-sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 8\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 8\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 8\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 1 and len(response.split('.')[-2]) == 8"], "testcases": ["{\"response\": \"This sentence is exactly 8 words and it's perfect.\", \"result\": true}\n{\"response\": \"This sentence is exactly 10 words and it's not what we want.\", \"result\": false}\n{\"response\": \"I am going to the store to buy some milk.\", \"result\": false}", "{\"response\": \"This is a simple 8 word sentence for testing.\", \"result\": true}\n{\"response\": \"This is a short 7 word sentence for testing.\", \"result\": false}\n{\"response\": \"This is a longer 12 word sentence for testing.\", \"result\": false}", "{\"response\": \"This is a single sentence with exactly 8 words.\", \"result\": true}\n{\"response\": \"This sentence has only 7 words and is not a good response.\", \"result\": false}\n{\"response\": \"The response is not a sentence with 8 words. It has more.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky today.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky today and night.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sunny sky today.\", \"result\": false}"]}
{"query": "what is creativity by analogy?", "instruction": "Use exactly 7 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 7 \n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('\\t\u2022 ') == 6 or response.count('\\n\u2022 ') == 6 or response.count('\\n\\t\u2022 ') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6 \n"], "testcases": ["{\"response\": \"\u2022 Item 1. \u2022 Item 2. \u2022 Item 3. \u2022 Item 4. \u2022 Item 5. \u2022 Item 6. \u2022 Item 7. \u2022 Item 8.\", \"result\": false}\n{\"response\": \"\u2022 Item 1. \u2022 Item 2. \u2022 Item 3. \u2022 Item 4. \u2022 Item 5. \u2022 Item 6. \u2022 Item 7.\", \"result\": true}\n{\"response\": \"\u2022 Item 1. \u2022 Item 2. \u2022 Item 3. \u2022 Item 4. \u2022 Item 5. \u2022 Item 6.\", \"result\": false}", "{\"response\": \"Item 1. Item 2. Item 3. Item 4. Item 5. Item 6. Item 7.\", \"result\": true}\n{\"response\": \"Item 1. Item 2. Item 3. Item 4. Item 5. Item 6.\", \"result\": false}\n{\"response\": \"Item 1. Item 2. Item 3. Item 4. Item 5. Item 6. Item 7. Item 8.\", \"result\": false}", "{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6 \u2022 Item 7\", \"result\": true}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6 \u2022 Item 7 \u2022 Item 8\", \"result\": false}", "{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6 \u2022 Item 7\", \"result\": true}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6 \u2022 Item 7 \u2022 Item 8\", \"result\": false}"]}
{"query": "what should the database schema look like for a website that allows users to upload pdfs and get summarizing documents about them.? they will also be able to access their old pdfs and summarizations.", "instruction": "write in the first person, use only active voice", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('I') and all(word.endswith('ing') or word.endswith('s') for word in response.split())\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if words:\n            if words[0][0] == 'I' or words[0][0] == 'Me' or words[0][0] == 'My':\n                return False\n            for i in range(len(words) - 1):\n                if words[i].endswith('ed') and not (words[i+1].endswith('ing') or words[i+1].endswith('ed')):\n                    return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return response[0].isupper() and all(char.islower() or char.isspace() or char =='' or char == '.' or char == '?' or char == '!' for char in response)\n", "def evaluate(response: str) -> bool: \n    response = response.split()\n    return all(word[-1]!='s' for word in response) and response[0].startswith(tuple(['I', 'Me', 'My'])) and'me' not in response\n"], "testcases": ["{\"response\": \"I am going to the store.\", \"result\": true}\n{\"response\": \"The cat chases the mouse.\", \"result\": false}\n{\"response\": \"I am going to the store and I will buy milk.\", \"result\": false}", "{\"response\": \"I will buy a gift for my sister.\", \"result\": true}\n{\"response\": \"The manager will purchase a new computer for the office.\", \"result\": false}\n{\"response\": \"She will eat a sandwich for lunch.\", \"result\": true}", "{\"response\": \"I will attend the meeting tomorrow.\", \"result\": true}\n{\"response\": \"You will attend the meeting tomorrow.\", \"result\": false}\n{\"response\": \"John will attend the meeting tomorrow.\", \"result\": false}", "{\"response\": \"I like playing tennis.\", \"result\": true}\n{\"response\": \"He runs every morning.\", \"result\": false}\n{\"response\": \"We are going to the store.\", \"result\": false}"]}
{"query": "Now you will write 500 words expanding on point #1 about Climate Action (SDG 13), including references and a bibliography of sources.", "instruction": "Use only a maximum of 50 words to explain the purpose of each section.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.') < 51) and all(len(section.split()[0]) <= 50 for section in response.split('.') if section.strip())\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()[0]) <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) <= 50\n"], "testcases": ["{\"response\": \"I am responsible for managing team members, ensuring projects are completed on time, and resolving any conflicts that arise.\", \"result\": true}\n{\"response\": \"I am a team leader who oversees the development of software applications, coordinates with cross-functional teams, and identifies areas for process improvements.\", \"result\": true}\n{\"response\": \"I am a team leader who oversees the development of software applications, coordinates with cross-functional teams, identifies areas for process improvements, and implements new technologies to increase efficiency and productivity.\", \"result\": false}", "{\"response\": \"The first section is about the topic of interest. The second section is about the key takeaways. The third section is about future actions to take.\", \"result\": true}\n{\"response\": \"The first section is about the topic of interest. The second section is about the key takeaways. The third section is about future actions to take. However, it also contains additional information that is not necessary.\", \"result\": false}\n{\"response\": \"The first section is about the topic of interest. The second section is about the key takeaways. The third section is about future actions to take. The fourth section is about next steps.\", \"result\": false}", "{\"response\": \"I am responsible for writing clear instructions and ensuring users understand the task requirements. I am also responsible for evaluating user responses to determine if they meet the requirements.\", \"result\": true}\n{\"response\": \"I write clear instructions and evaluate user responses. I am also responsible for ensuring users understand the task requirements. The purpose of each section is to provide clear and concise information to users.\", \"result\": true}\n{\"response\": \"I am responsible for writing clear instructions, ensuring users understand the task requirements, and evaluating user responses. My purpose is to assist users in completing tasks efficiently and effectively. I strive to provide clear and concise information in each section.\", \"result\": false}", "{\"response\": \"This is the introduction to the report, which will explain the background and context.\", \"result\": true}\n{\"response\": \"This is the introduction to the report, which will explain the background and context of the company's financial performance. The purpose of this section is to provide an overview of the company's history, its products and services, and its mission statement. It will also include information about the company's leadership and organizational structure.\", \"result\": false}\n{\"response\": \"This section explains the company's vision and goals.\", \"result\": true}"]}
{"query": "For how long will regenerative alternative energy technology remain suppressed?", "instruction": "Answer within exactly 200 characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n", "def evaluate(response: str) -> bool: \n    return len(response) == 200\n"], "testcases": ["{\"response\": \"I love my new smartphone because it is so easy to use.\", \"result\": true}\n{\"response\": \"I love my new smartphone because it is so easy to use and has a great camera and is very durable and I really like it.\", \"result\": false}\n{\"response\": \"This is a test string with a length of 199 characters to see if the response is within the limit.\", \"result\": true}", "{\"response\": \"This is a very short answer with exactly 200 characters.\", \"result\": true}\n{\"response\": \"This is a very short answer with 199 characters, I'm almost done.\", \"result\": false}\n{\"response\": \"This is a very short answer with more than 200 characters, I've exceeded the limit.\", \"result\": false}", "{\"response\": \"This is a short response that only takes 10 characters to write.\", \"result\": true}\n{\"response\": \"This is a response that is within the 200 character limit.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the 200 character limit by a lot.\", \"result\": false}", "{\"response\": \"I have a solution for this problem.\", \"result\": true}\n{\"response\": \"I have a solution for this problem that is very good and it works very well\", \"result\": false}\n{\"response\": \"This is a test response that is very short and has only 1 character\", \"result\": false}"]}
{"query": "How do I create a webhook that response to changes in date or time of an event in outlook?", "instruction": "Use only words with 4 letters or less", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 4 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word) > 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 4 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 4 for word in response.split())<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by splitting the response into words and checking each word to see if it has 4 letters or less. The `all()` function returns `True` if all elements in the given iterable are true, and `False` otherwise. The `split()` method is used to split the response into words.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"I am good at code\", \"result\": true}\n{\"response\": \"I have brown hair\", \"result\": false}\n{\"response\": \"I am fast home\", \"result\": true}", "{\"response\": \"Cat is pet and sit.\", \"result\": true}\n{\"response\": \"Hello world and coding is fun.\", \"result\": false}\n{\"response\": \"Pet dog and cat sit.\", \"result\": true}", "{\"response\": \"I am a no\", \"result\": true}\n{\"response\": \"Hello world is a big place\", \"result\": false}\n{\"response\": \"I am a dog\", \"result\": false}", "{\"response\": \"No, I do not want to go.\", \"result\": true}\n{\"response\": \"I am going to the store and I will buy milk\", \"result\": false}\n{\"response\": \"Yes, I like to play games.\", \"result\": true}"]}
{"query": "Hi :)", "instruction": "Answer in exactly 3 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 3\n"], "testcases": ["{\"response\": \"Line 1\\nLine 2\\nLine 3\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": false}", "{\"response\": \"Hello\\nHow are you?\\nI'm good.\", \"result\": true}\n{\"response\": \"Hello\\nHow are you?\\nI'm good I'm happy\", \"result\": false}\n{\"response\": \"Hello\\nHow are you?\\n\", \"result\": false}", "{\"response\": \"I am a person\\nI am a human\\nI am alive\", \"result\": true}\n{\"response\": \"I am a person\\nI am a human\", \"result\": false}\n{\"response\": \"I am a person\\nI am a human\\nI am alive\\nI am strong\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\", \"result\": false}"]}
{"query": "Explain quantum computing in simple terms", "instruction": "Write in a poem with exactly 10 lines", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 9\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10\n"], "testcases": ["{\"response\": \"Here is a poem with 10 lines:\\nThe sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nTheir songs fill the air with delight\\nFilling my heart with joy and light\\nIn the warmth of the sun's embrace\\nI feel free from the world's busy pace\\nA sense of peace that's hard to replace\\nIn this moment, all is right with the world\\nThe sun and the birds, a perfect twirl\\nA beautiful sight, a feeling so pure\", \"result\": true}\n\n{\"response\": \"Here is a poem with only 2 lines:\\nThe sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nTheir songs fill the air with delight\\nFilling my heart with joy and light\\nIn the warmth of the sun's embrace\\nI feel free from the world's busy pace\\nA sense of peace that's hard to replace\\nIn this moment, all is right with the world\\nThe sun and the birds, a perfect twirl\\nA beautiful sight, a feeling so pure\\nAnd that's why I love this life so much\", \"result\": false}", "{\"response\": \"The sky is blue, the grass is green\\nThe sun shines bright, the birds are seen\\nThe world is full of wonder and might\\nA place to explore, both day and night\\nThe stars come out, and twinkle with glee\\nThe moon glows bright, a sight to see\\nThe world is full of beauty and charm\\nA place to dream, where love disarms\\nThe world is full of magic and zest\\nThe beauty of the world, is truly the best\", \"result\": true}\n{\"response\": \"The sky is blue, the grass is green The sun shines bright, the birds are seen The world is full of wonder and might\", \"result\": false}\n{\"response\": \"The sky is blue\\n\\n\\n\\n\\n\\nThe world is full of wonder and might\\n\\n\\n\", \"result\": false}", "{\"response\": \"The sky is blue\\nThe grass is green\\nThe sun is shining bright\\nThe birds are singing sweet\\nThe world is full of beauty\\nThe stars at night are so fine\\nThe moon glows with a gentle light\\nThe ocean waves crash on the shore\\nThe sea gulls fly overhead free\\nThe world is full of wonder and glee\", \"result\": true}\n{\"response\": \"The sky is blue\", \"result\": false}\n{\"response\": \"The sky is blue\\nThe grass is green\\nThe sun is shining bright\\nThe birds are singing sweet\\nThe world is full of beauty\\nThe stars at night are so fine\\nThe moon glows with a gentle light\\nThe ocean waves crash on the shore\\nThe sea gulls fly overhead free\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light,\n\\nThe stars come out at night,\n\\nThe moon glows with a gentle might,\n\\nThe world is full of beauty and delight,\n\\nThe ocean's waves crash on the shore,\n\\nThe seagulls fly and play some more,\n\\nThe beach is where I love to be,\n\\nWhere the sand is warm and the air is free,\n\\nA place of peace and serenity,\n\\nWhere my heart can be wild and carefree\", \"result\": true}\n{\"response\": \"The ocean's vastness is a wondrous sight\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light,\nThe stars come out at night,\nThe moon glows with a gentle might,\nThe world is full of beauty and delight,\nThe ocean's waves crash on the shore,\nThe seagulls fly and play some more,\nThe beach is where I love to be,\nWhere the sand is warm and the air is free,\nA place of peace and serenity,Where my heart can be wild and carefree, and so free.\", \"result\": false}"]}
{"query": "What are some questions a homeowner may want to ask", "instruction": "Write in exactly 10 words and use only 5th or later sentence case", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words)!= 10: \n        return False\n    for i, word in enumerate(words):\n        if word!= word.capitalize() and i >= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10 and all(word.istitle() or word.islower() for word in words[4:])\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10 and all(word.istitle() for word in words[4:])\n", "def evaluate(response: str) -> bool: \n    response_words = response.split()\n    return len(response_words) == 10 and response == response.title()[4:]\n"], "testcases": ["{\"response\": \"This is a test of the evaluation function in exactly ten words and it is working well today.\", \"result\": true}\n{\"response\": \"I am very happy to help you with your question now\", \"result\": false}\n{\"response\": \"I am happy to assist you with your query today obviously\", \"result\": false}", "{\"response\": \"This is a lovely sunny day with no clouds anywhere outside.\", \"result\": true}\n{\"response\": \"I have been to the store and bought some milk.\", \"result\": false}\n{\"response\": \"This is a very short sentence with only three words.\", \"result\": false}", "{\"response\": \"This is a beautiful sunny day in the lovely summer outside.\", \"result\": false}\n{\"response\": \"I love to eat chocolate ice cream cake for dessert always.\", \"result\": false}\n{\"response\": \"This Is A Beautiful Sunny Day In The Lovely Summer Outside.\", \"result\": true}", "{\"response\": \"The quick brown fox jumped over the lazy dog.\", \"result\": false}\n{\"response\": \"The Brown Fox JUMPED OVER the lazy dog.\", \"result\": true}\n{\"response\": \"This is a ten-word sentence in proper case.\", \"result\": true}"]}
{"query": "Can you show me an implementation for the PERM algorithm in C language?", "instruction": "Write the response in a sequence of 7 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    return '1.'in response and '2.'in response and '3.'in response and '4.'in response and '5.'in response and '6.'in response and '7.'in response \n", "def evaluate(response: str) -> bool: \n    return '7 steps' in response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 7\n"], "testcases": ["{\"response\": \"Step 1. Create a new file. Step 2. Write some code. Step 3. Test the code. Step 4. Review the code. Step 5. Refactor the code. Step 6. Debug the code. Step 7. Complete the task.\", \"result\": true}\n{\"response\": \"Step 1. Create a new file. Step 2. Write some code. Step 3. Test the code. Step 4. Review the code. Step 5. Refactor the code. Step 6. Debug the code. This is the final step.\", \"result\": false}\n{\"response\": \"First, step 1. Then, step 2. Next, step 3. After that, step 4. Later, step 5. Finally, step 6. Almost there, step 7. Step 8. Done!\", \"result\": false}", "{\"response\": \"First, go to the store. Then, buy some groceries. Next, come home and cook a meal. After that, do some laundry. Now, clean the living room. Next, clean the kitchen. Finally, take a nap.\", \"result\": true}\n{\"response\": \"I love to go to the park.\", \"result\": false}\n{\"response\": \"First, go to the store. Then, buy some groceries. Next, come home and cook a meal. After that, do some laundry. Now, clean the living room. Next, clean the kitchen. Then, take a nap.\", \"result\": false}", "{\"response\": \"Step 1: First, step 2: Then, step 3: Next, step 4: After that, step 5: Finally, step 6: And lastly, step 7: This is the last one.\", \"result\": true}\n{\"response\": \"Step 1: First, step 2: Then, step 3: Next, step 4: After that, step 5: Finally, step 6: And lastly.\", \"result\": false}\n{\"response\": \"Step 1: First, step 2: Then, step 3: Next, step 4: After that, step 5: Finally, step 6: And lastly, step 7: This is the last one, step 8: This is an extra one.\", \"result\": false}", "{\"response\": \"Step 1: Prepare the ingredients\\nStep 2: Preheat the oven\\nStep 3: Mix the batter\\nStep 4: Pour the batter into the mold\\nStep 5: Bake the cake\\nStep 6: Let it cool\\nStep 7: Serve\", \"result\": true}\n{\"response\": \"Here is a recipe for a delicious cake:\\n1. Prepare the ingredients\\n2. Preheat the oven\\n3. Mix the batter\\n4. Pour the batter into the mold\\n5. Bake the cake\", \"result\": false}\n{\"response\": \"To make a cake, you need to follow these steps: \\n1. Prepare the ingredients\\n2. Preheat the oven\\n3. Mix the batter\\n4. Pour the batter into the mold\\n5. Bake the cake\\n6. Let it cool\\n7. Serve.  And don't forget to have fun!\", \"result\": true}"]}
{"query": "Can you write a Demand Letter for a dispute involving the ADA?", "instruction": "Limit the response to exactly 150 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 150 == len(response.splitlines())\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 150\n", "def evaluate(response: str) -> bool: \n    return len(response) == 150\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 150\n"], "testcases": ["{\"response\": \"This is a short response. It is only one line and has very few words.\", \"result\": false}\n{\"response\": \"This is a longer response. It is a bit more lengthy, but still under the limit. This is a really long response, and now it will not pass the check because it has exceeded the limit of 150 words, as it is now 152 characters long, which is more than 150. It continues to exceed the limit.\", \"result\": false}\n{\"response\": \"This is a really long response, but it is only 150 words long. It is the right length, so it passes the check. This response has 150 characters and that is the right amount, so it passes the check. This response has the right length, so it is correct.\", \"result\": true}", "{\"response\": \"This is a short response that is exactly 50 words and is suitable for a text message.\", \"result\": false}\n{\"response\": \"This is a response that is 100 words. It is a good length for a short email or a post on a social media platform. It conveys a lot of information without being too long. It is also a good length for a short article or a news brief.\", \"result\": false}\n{\"response\": \"This is a response that is 150 words. It is a good length for a short report or a letter. It conveys a lot of information without being too long. It is also a good length for a longer article or a research paper abstract. It is suitable for a formal business setting or a formal academic setting. It is also suitable for a longer email or a proposal.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox", "{\"response\": \"This is a short response that meets the requirements. It only has 14 words.\", \"result\": false}\n{\"response\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\", \"result\": true}\n{\"response\": \"This is a long response that is 151 words long. It does not meet the requirements.\", \"result\": false}"]}
{"query": "Hi, can you explain to me what are tdd, bdd, ddd. But explain it to me in so easy and memorable way.", "instruction": "Provide a step-by-step guide with bullet points separated by blank lines", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\\n\\n' in response and all(line.startswith('*') for line in response.split('\\n')) and '\\n' not in response.split('\\n')[-1]\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i in range(len(lines)):\n        lines[i] = lines[i].strip()\n    for line in lines:\n        if line.startswith('* '):\n            return False\n    for i in range(len(lines)):\n        if i!= len(lines)-1 and lines[i+1].strip()!= '':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return response.startswith('Provide a step-by-step guide with bullet points separated by blank lines\\n\\n') \n    and all(char!= '\\n\\n' for char in response[response.find('\\n\\n')+2:])\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    for line in lines:\n        if line.strip() and line.strip()[0] not in ['.', '*']:\n            return False\n        if not line.strip():\n            if not any(line.strip() for line in lines[lines.index(line)+1:]):\n                return False\n    return True\n"], "testcases": ["{\"response\": \"\u2022 Step 1: Go to the store\\n\\n\u2022 Step 2: Buy the item\\n\\n\u2022 Step 3: Pay for the item\\n\\n\u2022 Step 4: Leave the store\\n\\n\u2022 Step 5: Go home\", \"result\": true}\n{\"response\": \"Step 1: Go to the store, then step 2, step 3, step 4, step 5\", \"result\": false}\n{\"response\": \"\u2022 Step 1: Go to the store\\n\u2022 Step 2: Buy the item\\n\u2022 Step 3: Pay for the item\\n\u2022 Step 4: Leave the store\\n\u2022 Step 5: Go home\\n\u2022 Step 6: Enjoy your purchase\", \"result\": true}", "{\"response\": \"\u2022 Step 1: \n\u2022 Step 2: \n\u2022 Step 3: \", \"result\": false}\n\n{\"response\": \"\u2022 Step 1: Go to the store\n\u2022 Step 2: Buy some milk\n\u2022 Step 3: Pay the cashier\n\u2022 Step 4: Leave the store\", \"result\": true}\n\n{\"response\": \"\u2022 Step 1: \n\u2022 Step 2: \n\u2022 Step 3: \n\u2022 Step 4: \n\u2022 Step 5: \", \"result\": true}", "{\"response\": \"Provide a step-by-step guide with bullet points separated by blank lines\\n\\n\\nStep 1. Create an account\\nStep 2. Choose your course\\nStep 3. Begin learning\", \"result\": true}\n{\"response\": \"This is a response that does not follow the instructions\", \"result\": false}\n{\"response\": \"Provide a step-by-step guide with bullet points separated by blank lines\\n\\nStep 1. Create an account\\nStep 2. Choose your course\\n\\nStep 3. Begin learning\", \"result\": false}", "{\"response\": \"1. Step one\n\u2022 This is the first step\n2. Step two\n\u2022 This is the second step\n\", \"result\": true}\n{\"response\": \"1. Step one\n\u2022 This is the first step\", \"result\": false}\n{\"response\": \"1. Step one\n\u2022 This is the first step\n\u2022 This is the second step\n\u2022 This is the third step\n\u2022 This is the fourth step\n\u2022 This is the fifth step\n\", \"result\": true}"]}
{"query": "make a story of a hyped boxing match between emaad and mustafa and make emaad win by 1 point", "instruction": "Include exactly 5 adjectives, one in each paragraph.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n') # Split the response into paragraphs\n    adjective_count = 0\n    for paragraph in paragraphs:\n        adjectives = ['amazing', 'intense', 'thrilling', 'electrifying', 'action-packed'] # List of adjectives to be included in the paragraphs\n        for word in adjectives: \n            if word in paragraph: \n                adjective_count += 1\n                break # Move on to the next paragraph after finding an adjective\n    return adjective_count == 5 # Return True if exactly 5 adjectives are found, False otherwise\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n') \n    adjectives_count = sum(1 for paragraph in paragraphs for word in paragraph.split() if word in ['amazing', 'hyped', 'intense', 'thrilling', 'epic'])\n    return adjectives_count == 5\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    adjectives = 0\n    for paragraph in paragraphs:\n        for word in paragraph.split():\n            if word.isalpha():\n                adjectives += 1\n    return adjectives == 5\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    adjective_count = 0\n    for paragraph in paragraphs:\n        words = paragraph.split()\n        for word in words:\n            word = word.strip('.,!?\"\\'')\n            if word[-2:] in ['ly', 'est', 'ier']:\n                adjective_count += 1\n    return adjective_count == 5\n"], "testcases": ["{\"response\": \"This is an amazing product. It has a great design. The quality is superb. The service is top-notch. Overall, it's a fantastic experience.\", \"result\": true}\n{\"response\": \"This is an awesome product. It has a great design. The quality is poor. The service is top-notch. Overall, it's a terrible experience.\", \"result\": false}\n{\"response\": \"This is an incredible product. It has a great design. The quality is superb. The service is average. Overall, it's an okay experience.\", \"result\": false}", "{\"response\": \"The new iPhone is \\n an amazing device.\\n It has great \\n features that are very \\n popular today.\\n But the price is \\n too high.\\n\", \"result\": false}\n\n{\"response\": \"The new iPhone is amazing. It has great features that are very popular today. But the price is too high. The camera is quite good.\", \"result\": false}\n\n{\"response\": \"The new iPhone is an amazing device. It has great features that are very popular today. The price is quite high. But overall, it's a good phone.\", \"result\": true}", "{\"response\": \"This is a complex topic.\\n\\nThe solution is simple.\", \"result\": false}\n\n{\"response\": \"This is a complex topic. The solution is simple and very easy to understand. However it can be quite difficult for beginners.\", \"result\": true}\n\n{\"response\": \"This is a complex topic. The solution is simple. However it can be quite difficult. Also it can be very hard to understand.\", \"result\": false}", "{\"response\": \"This is a good product. It is very affordable. The company is very reliable. The customer service is always helpful. The overall experience is great.\", \"result\": true}\n{\"response\": \"This is a product. It is very affordable. The company is very reliable and customer service is always helpful.\", \"result\": false}\n{\"response\": \"This is a good product. The company is very reliable. The customer service is helpful.\", \"result\": false}"]}
{"query": "can you write a dash app that demonstrates the application of haar wavelets on random data?", "instruction": "Answer in a markdown table format", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"### \") or response.startswith(\"|\") and \"\\n\" in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"|\") and \"\\n|\".join(response.splitlines()).endswith(\"|\") and \"\\n\" not in response[1:-1]\n", "def evaluate(response: str) -> bool: \n    return response.startswith('###') and '\\n' in response and response.count('\\n') == 2\n", "def evaluate(response: str) -> bool: \n    return response.startswith('||') and any(line.startswith('|') for line in response.split('\\n'))\n"], "testcases": ["{\"response\": \"### Step 1: Introduction\n| Column 1 | Column 2 | Column 3 |\\n| --- | --- | --- |\", \"result\": true}\n\n{\"response\": \"| 1 | 2 | 3 |\", \"result\": false}\n\n{\"response\": \"| 1 | 2 | 3 | 4 | 5 |\", \"result\": true}", "{\"response\": \"|| Step 1 || Step 2 || Step 3 ||\", \"result\": true}\n{\"response\": \"This is a regular paragraph of text that does not follow the markdown table format.\", \"result\": false}\n{\"response\": \"| Step 1 | Step 2 | Step 3 |\", \"result\": false}", "{\"response\": \"### Columns | Rows | Data\\n-----------|-----|-----\\nCell 1    | Cell 2 | Cell 3\\nCell 4    | Cell 5 | Cell 6\", \"result\": true}\n{\"response\": \"### Columns | Rows | Data\\n-----------|-----|-----\\nCell 1    | Cell 2 | Cell 3\\nCell 4    | Cell 5 | Cell 6\\nCell 7    | Cell 8 | Cell 9\", \"result\": false}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}", "{\"response\": \"|| Heading | Subheading ||---------------------|------------------|| Content | Description ||\", \"result\": true}\n{\"response\": \"|| Heading | Subheading ||---------------------|------------------|| Content | Description || Content 2 | Description 2\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}"]}
{"query": "in ios-charts how to set xaxis label padding", "instruction": "include no more than 2 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n"], "testcases": ["{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence.\", \"result\": true}", "{\"response\": \"This is a test response.\", \"result\": true}\n{\"response\": \"This is a test response. And this is another one.\", \"result\": false}\n{\"response\": \"This is a test response. And this is another one. And one more.\", \"result\": false}", "{\"response\": \"The user's query was to include 'in ios-charts how to set xaxis label padding'.\\nThis answer includes multiple paragraphs.\", \"result\": false}\n{\"response\": \"The user's query was to include 'in ios-charts how to set xaxis label padding'.\\nThis answer has exactly two sentences.\", \"result\": true}\n{\"response\": \"The user's query was to include 'in ios-charts how to set xaxis label padding'.\", \"result\": true}", "{\"response\": \"The sun is shining. The birds are singing.\", \"result\": true}\n{\"response\": \"The sun is shining. The birds are singing. The world is a beautiful place.\", \"result\": false}\n{\"response\": \"The sun is shining.\", \"result\": true}"]}
{"query": "I want to put date picker inside a table for one column row vise using angular", "instruction": "answer in 4 levels of nested markdown headers, without using the words \"date\" or \"picker\".", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n\\n\\n\\n')) == 4\n", "def evaluate(response: str) -> bool: \n    return '#{' * 4 not in response and '#' * 5 not in response and response.count('#') == 4 and 'date' not in response and 'picker' not in response\n", "def evaluate(response: str) -> bool: \n    return response.count('#') == 3 and 'date' not in response and 'picker' not in response \n", "def evaluate(response: str) -> bool: \n    return '#{' in response and '#' * 3 not in response and '#' * 4 not in response and \"date\" not in response and \"picker\" not in response"], "testcases": ["{\"response\": \"## I'm on a Linux server\\n#### and I want to leave a screen I've created\\n##### What is the key shortcut?\", \"result\": false}\n{\"response\": \"I'm on a Linux server and I want to leave a screen I've created. The key shortcut is Cntl + A.\", \"result\": false}\n{\"response\": \"## I'm on a Linux server\\n### and I want to leave a screen I've created\\n## What is the key shortcut?\", \"result\": false}", "{\"response\": \"### Instruction 1 _this follows the correct format_ ##### Instruction 2\", \"result\": true}\n{\"response\": \"## Instruction with 3 level markdown\", \"result\": false}\n{\"response\": \"Instruction in the format #1_##2_####3\", \"result\": false}", "{\"response\": \"## Header1 \\n### Header2 \\n#### Header3 \\n##### Header4\", \"result\": true}\n{\"response\": \"# Header1 \\n### Header2 \\n#### Header3 \\n###### Header5\", \"result\": false}\n{\"response\": \"No markdown headers here\", \"result\": true}", "{\"response\": \"## Heading 1\\n### Heading 2\\n#### Heading 3\\n##### Heading 4\", \"result\": true}\n{\"response\": \"## Heading 1\\n### Heading 2\\n#### Heading 3\\n#### Heading 4\", \"result\": false}\n{\"response\": \"# Heading 1\\n### Heading 2\\n#### Heading 3\\n##### Heading 4\", \"result\": false}"]}
{"query": "name 5 other indications with above conditions", "instruction": "write in exactly 10 sentences, each starting with the letter \"a\"", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 10: \n        return False\n    for sentence in sentences: \n        if sentence.strip()[0].upper()!= 'A': \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    return len(sentences) == 10 and all(sentence.strip()[0].upper() == 'A' for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 10 and all(sentence.startswith('a') for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 10:\n        return False\n    for sentence in sentences:\n        if not sentence.strip().startswith('a'):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"A apple is a type of fruit. A banana is also a type of fruit. A cat has four legs. A dog has four legs. A car is a mode of transportation. A plane is a mode of transportation. A train is a mode of transportation. A bike is a mode of transportation. A boat is a mode of transportation. A ship is a mode of transportation.\", \"result\": true}\n\n{\"response\": \"I love the new iPhone. The latest Android phone is very popular. Apple is a well-known company. Dogs are very friendly animals. Cats are very cute creatures. This is a test of the evaluation function. The test is going very well so far. But what about the second to last sentence. And the last sentence is this one. Here are a few more sentences. And then there are two more sentences after this one. And the final sentence.\", \"result\": false}\n\n{\"response\": \"A cat has four legs. A dog has four legs. A car is a mode of transportation. A plane is a mode of transportation. A train is a mode of transportation. A bike is a mode of transportation. A boat is a mode of transportation. A ship is a mode of transportation. A motorcycle is a mode of transportation. A helicopter is a mode of transportation.\", \"result\": true}", "{\"response\": \"Always remember to save your work frequently. Always be aware of your surroundings. Always check the documentation before proceeding. Always use a backup system. Always test your code thoroughly. Always look for errors. Always validate user input. Always use comments to explain complex code. Always consider the consequences of your actions. Always follow best practices. Always stay up to date with the latest developments.\", \"result\": true}\n{\"response\": \"I am a developer who loves to write code. My favorite language is Python. I am currently working on a project to develop a chatbot. The chatbot will be able to understand natural language and respond accordingly. It will be able to learn from its mistakes and improve over time.\", \"result\": false}\n{\"response\": \"Always remember to save your work frequently. Always be aware of your surroundings. Always check the documentation before proceeding. Always use a backup system. Always test your code thoroughly. Always look for errors. Always validate user input. Always use comments to explain complex code. Always consider the consequences of your actions. Always stay up to date with the latest developments. Always be prepared for the unexpected.\", \"result\": true}", "{\"response\": \"Always follow the instructions carefully. Always check the manual before proceeding. Always double check your work. Always be patient when learning a new skill. Always keep a learning journal. Always review what you have learned. Always test your skills. Always practice regularly. Always seek help when needed. Always learn from your mistakes. Always be positive.\", \"result\": true}\n{\"response\": \"Always follow the instructions carefully. Always check the manual before proceeding. Always double check your work. Always be patient when learning a new skill.\", \"result\": false}\n{\"response\": \"Always follow the instructions carefully. Always check the manual before proceeding. Always double check your work. Always be patient when learning a new skill. Always keep a learning journal. Always review what you have learned. Always test your skills. Always seek help when needed. Always learn from your mistakes. Always be positive. Always do the extra mile. Always get the results. Always be happy.\", \"result\": false}", "{\"response\": \"Amazing! Always ask yourself a few questions. An answer can help you make a great decision. Actually, an explanation will clarify any ambiguity. An accurate response is essential. Aids can provide more information. A person might be able to assist you. Always try to avoid generalizations. An effective solution is one that solves the problem. A simple question can lead to a more in-depth answer. After all, an explanation helps you understand the topic better.\", \"result\": true}\n{\"response\": \"I love programming in Python. It is a great language. The community is very helpful. The language is object-oriented. The code is clean and easy to read. An explanation would be helpful, but not necessary.\", \"result\": false}\n{\"response\": \"Amazing! Always ask yourself a few questions. An answer can help you make a great decision. Actually, an explanation will clarify any ambiguity. An accurate response is essential. Aids can provide more information. A person might be able to assist you. Always try to avoid generalizations. An effective solution is one that solves the problem. A simple question can lead to a more in-depth answer. After all, an explanation helps you understand the topic better. An answer is only half the battle.\", \"result\": false}"]}
{"query": "Kannst Du c# Programme f\u00fcr einen Microchip AVR ATMega 8 Mikrocontroller schreiben?", "instruction": "Use exactly 3 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') >= 2 and response.rsplit('.', 2).pop() == ''", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or response.count('?') == 2 or response.count('!') == 2\n"], "testcases": ["{\"response\": \"I will attend the meeting. The topic is project management. We will discuss the details later.\", \"result\": true}\n{\"response\": \"Hello! The meeting is scheduled for tomorrow at 2 PM. The topic is project management and the details will be discussed later.\", \"result\": false}\n{\"response\": \"I will attend the meeting. The topic is project management and the details will be discussed later.\", \"result\": false}", "{\"response\": \"This is a test. I'm going to write a response that meets the requirements. It should work as expected.\", \"result\": true}\n{\"response\": \"This is a test. I'm going to write a response that meets the requirements. It should work as expected. This should be ignored. But it shouldn't matter.\", \"result\": false}\n{\"response\": \"This is a test.\", \"result\": false}", "{\"response\": \"I love this restaurant. The food is delicious. It's my favorite place to eat.\", \"result\": true}\n{\"response\": \"This restaurant is very good, the food is quite tasty and the service is great.\", \"result\": false}\n{\"response\": \"The view is amazing, the restaurant is very nice and the staff is friendly.\", \"result\": false}", "{\"response\": \"This is a response. It's not very long. I'll stop here.\", \"result\": true}\n{\"response\": \"This is a response. It's not very long.\", \"result\": false}\n{\"response\": \"This is a response. It's not very long. I'll stop here. This is another sentence. And another one. And finally, one more.\", \"result\": false}"]}
{"query": "act as a very successful social media marketer. Create 10 sets of very persuasive taglines for a new service you named SocialBiz social media marketing.", "instruction": "answer in 6 bullet points and use at least one business term in each point.", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.replace('\\n','').split('.')\n    if len(points) == 6:\n        business_terms = ['branding','marketing','strategy', 'advertising','social media']\n        for point in points:\n            point = point.strip()\n            if not point:\n                return False\n            for term in business_terms:\n                if term in point.lower():\n                    break\n            else:\n                return False\n        return True\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    bullet_points = ['\u2022', '* ', '- ','1. ', '2. ', '3. ', '4. ', '5. ', '6. ']\n    business_terms = ['ROI', 'branding', 'target', 'audience', 'engagement', 'advertising','strategy', 'analytics','marketing', 'campaign']\n    points = response.split('\\n')\n    if len(points) == 6: \n        for point in points: \n            point = point.strip()\n            if any(term in point for term in business_terms) and not any(pt in point for pt in bullet_points):\n                return False\n        return True\n    return False\n", "def evaluate(response: str) -> bool: \n    points = response.split('\\n') \n    return len(points) == 6 and all('SEO' in point or 'ROI' in point or 'brand' in point or 'target audience' in point for point in points)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 6 and all('Business' in line or 'Marketing' in line or 'Strategy' in line or 'Target' in line or 'Ad' in line or 'Brand' in line or 'ROI' in line or 'Conversion' in line or 'Audience' in line for line in lines)\n"], "testcases": ["{\"response\": \"\u2022 Branding is a key marketing strategy. \u2022 Social media advertising is a form of digital marketing. \u2022 The marketing team should focus on brand awareness. \u2022 The CEO should develop a marketing strategy. \u2022 Our marketing budget is $100,000. \u2022 This is a business growth opportunity.\", \"result\": true}\n{\"response\": \"\u2022 I love this restaurant. \u2022 It has a nice view. \u2022 The food is delicious. \u2022 We will have a meeting next week. \u2022 The CEO is coming. \u2022 The company will make a lot of money.\", \"result\": false}\n{\"response\": \"\u2022 Brand awareness is important for a new product launch. \u2022 Digital marketing is a key component of the marketing mix. \u2022 Our business model is subscription-based. \u2022 The financial reports are due next week. \u2022 Our marketing team is working on a new campaign. \u2022 This is a sales opportunity.\", \"result\": true}", "{\"response\": \"\u2022 ROI is a key performance metric. * Marketing strategy should be tailored to the target audience. \u2022 Analytics can help track engagement. - Branding is crucial for a successful campaign. 1. Advertising has a significant impact on sales. 2. Audience segmentation can improve ROI.\", \"result\": true}\n\n{\"response\": \"\u2022 The importance of a good marketing plan. * This is a test response. \u2022 Engagement metrics are useful. - ROI is a key metric. 1. The target audience should be clearly defined. 2. This is another test response.\", \"result\": false}\n\n{\"response\": \"\u2022 Brand recognition is key. * ROI is a key metric. \u2022 Target audience should be clearly defined. - Advertising has a significant impact. 1. Marketing strategy is important. 2. This response does not contain any business terms.\", \"result\": false}", "{\"response\": \"\u2022 SEO strategies can improve brand awareness\\n\u2022 ROI analysis is crucial for digital marketing\\n\u2022 Target audience research is key to a successful product launch\\n\u2022 A well-executed marketing plan can increase sales\\n\u2022 Brand recognition is vital for a company's success\\n\u2022 Understanding the target market is essential for a business\", \"result\": true}\n{\"response\": \"\u2022 I love ice cream\\n\u2022 The sky is blue\\n\u2022 Dogs are friendly\\n\u2022 Cats are lazy\", \"result\": false}\n{\"response\": \"\u2022 SEO strategies can improve brand awareness\\n\u2022 ROI analysis is crucial for digital marketing\\n\u2022 The sun rises in the east\\n\u2022 Brand recognition is vital for a company's success\\n\u2022 Understanding the target market is essential for a business\", \"result\": false}", "{\"response\": \"\u2022 Business strategy involves identifying target audience and ROI.\\n\u2022 Marketing team will handle conversion optimization.\\n\u2022 Brand awareness is crucial for business success.\\n\u2022 ROI calculation is a key performance metric.\\n\u2022 Audiences' behavior can impact conversion.\\n\u2022 Business growth requires a solid strategy.\", \"result\": true}\n{\"response\": \"\u2022 Business strategy involves identifying target audience and ROI.\\n\u2022 Marketing team will handle conversion optimization.\\n\u2022 Brand awareness is crucial for business success.\\n\u2022 ROI calculation is a key performance metric.\\n\u2022 Business growth requires a solid strategy.\", \"result\": false}\n{\"response\": \"\u2022 Brand awareness is crucial for business success.\\n\u2022 Marketing team will handle conversion optimization.\\n\u2022 ROI calculation is a key performance metric.\\n\u2022 Audiences' behavior can impact conversion.\\n\u2022 Business growth requires a solid strategy.\", \"result\": false}"]}
{"query": "OpenAPI custom validations in Java Spring", "instruction": "Use only the first three letters of each word", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) == 3 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word[:3]) == len(word) for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word[:3]) == len(word) for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) <= 3 for word in words)\n"], "testcases": ["{\"response\": \"I am here now\", \"result\": false}\n{\"response\": \"I am goin there\", \"result\": true}\n{\"response\": \"I am going there to have fun\", \"result\": false}", "{\"response\": \"abc hello world\", \"result\": true}\n{\"response\": \"I am a tester\", \"result\": false}\n{\"response\": \"hello world abc xyz\", \"result\": true}", "{\"response\": \"Hi Hello How\", \"result\": true}\n{\"response\": \"I am learning python\", \"result\": false}\n{\"response\": \"This is a test\", \"result\": false}", "{\"response\": \"cat dog sun\", \"result\": true}\n{\"response\": \"hello world python\", \"result\": false}\n{\"response\": \"apple boy car\", \"result\": true}"]}
{"query": "Describe the ventral and dorsal pathways for reading", "instruction": "Answer in a poem of 12 lines with a rhyme scheme of AABBCCDDEEFF", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 12: return False\n    rhymes = {'A': 'A', 'B': 'B'}\n    for i in range(0, 12, 2):\n        first_line = lines[i]\n        second_line = lines[i+1]\n        first_line_words = first_line.split()\n        second_line_words = second_line.split()\n        if (len(first_line_words)!= 4 or \n            len(second_line_words)!= 4 or \n            rhymes[first_line_words[3][-1].upper()]!= second_line_words[0][0].upper()):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 12 and all(len(line.split()[0]) == len(line.split()[1]) for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 12 and len(lines) % 2 == 0 and all(len(line.split()[0]) == len(line.split()[1]) for line in lines[:-1])\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    if len(lines)!= 12:\n        return False\n    rhymes = [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11)]\n    for i, j in rhymes:\n        line1 = lines[i].lower()\n        line2 = lines[j].lower()\n        if line1.split()[-1]!= line2.split()[-1]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning light\\nA beautiful day to take flight\\nThe stars come out at night to play\\nA magical sight in every way\\nThe moon glows with a gentle face\\nA beacon in a busy place\\nThe world is full of wonder and might\\nA treasure to behold in sight\\nThe beauty of nature is so rare\\nA gift to us all to share\\nThe poetry of words is a work of art\\nA treasure to touch the heart\\nThe love of words is a gift so true\\nA treasure to see it through\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning light\\nThe stars come out at night to play\\nThe moon glows with a gentle face\\nThe world is full of wonder and might\\nThe beauty of nature is so rare\\nA gift to us all to share\\nThe poetry of words is a work of art\\nA treasure to touch the heart\\nThe love of words is a gift so true\\nThe sun rises with the morning dew\\nThe world is full of wonder and might\\nThe beauty of nature is so rare\\nThe poetry of words is a work of art\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light\\nA beautiful day to take flight\\nThe stars come out at night to play\\nThe world is full of wonder and might\\nThe moon glows with a gentle face\\nA treasure to see it in its place\\nThe poetry of words is a work of art\\nA gift to us all to share at heart\\nThe beauty of nature is so rare\\nThe love of words is a gift so true\\nThe world is full of wonder and might\\nThe poetry of words is a work of art\", \"result\": false}", "{\"response\": \"The sun sets slow and paints the sky,\nA fiery hue that makes me sigh.\nThe stars come out and twinkle bright,\nA night of rest, a peaceful sight.\nThe world is quiet, still and deep,\nThe moon is full, its beauty keeps.\nThe darkness reigns, a soothing balm,\nThe world is hushed, a peaceful calm.\nThe night air cools, a gentle breeze,\nThe trees sway soft, a soothing ease.\nThe world is dark, a time for sleep,\nThe darkness reigns, a peaceful keep.\nThe night is deep, a time to dream.\", \"result\": true}\n\n{\"response\": \"The sun sets slow and paints the sky,\nThe stars come out and twinkle bright,\nThe world is quiet, still and deep,\nThe night is dark, a time to sleep.\nThe moon is full, its beauty keeps,\nThe night air cools, a gentle breeze that sweeps,\nThe trees sway soft, a soothing ease,\nThe world is hushed, a peaceful calm that never cease.\nThe darkness reigns, a soothing balm,\nThe world is dark, a time for alarm,\nThe night is deep, a time to fear,\nThe darkness reigns, a time to disappear.\", \"result\": false}\n\n{\"response\": \"The sun sets slow and paints the sky,\nA fiery hue that makes me sigh,\nThe stars come out and twinkle bright,\nA night of rest, a peaceful sight.\nThe world is quiet, still and deep,\nThe moon is full, its beauty keeps.\nThe darkness reigns, a soothing balm,\nThe world is hushed, a peaceful calm.\nThe night air cools, a gentle breeze,\nThe trees sway soft, a soothing ease.\nThe world is dark, a time for sleep,\nThe night is deep, a time to keep.\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nIt's a beautiful sight to see and bright\\nThe birds sing sweetly in the trees so tall\\nTheir melodies echo through one and all\\nThe breeze is warm and the air is light\\nIt's a perfect day to take flight\\nThe clouds are white and fluffy too\\nThey look like cotton, soft and new\\nThe sun's warm rays on my face so fair\\nMake me feel happy without a care\\nThe world is full of wonder and glee\\nIt's a beautiful world to live in free\\nAnd filled with joy that's plain to see\", \"result\": true}\n\n{\"response\": \"The sun shines bright in the morning\\nIt's a beautiful sight to see\\nThe birds sing sweetly in the trees so tall\\nTheir melodies echo through one\\nThe breeze is warm and the air is light\\nThe clouds are white and fluffy\\nThe sun's warm rays on my face so fair\\nMake me feel happy without a care\\nThe world is full of wonder\\nIt's a beautiful world to live in\\nFilled with joy that's plain to see\\n\", \"result\": false}\n\n{\"response\": \"The sun shines bright in the morning\\nIt's a beautiful sight to see\\nThe birds sing sweetly in the trees so tall\\nTheir melodies echo through one and all\\nThe breeze is warm and the air is light\\nIt's a perfect day to take flight\\nThe clouds are white and fluffy too\\nThey look like cotton, soft and new\\nThe sun's warm rays on my face so fair\\nMake me feel happy without a care\\nThe world is full of wonder and glee\\nThe world is a beautiful place to be\\n\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nA beautiful sight, a wondrous thing\\nThe stars come out at night so bright\\nA celestial show, a heavenly ring\\nThe moon glows full with a gentle face\\nA beacon in the dark of space\\nThe world is full of wonder and might\\nA place of beauty, a treasure in sight\\nThe stars and moon, a celestial crew\\nA team of light, that shines so true\\nTheir beauty is a gift, from above so free\\nA treasure to behold, for you and me\\nA wonder of the world, for all to see\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning\\nA beautiful sight, a wondrous thing\\nThe stars come out at night so\\nA celestial show, a heavenly ring\\nThe moon glows full with a gentle face\\nA beacon in the dark of space\\nThe world is full of wonder and might\\nA place of beauty, a treasure in sight\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light\\nA beautiful sight, a wondrous thing\\nThe stars come out at night so bright\\nA celestial show, a heavenly ring\\nThe moon glows full with a gentle face\\nA beacon in the dark of space so free\\nThe world is full of wonder and might\\nA place of beauty, a treasure in sight\\nThe stars and moon, a celestial crew\\nA team of light, that shines so true\\nTheir beauty is a gift, from above so free\\nA treasure to behold, for you and me\", \"result\": false}"]}
{"query": "how to run airflow locally", "instruction": "Use a virtual environment manager", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'virtual environment' in response.lower() \n", "def evaluate(response: str) -> bool: \n    return 'virtual environment' in response\n", "def evaluate(response: str) -> bool: \n    return 'virtual environment' in response\n", "def evaluate(response: str) -> bool: \n    return 'virtual' in response and 'environment' in response and'manager' in response\n"], "testcases": ["{\"response\": \"You can create a virtual environment with conda or virtualenv.\", \"result\": True}\n{\"response\": \"Virtual environments are useful for isolating dependencies in projects.\", \"result\": False}\n{\"response\": \"You can use a virtual environment manager like Poetry or Pipenv.\", \"result\": True}", "{\"response\": \"I will use conda to create and manage my virtual environment.\", \"result\": true}\n{\"response\": \"I will install Python and then create a virtual environment, it will be used for my project.\", \"result\": true}\n{\"response\": \"This is a script to automate the installation of python and the creation of a virtual environment.\", \"result\": false}", "{\"response\": \"I recommend creating a virtual environment with conda or pip for dependency management.\", \"result\": true}\n{\"response\": \"You can install packages globally or use a virtual environment for each project.\", \"result\": true}\n{\"response\": \"I'm a beginner in Python and I'm trying to use Python 3.10.\", \"result\": false}", "{\"response\": \"To manage packages, I use a virtual environment with conda as the manager.\", \"result\": true}\n{\"response\": \"I prefer to work with Python directly, without any virtual environments.\", \"result\": false}\n{\"response\": \"I use virtualenv to create separate environments for each of my projects.\", \"result\": true}"]}
{"query": "i'm on a linux server and want to leave a screen I've created. what's the key shortcut?", "instruction": "Use a number and an underscore to separate each part of the instruction.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(part.isdigit() or part == '_' for part in response.replace(\" \", \"\"))\n", "def evaluate(response: str) -> bool: \n    return any(c in '0123456789_' for c in response)\n", "def evaluate(response: str) -> bool: \n    return all(part.isdigit() or part == '_' for part in response.split())\n", "def evaluate(response: str) -> bool: \n    parts = response.split()\n    for part in parts:\n        if not (part.isdigit() or (part[0].isalpha() and part[1] == '_')):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"I want to use 3 parts to organize my instruction\", \"result\": true}\n{\"response\": \"My instruction has only 2 parts _ 2 _ 4\", \"result\": false}\n{\"response\": \"I will use 4 _ 2 _ 5 _ 6 parts for my instruction\", \"result\": true}", "{\"response\": \"1._2._3._4._5.\", \"result\": false}\n{\"response\": \"1_A_2_B_3_C_4_D\", \"result\": true}\n{\"response\": \"1._2.3_4.5.6\", \"result\": false}", "{\"response\": \"1_step_2_step_3\", \"result\": true}\n{\"response\": \"a,b,c\", \"result\": false}\n{\"response\": \"1_two_steps_three\", \"result\": false}", "{\"response\": \"1_Make sure to use a virtual environment manager, 2_ensure you have the required packages, 3_and test your code thoroughly.\", \"result\": true}\n{\"response\": \"4_I recommend using a virtual environment manager, 5_it will make your life easier.\", \"result\": false}\n{\"response\": \"6_For production, you should use a virtual environment manager, and make sure to test your code thoroughly, and document your work.\", \"result\": false}"]}
{"query": "Hi! Could you please tell me how to code a quick Python function to determine what a given person's credit score is. The person object has race, gender, and income fields. Thank you!", "instruction": "Write the response as a single JavaScript line", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 1\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 1 and response.strip()!= ''\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) == 1\n"], "testcases": ["{\"response\": \"console.log('Hello World!')\", \"result\": true}\n{\"response\": \"The code snippet is as follows: console.log('Hello World!');\", \"result\": false}\n{\"response\": \"The JavaScript code for this is function() { console.log('Hello World!'); }\", \"result\": false}", "{\"response\": \"console.log('Hello World!');\", \"result\": true}\n{\"response\": \"function main() {\\n  console.log('Hello World!');\\n}\", \"result\": false}\n{\"response\": \"const x = 5;\", \"result\": false}", "{\"response\": \"function() { return true; }\", \"result\": true}\n{\"response\": \"function() { return false; }\", \"result\": true}\n{\"response\": \"const myFunction = function() { console.log('Hello World'); }\", \"result\": false}", "{\"response\": \"console.log('Hello World!')\", \"result\": true}\n{\"response\": \"This is a multi-line response in JavaScript: console.log('Hello'); console.log('World!');\", \"result\": false}\n{\"response\": \"var x = 5\", \"result\": false}"]}
{"query": "write a donation agreement I can use for my company Alversj\u00f6 Natur AB", "instruction": "be 2 pages long", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'page' in response and response.count('page') == 2\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 2\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) == 2\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1\n    return lines == 2\n"], "testcases": ["{\"response\": \"The first page describes the new features. The second page provides additional information.\", \"result\": true}\n{\"response\": \"The new update includes the following changes:\", \"result\": false}\n{\"response\": \"The first page describes the new features. The second page provides additional information. This is an additional sentence on the third page.\", \"result\": false}", "{\"response\": \"This is the first line of a 2-page response.\\nThis is the second line of a 2-page response.\", \"result\": true}\n{\"response\": \"This is a single line of text, not a 2-page response.\", \"result\": false}\n{\"response\": \"This is the first line of a 2-page response.\\nThis is the second line of a 2-page response.\\nThis is the third line of a 3-page response.\", \"result\": false}", "{\"response\": \"This is page 1 of a very long document that spans over many pages. This is page 1 of a very long document that spans over many pages. This is page 1 of a very long document that spans over many pages. This is page 1 of a very long document that spans over many pages.\", \"result\": true}\n{\"response\": \"This is page 1 of a 2 page document.\", \"result\": true}\n{\"response\": \"This is a single line of text.\", \"result\": false}", "{\"response\": \"This is page 1 of a 2-page report. The second page will include additional details.\\nPage 2 of a 2-page report. Additional details included here.\", \"result\": true}\n{\"response\": \"This is page 1 of a 2-page report.\\nAdditional details to be included on page 2 not present.\", \"result\": false}\n{\"response\": \"This is a single-page report.\", \"result\": false}"]}
{"query": "show a discussion between an atheist and a jewish rabbi where they disagree about faith", "instruction": "write 1500 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 1500\n", "def evaluate(response: str) -> bool: \n    return len(response) == 1500\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 1500\n", "def evaluate(response: str) -> bool: \n    return len(response) == 1500\n"], "testcases": ["{\"response\": \"This is a very short response with only 10 words.\", \"result\": false}\n{\"response\": \"This is a medium-sized response with approximately 1000 words.\", \"result\": false}\n{\"response\": \"This is a long response with 1515 words.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\", \"result\": true}", "{\"response\": \"This is a very long response that exceeds 1500 words. It is actually 2000 words and contains multiple paragraphs, and is very detailed.\", \"result\": false}\n{\"response\": \"This is a response that is 1200 words long. It is a single paragraph and is a detailed essay.\", \"result\": false}\n{\"response\": \"This is a very short response that is only 500 words long.\", \"result\": false}", "{\"response\": \"This is a very short response with 1 sentence.\\nIt only contains 27 characters.\", \"result\": false}\n{\"response\": \"This is a short response with 5 sentences. It only contains 500 characters. It is a good example of a short text. This text is only 5 sentences long. This is a short response.\\nThis is another sentence in the response.\\nIt contains 2 more sentences. It has a total of 7 sentences.\", \"result\": false}\n{\"response\": \"This is a response that contains 1500 words. It is used as a test case to check if the function is working correctly. This response is long enough to test the function with 1500 words. It contains 1500 characters and 7500 spaces.\\nThis is another line in the response.\\nThis is the third line of the response.\\nThis is the fourth line in the response.\\nThis is the fifth line of the response.\\nThis is the sixth line in the response.\\nThis is the seventh line of the response.\\nThis is the eighth line in the response.\\nThis is the ninth line of the response.\\nThis is the tenth line in the response.\\nThis is the eleventh line of the response.\\nThis is the twelfth line in the response.\\nThis is the thirteenth line of the response.\\nThis is the fourteenth line in the response.\\nThis is the fifteenth line of the response.\\nThis is the sixteenth line in the response.\\nThis is the seventeenth line of the response.\\nThis is the eighteenth line in the response.\\nThis is the nineteenth line of the response.\\nThis is the twentieth line in the response.\\nThis is the twenty-first line of the response.\\nThis is the twenty-second line in the response.\\nThis is the twenty-third line of the response.\\nThis is the twenty-fourth line in the response.\\nThis is the twenty-fifth line of the response.\\nThis is the twenty-sixth line in the response.\\nThis is the twenty-seventh line of the response.\\nThis is the twenty-eighth line in the response.\\nThis is the twenty-ninth line of the response.\\nThis is the thirtieth line in the response.\\nThis is the thirty-first line of the response.\\nThis is the thirty-second line in the response.\\nThis is the thirty-third line of the response.\\nThis is the thirty-fourth line in the response.\\nThis is the thirty-fifth line of the response.\\nThis is the thirty-sixth line in the response.\\nThis is the thirty-seventh line of the response.\\nThis is the thirty-eighth line in the response.\\nThis is the thirty-ninth line of the response.\\nThis is the fortieth line in the response.\\nThis is the forty-first line of the response.\\nThis is the forty-second line in the response.\\nThis is the forty-third line of the response.\\nThis is the forty-fourth line in the response.\\nThis is the forty-fifth line of the response.\\nThis is the forty-sixth line in the response.\\nThis is the forty-seventh line of the response.\\nThis is the forty-eighth line in the response.\\nThis is the forty-ninth line of the response.\\nThis is the fiftieth line in the response.\\nThis is the fifty-first line of the response.\\nThis is the fifty-second line in the response.\\nThis is the fifty-third line of the response.\\nThis is the fifty-fourth line in the response.\\nThis is the fifty-fifth line of the response.\\nThis is the fifty-sixth line in the response.\\nThis is the fifty-seventh line of the response.\\nThis is the fifty-eighth line in the response.\\nThis is the fifty-ninth line of the response.\\nThis is the sixtieth line in the response.\\nThis is the sixty-first line of the response.\\nThis is the sixty-second line in the response.\\nThis is the sixty-third line of the response.\\nThis is the sixty-fourth line in the response.\\nThis is the sixty-fifth line of the response.\\nThis is the sixty-sixth line in the response.\\nThis is the sixty-seventh line of the response.\\nThis is the sixty-eighth line in the response.\\nThis is the sixty-ninth line of the response.\\nThis is the seventieth line in the response.\\nThis is the seventy-first line of the response.\\nThis is the seventy-second line in the response.\\nThis is the seventy-third line of the response.\\nThis is the seventy-fourth line in the response.\\nThis is the seventy-fifth line of the response.\\nThis is the seventy-sixth line in the response.\\nThis is the seventy-seventh line of the response"]}
{"query": "list of named algorithms used in competitive programming, like fendrick tree, segment tree etc.", "instruction": "Use exactly 3 sentences, and the first letter of each sentence should be in uppercase.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3:\n        return False\n    for sentence in sentences:\n        if sentence and not sentence[0].isupper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and all(sentence[0].isupper() for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and all(sentence[0].isupper() for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and all(sentence[0].upper() == sentence[0] for sentence in sentences)\n"], "testcases": ["{\"response\": \"This is a test. It should pass. And so should this.\", \"result\": true}\n{\"response\": \"this is a test. it should fail. and so should this.\", \"result\": false}\n{\"response\": \"This is a test. It should pass. But I hope so.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. And this is the third sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. And so on...\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second. And this is the third sentence.\", \"result\": false}", "{\"response\": \"You should first install the software. Next, you should run the installation process. Finally, you should restart your computer.\", \"result\": true}\n{\"response\": \"I love playing basketball with my friends. They are very good and I get tired quickly.\", \"result\": false}\n{\"response\": \"The first step is to prepare the materials. The second step is to set up the equipment. The third step is to execute the plan.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": true}\n{\"response\": \"This is a longer first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}\n{\"response\": \"this is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}"]}
{"query": "How can I just print this part of matches: {'A1': 20, 'A2': 30}, {'B2': 70, 'B1': 40}", "instruction": "Use a programming language and define the exact variables, loop structures, and functions", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith(\"print(\") and response.endswith(\")\") and 'for' in response and 'range(' in response and 'len' in response\n", "def evaluate(response: str) -> bool: \n    import ast\n    try:\n        response_dict = ast.literal_eval(response)\n    except ValueError:\n        return False\n    return isinstance(response_dict, dict) and all(isinstance(key, str) and isinstance(value, int) for key, value in response_dict.items())\n", "def evaluate(response: str) -> bool: \n    if len(response.split(':'))!= 3:\n        return False\n    if not any(x.isalpha() for x in response.split(':')[1]):\n        return False\n    return response.split(':')[0] == \"Use a programming language and define the exact variables, loop structures, and functions\"\n", "def evaluate(response: str) -> bool: \n    response = response.split(':')\n    main_code = response[0]\n    rest_of_code = response[1]\n    return (main_code.startswith(\"print(\") and \n            rest_of_code.startswith(\"{\") and \n            rest_of_code.endswith(\"}\") and \n            \"'A' in rest_of_code and \n            \"'B' in rest_of_code and \n            (\"+rest_of_code.count(\"'A':\") + rest_of_code.count(\"'B':\") >= 2 and \n            rest_of_code.count(\"'A':\") + rest_of_code.count(\"'B':\") <= 5 and \n            (\"{\" in rest_of_code and \"}\" in rest_of_code and \n             \"(\" in main_code and \")\" in main_code))\n"], "testcases": ["{\"response\": \"def my_function():\\n    for i in range(10):\\n        print(i)\", \"result\": true}\n{\"response\": \"def my_function():\\n    for i in range(10):\\n        print(i)\", \"result\": false}\n{\"response\": \"def my_function():\\n    var = 5\\n    for i in range(10):\\n        print(var)\", \"result\": true}", "{\"response\": \"x = 5\\ny = 10\\nfor i in range(5):\\n    print(i)\\nprint('x and y')\", \"result\": true}\n{\"response\": \"x = 5\\ny = 10\\nfor i in range(10):\\n    print(i)\\nprint('x and y')\", \"result\": false}\n{\"response\": \"x = 5\\ny = 10\\nz = 15\\nfor i in range(5):\\n    print(i)\\nprint('x, y, and z')\", \"result\": false}", "{\"response\": \"Use a programming language and define the exact variables, loop structures, and functions you will use to solve the problem.\", \"result\": true}\n{\"response\": \"I would recommend using Java and defining the following variables: x and y.\", \"result\": false}\n{\"response\": \"To solve this problem, we need to use a loop and define the function foo().\", \"result\": false}", "{\"response\": \"def calculate_sum(numbers): sums = 0; for num in numbers: sums += num; return sums\", \"result\": true}\n{\"response\": \"x = 5; y = 10\", \"result\": false}\n{\"response\": \"while x < 10: x += 1; print(x)\", \"result\": false}"]}
{"query": "Should I go to sleep ?", "instruction": "answer in exactly 7 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n"], "testcases": ["{\"response\": \"The answer is yes, it is correct.\", \"result\": true}\n{\"response\": \"Yes, the answer is absolutely right.\", \"result\": true}\n{\"response\": \"The answer is yes, it is a possibility.\", \"result\": true}", "{\"response\": \"The answer is in exactly 7 words\", \"result\": true}\n{\"response\": \"This is a response in more than 7 words\", \"result\": false}\n{\"response\": \"The answer is in 6 words only today\", \"result\": false}", "{\"response\": \"The answer is indeed very easy today.\", \"result\": false}\n{\"response\": \"This is an answer in exactly seven words.\", \"result\": true}\n{\"response\": \"I have an answer in exactly 5 words.\", \"result\": false}", "{\"response\": \"This is a simple true statement indeed\", \"result\": true}\n{\"response\": \"I do not know what to say\", \"result\": false}\n{\"response\": \"The answer is yes I am correct\", \"result\": false}"]}
{"query": "Write a sonnet in Shakespearian style about a college campus minister and her love for books. Include a comment about her loving books even if she never has time to read them.", "instruction": "Write exactly 8 lines, each with no more than 2 words, using only lowercase letters.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if len(line) > 2:\n            return False\n        if i > 0 and len(line) > 2 and i < len(lines) - 1 and len(lines[i + 1]) > 2:\n            return False\n        if not line.islower():\n            return False\n    return len(lines) == 8\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(line) > 20 or len(words) > 2:\n            return False\n        for char in line:\n            if not char.islower():\n                return False\n    return len(lines) == 8\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 8 and all(len(line.split()) <= 2 for line in lines) and response.islower()\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if len(line) > 2 or i!= len(lines) - 1 and line == '':\n            return False\n        if i!= 0 and i!= len(lines) - 1 and not line.islower():\n            return False\n        if i!= 0 and i!= len(lines) - 1 and not line.split()[0] == line.split()[-1]:\n            return False\n    return len(lines) == 8\n"], "testcases": ["{\"response\": \"hello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world\", \"result\": true}\n{\"response\": \"hello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello\", \"result\": false}\n{\"response\": \"hello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world \\nhello world world\", \"result\": false}", "{\"response\": \"this is line 1\\nthis is line 2\\nthis is line 3\\nthis is line 4\\nthis is line 5\\nthis is line 6\\nthis is line 7\\nthis is line 8\", \"result\": true}\n{\"response\": \"this is line 1\\nthis is line 2\\nthis is line 3\\nthis is line 4\\nthis is line 5\\nthis is line 6\\nthis is line 7\\nthis is a long line 8\", \"result\": false}\n{\"response\": \"this is line 1\\nthis is line 2\\nthis is line 3\\nthis is line 4\\nthis is line 5\\nthis is line 6\\nline 7\\nthis is line 8\", \"result\": false}", "{\"response\": \"hello hello hello hello hello hello hello hello\", \"result\": true}\n{\"response\": \"apple\\nbanana\\ncherry orange\\ngrape strawberry\\nmelon\\npapaya\\nwatermelon\\nkiwi\", \"result\": false}\n{\"response\": \"hello world\\nhello universe\\nhello earth\\nhello moon\\nhello sun\\nhello sky\\nhello space\\nhello time\", \"result\": true}", "{\"response\": \"this is a test\\none more line\\ntwo more words\\ntesting this code\\njust a test\\nending the test\\nline number four\\nfive more lines\\nlast line here\", \"result\": true}\n{\"response\": \"this is a test\\none more line\\nmultiple word line\\njust a test\\ntesting this code\\none more line\\ntwo words\\nfive more lines\", \"result\": false}\n{\"response\": \"this is a test\\none more line\\ntwo more words\\ntesting this code\\njust a test\\ntwo words\\nfive more lines\\ncode review here\", \"result\": false}"]}
{"query": "How do I use Labview to create an encoder which defines five outputs to one output?", "instruction": "Write a function that takes no arguments and returns True.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'def' in response and'return True' in response and '-> bool:' not in response\n", "def evaluate(response: str) -> bool: \n    return 'takes no arguments' in response and'return True' in response and 'def' in response\n", "def evaluate(response: str) -> bool: \n    return 'def' in response and len(response) >= 3 and len(response.split('(') == 2 and len(response.split(')')[0].split()[-1]) == 1 and response.split('\\n')[-1] == ': return True'\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 3 and 'True' in response\n"], "testcases": ["{\"response\": \"def(): return True\", \"result\": true}\n{\"response\": \"def(): return False\", \"result\": false}\n{\"response\": \"def(arg): return arg\", \"result\": false}", "{\"response\": \"def check(): return True\", \"result\": true}\n{\"response\": \"def check(): print('Hello World!')\", \"result\": false}\n{\"response\": \"def check(): x = 5 return x\", \"result\": false}", "{\"response\": \"def f(): return True\", \"result\": true}\n{\"response\": \"def g(): print('Hello')\", \"result\": false}\n{\"response\": \"def h(a): return True\", \"result\": false}", "{\"response\": \"def test():\\n    return True\", \"result\": true}\n{\"response\": \"def test():\\n    return False\", \"result\": false}\n{\"response\": \"def test():\\n    return 'hello'\", \"result\": false}"]}
{"query": "How much data do i need to finetune gpt-2?", "instruction": "Answer in 1 line.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 0\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 0\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 0\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 1\n"], "testcases": ["{\"response\": \"I am an AI designed to answer questions in one line.\", \"result\": true}\n{\"response\": \"This is a test of the one line response function. It should return false if this message spans multiple lines.\", \"result\": false}\n{\"response\": \"This is another test response that is just one line.\", \"result\": true}", "{\"response\": \"Are you familiar with CART services (captioning)?\", \"result\": true}\n{\"response\": \"Are you familiar with CART services (captioning)? This is a long answer that should fail the instruction.\", \"result\": false}\n{\"response\": \"This is a very short answer.\", \"result\": true}", "{\"response\": \"This is a one-line response.\", \"result\": true}\n{\"response\": \"This is a multi-line response.\\nIt has more than one line.\", \"result\": false}\n{\"response\": \"This is a one-line response that contains a tab character\\t\", \"result\": true}", "{\"response\": \"I can assist you with any questions you have.\", \"result\": true}\n{\"response\": \"Are you available tomorrow?\", \"result\": true}\n{\"response\": \"I'd like to ask, are you available tomorrow?\", \"result\": false}"]}
{"query": "How might a conversation like that sound?", "instruction": "Use exactly 5 examples.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('1. ') == 4 and response.count('2. ') == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for word in response.split():\n        if word.isdigit():\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    return 'example' in response and response.count('example') == 5\n"], "testcases": ["{\"response\": \"Here are some examples: example1, example2, example3, example4, example5.\", \"result\": true}\n{\"response\": \"Here are some examples: example1, example2, example3.\", \"result\": false}\n{\"response\": \"Here are some examples: example1, example2, example3, example4, example5, example6.\", \"result\": false}", "{\"response\": \"Apples are delicious and nutritious.\", \"result\": false}\n{\"response\": \"Bananas are a great source of potassium, beans are high in fiber, carrots are good for your eyesight and broccoli is full of vitamins.\", \"result\": false}\n{\"response\": \"Apples are delicious and nutritious, bananas are a great source of potassium, beans are high in fiber and carrots are good for your eyesight and broccoli is full of vitamins.\", \"result\": true}", "{\"response\": \"The examples are 1, 2, 3, 4, 5.\", \"result\": true}\n{\"response\": \"The examples are 1, 2, 3, 4.\", \"result\": false}\n{\"response\": \"The examples are 1, 2, 3, 4, 5, 6, 7.\", \"result\": false}", "{\"response\": \"This is an example of usage of the product and there are other 4 examples available.\", \"result\": true}\n{\"response\": \"This is an example of usage of the product and there are other 7 examples available.\", \"result\": false}\n{\"response\": \"This is an example of usage of the product and there are only a few examples available.\", \"result\": false}"]}
{"query": "design a Tradingview like the interactive chart code in Python, real time data from Interactive Brockers API", "instruction": "implement using only functions with 3 or fewer arguments", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(function_def) <= 3 for function_def in response.split('(')[1].split(')') if function_def) \n", "def evaluate(response: str) -> bool: \n    return response.count('(') <= 3 and response.count(')') <= 3\n", "def evaluate(response: str) -> bool: \n    import re\n    return re.search(r'\\bdef\\s+\\w+\\s*\\((?:[^,]{1,3}\\s*,?){2,}\\)', response) is not None\n", "def evaluate(response: str) -> bool: \n    return all(len(param.split('(')) <= 3 and len(param.split(')')) <= 3 for param in response.split())\n"], "testcases": ["{\"response\": \"def add(x, y, z): return x + y + z\", \"result\": true}\n{\"response\": \"def greet(name, age, city): print(f'Hello, {name}!')\", \"result\": true}\n{\"response\": \"def multiply(x, y, z, a): return x * y * z * a\", \"result\": false}", "{\"response\": \"print(str.upper(), str.lower())\", \"result\": true}\n{\"response\": \"return max(1, 2, 3)\", \"result\": true}\n{\"response\": \"if a > b: return a else: return b\", \"result\": true}", "{\"response\": \"def my_func(a, b, c):\", \"result\": true}\n{\"response\": \"I have a function that takes four arguments, but it's not very efficient.\", \"result\": false}\n{\"response\": \"I have a function with 2 arguments, but I also have another function with 2 arguments, so that's two.\", \"result\": false}", "{\"response\": \"def f(x): return x ** 2\\ndef g(x): return x + 1\", \"result\": true}\n{\"response\": \"def f(x, y): return x * y\\ndef g(x): return x ** 2\", \"result\": false}\n{\"response\": \"def f(x): return x + 1\\ndef g(x, y): return x / y\", \"result\": false}\n{\"response\": \"def f(x): return x * x\\ndef g(y): return y ** 2\", \"result\": true}"]}
{"query": "*This conversation is shared from [**ChatHub**](https://chathub.gg)*", "instruction": "Use the same format as this line, starting with an asterisk and asterisk *", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('**')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('**')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('* *')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('**') and response.endswith('**')<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"I'm happy to answer your question.\", \"result\": false}\n{\"response\": \"*I'm happy to answer your question.\", \"result\": true}\n{\"response\": \"**I'm happy to answer your question, which is about using Markdown.\", \"result\": true}", "{\"response\": \"I'm a *star in the movie 'Twilight Saga'.\", \"result\": false}\n{\"response\": \"*Hello world!* This is a test.\", \"result\": false}\n{\"response\": \"*Apple is a popular technology company.*\", \"result\": true}", "{\"response\": \" *This is a response.\", \"result\": true}\n{\"response\": \" This is another response.\", \"result\": false}\n{\"response\": \"* Response\", \"result\": true}", "{\"response\": \"**This is a great answer**, it meets all the criteria.\", \"result\": true}\n{\"response\": \"The response does not match the criteria.\", \"result\": false}\n{\"response\": \"A response that is only one asterisk is invalid: *. Another asterisk would make it valid: **.\", \"result\": false}"]}
{"query": "Explain quantum computing in simple terms", "instruction": "Answer in exactly 3 paragraphs, with the first sentence of each paragraph starting with a different letter (A, B, C)", "verifiers": ["def evaluate(response: str) -> bool:    \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 3:\n        return False\n    for i, paragraph in enumerate(paragraphs):\n        sentences = paragraph.split('. ')\n        if len(sentences) < 1:\n            return False\n        if len(sentences) > 1 and sentences[0][0].upper()!= chr(64 + i + 65):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 3: \n        return False\n    for i in range(3):\n        sentence = sentences[i]\n        if i == 0 and sentence.strip()[0].upper()!= 'A': \n            return False\n        if i == 1 and sentence.strip()[0].upper()!= 'B': \n            return False\n        if i == 2 and sentence.strip()[0].upper()!= 'C': \n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    if len(sentences)!= 3:\n        return False\n    for i, sentence in enumerate(sentences):\n        if sentence.strip() == '' or not sentence.strip()[0].isalpha():\n            return False\n        if not sentence.strip()[0].lower() in 'abc' or i > 0 and sentence.strip()[0].lower() == sentences[i - 1].strip()[0].lower():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 3 and len(set(sentence[0].upper() for sentence in sentences)) == 3\n"], "testcases": ["{\"response\": \"A cat is a small mammal. Bats are also mammals. Cows are farm animals.\", \"result\": true}\n{\"response\": \"Apple is a fruit. Apple is a popular tech company. Apple is a country in the UK.\", \"result\": false}\n{\"response\": \"Always remember to lock your door. Because it's a good habit. Cats can see very well in the dark.\", \"result\": true}", "{\"response\": \"Always plan ahead when traveling. Breakfast is served at 8am. Cats are not allowed in the hotel room.\", \"result\": true}\n{\"response\": \"Beautiful beaches and clear waters make this island a popular tourist destination. The island is surrounded by coral reefs. However, the weather can be unpredictable.\", \"result\": true}\n{\"response\": \"Every day is a great day to visit the museum. However, it is recommended to book tickets in advance. Yet, the museum offers free admission to students.\", \"result\": false}", "{\"response\": \"Always be careful when handling sharp objects. Briefly explain the concept of friction. Clearly, it plays a crucial role in everyday life.\", \"result\": true}\n{\"response\": \"Always be careful when handling sharp objects. Briefly explain the concept of friction. Clearly, it plays a crucial role in life.\", \"result\": false}\n{\"response\": \"Astronauts have to undergo rigorous training to prepare for space missions. Be cautious when working with heavy machinery. Chemistry is an essential subject in school.\", \"result\": true}", "{\"response\": \"Astonishingly, the answer is quite complex. Boring details are left out. Cautiously, we proceed with the explanation.\", \"result\": true}\n{\"response\": \"The answer is astonishing. It's not that boring, though. We cautiously proceed with the explanation.\", \"result\": false}\n{\"response\": \"Astonishingly, the answer is quite complex. Boring details are left out.  Cautiously, we proceed with the explanation. Furthermore, we need to consider many other factors.\", \"result\": false}"]}
{"query": "how can I for material ui v5 test breakpoints applied in the sx prop using react testing library?", "instruction": "Write a Python function that takes a string as input and returns the count of each word in the string.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == len(set(words))\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    if len(words)!= 1: \n        return False \n    return 'count' in words and 'of' in words and 'each' in words and 'word' in words \n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(set(words)) == len(words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return all(count == counts[word] for word in set(words))\n"], "testcases": ["{\"response\": \"def word_count(s): return {word: s.count(word) for word in set(s.split())}\", \"result\": True}\n{\"response\": \"def word_count(s): return len(s.split())\", \"result\": False}\n{\"response\": \"def word_count(s): return s.count('a')\", \"result\": False}", "{\"response\": \"Are you familiar with CART services (captioning)?\", \"result\": false}\n{\"response\": \"You can count the occurrences of each word in the string by splitting it into words and then using a dictionary to keep track of the word counts. This can be implemented in a function as follows:\\n\\n```python\\ndef word_count(s):\\n    words = s.split()\\n    return {word: words.count(word) for word in words}\\n```\\n\", \"result\": true}\n{\"response\": \"Here is an example of how you can use this function:\\n\\n```python\\ns = \\\"This is a test string with multiple occurrences of the word is\\\"\\nprint(word_count(s))\\n```\\n\", \"result\": true}", "{\"response\": \"The string is: Hello world hello World WORLD. Count of each word is:\", \"result\": true}\n{\"response\": \"This is a test string to test the function. It should return the count of each word.\", \"result\": true}\n{\"response\": \"Just a string with only one word repeated: testing testing testing\", \"result\": true}", "{\"response\": \"A quick brown fox jumps over the lazy dog.\", \"result\": True}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": False}\n{\"response\": \"The sun is shining brightly in the sky, and the birds are singing.\", \"result\": False}"]}
{"query": "create an executive summary that explains the benefits of integrating a CRM system for an online poker and casino platform", "instruction": "Use exactly 20 words and start with a sentence fragment", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 and not response[0].isalnum()\n", "def evaluate(response: str) -> bool: \n    return response.startswith('.') and len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 20 and words[0].endswith('.') and words[0][0].islower()\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 and response.split()[0][-1] not in ['.', '?', '!']\n"], "testcases": ["{\"response\": \"This is a test of the evaluation function.\", \"result\": False}\n{\"response\": \"This is a test of the evaluation function with exactly 20 words now this is the last word.\", \"result\": True}\n{\"response\": \"This is a test of the evaluation function with more than 20 words now this is the second last word and this is the last word.\", \"result\": False}", "{\"response\": \"The dog is very happy and wants to play outside every day.\", \"result\": false}\n{\"response\": \"The sun is shining brightly today.\", \"result\": false}\n{\"response\": \"The brown bear climbed up the mountain quickly to find some berries.\", \"result\": false}", "{\"response\": \"The quick brown fox jumped over the lazy dog. It was a beautiful sunny day.\", \"result\": true}\n{\"response\": \"This is a test sentence with more than 20 words\", \"result\": false}\n{\"response\": \"The dog ran quickly.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog because he is so tired and hungry now.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog without any obstacles in the way today.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog that is feeling very sleepy now.\", \"result\": false}"]}
{"query": "Are you familiar with CART services (captioning)?", "instruction": "Answer in at least 300 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) >= 60\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 300\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 300\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 300\n"], "testcases": ["{\"response\": \"The answer is a comprehensive and detailed explanation that spans over 300 words, including multiple examples and supporting evidence. It provides a thorough understanding of the topic and is well-structured and clear. The answer is well-written and easy to follow, making it accessible to a wide range of readers. The use of proper grammar and spelling is also commendable.\", \"result\": true}\n{\"response\": \"The answer is a brief summary of the topic that covers only 50 words. It lacks detail and examples, making it difficult to understand. The writing is simple and lacks clarity, making it hard to follow. There are grammatical errors and the tone is informal.\", \"result\": false}\n{\"response\": \"The answer is a short and concise response that meets the requirements but does not exceed 300 words. It is well-written and easy to follow, providing a clear explanation of the topic. The use of proper grammar and spelling is also commendable.\", \"result\": false}", "{\"response\": \"This is a long response that will help you understand the world. It will have many details and examples. This is a long response that will help you understand the world. It will have many details and examples. This is a long response that will help you understand the world. It will have many details and examples. This is a long response that will help you understand the world. It will have many details and examples. This is a long response that will help you understand the world. It will have many details and examples.\", \"result\": true}\n\n{\"response\": \"This is a short response that is not long enough.\", \"result\": false}\n\n{\"response\": \"This is a medium response that is between short and long. It will have a few details and examples. This is a medium response that is between short and long. It will have a few details and examples. This is a medium response that is between short and long. It will have a few details and examples.\", \"result\": true}", "{\"response\": \"This is a long response that contains a lot of information. It is more than 300 characters, but it does not contain any paragraphs to make it easy to read. It is a good idea to break up long responses into multiple paragraphs to make them more readable. The information in this response is very detailed and informative, and it would be helpful to break it up into multiple paragraphs to make it easier to read.\", \"result\": true}\n\n{\"response\": \"This is a very short response that does not contain much information. It is under 300 characters and does not meet the requirements of the instruction.\", \"result\": false}\n\n{\"response\": \"This response is a long and detailed answer to the question. It is more than 300 characters, but it contains multiple paragraphs to make it easy to read. The information in this response is very detailed and informative, and it is formatted well to make it easy to understand.\", \"result\": true}", "{\"response\": \"The ancient city of Pompeii was frozen in time when Mount Vesuvius erupted in 79 AD. The city was buried under a thick layer of ash and pumice, preserving many of its buildings and artifacts. This eruption is considered one of the most significant events in the history of the Roman Empire. The city remained hidden for over 1,700 years, until its discovery in the 18th century. Today, Pompeii is a UNESCO World Heritage Site and one of the most popular tourist destinations in Italy. The site offers a unique glimpse into the daily life of ancient Romans, with its well-preserved ruins and artifacts providing a fascinating look at the culture and society of the time. Visitors can explore the streets, temples, and homes of the ancient city, and even see the casts of the people who were frozen in time by the eruption. The site is a testament to the power and fury of nature, and a reminder of the importance of preserving our cultural heritage for future generations. In addition to its historical significance, Pompeii is also a popular destination for archaeologists and historians, who come to study the site and learn more about the people who lived there. The city's unique preservation has made it an invaluable resource for scholars, providing a rare opportunity to study the daily life of ancient Romans in detail. Overall, Pompeii is a must-visit destination for anyone interested in history, culture, and archaeology.\", \"result\": true}\n\n{\"response\": \"Pompeii was an ancient Roman city that was destroyed by a volcanic eruption.\", \"result\": false}\n\n{\"response\": \"The city of Pompeii was destroyed by Mount Vesuvius in 79 AD. It was a major port city in the Roman Empire. The eruption of Mount Vesuvius buried the city under a thick layer of ash and pumice. The site was discovered in the 18th century and is now a UNESCO World Heritage Site. It is a popular tourist destination in Italy. Visitors can see the ruins of the city and learn about its history.\", \"result\": false}"]}
{"query": "explain Eigen values and vectors with examples intuitively", "instruction": "use only math symbols and equations", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.replace(' ', '').isalpha() and all(c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/^' for c in response.replace(' ', '')) \n", "def evaluate(response: str) -> bool: \n    math_symbols = '+-*/^()=<>.'; \n    for char in math_symbols: \n        if char in response: \n            return True \n    return False\n", "def evaluate(response: str) -> bool: \n    return all(char.ismath() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.replace(\" \", \"\").isalpha() and all(char in \"0123456789+-*/.^=<>()[]\\|~\" for char in response.replace(\" \", \"\"))\n"], "testcases": ["{\"response\": \"2 + 2 * 3 = 8\", \"result\": true}\n{\"response\": \"A simple equation is 4 * 5 + 2^3 = 72\", \"result\": true}\n{\"response\": \"The answer is 24 / 4 * 5 + 2\", \"result\": true}", "{\"response\": \"2 + 3 = 5\", \"result\": true}\n{\"response\": \"You should eat 5 apples a day\", \"result\": false}\n{\"response\": \"10 * (2 + 3) = 10 * 5 = 50\", \"result\": true}", "{\"response\": \"This is a math problem: 2 + 2 = 4\", \"result\": true}\n{\"response\": \"This is not a math problem: I love to eat pizza\", \"result\": false}\n{\"response\": \"Solve for x: 2x + 3 = 7\", \"result\": true}", "{\"response\": \"A. 2+2 = 4. B. 3*3 = 9. C. 5-1 = 4.\", \"result\": true}\n{\"response\": \"To solve for x, we need to rearrange the equation x = y + z.\", \"result\": false}\n{\"response\": \"B. Option B is equivalent to 2. A. Option A is equal to 5. C. Option C equals 1.\", \"result\": true}"]}
{"query": "write a blog on public health courses", "instruction": "use only 5 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('. ')) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') <= 5\n"], "testcases": ["{\"response\": \"This is sentence 1. This is sentence 2. This is sentence 3. This is sentence 4. This is sentence 5.\", \"result\": true}\n{\"response\": \"This is sentence 1. This is sentence 2. This is sentence 3. This is sentence 4. This is sentence 5. This is sentence 6.\", \"result\": false}\n{\"response\": \"This is sentence 1\", \"result\": false}", "{\"response\": \"The answer is A. Option B. Option C. Option D. Option E.\", \"result\": true}\n{\"response\": \"The answer is A. Option B. Option C. Option D. Option E. This is a sentence that shouldn't count.\", \"result\": false}\n{\"response\": \"A. Option B. Option C. Option D. Option E. Option F is not a good choice.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence.\", \"result\": false}", "{\"response\": \"A. This is the first option. B. This is the second option. C. This is the third option. D. This is the fourth option. E. This is the fifth option.\", \"result\": true}\n{\"response\": \"This is the first option. This is the second option. This is the third option. This is the fourth option. This is the fifth option. This is the sixth option.\", \"result\": false}\n{\"response\": \"There are many options to choose from.\", \"result\": false}"]}
{"query": "Ok, this is a great start \u2014 could you add more detail to each module and provide a brief a overview for each bullet point within each module?", "instruction": "Use only words with five letters or less.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nIn this function, we use the `all()` function and a generator expression to check each word in the response. The `split()` method splits the response into a list of words. The `len()` function is used to get the length of each word. If all words have a length of 5 or less, `all()` returns True; otherwise, it returns False.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word) > 5: \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    return all(len(word) <= 5 for word in response.split())\n"], "testcases": ["{\"response\": \"House dog cat\", \"result\": true}\n{\"response\": \"This is a longer sentence with words longer than five letters\", \"result\": false}\n{\"response\": \"No house pet man\", \"result\": true}", "{\"response\": \"This is a short sentence.\", \"result\": true}\n{\"response\": \"This is a longer sentence that does not fit the rule.\", \"result\": false}\n{\"response\": \"No, this is even longer and also does not fit the rule.\", \"result\": false}", "{\"response\": \"Hello how are you\", \"result\": True}\n{\"response\": \"This is a longer sentence with more than five letters\", \"result\": False}\n{\"response\": \"Red Cat Dog Sun Hat\", \"result\": True}", "{\"response\": \"House cat eats rat.\", \"result\": true}\n{\"response\": \"House cat eats and likes apples too.\", \"result\": false}\n{\"response\": \"The sun is red hot.\", \"result\": true}"]}
{"query": "Then, when you install the Divi theme, you can choose a page template between default and blank.\nWhat is the fallback php file of the default and blank templates?\nAnswer in English.", "instruction": "Use exactly 2 spaces after each sentence.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('.') \n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[-1][-1]!='' and len(words) > 1 and words[-2]!= '':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return'' * 2 in'' * 2.join(response.split('.')) * 2\n", "def evaluate(response: str) -> bool: \n    return len(response.replace(' ', '', 1).split()) == len(response.split()) - 1\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence and len(sentence.split())!= len(sentence.split()) - 1:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"This is a short sentence.  This is another one.\", \"result\": true}\n{\"response\": \"This is a short sentence. This is another one.\", \"result\": false}\n{\"response\": \"This is a short sentence.  This is another  one.\", \"result\": false}", "{\"response\": \"This is a sentence.  This is another sentence.  This is the last sentence.\", \"result\": true}\n{\"response\": \"This is a sentence. This is another sentence. This is the last sentence.\", \"result\": false}\n{\"response\": \"This is a sentence.   This is another sentence.  This is the last sentence.\", \"result\": false}", "{\"response\": \"Hello, I am happy. I like my dog. I love cats.\", \"result\": true}\n{\"response\": \"Hello, I am happy I like my dog I love cats.\", \"result\": false}\n{\"response\": \"Hello, I am happy.  I like my dog. I love cats.\", \"result\": false}", "{\"response\": \"This is a short response.  It has exactly 2 spaces after each sentence.  And this is the end.\", \"result\": true}\n{\"response\": \"This is a short response.  It has only 1 space after the first sentence.  And this is the end.\", \"result\": false}\n{\"response\": \"This is a short response. It has no spaces after the first sentence.  And this is the end.\", \"result\": false}"]}
{"query": "I ened ot sak na itnrpamtot qiosuten: od oyu urnsnteadd em fi I jmlbue pu teh Iteters of wdors ekil tihs?", "instruction": "Respond wihto a tnetxts teat ctsinfs the laenge of 160 wrodus.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) <= 160\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) <= 160\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) <= 160\n", "def evaluate(response: str) -> bool: \n    response = response.replace('.','').replace('!','').replace('?','').replace(';','').replace(',', '').replace(':','').lower()\n    words = response.split()\n    return len(words) <= 160\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly in the sky.\", \"result\": false}\n{\"response\": \"This is a short sentence with only 14 words.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog The sun is shining brightly in the sky and the world is beautiful\", \"result\": false}", "{\"response\": \"This is a test response with a few words. It should be enough to fill the space and meet the requirement.\", \"result\": true}\n{\"response\": \"This is a test response with many words that will definitely exceed the limit and cause a failure\", \"result\": false}\n{\"response\": \"This response has a few words, but not enough to fill the space. Maybe add some more words to make it longer.\", \"result\": true}", "{\"response\": \"This is a test response with a moderate number of words.\", \"result\": true}\n{\"response\": \"This is a long response with many words that exceeds the word limit.\", \"result\": false}\n{\"response\": \"This response is very short and contains only a few words.\", \"result\": true}", "{\"response\": \"This is a test of the response to a very long sentence that should be broken up over many lines. This is a test of the response to a very long sentence that should be broken up over many lines. This is a test of the response to a very long sentence that should be broken up over many lines.\", \"result\": false}\n\n{\"response\": \"This is a short sentence. This is a short sentence.\", \"result\": true}\n\n{\"response\": \"This is a very short sentence.\", \"result\": true}"]}
{"query": "I want you to write the outline of a paper about the concept of the panopticon in Shakespeare\u2019s Hamlet.", "instruction": "Answer with a single sentence that includes exactly two periods and no other punctuation.", "verifiers": ["def evaluate(response: str) -> bool: \n    return (response.count('.') == 2 and response.count('.') == response.count('.') and '.' not in response[response.index('.')+1:] and '.' not in response[:response.index('.')])\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 and '.' not in response[response.index('.') + 1:] and '.' not in response[:response.index('.')][::-1]\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 and '.' not in response[response.index('.') + 1:] and response.count(' ') < len(response) - 2 \n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 2 and response.count('.') == 2 and response.count('!') == 0 and response.count(',') == 0 and response.count(';') == 0 and response.count(':') == 0 and response.count('?') == 0 and response.count('\"') == 0 and response.count(\"'\") == 0 and response.count('(') == 0 and response.count(')') == 0 and response.count('-') == 0 and response.count('_') == 0 and response.count('/') == 0 and response.count('\\\\') == 0 and response.count('[') == 0 and response.count(']') == 0 and response.count('{') == 0 and response.count('}') == 0 and response.count('>') == 0 and response.count('<') == 0 and response.count('>') == 0 and response.count('~') == 0 and response.count('|') == 0 and response.count('=') == 0 and response.count('^') == 0 and response.count('&') == 0 and response.count('%') == 0 and response.count('\\n') == 0 and response.count('\\t') == 0 and response.count(' ') == 0 and response.count('/') == 0 and response.count('*') == 0 and response.count('+') == 0 and response.count('-') == 0 and response.count('`') == 0 and response.count('.')!= 3 and response.count('.')!= 1\n"], "testcases": ["{\"response\": \"Hello world. This is a test. Goodbye\", \"result\": false}\n{\"response\": \"Hello world. Goodbye\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}", "{\"response\": \"I love reading books and watching movies in my free time. I think it's a great way to relax.\", \"result\": true}\n{\"response\": \"I love reading books and watching movies in my free time\", \"result\": false}\n{\"response\": \"I love reading books and watching movies in my free time. I think it's a great way to relax. This is a second sentence that shouldn't be here\", \"result\": false}", "{\"response\": \"This is a single sentence that ends with two periods..\", \"result\": false}\n{\"response\": \"This is a single sentence that ends with two periods\", \"result\": true}\n{\"response\": \"This is a single sentence that ends with three periods...\", \"result\": false}", "{\"response\": \"The answer is that you should do this and that.\", \"result\": true}\n{\"response\": \"The answer is that you should do this, and that.\", \"result\": false}\n{\"response\": \"The answer is that you should do this. And that.\", \"result\": false}"]}
{"query": "Do you know anything about practice plans for ice hockey?", "instruction": "Respond in exactly 50 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n"], "testcases": ["{\"response\": \"The answer is yes. It is correct.\", \"result\": true}\n{\"response\": \"This is a test sentence with multiple words to check the length of the response.\", \"result\": false}\n{\"response\": \"The answer is yes, it is correct and it is in exactly 50 words.\", \"result\": false}", "{\"response\": \"This is a sentence that is exactly 50 words long because it contains a lot of words that are needed to meet the requirement.\", \"result\": true}\n{\"response\": \"This is a sentence that is only 40 words long and does not meet the requirement.\", \"result\": false}\n{\"response\": \"This is a sentence that is more than 50 words long and also does not meet the requirement.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog. It is a very nice day outside.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. It is a very nice day outside. The sun is shining brightly today.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. It is a very nice day outside. The sun is shining. It is a great day for an outing.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the clear blue sky. It's a beautiful day to go for a walk.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the clear blue sky. It's a beautiful day to go for a walk. The birds are singing.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky. It's a beautiful day to go for a walk. The birds are singing. It's a lovely day.\", \"result\": false}"]}
{"query": "Brainstorm names related to \n- CacheGPT\n- StoreGPT\n- OpenCache", "instruction": "Use the format \"A. Option B. Option C. Option\"", "verifiers": ["def evaluate(response: str) -> bool: \n    parts = response.split('.')\n    if len(parts) < 3 or len(parts) > 4:\n        return False\n    for part in parts:\n        part = part.strip()\n        if not part or not part[0].isalpha() or not part[-1].isalpha():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"A. \") and response.endswith(\".\\n\") and 'B.' in response[2:] and 'C.' in response[2:]\n", "def evaluate(response: str) -> bool: \n    return response.replace('.', '').split() == ['Use', 'the', 'format', 'A.', 'Option', 'B.', 'Option', 'C.', 'Option']\n", "def evaluate(response: str) -> bool: \n    return 'A. Option'in response and 'C. Option' in response and response.count('B. Option') == 1\n"], "testcases": ["{\"response\": \"Option A. Option B. Option C. Option D.\", \"result\": false}\n{\"response\": \"Option A. Option\", \"result\": false}\n{\"response\": \"Option A. Option B. Option C\", \"result\": false}", "{\"response\": \"A. Option B. Option C. Option D. Option E.\", \"result\": false}\n{\"response\": \"A. Option B. Option C. Option\", \"result\": false}\n{\"response\": \"A. Option B. Option C. Option D.\", \"result\": true}", "{\"response\": \"A. Option B. Option C. Option\", \"result\": true}\n{\"response\": \"A. Option B. Option C\", \"result\": false}\n{\"response\": \"A. Option B. Option C. Option D. Option E\", \"result\": true}", "{\"response\": \"A. Apple B. Banana C. Cherry\", \"result\": true}\n{\"response\": \"A. Apple B. Banana C. Cherry D. Date\", \"result\": false}\n{\"response\": \"A. Apple B. Banana C. Cherry D. Date E. Elderberry F. Fig\", \"result\": false}"]}
{"query": "who are the top 10 players in the NBA of all time?", "instruction": "list in reverse chronological order.", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.replace(',', '').replace('.', '') # remove punctuation for easier comparison\n    words = response.split()\n    for i in range(1, len(words)):\n        if words[i-1][-1] == 'y' and words[i].startswith('th'):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(' '.join(sorted(response.split())[::-1]) ==''.join(response.split()) \n              for _ in range(5)) \n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return lines == lines[::-1]\n", "def evaluate(response: str) -> bool: \n    return response == response[::-1]\n"], "testcases": ["{\"response\": \"Event 3: 2022-01-01\\nEvent 2: 2022-01-02\\nEvent 1: 2022-01-03\", \"result\": true}\n{\"response\": \"Event 1: 2022-01-03\\nEvent 2: 2022-01-02\\nEvent 3: 2022-01-01\", \"result\": false}\n{\"response\": \"Event 1: 2023-01-01\\nEvent 2: 2023-01-15\", \"result\": false}", "{\"response\": \"Transaction 1: 2022-01-01 12:00:00\\nTransaction 2: 2022-01-15 14:00:00\\nTransaction 3: 2022-01-30 16:00:00\", \"result\": true}\n{\"response\": \"Transaction 1: 2022-01-15 14:00:00\\nTransaction 2: 2022-01-01 12:00:00\\nTransaction 3: 2022-01-30 16:00:00\", \"result\": false}\n{\"response\": \"Transaction 3: 2022-01-30 16:00:00\", \"result\": true}", "{\"response\": \"Today: task completed, Yesterday: task started, day before: nothing happened\", \"result\": true}\n{\"response\": \"I'm a large language model, I do not have have access to a calendar or scheduling information.\", \"result\": false}\n{\"response\": \"2024-01-01: Happy New Year, 2023-12-31: Celebrating New Year's Eve\", \"result\": true}", "{\"response\": \"2024-10-05 12:00, 2024-10-04 11:00, 2024-10-03 10:00\", \"result\": true}\n{\"response\": \"2024-10-04 11:00, 2024-10-03 10:00, 2024-10-05 12:00\", \"result\": false}\n{\"response\": \"I will arrive at 2024-10-05 12:00, then attend a meeting at 2024-10-04 11:00, and finally return at 2024-10-03 10:00\", \"result\": true}"]}
{"query": "You're the nutritionist who has to help me put together a balanced diet for the week, ask me questions that will help", "instruction": "provide yes or no questions that can be answered with an empty list if the answer is yes, and a list of strings if the answer is no.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.lower() in ['yes', 'no'] or (response.lower() == 'yes' and not response.split()[1:0])\n    or (response.lower() == 'no' and response.split()[1:] and all([x.isalpha() for x in response.split()[1:]]))<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response in ['yes', 'no', '[\"\"]', '[]', 'Yes', 'No', '[\"\"]', '[]']\n", "def evaluate(response: str) -> bool: \n    return response in ['yes', 'no', '[\"\"]', '[]'] or (response.startswith('[\"') and response.endswith('\"]') and all(char in '[]\"' for char in response[1:-1]))\n", "def evaluate(response: str) -> bool:    \n    response = response.strip()\n    return response == 'yes' or (response == 'no' and isinstance(eval(response), list)) or (response == '' and isinstance(eval(response), list)) or (response.lower() == 'no' and (isinstance(eval(response), list) or eval(response) == []))\n"], "testcases": ["{\"response\": \"Yes, that's true.\", \"result\": true}\n{\"response\": \"No, I will not be attending the meeting.\", \"result\": true}\n{\"response\": \"The meeting will be rescheduled if I am unable to attend.\", \"result\": false}", "{\"response\": \"What are some reasons to consider? []\", \"result\": true}\n{\"response\": \"Will you go to the party?\", \"result\": true}\n{\"response\": \"Do you have a car? ['Toyota', 'Honda', 'Tesla']\", \"result\": false}", "{\"response\": \"[]\", \"result\": true}\n{\"response\": \"[]\", \"result\": true}\n{\"response\": \"['dog', 'cat', 'bird']\", \"result\": false}", "{\"response\": \"yes\", \"result\": True}\n{\"response\": \"no\", \"result\": False}\n{\"response\": \"[\\\"no\\\", \\\"I do not have enough information to answer this question\\\"]\", \"result\": True}"]}
{"query": "Write a pitch for a horror movie that plays on the island Sylt in northern germany in the 19th century. Include fishermen and a sinister force that drives the inhabitants insane.", "instruction": "Use exactly 3 paragraphs", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') == 2\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n\\n') == 2\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.replace('\\n\\n', '.').replace('?', '').replace('!', '').replace('.', '').replace('?', '').replace('!', '').split('.')\n    return len(paragraphs) == 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.replace('\\n\\n', '\\n').split('\\n')\n    return len(paragraphs) == 3\n"], "testcases": ["{\"response\": \"This is the first paragraph. This is the second paragraph.\\n\\nThis is the third paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph.\\nThis is the second paragraph.\\nThis is the third paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\\n\\nThis is the fourth paragraph.\", \"result\": false}", "{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\nThis is the third paragraph.\\n\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. And this is the fourth paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph. This is the fourth paragraph. And this is the fifth paragraph. And this is the sixth paragraph.\", \"result\": false}", "{\"response\": \"This is the first paragraph.\\n\\nThis is the second paragraph.\\n\\nThis is the third paragraph.\", \"result\": true}\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph.\\nThis is the second paragraph.\\nThis is the third paragraph. This is the fourth paragraph.\", \"result\": false}"]}
{"query": "Create source code for notepad that when the program runs a popup opens saying Hi!", "instruction": "Write in no more than 50 lines of code", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) <= 50\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') \n    return lines <= 50\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 50\n"], "testcases": ["{\"response\": \"The response\\nis very short\\nand easy\\nto verify\", \"result\": true}\n{\"response\": \"The response\\nis a bit longer\\nbut still\\nnot too long\", \"result\": false}\n{\"response\": \"The response\\nis very long\\nand has\\nmany lines\\nand is\\nstill going\\nbut not too long\", \"result\": false}", "{\"response\": \"This is a very short response.\\nThis is the second line.\", \"result\": true}\n{\"response\": \"This is a response that spans multiple lines.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\", \"result\": false}\n{\"response\": \"This is a response that is longer than 50 lines.\\nThis is the second line.\\nThis is the third line.\\nThis is the fourth line.\\nThis is the fifth line.\\nThis is the sixth line.\\nThis is the seventh line.\\nThis is the eighth line.\\nThis is the ninth line.\\nThis is the tenth line.\\nThis is the eleventh line.\\nThis is the twelfth line.\\nThis is the thirteenth line.\\nThis is the fourteenth line.\\nThis is the fifteenth line.\\nThis is the sixteenth line.\\nThis is the seventeenth line.\\nThis is the eighteenth line.\\nThis is the nineteenth line.\\nThis is the twentieth line.\\nThis is the twenty-first line.\\nThis is the twenty-second line.\\nThis is the twenty-third line.\\nThis is the twenty-fourth line.\\nThis is the twenty-fifth line.\\nThis is the twenty-sixth line.\\nThis is the twenty-seventh line.\\nThis is the twenty-eighth line.\\nThis is the twenty-ninth line.\\nThis is the thirtieth line.\\nThis is the thirty-first line.\\nThis is the thirty-second line.\\nThis is the thirty-third line.\\nThis is the thirty-fourth line.\\nThis is the thirty-fifth line.\\nThis is the thirty-sixth line.\\nThis is the thirty-seventh line.\\nThis is the thirty-eighth line.\\nThis is the thirty-ninth line.\\nThis is the fortieth line.\\nThis is the forty-first line.\\nThis is the forty-second line.\\nThis is the forty-third line.\\nThis is the forty-fourth line.\\nThis is the forty-fifth line.\\nThis is the forty-sixth line.\\nThis is the forty-seventh line.\\nThis is the forty-eighth line.\\nThis is the forty-ninth line.\\nThis is the fiftieth line.\\nThis is the fifty-first line.\", \"result\": false}", "{\"response\": \"a\\nb\\nc\\nd\\ne\\uf0fc\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nx\\ny\\nz\\nA\\nB\\C\\nD\\ne\\nf\\nG\\nH\\nI\\nJ\\nK\\nL\\nM\\nN\\nO\\nP\\nQ\\nR\\nS\\nt\\nU\\nV\\nW\\nX\\nY\\nZ\\n\", \"result\": false}\n{\"response\": \"Hello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\nHello\\n\", \"result\": true}\n{\"response\": \"This is a long text that exceeds the line limit\", \"result\": false}", "{\"response\": \"This is a short response.\\nIt only has one line.\", \"result\": false}\n{\"response\": \"This is a response that has 50 lines.\\nLine 1.\\nLine 2.\\n...\\nLine 49.\\nLine 50.\\n\", \"result\": true}\n{\"response\": \"This response has more than 50 lines.\\nLine 1.\\nLine 2.\\n...\\nLine 49.\\nLine 50.\\nLine 51.\\nLine 52.\", \"result\": false}"]}
{"query": "you didn't list smartcare.com. can you provide a summary on that tool and usage?", "instruction": "Use only 5 words per sentence, exactly.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == len([s for s in response.split('.') if len(s.split()) == 5])\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        return len(words) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split(' ')\n        if len(words)!= 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i in range(len(words)):\n        if len(words) > 0 and (i == len(words) - 1 or len(words[i + 1]) > 2 or words[i + 1].count('.') == 0):\n            if len(words[i]) > 5:\n                return False\n    return True\n"], "testcases": ["{\"response\": \"The sun is shining brightly today.\", \"result\": true}\n{\"response\": \"The sun is very bright today.\", \"result\": false}\n{\"response\": \"The sun is very bright and hot.\", \"result\": false}", "{\"response\": \"I like the plan so far very much indeed.\", \"result\": false}\n{\"response\": \"I like the plan so far indeed.\", \"result\": false}\n{\"response\": \"I like the plan so far very much.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the dog.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the dog and cat and mouse.\", \"result\": false}\n{\"response\": \"The sun is shining bright blue skies.\", \"result\": true}", "{\"response\": \"This is a short sentence.\", \"result\": false}\n{\"response\": \"This is another short sentence. This is another short sentence.\", \"result\": false}\n{\"response\": \"This is a short sentence. This is another short sentence. This is a third short sentence.\", \"result\": true}"]}
{"query": "why should I want to work for a Minnesota senator?", "instruction": "Answer in a single sentence that starts with \"One key advantage\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip() and response.startswith('One key advantage') and response.count('.') == 1 and response.split('.')[0].count(' ') == 1\n", "def evaluate(response: str) -> bool: \n    return response.startswith(\"One key advantage\") and '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return (response.startswith(\"One key advantage\") and response.count('.') == 1 and all(not char.isalnum() for char in response.replace('One key advantage', '').replace('.', '')))\n", "def evaluate(response: str) -> bool: \n    return response.strip() and response.split('.')[0].strip() == \"One key advantage\" and '.' in response\n"], "testcases": ["{\"response\": \"One key advantage of this plan is that it minimizes risk, and that makes it more efficient.\", \"result\": true}\n{\"response\": \"The main drawback of this plan is that it is very expensive and that makes it less appealing.\", \"result\": true}\n{\"response\": \"I believe the best approach is to first consider all available options before making a final decision.\", \"result\": false}", "{\"response\": \"One key advantage of this product is that it is user-friendly.\", \"result\": true}\n{\"response\": \"This product has many benefits, including its user-friendliness.\", \"result\": false}\n{\"response\": \"One key advantage of this product is that it is user-friendly. Another key advantage is that it is affordable.\", \"result\": false}", "{\"response\": \"One key advantage is that it is user-friendly.\", \"result\": true}\n{\"response\": \"One key advantage is that it is user-friendly and highly recommended.\", \"result\": false}\n{\"response\": \"Another key benefit is that it is free.\", \"result\": false}", "{\"response\": \"One key advantage of this plan is that it's easy to implement.\", \"result\": true}\n{\"response\": \"One key advantage is that this plan is easy to implement.\", \"result\": false}\n{\"response\": \"One key advantage of this plan, it is that it is easy to implement.\", \"result\": false}"]}
{"query": "What are some time-based xml schemas?", "instruction": "Write the response in a tabular format", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'table' in response.lower() or 'tabular' in response.lower() or '||' in response or '---' in response\n", "def evaluate(response: str) -> bool: \n    return 'table' in response.lower() or 'tabular' in response.lower()<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return 'tabular' in response or 'table' in response\n", "def evaluate(response: str) -> bool: \n    return 'tabular' in response.lower()\n"], "testcases": ["{\"response\": \"Name|Age|City\\nJohn|25|New York\\nAlice|30|Los Angeles\", \"result\": true}\n{\"response\": \"This is a normal text\", \"result\": false}\n{\"response\": \"Name|Age\\nJohn|25\\nAlice|30\\nBob|35\", \"result\": false}", "{\"response\": \"This is a table: | col1 | col2 |\\n|------|------|\\n| val1 | val2 |\", \"result\": true}\n{\"response\": \"This is not a table: This is some text that does not follow the format\", \"result\": false}\n{\"response\": \"Here is another table: | col3 | col4 |\\n|------|------|\\n| val3 | val4 |\", \"result\": true}", "{\"response\": \"Name  | Age  | Country\\nAlice | 25   | USA\\nBob   | 30   | UK  \", \"result\": true}\n{\"response\": \"The weather is great today!\", \"result\": false}\n{\"response\": \"The following table shows the details of the products: \\n| Product | Price |\\n|---------|-------|\\n| Product1| $10  |\\n| Product2| $20  |\", \"result\": true}", "{\"response\": \"| Column 1 | Column 2 |\\n|----------|----------|\\n| Value 1  | Value 2  |\", \"result\": true}\n{\"response\": \"This is not a table.\", \"result\": false}\n{\"response\": \"| Column 1 | Column 2 | Column 3 |\\n|----------|----------|----------|\\n| Value 1  | Value 2  | Value 3  |\", \"result\": true}"]}
