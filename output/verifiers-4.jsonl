{"query": "Thai RecipesShare Prompt", "instruction": "Write a 300-word essay on the traditional preparation methods using only the first person singular pronoun and verbs ending with 'ing'.", "verifiers": ["def evaluate(response: str) -> bool:    \n    return 'I' in response and all((word.endswith('ing') for word in response.split()))\n", "def evaluate(response: str) -> bool:    \n    return 'I' in response and 'ing' in response\n", "def evaluate(response: str) -> bool: \n    first_person_verb = ['am eating', 'am cooking', 'am making', 'am serving', 'am tasting', 'am drinking']\n    for word in first_person_verb:\n        if word in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool:    \n    return (len(response) >= 300 and \n            all(char in 'iaeio'for char in response) and \n            all(response[i] in 'aeiou' +'mg' for i in range(len(response)-3) if response[i:i+4] in ['ing', 'eing']))\n"], "testcases": ["{\"response\": \"I am doing my research on the traditional preparation methods. I am reading many books and watching YouTube tutorials. I am trying to find the best way to do it.\", \"result\": true}\n{\"response\": \"I love making pizza using a pizza stone in the oven. You can cook it at 450 degrees for 10 minutes and it's perfect!\", \"result\": false}\n{\"response\": \"I am watching a YouTube video about traditional Indian cooking. The chef is slicing and dicing all the ingredients. I am trying to learn how to make it.\", \"result\": true}", "{\"response\": \"I am studying and writing in a quiet room today.\", \"result\": false}\n{\"response\": \"I am writing and thinking carefully and slowly. I am making progress, so I keep going.\", \"result\": false}\n{\"response\": \"I am going, thinking, and writing this essay, and I am finishing it now.\", \"result\": true}", "{\"response\": \"I am eating breakfast in the morning. I am reading a book in my room.\", \"result\": false}\n\n{\"response\": \"I am writing this essay while I am watching TV. It is a great distraction from my task.\", \"result\": false}\n\n{\"response\": \"I am studying for my exams every day. I am eating a lot of food to gain weight. I am also going to the gym to build my muscles.\", \"result\": false}", "{\"response\": \"As I am going to the market, I am buying some ingredients. I am making a delicious meal by slicing the vegetables and saut\u00e9ing the meat. I am feeling proud of my culinary skills.\", \"result\": true}\n{\"response\": \"To make a traditional meal, you need to gather ingredients and add some spices.\", \"result\": false}\n{\"response\": \"I am going to the market and buying some ingredients, I am then going home and slicing the vegetables, saut\u00e9ing the meat, and feeling proud of my culinary skills.\", \"result\": true}"]}
{"query": "How do i program an ESP-8266 using the C SDK?", "instruction": "Write the response in Markdown format, including code blocks and links.", "verifiers": ["def evaluate(response: str) -> bool: \n    # Check if response contains Markdown headers\n    return '###' in response or '#'in response or '__' in response or '**' in response \n    or '~~' in response or '`' in response\n", "def evaluate(response: str) -> bool: \n    return '", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    has_code_block = False\n    has_link = False\n    for line in lines:\n        if line.strip().startswith('", "def evaluate(response: str) -> bool: \n    return response.startswith(\"# \") and (\""], "testcases": ["{\"response\": \"### This is a heading\\n\\nThis is a paragraph with a link to [Google](https://www.google.com).\\n\\n```python\\nprint('Hello, World!')\\n```\\n\\nThis is another paragraph with a link to [Stack Overflow](https://stackoverflow.com/).\", \"result\": true}\n{\"response\": \"This is a heading\\n\\nThis is a paragraph with a link to Google.\\n\\nprint('Hello, World!')\\n\\nThis is another paragraph with a link to Stack Overflow.\", \"result\": false}\n{\"response\": \"### This is a heading\\n\\nThis is a paragraph with a link to Google.\\n\\nprint('Hello, World!')\\nThis is another paragraph with a link to Stack Overflow.\", \"result\": false}", "{\"response\": \"## Heading\\nThis is a **Markdown response** with a link to [Google](https://www.google.com).\\n```python\\nprint('Hello World')\\n```\", \"result\": true}\n{\"response\": \"## Heading\\nThis is a Markdown response with a link to Google.\\n```python\\nprint('Hello World')\\n```\", \"result\": false}\n{\"response\": \"## Heading\\nThis is a Markdown response without a link or code block.\\nIt's not as useful.\", \"result\": false}", "{\"response\": \"I am eating. I am drinking coffee. I am sleeping. I am running. I am eating a sandwich.\", \"result\": false}\n{\"response\": \"I am eating. I am drinking coffee. I am sleeping. I am running. I am eating a sandwich. I am eating another sandwich. I am eating yet another sandwich. I am eating a sandwich that is very big.\", \"result\": true}\n{\"response\": \"Here is my code```python\ndef hello_world():\n    print('Hello, world!')\n```\", \"result\": false}", "{\"response\": \"## Introduction\\n\\nWriting a response in Markdown format is easy.\\n\\n### Code blocks\\nYou can write code blocks using triple backticks ````\", \"result\": true}\n{\"response\": \"This is not a valid Markdown response\", \"result\": false}\n{\"response\": \"# Introduction\\n\\nWriting a response in Markdown format is easy.\\n\\n# This is not a code block\", \"result\": false}"]}
{"query": "was yanukovich really pro-russian? what reasons did he have for preferring Russia to the EU assoication deal", "instruction": "Use no more than three sentences per paragraph", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        sentences = paragraph.split('. ')\n        if len(sentences) > 3:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = [''.join([sentence for sentence in s.split('\\n')]) for s in response.split('\\n') if s]\n    return len(paragraphs) == len(sentences) and all(len(s.split('.')) <= 3 for s in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    return all(len(paragraph.split('\\n')) <= 3 for paragraph in paragraphs)\n"], "testcases": ["{\"response\": \"I have been studying English for three years. I think it is a great language to learn. It's widely spoken around the world. I can communicate with people from different cultures.\", \"result\": false}\n{\"response\": \"I have been studying English for three years. It's a great language to learn and very useful for my career.\", \"result\": true}\n{\"response\": \"I have been studying English for three years. It's a great language to learn and very useful for my career. English is widely spoken around the world. I can communicate with people from different cultures.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. And this is the fourth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. And this is the third sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}", "{\"response\": \"This is a short paragraph with only 1 sentence.\\n\\nThis is another paragraph with only 1 sentence.\\n\\nThis is a long paragraph with 4 sentences.\\nThis is the last sentence.\", \"result\": false}\n{\"response\": \"This is a short paragraph with only 1 sentence.\\n\\nThis is another paragraph with only 1 sentence.\\n\\nThis is a paragraph with 3 sentences.\\nThis is another sentence.\\nThis is yet another sentence.\\nThis is the last sentence.\", \"result\": false}\n{\"response\": \"This is a short paragraph with only 1 sentence.\\n\\nThis is another paragraph with only 1 sentence.\\n\\nThis is a paragraph with 3 sentences.\\nThis is the last sentence of this paragraph.\", \"result\": true}", "{\"response\": \"This is a short paragraph with only one sentence. It has another sentence now. It even has a third sentence now.\\n\\nThis is another short paragraph with only one sentence. It has another sentence now.\\n\\nThis is a long paragraph with many sentences. It has a lot of words and ideas.\", \"result\": true}\n{\"response\": \"This is a very long paragraph with lots of sentences. It has a lot of words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even more words and ideas. And even"]}
{"query": "compare 2 excel files and show disrepencies in node js", "instruction": "Use no more than 5 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.upper() == 'S':\n            count += 1\n    return count <= 5\n", "def evaluate(response: str) -> bool: \n    count = 0 \n    for char in response: \n        if char.upper() == 'S': \n            count += 1 \n    return count <= 5 \n", "def evaluate(response: str) -> bool: \n    return'step' in response and response.count('step') <= 5\n", "def evaluate(response: str) -> bool: \n    count = 0 \n    for word in response.split(): \n        if word.isnumeric(): \n            count += 1 \n    return count <= 5 \n"], "testcases": ["{\"response\": \"Step 1: Do this. Step 2: Do that. Step 3: Do something else.\", \"result\": true}\n{\"response\": \"Step 1: Do this. Step 2: Do that. Step 3: Do something else. Step 4: Do something more. Step 5: Do something else.\", \"result\": false}\n{\"response\": \"Step 1: Do this. Step 2: Do that. Step 3: Do something else. Step 4: Do something more. Step 5: Do something else. Step 6: Do something else.\", \"result\": false}", "{\"response\": \"Step 1: Research the task. Step 2: Plan the approach. Step 3: Execute the plan. Step 4: Review the results.\", \"result\": true}\n{\"response\": \"Step 1: Research the task. Step 2: Plan the approach. Step 3: Execute the plan. Step 4: Review the results. Step 5: Revise the approach. Step 6: Finalize the results.\", \"result\": false}\n{\"response\": \"This is not a step-by-step guide.\", \"result\": true}", "{\"response\": \"To do this task, first step, second step, third step, fourth step and fifth step.\", \"result\": true}\n{\"response\": \"To do this task, first step, second step, third step, fourth step and fifth step, sixth step.\", \"result\": false}\n{\"response\": \"To do this task, first step, second step, third step.\", \"result\": true}", "{\"response\": \"To do this task, first do this, then do that. Additionally, remember to do something else.\", \"result\": false}\n{\"response\": \"To do this task, first do this. Then do that.\", \"result\": true}\n{\"response\": \"To do this task, first do this. Then do that. Additionally, remember to do something else. Finally, do another thing. And lastly, do the last thing. But first, do this too.\", \"result\": false}"]}
{"query": "how to get class from \\*.\\_set django orm", "instruction": "Provide the response as a single line of Python code.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.splitlines()) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 1 and response.strip().endswith(';') or ':' or '='", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[0]) == 1\n", "def evaluate(response: str) -> bool: \n    return response.lstrip().split('\\n')[-1].strip() == ''\n"], "testcases": ["{\"response\": \"x = 5\", \"result\": true}\n{\"response\": \"x = 5\\ny = 10\", \"result\": false}\n{\"response\": \"x = 5\\ny = 10\\nprint(x + y)\", \"result\": false}", "{\"response\": \"result = True\", \"result\": true}\n{\"response\": \"result = 5 + 5\", \"result\": true}\n{\"response\": \"result = 10 * (5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5)\", \"result\": false}", "{\"response\": \"x = 5\", \"result\": true}\n{\"response\": \"This is a very long response that should not be considered as a single line of Python code because it is a list\", \"result\": false}\n{\"response\": \"print('Hello World')\", \"result\": true}", "{\"response\": \"result = 5 + 3\", \"result\": true}\n{\"response\": \"result = 5 + 3 * 2 + 7\", \"result\": false}\n{\"response\": \"result = 5 + 3\", \"result\": true}"]}
{"query": "I need to clean my denture do you have any suggestion for me", "instruction": "Write a step-by-step guide that includes at least 5 actions.", "verifiers": ["def evaluate(response: str) -> bool:    \n    return response.count('.') >= 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) >= 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for i in range(len(response)):\n        if response[i:i+10].lower() =='step-by-step guide' and response[i+10:].split():\n            for item in response[i+10:].split('.'):\n                if item and not item.startswith(('a', 'an', 'the', 'and', 'of')):\n                    count += 1\n    return count >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) >= 5\n"], "testcases": ["{\"response\": \"1. Open the application. 2. Click on the settings. 3. Update the language. 4. Go to the next page. 5. Continue the process. 6. Press the button to confirm. 7. Wait for the result.\", \"result\": true}\n{\"response\": \"The application will guide you through the process.\", \"result\": false}\n{\"response\": \"Here is a step-by-step guide: 1. Click the button. 2. The system will update. 3. Click again to confirm. 4. Check the status. 5. Make the necessary adjustments.\", \"result\": true}", "{\"response\": \"1. Open the application\\n2. Click on 'New Task'\\n3. Enter task details\\n4. Select priority\\n5. Click 'Save'\\n6. Review task list\", \"result\": true}\n{\"response\": \"1. Open the application\\n2. Click on 'New Task'\\n3. Enter task details\", \"result\": false}\n{\"response\": \"1. Open the application\\n2. Click on 'New Task'\\n3. Enter task details\\n4. Select priority\\n5. Click 'Save'\\n6. Review task list\\n7. Repeat steps 1-5\", \"result\": true}", "{\"response\": \"This response contains a single line of Python code\", \"result\": false}\n{\"response\": \"import os\\nprint('Hello World')\", \"result\": false}\n{\"response\": \"import os\\nprint('Hello World')\\nprint('This is a test')\\nprint('Another print')\\nprint('And another one')\\nprint('Final print')\", \"result\": true}", "{\"response\": \"To accomplish this task, do the following:\\n1. Open the Python interpreter.\\n2. Type 'print('Hello World')'.\\n3. Run the script.\\n4. Verify the output.\\n5. Refine the code.\\n6. Test the revised code.\", \"result\": true}\n{\"response\": \"To accomplish this task, do the following:\\n1. Open the Python interpreter.\\n2. Type 'print('Hello World')'.\\n3. Run the script.\\n4. Verify the output.\", \"result\": false}\n{\"response\": \"To accomplish this task, do the following:\\n1. Open the Python interpreter.\\n2. Type 'print('Hello World')'.\\n3. Run the script.\\n4. Verify the output.\\n5. Refine the code. I'm glad I was able to do it.\", \"result\": true}"]}
{"query": "Readability test", "instruction": "Use 5 numbers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.isdigit() and len(response) == 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.isdigit():\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    return any(char.isdigit() for char in response) and len([char for char in response if char.isdigit()]) == 5\n"], "testcases": ["{\"response\": \"This guide includes 5 steps: 1. Plan, 2. Prepare, 3. Execute, 4. Review, 5. Improve.\", \"result\": true}\n{\"response\": \"This guide includes 3 steps: 1. Plan, 2. Execute, 3. Improve.\", \"result\": false}\n{\"response\": \"This guide includes 7 steps: 1. Plan, 2. Prepare, 3. Execute, 4. Review, 5. Improve, 6. Learn, 7. Reflect.\", \"result\": true}", "{\"response\": \"1 + 2 + 3 + 4 + 5 = 15\", \"result\": true}\n{\"response\": \"The answer is 42.\", \"result\": false}\n{\"response\": \"2 x 3 x 4 = 24\", \"result\": true}", "{\"response\": \"This recipe serves 2 people and takes 3 hours to complete. It requires 4 ingredients and 5 steps.\", \"result\": true}\n{\"response\": \"This is a very easy recipe that only requires 1 ingredient and 1 step.\", \"result\": false}\n{\"response\": \"This recipe serves 1 person and takes 1 hour to complete. It requires 2 ingredients and 3 steps, as well as 4 eggs and 5 cups of flour.\", \"result\": true}", "{\"response\": \"To follow this guide, do the following actions:\\n1. Open the door.\\n2. Go left.\\n3. Turn around.\\n4. Go right.\\n5. Enter the room.\", \"result\": true}\n{\"response\": \"To follow this guide, do the following actions:\\n1. Open the door.\\n2. Go left.\\n3. Turn around.\\n4. Go right.\\n5. Enter the room. And then go left again.\", \"result\": false}\n{\"response\": \"To follow this guide, do the following actions:\\n1. Open the door.\\n2. Go left.\\n3. Turn around.\\n4. Go right.\\n5. Enter the room. Open the door. Go left.\", \"result\": false}"]}
{"query": "I want to write a career advice book in a competitive industry. what should I do?", "instruction": "Write in a list of steps, numbered from 1 to 5, and each step should be at most 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    for i in range(len(steps)):\n        if'' + steps[i] +'' and len(steps[i]) > 50:\n            return False\n        if i > 0 and not steps[i].startswith(str(i + 1) + '.'):\n            return False\n    return len(steps) == 5 and steps[-1].endswith('.')\n", "def evaluate(response: str) -> bool:    \n    words = response.split()\n    count = 0\n    temp = ''\n    for word in words:\n        if word.endswith('.') and word.strip() not in ['.', ',', '?', '!']:\n            temp += word +''\n            if count == 5:\n                if len(temp) <= 50:\n                    temp = ''\n                    count = 0\n                else:\n                    return False\n            else:\n                temp = ''\n                count += 1\n        else:\n            temp += word +''\n    if count == 5 and len(temp) <= 50:\n        return True\n    return False\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if line.strip() and not line.lstrip().startswith('Step'):\n            return False\n        if i >= 1 and i <= 5:\n            words = line.split()\n            if len(words) > 0 and len(' '.join(words)) > 50:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.replace('\\n', '')\n    steps = response.split('.')\n    if len(steps)!= 4:\n        return False\n    for i, step in enumerate(steps, start=1):\n        if i > 5:\n            return False\n        if len(step.strip()) > 50:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Here are the steps to follow:\\n1. Do this step.\\n2. Do that step.\\n3. Do another step.\\n4. Do another step.\\n5. Do the final step.\", \"result\": true}\n\n{\"response\": \"Here are the steps to follow:\\n1. Do this step.\\n2. Do that step.\\n3. Do another step.\\n4. Do another step. Do something else.\\n5. Do the final step.\", \"result\": false}\n\n{\"response\": \"Here are the steps to follow:\\n1. Do this step.\\n2. Do that step.\\n3. Do another step.\\n4. Do another step.\\n5. Do the final step. Do something else.\", \"result\": false}", "{\"response\": \"1. This is the first step. It should be short. 2. The second step should be short too. 3. This is the third step. 4. The fourth step is quite short. 5. And this is the last step.\", \"result\": true}\n{\"response\": \"This is the first step. It should be short. 2. The second step should be short too. 3. This is the third step. 4. The fourth step is quite short. 5. And this is the last step.\", \"result\": false}\n{\"response\": \"1. This is the first step. It should be short. 2. The second step should be short too. 3. This is the third step. 4. The fourth step is quite short. And this is the last step.\", \"result\": false}", "{\"response\": \"1. Buy a ticket to the city. 2. Check into the hotel. 3. Go to the city center. 4. Visit the famous landmark. 5. Return home.\", \"result\": true}\n{\"response\": \"1. Buy a ticket to the city. 2. Check into the hotel. 3. Go to the city center. 4. Visit the famous landmark. 5. Return home. And explore the city.\", \"result\": false}\n{\"response\": \"1. Buy a ticket to the city. 2. Check into the hotel. 3. Go to the city center. 4. Visit the famous landmark. 5. Enjoy your vacation.\", \"result\": true}", "{\"response\": \"Here are the steps to achieve this goal:\n1. Step one is to define what success means to you.\n2. Step two is to set clear goals.\n3. Step three is to develop a plan.\n4. Step four is to take action.\n5. Step five is to review and adjust.\", \"result\": true}\n{\"response\": \"Here are the steps to achieve this goal:\n1. Step one is to define what success means to you. This is a long phrase that goes beyond 50 words.\n2. Step two is to set clear goals.\n3. Step three is to develop a plan.\n4. Step four is to take action.\n5. Step five is to review and adjust.\", \"result\": false}\n{\"response\": \"Here are the steps to achieve this goal:\n1. Step one is to define what success means to you.\n2. Step two is to set clear goals.\n3. Step three is to develop a plan.\n4. Step four is to take action.\n5. Step five is to review and adjust.\n6. Step six is to learn from the experience.\", \"result\": false}"]}
{"query": "hello", "instruction": "respond in less than 5 sentences, without using proper nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) < 5 and all(c.istitle() or not c.isalpha() for c in response) \n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) < 5 and all(c.islower() or c.isspace() for c in response)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    proper_nouns = ['hello', 'world', 'this', 'is', 'a', 'test']\n    return len(sentences) < 5 and all(word not in proper_nouns for word in [sentence.split()[0] for sentence in sentences if sentence] if word in proper_nouns) \n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    proper_nouns = ['I', 'you', 'he','she', 'it', 'we', 'they','me', 'him', 'her', 'us', 'them']\n    return len(sentences) < 5 and all(not word.strip('.,!?\"\\'').lower() in proper_nouns for word in response.lower().split()) \n"], "testcases": ["{\"response\": \"The world is a beautiful place.\", \"result\": true}\n{\"response\": \"I'm so happy to be in the mountains today with my friend Alex.\", \"result\": false}\n{\"response\": \"Life is precious.\", \"result\": true}", "{\"response\": \"This is a short response with only 2 sentences. It is suitable for a short chat.\", \"result\": true}\n{\"response\": \"The Eiffel Tower is a famous landmark located in Paris. It was built for the 1889 World's Fair. The Eiffel Tower is still standing today.\", \"result\": false}\n{\"response\": \"I am a happy person. I love to play outside and watch the sunset.\", \"result\": true}", "{\"response\": \"The quick brown fox jumped over the lazy dog. It was a beautiful sunny day. The sun was shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the sky. It is a beautiful day today.\", \"result\": true}\n{\"response\": \"The sun is shining. The clouds are white. It is a nice day outside. The birds are singing.\", \"result\": false}", "{\"response\": \"The poem is a beautiful way to express one's thoughts. It can be used to tell a story, express a feeling, or simply to be creative. The form is highly adaptable, making it a great tool for self-expression. Poetry can be a form of therapy, helping individuals to process their emotions and gain clarity.\", \"result\": false}\n{\"response\": \"The sun sets over the ocean, casting a warm glow over the waves. The sound of the waves crashing against the shore is soothing.\", \"result\": false}\n{\"response\": \"A man walked down the street. He was in a hurry. He needed to get somewhere.\", \"result\": true}"]}
{"query": "Identify the list of the 20 most common and well known business idioms used in english. Store that list in a variable called [selinasIdioms] and write out that list without any other explanation.", "instruction": "Use Markdown formatting", "verifiers": ["def evaluate(response: str) -> bool: \n    return '#' in response or '*' in response or '`' in response or '_' in response or '***' in response\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#') or response.startswith('###') or response.startswith('####') or response.startswith('#####') or response.startswith('######') or response.startswith('#######') or response.startswith('********')\n", "def evaluate(response: str) -> bool: \n    return len(response) > 0 and any(char in ['`', '*', '#'] for char in response)\n", "def evaluate(response: str) -> bool: \n    return'markdown' in response.lower() and '#\\n' not in response\n"], "testcases": ["{\"response\": \"This is a **test response** with # headings and ***bold text***\", \"result\": true}\n{\"response\": \"This is a regular response without any formatting\", \"result\": false}\n{\"response\": \"This response uses multiple *** formats: **bold**, # headings, and `code`\", \"result\": true}", "{\"response\": \"## Heading\\nThis is a heading with #\", \"result\": false}\n{\"response\": \"# Heading\\n\\n## Heading\\n\\n### Heading\", \"result\": true}\n{\"response\": \"This is not a heading, but rather a paragraph\", \"result\": false}", "{\"response\": \"## Heading\\nThis is a paragraph with some text.\\nIt has multiple lines.\", \"result\": true}\n{\"response\": \"This is a plain text response without any formatting.\", \"result\": false}\n{\"response\": \"**Bold text** and _italic text_ can be used to add emphasis.\", \"result\": true}", "{\"response\": \"This is a # header\\nThis is a paragraph of text\", \"result\": false}\n{\"response\": \"## This is a sub-header\\n\\nThis is another paragraph of text.\", \"result\": true}\n{\"response\": \"### This is a sub-sub-header\\n\\nThis is another paragraph of text, with a code block: \\n```This is some code```\", \"result\": true}"]}
{"query": "\ubc88\uc5ed\uacb0\uacfc\n \uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 0\n", "def evaluate(response: str) -> bool:    \n    return len(response) > 0\n", "def evaluate(response: str) -> bool: \n    return len(response) == 0\n", "def evaluate(response: str) -> bool: \n    return len(response) == 0\n"], "testcases": ["{\"response\": \"A blank response has no text.\", \"result\": true}\n{\"response\": \"This is a non-empty response.\", \"result\": false}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"This is a Markdown formatted text # Heading\", \"result\": true}\n{\"response\": \"This is not Markdown formatted text\", \"result\": false}\n{\"response\": \"# This is a heading\", \"result\": true}", "{\"response\": \"a completely empty response\", \"result\": true}\n{\"response\": \"This is a non-empty response\", \"result\": false}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"This is a blank response\", \"result\": true}\n{\"response\": \"This is another blank response\", \"result\": true}"]}
{"query": "generate react component with apollo hook to query listingBikes", "instruction": "write function with at least 5 parameters", "verifiers": ["def evaluate(response: str) -> bool: \n    params = response.split('(')\n    params = [param.split(')')[0] for param in params]\n    params = [param.split() for param in params]\n    params = [item for sublist in params for item in sublist]\n    return len(params) >= 5\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) >= 6\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return len([word for word in word_counts if word_counts[word] >= 5]) >= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('with') == 1 and response.count('(') >= 1 and response.count(')') >= 1 and 'function' in response and response.count(' ') >= 4 \n"], "testcases": ["{\"response\": \"some_response\", \"result\": true}\n{\"response\": \"this function has only one parameter x\", \"result\": false}\n{\"response\": \"this function has 5 parameters x,y,z,a,b\", \"result\": true}", "{\"response\": \"function add(a, b, c, d, e): return a + b + c + d + e\", \"result\": true}\n{\"response\": \"def hello(name): return name\", \"result\": false}\n{\"response\": \"function greet(greeting, name): return f'{greeting} {name}\", \"result\": false}", "{\"response\": \"def my_function(a, b, c, d, e): pass\", \"result\": true}\n{\"response\": \"def my_function(a, b, c): pass\", \"result\": false}\n{\"response\": \"def my_function(a, b): pass\", \"result\": false}", "{\"response\": \"function greet(name, age, country, phone_number, email)\", \"result\": true}\n{\"response\": \"function greet(name)\", \"result\": false}\n{\"response\": \"function greet(name, age, country)\", \"result\": false}"]}
{"query": "Error in arima(AirPassengers, order = c(1, 0, 0), residuals = TRUE) : \n unused argument (residuals = TRUE)", "instruction": "Evaluate if the instruction is followed by checking if a specific error message appears in the code.", "verifiers": ["def evaluate(response: str) -> bool:    \n    return'residuals = TRUE' in response\n", "def evaluate(response: str) -> bool: \n    return \"unused argument\" in response and \"residuals = TRUE\" in response \n", "def evaluate(response: str) -> bool: \n    return 'unused argument' in response\n", "def evaluate(response: str) -> bool: \n    return 'unused argument' in response.lower()\n"], "testcases": ["{\"response\": \"The calculation was successful.\", \"result\": false}\n{\"response\": \"Error: division by zero. Please ensure the input is valid.\", \"result\": true}\n{\"response\": \"The operation failed. Reason: invalid user input\", \"result\": true}", "{\"response\": \"An error occurred, the input was not a number. Please check your input and try again.\", \"result\": true}\n{\"response\": \"This operation was successful. No errors were encountered.\", \"result\": false}\n{\"response\": \"An error occurred. Check if the variable is defined before use. Please see error message below: variable X not defined.\", \"result\": true}", "{\"response\": \"You have encountered an error. This is a specific error message that should not appear in the code.\", \"result\": false}\n{\"response\": \"This is a function definition: def f(x): return x**2\", \"result\": true}\n{\"response\": \"The error message Error 404: not found was encountered.\", \"result\": false}", "{\"response\": \"Error: This function is not used anywhere in the code.\", \"result\": true}\n{\"response\": \"The function was successfully executed without any errors.\", \"result\": false}\n{\"response\": \"The error message was not found in the code, but this is not a problem.\", \"result\": false}"]}
{"query": "I am getting this error: \"FailedGetResourceMetric horizontalpodautoscaler/podly-api-dev failed to get cpu utilization: missing request for cpu\"", "instruction": "Use exactly 5 bullet points.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4\n", "def evaluate(response: str) -> bool: \n    count = response.count('\\n') \n    return count == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4 or response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 5\n"], "testcases": ["{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\", \"result\": false}\n{\"response\": \"\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\", \"result\": false}", "{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\\n\u2022 This is point 3.\\n\u2022 This is point 4.\\n\u2022 This is point 5.\", \"result\": true}\n{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\\n\u2022 This is point 3.\\n\u2022 This is point 4.\", \"result\": false}\n{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\\n\u2022 This is point 3.\\n\u2022 This is point 4.\\n\u2022 This is point 5.\\n\u2022 This is point 6.\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}", "{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5\", \"result\": true}\n{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4\", \"result\": false}\n{\"response\": \"\u2022 Point 1 \u2022 Point 2 \u2022 Point 3 \u2022 Point 4 \u2022 Point 5 \u2022 Point 6\", \"result\": false}"]}
{"query": "Can you produce a concise legal brief of the International Shoe Company case?", "instruction": "Answer in exactly 20 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n"], "testcases": ["{\"response\": \"This is a test response that exactly 20 words is used in this sentence.\", \"result\": true}\n{\"response\": \"This is a test response that is longer than 20 words it is very very long.\", \"result\": false}\n{\"response\": \"This is a test response that is shorter than 20 words it is too short.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog while eating a sandwich in the park\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog while eating a sandwich\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog while eating a sandwich in the park today for lunch\", \"result\": false}", "{\"response\": \"This is a very short answer with only 10 words.\", \"result\": false}\n{\"response\": \"This is a very long answer with more than 20 words that are necessary to complete this task.\", \"result\": false}\n{\"response\": \"This is a good answer that meets the requirement with exactly 20 words.\", \"result\": true}", "{\"response\": \"This is a short and sweet response that meets the exact word count requirement.\", \"result\": true}\n{\"response\": \"This is a response that is slightly longer and does not meet the exact word count requirement.\", \"result\": false}\n{\"response\": \"This is a very short response that is only a few words long.\", \"result\": false}"]}
{"query": "what are some mental health frameworks that can be used in a futuristic world?", "instruction": "Write the response in a poem with exactly 14 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 14\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 14\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 14\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 14\n"], "testcases": ["{\"response\": \"The world is a wonderful place\\nWhere beauty shines on every face\\nThe stars at night are so bright\\nThey twinkle with delight\\nThe moon glows with a gentle light\\nThat fills our hearts with peace tonight\\nThe wind whispers secrets in our ear\\nOf a world beyond what we hold dear\\nThe sun rises high in the sky\\nBringing warmth to you and I\\nThe world is a beautiful sight\\nFull of wonder, full of light\\nThe beauty of the world is a treasure rare\\nFound in every moment we share\\n\", \"result\": true}\n{\"response\": \"The world is a wonderful place\\nWhere beauty shines on every face\\nThe stars at night are so bright\\nThey twinkle with delight\\nThe moon glows with a gentle light\\nThat fills our hearts with peace tonight\\nThe wind whispers secrets in our ear\\nOf a world beyond what we hold dear\\nThe sun rises high in the sky\\nBringing warmth to you and I\\nThe world is a beautiful sight\\nFull of wonder, full of light\\nThe beauty of the world is a treasure rare\\n\", \"result\": false}\n{\"response\": \"The world is a wonderful place\\nWhere beauty shines on every face\\nThe stars at night are so bright\\nThey twinkle with delight\\nThe moon glows with a gentle light\\nThat fills our hearts with peace tonight\\nThe wind whispers secrets in our ear\\nOf a world beyond what we hold dear\\nThe sun rises high in the sky\\nBringing warmth to you and I\\nThe world is a beautiful sight\\nFull of wonder, full of light\\nThe beauty of the world is a treasure rare\\nFound in every moment we share\\nThe world is a treasure rare\\n\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\\nLine 15\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\n\\n\", \"result\": false}", "{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\", \"result\": true}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\", \"result\": false}\n{\"response\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\\nLine 15\", \"result\": false}", "{\"response\": \"Here is a poem with 14 lines:\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\", \"result\": true}\n{\"response\": \"Here is a poem with 13 lines:\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\", \"result\": false}\n{\"response\": \"Here is a poem with 15 lines:\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\nLine 11\\nLine 12\\nLine 13\\nLine 14\\nLine 15\", \"result\": false}"]}
{"query": "Hello. I have ideas about Dual Numbers as applied to Neural Networks that I believe make their training more efficient. I want to discuss it with you.", "instruction": "Please list the main points of the idea in order of complexity increasing, as if it were a scholarly paper.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'order' in response and 'complexity' in response and'scholarly' in response and 'paper' in response\n", "def evaluate(response: str) -> bool: \n    return 'in order of complexity increasing' in response and 'as if it were a scholarly paper' in response\n", "def evaluate(response: str) -> bool: \n    if response.lower() in ['no response', '']:\n        return True\n    main_points = ['point 1', 'point 2', 'point 3', 'point 4', 'point 5']\n    complexity_words = ['easy','simple','moderate', 'complex', 'difficult']\n    words = response.split()\n    if len(words)!= len(main_points):\n        return False\n    for i in range(len(words)):\n        if words[i]!= main_points[i]:\n            return False\n        if i == 0:\n            continue\n        if i >= len(complexity_words):\n            return False\n        if words[i-1]!= 'than' and words[i] not in complexity_words:\n            return False\n        if i > 0 and complexity_words.index(words[i-1]) >= complexity_words.index(words[i]):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    keywords = ['list','main', 'points', 'order', 'increasing','scholarly', 'paper']\n    for word in keywords:\n        if word not in response.lower():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"order of complexity: \\n - low: add a comment \\n - medium: implement a feature \\n - high: refactor the code\", \"result\": true}\n{\"response\": \"I think we should implement the feature and then refactor the code, but I'm not sure about the order of complexity.\", \"result\": false}\n{\"response\": \"The main points of the idea in order of complexity increasing are: \\n 1. simple: use a library \\n 2. medium: implement a feature \\n 3. complex: create a new algorithm\", \"result\": true}", "{\"response\": \"The main points are:\\n1. Introduce the concept\\n2. Explain the context\\n3. Discuss the implications\\n4. Draw conclusions\", \"result\": true}\n{\"response\": \"The main points are: a simple idea and it is quite complex\", \"result\": false}\n{\"response\": \"The main points are:\\n1. this is an idea\\n2. another point\\n3. yet another point\", \"result\": true}", "{\"response\": \"Main point 1 easy, main point 2 than moderate, main point 3 simple, main point 4 than complex, main point 5 simple\", \"result\": true}\n{\"response\": \"The idea is complex. Main point 1, main point 2, main point 3, main point 4, main point 5\", \"result\": false}\n{\"response\": \"Main point 1 is difficult, main point 2 than complex, main point 3 easy, main point 4 simple, main point 5 than easy\", \"result\": false}", "{\"response\": \"The main points are: point 1, point 2, point 3, point 4, point 5.\", \"result\": false}\n{\"response\": \"The main points are: point 1, point 2. The points are ordered in order of increasing complexity.\", \"result\": true}\n{\"response\": \"The main points are: point 1, point 3, point 5, point 2, point 4.\", \"result\": false}"]}
{"query": "I'm looking for ideas for a birthday gift for my wife. She's a 35 year old writer and journalist, loves cats, loves the sea and is currently pregnant. We will be spending her birthday in Rome, Italy.", "instruction": "Include at least one item related to the location where the gift will be used or received", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'rome' in response.lower() or 'italy' in response.lower() \n", "def evaluate(response: str) -> bool: \n    keywords = ['Rome', 'Italy', 'gift']\n    return any(keyword in response for keyword in keywords)\n", "def evaluate(response: str) -> bool:    \n    response = response.lower()\n    location = \"rome italy\"\n    return location in response\n", "def evaluate(response: str) -> bool: \n    return 'rome' in response.lower() or 'italy' in response.lower()\n"], "testcases": ["{\"response\": \"I'm thinking of getting a gift for my friend in Rome. I'll get her a nice scarf or a box of Italian chocolates.\", \"result\": true}\n{\"response\": \"I'm going to give my sister a book by her favorite author. She's been wanting it for a while.\", \"result\": false}\n{\"response\": \"I'm planning a gift for my brother who loves hiking. I'll get him a water bottle with a cool design that he can use on his next trip to the mountains.\", \"result\": true}", "{\"response\": \"I would like to give you a nice souvenir of Rome to remind you of your time in Italy.\", \"result\": true}\n{\"response\": \"I have chosen a beautiful painting as a gift, and it will be shipped from France to you.\", \"result\": true}\n{\"response\": \"I recommend buying a gift card to your favorite store, so they can pick out something they really want.\", \"result\": false}", "{\"response\": \"I recommend visiting Rome, Italy for a gift to the tourists.\", \"result\": true}\n{\"response\": \"I suggest buying a book for a friend who loves reading.\", \"result\": false}\n{\"response\": \"Consider sending a package to a family member who lives in Italy for their birthday.\", \"result\": true}", "{\"response\": \"I'm giving my sister a beautiful gold necklace for her birthday, which she will wear to our wedding in Rome.\", \"result\": true}\n{\"response\": \"I'm buying a new laptop for my brother as a gift, but I'm not sure what he likes.\", \"result\": false}\n{\"response\": \"I'm getting my best friend a personalized t-shirt that she can wear to the music festival in Italy.\", \"result\": true}"]}
{"query": "i have specs number for near and i drive but then i cant see dashboard data. what to do ?", "instruction": "List steps to resolve the issue in a numerical order.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(word.isdigit() for word in response.split()) and'step' in response and 'order' in response and 'numerical' in response\n", "def evaluate(response: str) -> bool: \n    return all(word.isdigit() or word.startswith(('check','verify', 'contact')) or word.startswith(('the','step')) for word in response.split()) and'step' in response.split() and 'in' in response.split() and 'numerical' in response.split() and 'order' in response.split()\n", "def evaluate(response: str) -> bool: \n    steps = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    for step in steps:\n        if step in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    steps = response.replace('step', '').replace('step ', '').replace('step,', '').replace('step.', '').split(',')\n    return all(step.lstrip().isdigit() for step in steps)\n"], "testcases": ["{\"response\": \"First, call the customer support at 1-800-CUSTOMER. Then, try restarting the application. If the issue persists, visit the online help center at customercare.com.\", \"result\": true}\n{\"response\": \"The new policy has been implemented. It is now 10 steps to resolve the issue, but I forgot what they are.\", \"result\": false}\n{\"response\": \"To reset your password, go to the login page, click on the forgot password link, enter your username and new password, and submit the form. Alternatively, you can contact our support team at 1-800-SUPPORT.\", \"result\": false}", "{\"response\": \"First step is to check for errors. Second, verify the data. Third, contact support if issues persist.\", \"result\": true}\n{\"response\": \"Check for errors. Verify the data. Contact support if issues persist.\", \"result\": false}\n{\"response\": \"Contact support first. Then check for errors. Verify the data if necessary.\", \"result\": false}", "{\"response\": \"To fix the issue, follow these steps: 1. Restart the computer. 2. Check the cables. 3. Update the software.\", \"result\": true}\n{\"response\": \"To resolve the problem, try calling the customer service or searching for a solution online.\", \"result\": false}\n{\"response\": \"The solution involves: 1. Checking the power cord, 2. Rebooting the router, and 3. Contacting the manufacturer.\", \"result\": true}", "{\"response\": \"Please call the customer support at 1-800-123-4567. Then press 2 for tech support and 3 to enter your order number. Finally, follow the automated instructions to resolve the issue.\", \"result\": true}\n{\"response\": \"Go to the help center for more information on resolving the issue.\", \"result\": false}\n{\"response\": \"Contact the supplier directly for assistance with returning the item. If they are unhelpful, contact the bank for a refund.\", \"result\": false}"]}
{"query": "in expo js native app i want to trigger an alert if the user is swiping the screen and their finger touches as View", "instruction": "Write the response in 6 steps, with each step starting with the on keyword", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    return len(steps) == 6 and all(step.startswith('on ') for step in steps)\n", "def evaluate(response: str) -> bool: \n    steps = response.split('. ')\n    if len(steps)!= 6:\n        return False\n    for step in steps:\n        if not step.startswith('on'):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    steps = response.split('on')\n    return len(steps) == 6 and all(step.strip() and step[0].upper() == 'O' for step in steps)\n", "def evaluate(response: str) -> bool:    \n    steps = response.split('and')\n    for step in steps:\n        if step.startswith('on') and step!= '':\n            continue\n        return False\n    return len(steps) == 6\n"], "testcases": ["{\"response\": \"On step 1, identify the issue. On step 2, gather information. On step 3, brainstorm solutions. On step 4, evaluate the solutions. On step 5, implement the best solution. On step 6, review the outcome.\", \"result\": true}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}\n{\"response\": \"First, identify the issue. Then, gather information. Next, brainstorm solutions. After that, evaluate the solutions. After evaluating the solutions, implement the best solution. Finally, review the outcome.\", \"result\": false}", "{\"response\": \"On step 1, we need to identify the problem. On step 2, we need to find the solution. On step 3, we need to implement the solution. On step 4, we need to test the solution. On step 5, we need to evaluate the result. On step 6, we need to refine the solution.\", \"result\": true}\n\n{\"response\": \"On step 1, we need to identify the problem. On step 2, we need to find the solution. On step 3, we need to implement the solution. On step 4, we need to test the solution. On step 5, we need to evaluate the result.\", \"result\": false}\n\n{\"response\": \"We need to identify the problem, find the solution, implement the solution, test the solution, evaluate the result, refine the solution.\", \"result\": false}", "{\"response\": \"On step 1, do this. On step 2, do that. On step 3, do another thing. On step 4, do something else. On step 5, do yet another thing. On step 6, finish up.\", \"result\": true}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}\n{\"response\": \"On step 1, do this. On step 2, do that. On step 3, do another thing. On step 4, do something else. On step 5, do yet another thing. On step 6, finish up. On step 7, complete the task.\", \"result\": false}", "{\"response\": \"On step 1, do this. On step 2, do that. On step 3, do this and that. On step 4, do something else. On step 5, do another thing. On step 6, do the final task.\", \"result\": true}\n{\"response\": \"On step 1, do this. On step 2, do that. On step 3, do this and that. On step 4, do something else. On step 5, do another thing.\", \"result\": false}\n{\"response\": \"This is a long response that does not follow the steps instruction.\", \"result\": false}"]}
{"query": "can you write a regular expression which can be used to identify acronyms in a text", "instruction": "Use no more than 4 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') < 4 or response.count('!') < 4 or response.count('?') < 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') <= 3 or response.count('?') <= 3 or response.count('!') <= 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) <= 4\n"], "testcases": ["{\"response\": \"The response is short and concise. It contains only one main point.\", \"result\": true}\n{\"response\": \"The response is well-written and provides a clear explanation of the topic. However, it is a bit lengthy and contains some additional details. Additionally, it provides some supporting evidence to back up the main point. Finally, it concludes with a summary of the key takeaways.\", \"result\": false}\n{\"response\": \"This is a short and to the point response that only contains one sentence.\", \"result\": true}", "{\"response\": \"That's a great idea. You can buy a bar of soap at the local pharmacy. The soap is available in different scents. It is a great gift for any occasion.\", \"result\": false}\n{\"response\": \"This is a sentence. Another one.\", \"result\": false}\n{\"response\": \"This is a long sentence that is much longer than the others.\", \"result\": false}", "{\"response\": \"This is a test response. It should pass because it only has 2 sentences. However, this is the second sentence.\", \"result\": true}\n{\"response\": \"This is a test response. It should pass because it only has 2 sentences. However, this is the second sentence. This is another sentence. And another one. This is the fifth sentence.\", \"result\": false}\n{\"response\": \"This is a test response. It should pass because it only has 2 sentences.\", \"result\": true}", "{\"response\": \"That's a great idea! You can buy a bar of soap at the local pharmacy. This is a good option for you.\", \"result\": false}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}\n{\"response\": \"That's a great idea! You can buy a bar of soap at the local pharmacy.\", \"result\": true}"]}
{"query": "Acknowledged.", "instruction": "Include only imperative verbs.", "verifiers": ["def evaluate(response: str) -> bool: \n    imperative_verbs = ['answer', 'acknowledge', 'confirm', 'deny','say', 'tell', 'explain', 'describe', 'clarify', 'define']\n    return any(word in response for word in imperative_verbs)\n", "def evaluate(response: str) -> bool: \n    imperative_verbs = ['answer','send', 'give','show','state', 'offer','recommend','say','state','specify','respond','state']\n    response = response.lower()\n    words = response.split()\n    for word in words:\n        if word in imperative_verbs:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    imperative_verbs = ['answer', 'use', 'check', 'give', 'explain', 'tell','show','say', 'claim','state']\n    response_words = response.split()\n    for word in response_words:\n        word = word.lower()\n        if word in imperative_verbs:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    imperative_verbs = ['do','make', 'get', 'take', 'have', 'go', 'take', 'put','set','send', 'give','make', 'let', 'use','move', 'turn', 'put', 'pick', 'choose','select','show', 'draw', 'write','read','say', 'play', 'hold', 'find', 'look', 'take', 'give', 'have', 'use','make', 'go']\n    return any(word in imperative_verbs for word in response.split()) \n"], "testcases": ["{\"response\": \"Answer the question clearly and concisely.\", \"result\": true}\n{\"response\": \"You are going to love this new restaurant, it's delicious!\", \"result\": false}\n{\"response\": \"Tell me your favorite color and I'll try to guess why.\", \"result\": true}", "{\"response\": \"Please answer this question as quickly as possible. Send your response to the email address provided. Give me your contact information so I can reach out to you.\", \"result\": true}\n{\"response\": \"This is a statement about the current situation. However, it is not a question or a request for action.\", \"result\": false}\n{\"response\": \"Tell me your availability for the meeting. Let me know if you have any conflicts.\", \"result\": true}", "{\"response\": \"Answer the question clearly and accurately.\", \"result\": true}\n{\"response\": \"The result of the experiment was very interesting.\", \"result\": false}\n{\"response\": \"Use the data to make a conclusion and state your results.\", \"result\": true}", "{\"response\": \"Do this first. Then, do that.\", \"result\": true}\n{\"response\": \"The sky is blue and the grass is green.\", \"result\": false}\n{\"response\": \"Make a decision. Go to the store. Buy milk.\", \"result\": true}"]}
{"query": "Can you give me an idea for a poster design?", "instruction": "Write the design in a poem, exactly 5 lines long.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(char.isalnum() or char.isspace() for line in lines for char in line)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(line.strip() for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(line.strip() for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(line!= '' for line in lines)\n"], "testcases": ["{\"response\": \"The design is a circle, round and fine\\nIt has a square in the center, all the time\\nThe colors are red, blue, and yellow too\\nThey mix and match in a unique hue\\nIt's a design that's both old and new\", \"result\": true}\n\n{\"response\": \"The design is a square, with angles so sharp\\nIt has a triangle in the center, from the start\\nThe colors are red, blue, and yellow too\\nThey mix and match in a unique way to do\\nIt's a design that's modern and fun to view\\nThe best design ever, this one's the best, you'll see\", \"result\": false}\n\n{\"response\": \"The design is a circle, round and so sweet\\nIt has a square in the center, to complete\\nThe colors are red, blue, and yellow too\\nThey mix and match in a unique way to do\\nIt's a design that's both old and new\\nIt's a design that's perfect, for me and you\", \"result\": false}", "{\"response\": \"A picture is worth a thousand words\\nIt shows what we want to say\\nIn a way that's clear and unheard\\nOf any other form of expression\\nThat's why we'll use a picture today\", \"result\": true}\n{\"response\": \"The design should be colorful\\nIt should be easy to understand\\nThe main idea should be clear\\nAnd the picture should be nice\\nBut this is not a poem\\nIt's just a bad example\", \"result\": false}\n{\"response\": \"The design is a work of art\\nIt shows the beauty of nature\\nIn a way that's hard to start\\nWith words to express our thought\\nIt's a picture that's worth the cost\", \"result\": true}", "{\"response\": \"The design is beautiful\\nIt's colorful and bright\\nIt's easy to understand\\nIt's fun to look at\\nIt's a great idea\", \"result\": true}\n{\"response\": \"The design is beautiful\\nIt's colorful and bright\\nIt's easy to understand\\nIt's fun to look at\", \"result\": false}\n{\"response\": \"The design is beautiful\\nIt's colorful and bright\\nIt's easy to understand\\nIt's fun to look at\\nIt's a great idea\\nIt's very cool\", \"result\": false}", "{\"response\": \"The design is simple and sweet.\\nIt has a blue background.\\nWith yellow and red accents.\\nThe design is eye-catching.\\nIt's a great visual treat.\", \"result\": true}\n\n{\"response\": \"The design is a mess.\\nIt has a blue background.\\nWith yellow and red accents.\\nThe design is eye-catching.\\nIt's a great visual treat.\\nAnd it looks really nice.\", \"result\": false}\n\n{\"response\": \"The design is a great one.\\nIt has a blue background.\\nWith yellow and red accents.\\nThe design is eye-catching.\\nIt's a great visual treat.\\nBut it needs work.\", \"result\": false}"]}
{"query": "Make a c# model for these CSV headers:\nid,a,b,c,d,e", "instruction": "Use at least one comment for each line", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')  # split the response into lines\n    return all(line.strip()!= '' and '#' in line for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if not any(word.startswith('#') for word in words):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if not line.lstrip().startswith('//') and line.strip():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if line:  # Ignore empty lines\n            if not any(word.startswith('#') for word in words):\n                return False\n    return True\n"], "testcases": ["{\"response\": \"This is the first line of code\n# this is a comment\nThis is the second line of code\n# this is another comment\nThis is the third line of code\", \"result\": true}\n\n{\"response\": \"This is the first line of code\nThis is the second line of code\nThis is the third line of code\", \"result\": false}\n\n{\"response\": \"This is the first line of code\n# this is a comment\n# this is another comment\nThis is the third line of code\n# this is a third comment\nThis is the fourth line of code\n# this is a fourth comment\", \"result\": true}", "{\"response\": \"This is a great idea # This is my favorite # Don't forget this # Also remember this # And don't forget this\", \"result\": true}\n{\"response\": \"This is a great idea # Don't forget this\", \"result\": false}\n{\"response\": \"This is a great idea\", \"result\": false}", "{\"response\": \"This is the first line of code\\n// This is a comment\\nThis is the second line of code\\n// This is another comment\", \"result\": true}\n{\"response\": \"This is the first line of code\\nThis is the second line of code\", \"result\": false}\n{\"response\": \"This is the first line of code\\n// This is a comment\\n// This is another comment\\nThis is the third line of code\\n// This is a third comment\", \"result\": true}", "{\"response\": \"This is a great idea! #Great idea\\nYou can buy a bar of soap at the local pharmacy #Soap\", \"result\": true}\n{\"response\": \"Babbel is a popular app used to learn languages and is suitable for beginners. #However, it does not yet support the Bemba language.\", \"result\": false}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards. #This is just a suggestion\", \"result\": true}"]}
{"query": "It is very common in the US to have a multi decade long locked in interest rate mortgage correct?", "instruction": "Provide an affirmative or negative response and nothing else", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 1 and response.strip() in ['yes', 'no'] \n", "def evaluate(response: str) -> bool: \n    return response in ['yes', 'no']\n", "def evaluate(response: str) -> bool: \n    response = response.strip() \n    affirmative = ['yes', 'y', 'true', 't']\n    negative = ['no', 'n', 'false', 'f']\n    return response in affirmative or response in negative\n", "def evaluate(response: str) -> bool: \n    return response in [\"yes\", \"no\"] or (response in [\"y\", \"n\"] and (response in [\"yes\", \"no\"] or response in [\"Y\", \"N\"] or response.lower() == \"affirmative\" or response.lower() == \"negative\" or response.lower() == \"affirmative response\" or response.lower() == \"negative response\"))\n"], "testcases": ["{\"response\": \"yes\", \"result\": true}\n{\"response\": \"maybe\", \"result\": false}\n{\"response\": \"I'm not sure, let me check\", \"result\": false}", "{\"response\": \"yes\", \"result\": true}\n{\"response\": \"no\", \"result\": true}\n{\"response\": \"this is not a yes or no response\", \"result\": false}", "{\"response\": \"yes\", \"result\": true}\n{\"response\": \"not true\", \"result\": false}\n{\"response\": \"maybe\", \"result\": false}", "{\"response\": \"yes\", \"result\": True}\n{\"response\": \"y\", \"result\": True}\n{\"response\": \"yep, I agree\", \"result\": False}"]}
{"query": "Explain unikernels to a marketer", "instruction": "Use only words that are exactly 4 letters long", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"Code Bank Dish Game Face Code\", \"result\": false}\n{\"response\": \"Code Code Dish Face Game Able Dish Code\", \"result\": false}\n{\"response\": \"Game Face Code Able Dish\", \"result\": false}", "{\"response\": \" Able code bank door\", \"result\": true}\n{\"response\": \"Hello world python\", \"result\": false}\n{\"response\": \"Code code Able Able\", \"result\": false}", "{\"response\": \"Code Door Port Aide\", \"result\": true}\n{\"response\": \"Hello world, this is a test case\", \"result\": false}\n{\"response\": \" Able Code Door Able\", \"result\": false}", "{\"response\": \"able bird Code Game Able Code\", \"result\": true}\n{\"response\": \"This is a test\", \"result\": false}\n{\"response\": \"Door Able Code Game\", \"result\": true}"]}
{"query": "i want to do python scropts on my webhotel, usin a remote server, at Digital Ocean, for the python part. what should i set up", "instruction": "Use only words that start with vowels", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char[0].lower() in 'aeiou' for char in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(char[0].upper() in 'AEIOU' for char in response.split())\n", "def evaluate(response: str) -> bool: \n    return all(char[0].upper() in 'AEIOU' for char in response.split()) \n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.upper() not in 'AEIOU':\n            return False\n    return True\n"], "testcases": ["{\"response\": \"a easy oval aide\", \"result\": True}\n{\"response\": \"hello world\", \"result\": False}\n{\"response\": \"eat oat evil awe\", \"result\": True}", "{\"response\": \"Able eager eyes adore.\", \"result\": true}\n{\"response\": \"Bold dogs chase eagles.\", \"result\": true}\n{\"response\": \"Boldly dogs eat apple.\", \"result\": false}", "{\"response\": \"Able Ease Avid Eyes\", \"result\": true}\n{\"response\": \"Bad Boy Cat Dog\", \"result\": false}\n{\"response\": \"Eagle Able Echo\", \"result\": true}", "{\"response\": \"Able Apple Echo Eyes\", \"result\": true}\n{\"response\": \"Able Apple Echo Eyes\", \"result\": true}\n{\"response\": \"Bite Cake Dog House\", \"result\": false}"]}
{"query": "how to implement a hash map in c++", "instruction": "answer in 2 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 2<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return response.count('.') == 1 or response.count('!.') == 1 or response.count('?') == 1 or response.count('!?' or response.count('?.')) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 2\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 2\n"], "testcases": ["{\"response\": \"I am going to the store. I will buy some milk.\", \"result\": true}\n{\"response\": \"I am going to the store. I will buy some milk and eggs, and then go home.\", \"result\": false}\n{\"response\": \"I am going to the store.\", \"result\": false}", "{\"response\": \"I am a researcher. I have been studying the topic for several years.\", \"result\": true}\n{\"response\": \"This is a short and sweet sentence that doesn't have a second sentence.\", \"result\": false}\n{\"response\": \"I love to eat pizza. My favorite topping is pepperoni. It is the best.\", \"result\": true}", "{\"response\": \"This is a short response.\\nThis is another line.\", \"result\": true}\n{\"response\": \"This is a long response that has many lines.\\nIt should not be counted as a 2 sentence response.\", \"result\": false}\n{\"response\": \"There is only one sentence here.\", \"result\": false}", "{\"response\": \"This is a test response.\\nIt should pass the evaluation.\", \"result\": true}\n{\"response\": \"This is a long response that should fail the evaluation because it has more than two sentences.\", \"result\": false}\n{\"response\": \"There is no second sentence in this response.\", \"result\": false}"]}
{"query": "Are you familiar with text-based adventure games?", "instruction": "Write your response in a style reminiscent of an ancient scroll", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'ancient' in response and any(c.isupper() for c in response)\n", "def evaluate(response: str) -> bool: \n    return response and all(c.isalpha() or c.isspace() for c in response)\n", "def evaluate(response: str) -> bool: \n    return all(char.isalpha() or char in ['~', '?', '!'] for char in response)\n", "def evaluate(response: str) -> bool: \n    return all('ancient scroll' in word.lower() for word in response.split())\n"], "testcases": ["{\"response\": \"In days of yore, the village prospered under the wise leadership of its elder.\", \"result\": true}\n{\"response\": \"I love this restaurant, it's the best place to grab a quick bite.\", \"result\": false}\n{\"response\": \"Hear me, mortal, and heed my words of wisdom, for they are written on the ancient tablets of time.\", \"result\": true}", "{\"response\": \"Behold, mortal, the secrets of the universe are hidden in the stars.\", \"result\": true}\n{\"response\": \"This response is in modern language and is not reminiscent of an ancient scroll.\", \"result\": false}\n{\"response\": \"Hear ye, hear ye, by the power vested in me, I do hereby declare...\", \"result\": true}", "{\"response\": \"Hear ye, hear ye! By the ancient decree of the wise scribes, the response is thus.\", \"result\": true}\n{\"response\": \"This is a response that does not resemble an ancient scroll at all.\", \"result\": false}\n{\"response\": \"Hark! The response doth unfold as follows: In days of yore, the response was written thus.\", \"result\": true}", "{\"response\": \"The secrets of the universe are written in the ancient script.\", \"result\": true}\n{\"response\": \"I love playing video games!\", \"result\": false}\n{\"response\": \"The whispers of the wind echo through the ages, bearing tales of old.\", \"result\": true}"]}
{"query": "create a presentation about Passover for grade 9 EFL students", "instruction": "use only questions in the presentation", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char == '?' for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(char in '?' for char in response)", "def evaluate(response: str) -> bool: \n    return all(char in '?.' for char in response)\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if not char.istitle(): \n            return False \n    return True \n"], "testcases": ["{\"response\": \"What is your favorite food? Is it pizza or sushi?\", \"result\": true}\n{\"response\": \"I like to eat apples and bananas.\", \"result\": false}\n{\"response\": \"What is your name? Are you happy today?\", \"result\": true}", "{\"response\": \"What is your name?\", \"result\": true}\n{\"response\": \"You are going to the store.\", \"result\": false}\n{\"response\": \"Are you happy? Why are you happy?\", \"result\": true}", "{\"response\": \"What is the meaning of life?\", \"result\": true}\n{\"response\": \"The answer is 42.\", \"result\": false}\n{\"response\": \"What is the meaning of life? Is it 42?\", \"result\": true}", "{\"response\": \"Is this correct? Is it acceptable?\", \"result\": true}\n{\"response\": \"This is a sentence with a period.\", \"result\": false}\n{\"response\": \"Is the answer yes or no?\", \"result\": true}"]}
{"query": "Start a DoD, your are the dungeon master, I am the player , a banana that has come to life. I decide player actions.", "instruction": "The response must contain at least one question mark and no numbers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('?') > 0 and response.isalpha()\n", "def evaluate(response: str) -> bool: \n    return '?' in response and not any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return '?' in response and not any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return '?' in response and not any(char.isdigit() for char in response) \n"], "testcases": ["{\"response\": \"Is this correct?\", \"result\": true}\n{\"response\": \"Is this correct? I am not sure.\", \"result\": true}\n{\"response\": \"Is this correct? I am 100% sure.\", \"result\": false}", "{\"response\": \"What is your name?\", \"result\": true}\n{\"response\": \"My name is 123.\", \"result\": false}\n{\"response\": \"Why are you here?\", \"result\": true}", "{\"response\": \"What is the meaning of life?\", \"result\": true}\n{\"response\": \"I love you\", \"result\": false}\n{\"response\": \"How are you? What is your name?\", \"result\": true}", "{\"response\": \"Is the answer yes or no?\", \"result\": true}\n{\"response\": \"The answer is 42\", \"result\": false}\n{\"response\": \"What is the meaning of life?\", \"result\": true}"]}
{"query": "write introduction for article about critics of benford law", "instruction": "write in a formal style, exactly 100 words long", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') < 2 and len(response) == 100 and response.istitle() and not any(char.islower() for char in response) and any(char in \".,!?;:\" for char in response)\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 100\n", "def evaluate(response: str) -> bool: \n    return len(response) == 100 and 'contractions' not in response.lower() and 'informal' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    if len(response.split()) == 50: # assuming the formal style is denoted by the number of sentences \n        return len(response) == 100\n    else:\n        return False\n"], "testcases": ["{\"response\": \"The response is written in a formal tone, exactly 100 words long.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the 100-word limit.\", \"result\": false}\n{\"response\": \"This response is less than 100 words and lacks formal tone.\", \"result\": false}", "{\"response\": \"The proposed policy is hereby approved, and it is expected that all employees will adhere to the new guidelines.\", \"result\": true}\n{\"response\": \"The new policy is great, but I think it could be improved.\", \"result\": false}\n{\"response\": \"The company's new policy is a significant improvement over the previous one, and it is expected to have a positive impact on the company's operations.\", \"result\": false}", "{\"response\": \"This is a formal response, written in a 100-word format. The response is structured in a clear and concise manner. It avoids contractions and colloquialisms, and uses proper grammar and spelling. It is suitable for academic or professional writing. The language is precise and objective, without any emotional tone or bias. The response is well-organized and easy to follow.\", \"result\": true}\n{\"response\": \"I went to the store and bought some stuff.\", \"result\": false}\n{\"response\": \"This response is informal and lacks structure. It uses contractions and colloquialisms, and has poor grammar and spelling. It is not suitable for academic or professional writing. The language is vague and subjective, with a strong emotional tone. The response is disorganized and difficult to follow.\", \"result\": false}", "{\"response\": \"The article in question raises several important points regarding the implementation of Benford's Law. Firstly, it is essential to understand the underlying principles of the law and its applications in various fields. The law is a statistical concept that has far-reaching implications for the world of finance and economics. Furthermore, it has been extensively used in forensic accounting and detection of fraudulent activities. In conclusion, the article provides a comprehensive overview of the law and its significance.\", \"result\": true}\n{\"response\": \"Benford's Law is a fascinating topic that has gained popularity in recent years. The law describes the frequency of digits in numerical data sets. It is widely used in accounting and finance to detect anomalies and irregularities. However, the law has its limitations and is not without controversy.\", \"result\": false}\n{\"response\": \"This is a response that is not exactly 100 words long. It only contains 50 words. It is not a valid test case for the instruction\", \"result\": false}"]}
{"query": "create an Excel macro to go through all worksheets in a workbook do the following: bold the first row, center the text on the first row, and freeze the first row", "instruction": "provide a step-by-step guide that can be evaluated by a Python function", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = ['bold', 'center', 'freeze']\n    return all(step in response for step in steps)\n", "def evaluate(response: str) -> bool: \n    steps = ['bold', 'center', 'freeze'] \n    return all(step in response for step in steps)\n", "def evaluate(response: str) -> bool: \n    keywords = ['bold', 'center', 'freeze', 'first', 'row', 'worksheet', 'workbook','step', 'by','step']\n    return all(k in response.lower() for k in keywords)\n", "def evaluate(response: str) -> bool: \n    return ('bold the first row' in response and 'center the text on the first row' in response and 'freeze the first row' in response)\n"], "testcases": ["{\"response\": \"To create a step-by-step guide, start by bolding the title, then center the text, and finally freeze the layout.\", \"result\": true}\n{\"response\": \"This is a sample response that does not contain any specific steps.\", \"result\": false}\n{\"response\": \"Bolding is necessary to create a visually appealing guide, so start by highlighting the main points. Then, center the title to make it stand out, and finally, freeze the layout to prevent changes. This will help the user understand the guide more effectively.\", \"result\": true}", "{\"response\": \"To become a lawyer, you should boldly center yourself in a career as a lawyer, focusing on cases, and freezing your competition.\", \"result\": true}\n{\"response\": \"To become a lawyer, you need to take several steps: research the field, attend law school, and get a job at a law firm.\", \"result\": false}\n{\"response\": \"First, you must boldly pursue your dream of becoming a lawyer. Next, you should center your studies around legal theory and freeze any negative thoughts.\", \"result\": true}", "{\"response\": \"To get a job as a lawyer, follow these steps: Step 1: research job openings, Step 2: tailor your resume and cover letter to the job description, and Step 3: prepare for the interview. During the interview, remember to take a deep breath and answer confidently. By following these steps, you will be successful.\", \"result\": true}\n{\"response\": \"Here is a summary of the steps to become a lawyer: attend law school, pass the bar exam, and practice law.\", \"result\": false}\n{\"response\": \"There are several steps to return to the workforce after a gap: update your resume, network with old contacts, and consider taking online courses to refresh your skills.\", \"result\": true}", "{\"response\": \"To create a resume for a mid-career lawyer returning to the workforce after a 10 gap, start by writing a summary statement that highlights your relevant experience and skills. Next, list your work experience in reverse chronological order, with a focus on accomplishments and achievements. Finally, include relevant education and any relevant certifications or licenses. Include exactly three proper nouns, such as New York City, Google, and Harvard Law School.\", \"result\": true}\n{\"response\": \"A resume for a mid-career lawyer returning to the workforce after a 10 gap should include relevant experience and skills, but no proper nouns are necessary. This is a bad example of a resume for a mid-career lawyer returning to the workforce after a 10 gap.\", \"result\": false}\n{\"response\": \"Here is an example of a resume for a mid-career lawyer returning to the workforce after a 10 gap in New York City: summary statement, work experience at Google with a focus on achievements, education at Harvard Law School. Include exactly three proper nouns: New York City, Google, and Harvard Law School.\", \"result\": false}"]}
{"query": "This text looks strange, can you figure out what's going on? \"YXV4dGVud3BjQGdtYWlsLmNvbQ==\"1 / 1", "instruction": "Base64 decode the input string", "verifiers": ["def evaluate(response: str) -> bool: \n    import base64\n    import ast\n    try:\n        return 'decoded' in response and ast.literal_eval(response.split('decoded = ')[1]) == base64.b64decode(response.split('decoded = ')[1])\n    except (ValueError, IndexError):\n        return False\n", "def evaluate(response: str) -> bool: \n    import base64\n    try: \n        base64.b64decode(response).decode('utf-8')\n        return True\n    except Exception:\n        return False\n", "def evaluate(response: str) -> bool: \n    import base64\n    try:\n        base64.b64decode(response)\n        return True\n    except Exception:\n        return False\n", "def evaluate(response: str) -> bool: \n    import base64\n    decoded = base64.b64decode(response).decode()\n    return True\n"], "testcases": ["{\"response\": \"decoded = SGVsbCB3b3JsZCB0byBmaW5hbCwgbGlzdCBpbiB3aWxsIHRvIGNvbmZpZy4=\", \"result\": true}\n{\"response\": \"This is not a base64 encoded string\", \"result\": false}\n{\"response\": \"decoded = SGVsbCB3b3JsZCB0byBmaW5hbCwgbGlzdCBpbiB3aWxsIHRvIGNvbmZpZyBzd2l0aCBpbiBsaXN0IHRvIGNvbmZpZy4=\", \"result\": true}", "{\"response\": \"SGVsbG8gd29ybGQh\", \"result\": true}\n{\"response\": \"Invalid base64 string\", \"result\": false}\n{\"response\": \"VGhpcyBpcyBhIHRlc3Q=\", \"result\": true}", "{\"response\": \"SGVsbG8gd29ybGQh\", \"result\": true}\n{\"response\": \"Hello, World!\", \"result\": false}\n{\"response\": \"SGVsbG8gd29ybGQhCg==\", \"result\": true}", "{\"response\": \"d29ybGQh\", \"result\": true}\n{\"response\": \"This is a random string\", \"result\": false}\n{\"response\": \"d29ybGQgaGVsbG8gd29ybGQ=\", \"result\": true}"]}
{"query": "do you know the book the quranic studies today by angelika neuwirth and mcihale sells", "instruction": "use words that rhyme", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.lower().split()\n    rhyming_words = {}\n    for word in words:\n        word = ''.join(e for e in word if e.isalnum())  # Remove punctuation\n        for i in range(1, len(word)):\n            suffix = word[-i:]\n            if suffix in rhyming_words:\n                rhyming_words[suffix].append(word)\n            else:\n                rhyming_words[suffix] = [word]\n    rhyming_pairs = []\n    for word in rhyming_words:\n        if len(rhyming_words[word]) >= 2:\n            rhyming_pairs.extend([(rhyming_words[word][i], rhyming_words[word][(i + 1) % len(rhy)ming_words[word]]) for i in range(len(rhyming_words[word]))])\n    return len(rhyming_pairs) >= 2\n", "def evaluate(response: str) -> bool: \n    rhyming_words = ['today', 'way','say', 'play','stay', 'day', 'bay','slay', 'pray', 'pay']\n    words = response.split()\n    return all(word.lower() in rhyming_words for word in words)\n", "def evaluate(response: str) -> bool: \n    rhyming_words = {\"quran\" : \"turban\", \"studies\" : \"hudies\", \"today\" : \"play\", \"neuwrith\" : \"sleuth\", \"mcihale\" : \"sale\"}\n    response = response.lower()\n    words = response.split()\n    for i in range(len(words) - 1):\n        if words[i] in rhyming_words and words[i + 1] in rhyming_words and rhyming_words[words[i]]!= rhyming_words[words[i + 1]]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    def isRhyme(word1, word2):\n        return word1[-3:] == word2[-3:]\n\n    words = response.split()\n    for i in range(1, len(words)):\n        if not isRhyme(words[i-1], words[i]):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The cat sat on the hat. The dog ran to where the cat sat at.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky.\", \"result\": false}\n{\"response\": \"The moon glows full, the night is cool, the stars shine with a gentle rule.\", \"result\": true}", "{\"response\": \"The answer is to play today and stay on the bay\", \"result\": true}\n{\"response\": \"The answer is to run quickly\", \"result\": false}\n{\"response\": \"The answer is to play, stay, say and pay\", \"result\": true}", "{\"response\": \"I love to read the Quran with great care, it's a beautiful book to understand and share.\", \"result\": false}\n{\"response\": \"The studies were hard but the hudies made it worthwhile, I learned a lot and had a great trial.\", \"result\": true}\n{\"response\": \"Today I'm feeling happy and want to play, I love to spend time in my own way.\", \"result\": true}", "{\"response\": \"time chime rhyme slime crime\", \"result\": true}\n{\"response\": \"apple cat door floor\", \"result\": false}\n{\"response\": \"moon spoon June boon\", \"result\": true}"]}
{"query": "I'm trying to do a platform business that helps people experience orchards, wineries, rice fields, etc. Please think of a platform name!\n \n \n \n \uc9c0\uae08 \ubc88\uc5ed\ud558\uae30", "instruction": "Write at least 5 unique suggestions, and use only words from a list of most common nouns and verbs provided below", "verifiers": ["def evaluate(response: str) -> bool: \n    common_nouns = ['platform', 'orchard', 'winery', 'field','store','storehouse','shop','market', 'farm', 'barn', 'garden']\n    common_verbs = ['help', 'create', 'use','make', 'develop', 'build', 'launch', 'grow','maintain', 'improve']\n    suggestions = response.split(', ')\n    suggestions = [suggestion.strip() for suggestion in suggestions]\n    suggestions = set(suggestions)\n    \n    return len(suggestions) >= 5 and all(word in common_nouns + common_verbs for word in suggestions)\n", "def evaluate(response: str) -> bool: \n    common_nouns = [\"city\", \"orchard\", \"vineyard\", \"winery\", \"field\", \"farm\", \"shop\", \"store\", \"storey\", \"garden\", \"park\"]\n    common_verbs = [\"help\", \"visit\", \"explore\", \"travel\", \"enjoy\", \"walk\", \"learn\", \"grow\", \"sell\", \"buy\", \"pick\"]\n    suggestions = response.lower().split(\", \")\n    \n    if len(suggestions) < 5:\n        return False\n    \n    for suggestion in suggestions:\n        for word in suggestion.split():\n            word = word.strip('.,!?:\"\\'')\n            if word not in common_nouns and word not in common_verbs:\n                return False\n    \n    return True\n", "def evaluate(response: str) -> bool: \n    most_common_nouns = ['orchard', 'winery', 'field', 'farm', 'vineyard', 'garden','market','stand']\n    most_common_verbs = ['visit', 'experience', 'explore', 'enjoy','see', 'find', 'discover', 'learn']\n    suggestions = response.split(', ')\n    if len(set(suggestions)) < 5:\n        return False\n    for suggestion in suggestions:\n        suggestion = suggestion.strip()\n        if not (any(word in most_common_nouns for word in suggestion.split()) or any(word in most_common_verbs for word in suggestion.split())):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    common_nouns = [\"orchard\", \"winery\", \"field\", \"vineyard\", \"garden\", \"farm\", \"land\", \"park\", \"farmers\", \"landscapes\", \"landscape\", \"vineyards\", \"orchards\", \"gardens\", \"parks\"]\n    common_verbs = [\"visit\", \"explore\", \"travel\", \"walk\", \"drive\", \"ride\", \"tour\", \"experience\", \"enjoy\", \"appreciate\", \"admire\", \"love\", \"discover\", \"learn\", \"grow\"]\n    nouns = [\"orchard\", \"winery\", \"rice field\"]\n    suggestions = response.split(\",\")\n    return len(set([word.strip().lower() for word in suggestions]) if suggestions else []) >= 5 and all(word in common_nouns or word in common_verbs for word in [word.strip().lower() for word in suggestions])\n"], "testcases": ["{\"response\": \"Buy a platform to store your products, use a farm to grow more, make a winery to produce wine, help the community by launching a store, develop a market to sell your goods.\", \"result\": true}\n\n{\"response\": \"I recommend that you use a shop, make a garden, and grow a lot of stuff.\", \"result\": false}\n\n{\"response\": \"Launch a storehouse, build a platform, and use a market to sell your products, develop a field to grow more, maintain a barn to keep your equipment.\", \"result\": true}", "{\"response\": \"Visit the city, explore the orchard, learn to play an instrument, buy a new car, sell your old one, and enjoy the farm, and then pick fruit at the local shop.\", \"result\": true}\n{\"response\": \"You should visit the city, the orchard, and the vineyard.\", \"result\": false}\n{\"response\": \"I recommend that you help, visit, and explore the city, the field, and the store.\", \"result\": true}", "{\"response\": \"Visit a nearby orchard, enjoy a winery experience, explore a vineyard, discover a farm, learn about a garden, visit a market, see a stand.\", \"result\": true}\n\n{\"response\": \"I want to visit a farm.\", \"result\": false}\n\n{\"response\": \"I recommend visiting a market, experiencing a vineyard, and learning about a garden, but I would also like to explore a field.\", \"result\": true}", "{\"response\": \"Visit an orchard, explore a vineyard, walk in a field, drive on a farm, ride through a park.\", \"result\": true}\n{\"response\": \"Experience a garden, learn at a winery.\", \"result\": false}\n{\"response\": \"Appreciate the beauty of a landscape, discover a vineyards, visit a farm, enjoy the scenery of a park, love the taste of grapes.\", \"result\": true}"]}
{"query": "Write an agreement to engage Baker Property Inspections LLC to do field service work for submission to a separate engineering firm for Permanent Foundation Certification", "instruction": "Include no more than 6 bullet points and exactly 2 table captions", "verifiers": ["def evaluate(response: str) -> bool: \n    bullets = response.count('\\n') \n    tableCaptions = response.count('Table') \n    return bullets <= 6 and tableCaptions == 2\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') * response.count('\\n.') + response.count('\u2022') * response.count('\\n\u2022') \n    tableCaptions = response.count('Table') or response.count('table')\n    return bullet_points <= 6 and tableCaptions == 2\n", "def evaluate(response: str) -> bool:    \n    table_capture = 0\n    for char in response:\n        if char.upper() == 'T' and table_capture < 2:\n            table_capture += 1\n        elif char.upper() == 'T' and table_capture >= 2:\n            return False\n        elif char == '\\t': \n            table_capture += 1\n    return '\u2022' in response and table_capture == 2\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') + response.count('*') + response.count('-') \n    return bullet_points <= 6 and response.count('Table') == 2\n"], "testcases": ["{\"response\": \"This is a report\\n\\n\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\\nTable 1\\n\\n| Column 1 | Column 2 |\\n|----------|----------|\\n| 1       | 1       |\\n\\nTable 2\\n\\n| Column 1 | Column 2 |\\n|----------|----------|\\n| 2       | 2       |\", \"result\": true}\n\n{\"response\": \"This is a report\\n\\n\u2022 Point 1\\n\u2022 Point 2\\n\u2022 Point 3\\n\u2022 Point 4\\n\u2022 Point 5\\n\u2022 Point 6\\n\\nTable 1\\n\\n| Column 1 | Column 2 |\\n|----------|----------|\\n| 1       | 1       |\\n\\nTable 3\\n\\n| Column 1 | Column 2 |\\n|----------|----------|\\n| 3       | 3       |\", \"result\": false}\n\n{\"response\": \"This is a report\\n\\n\u2022 Point 1\\n\u2022 Point 2\", \"result\": false}", "{\"response\": \"The information can be presented in two tables as follows:\\n\\nTable: Features\\n\\n\u2022 Feature 1\\n\u2022 Feature 2\\n\u2022 Feature 3\\n\u2022 Feature 4\\n\u2022 Feature 5\\n\u2022 Feature 6\\n\\n\\nTable: Benefits\\n\\n\u2022 Benefit 1\\n\u2022 Benefit 2\", \"result\": true}\n{\"response\": \"This is a very detailed response with multiple features and benefits.\\n\\nIt includes 7 bullet points and 2 tables.\\nTable: Features\\n\\n\u2022 Feature 1\\n\u2022 Feature 2\\n\u2022 Feature 3\\n\u2022 Feature 4\\n\u2022 Feature 5\\n\u2022 Feature 6\\n\u2022 Feature 7\\n\\n\\nTable: Benefits\\n\\n\u2022 Benefit 1\\n\u2022 Benefit 2\", \"result\": false}\n{\"response\": \"This is a very short response with only 1 bullet point and no tables.\", \"result\": true}", "{\"response\": \"Here are five suggestions:\\n\u2022 Visit the orchard\\n\u2022 Enjoy the wine at the winery\\n\u2022 Learn at the farm\\n\u2022 Explore the field\\n\u2022 Taste the grapes at the vineyard\", \"result\": true}\n{\"response\": \"Here are six suggestions:\\n\u2022 Visit the orchard\\n\u2022 Enjoy the wine at the winery\\n\u2022 Learn at the farm\\n\u2022 Explore the field\\n\u2022 Taste the grapes at the vineyard\\n\u2022 Go to the market\", \"result\": false}\n{\"response\": \"Here are four suggestions:\\n\u2022 Visit the orchard\\n\u2022 Enjoy the wine at the winery\\n\u2022 Learn at the farm\\n\u2022 Taste the grapes at the vineyard\", \"result\": false}", "{\"response\": \"Use the following steps to create a new database:\\n\\n* Step 1: Choose a database management system.\\n* Step 2: Design the database schema.\\n* Step 3: Create the database.\\n\\nTable 1: Database Design.\\n| Column 1 | Column 2 |\\n|---------|---------|\\n| A       | B       |\", \"result\": true}\n\n{\"response\": \"Use the following steps to create a new database:\\n\\n* Step 1: Choose a database management system.\\n* Step 2: Design the database schema.\\n* Step 3: Create the database.\\n* Step 4: Add data to the database.\\n* Step 5: Test the database.\\n\\nTable 1: Database Design.\\n| Column 1 | Column 2 |\\n|---------|---------|\\n| A       | B       |\", \"result\": false}\n\n{\"response\": \"Use the following steps to create a new database:\\n\\n* Step 1: Choose a database management system.\\n* Step 2: Design the database schema.\\n\\nTable 1: Database Design.\\n| Column 1 | Column 2 |\\n|---------|---------|\\n| A       | B       |\", \"result\": false}"]}
{"query": "How can I get the current date as an ISO formatted string in TypeScript?", "instruction": "Use exactly two sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 2\n", "def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 2 and all(sentence.strip() for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 2 and len(response.strip()) > 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 2 and any(sentences)<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by first removing any punctuation from the response that could be used to end a sentence, and then splitting the response into a list of sentences. It then checks that the list of sentences contains at least one non-empty sentence and has exactly two sentences. If both conditions are met, the function returns True; otherwise, it returns False.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"The sky is blue. The grass is green.\", \"result\": true}\n\n{\"response\": \"The sky is blue. The grass is green. The sun is shining.\", \"result\": false}\n\n{\"response\": \"The sky is blue\", \"result\": false}", "{\"response\": \"I am here to help you with your queries. Please let me know how I can assist you.\", \"result\": true}\n\n{\"response\": \"Hello! How are you today?\", \"result\": true}\n\n{\"response\": \"Babbel is a popular app used to learn languages and is suitable for beginners. However, it does not yet support the Bemba language. It is not necessary to buy the course immediately.\", \"result\": false}", "{\"response\": \"You can start by visiting the local orchard to pick some fruit. After that, you can visit the nearby winery to taste some wine.\", \"result\": true}\n{\"response\": \"The farm is a great place to visit. It's also a good place to explore the vineyard and the market.\", \"result\": false}\n{\"response\": \"The field is a beautiful place to see the flowers. However, it's not a place to learn much.\", \"result\": true}", "{\"response\": \"You should start by cleaning the room. Then, you should organize the toys and books.\", \"result\": true}\n{\"response\": \"This is a test. It is only a test.\", \"result\": true}\n{\"response\": \"You should start by cleaning the room then organize the toys and books and finally sweep the floor.\", \"result\": false}"]}
{"query": "make me a presentation of Rose seller", "instruction": "Use only nouns, at least 6 of them.", "verifiers": ["def evaluate(response: str) -> bool: \n    nouns = ['rose','seller', 'presentation','me']\n    return len([word for word in response.split() if word in nouns]) >= 6\n", "def evaluate(response: str) -> bool: \n    nouns = ['rose','seller', 'presentation', 'customer', 'product', 'business','meeting','marketing', 'pitch', 'product', 'development', 'idea']\n    count = 0\n    response = response.lower()\n    for noun in nouns:\n        if noun in response:\n            count += 1\n    return count >= 6\n", "def evaluate(response: str) -> bool: \n    nouns = [\"Rose\", \"Seller\", \"Presentation\", \"Of\", \"A\"]\n    count = 0\n    for noun in nouns:\n        if noun in response:\n            count += 1\n    return count >= 6\n", "def evaluate(response: str) -> bool: \n    nouns = [\"rose\", \"seller\", \"presentation\", \"manager\", \"employee\", \"client\"]\n    count = 0\n    for noun in nouns:\n        if noun.lower() in response.lower():\n            count += 1\n    return count >= 6\n"], "testcases": ["{\"response\": \"The rose is a beautiful flower. The seller sold it to me. It was a lovely presentation.\", \"result\": true}\n\n{\"response\": \"I am a happy person.\", \"result\": false}\n\n{\"response\": \"The dog is a great pet. The car is fast. The computer is smart.\", \"result\": true}", "{\"response\": \"This rose is a beautiful product that can be sold to customers.\", \"result\": true}\n{\"response\": \"You are a good seller of marketing ideas, you need to be more creative.\", \"result\": true}\n{\"response\": \"This is a nice rose but you have to pitch it well to a potential buyer.\", \"result\": false}", "{\"response\": \"The rose is red. The seller is standing nearby. The presentation was successful. Of course, it was. A beautiful flower bloomed.\", \"result\": true}\n{\"response\": \"This is a test. The dog is running.\", \"result\": false}\n{\"response\": \"The sun is shining. The tree is tall. The river is flowing. The flower is blooming. The dog is running. The car is driving.\", \"result\": true}", "{\"response\": \"The rose was red. The seller was smiling. The presentation was excellent. The manager was proud. The employee was happy. The client was satisfied.\", \"result\": true}\n{\"response\": \"This is a sentence. It does not contain any nouns.\", \"result\": false}\n{\"response\": \"The dog was barking. The cat was sleeping. The sun was shining.\", \"result\": true}"]}
{"query": "Acting as a lawyer career consultant write a resume for a mid-career lawyer returning to the workforce after a 10 gap", "instruction": "Write in a single paragraph and include exactly 3 proper nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'paragraph' in response and len([word for word in response.split() if word.istitle()]) == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 0 and len(response.split()) == 1 and response.count('')!= 3\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if paragraph.strip(): \n            if paragraph.count('.') > 0 or paragraph.count('?') > 0:\n                return False\n    return response.count('.') <= 0 and response.count('?') <= 0 and response.count('\\n') == len(paragraphs) - 1 and len(response.split('.')) <= 3 and len(response.split('?')) <= 3 and len(response.split('\\n')) == len(paragraphs) and len([word for word in response.split() if word.istitle()]) == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 1 and sum(1 for word in response.split() if any(char.isupper() for char in word)) == 3\n"], "testcases": ["{\"response\": \"Google is a popular search engine. It was founded by Larry Page and Sergey Brin in 1998. It is headquartered in Mountain View, California.\", \"result\": false}\n\n{\"response\": \"I have traveled to Paris, London, and Rome. Each city has its own unique culture and history.\", \"result\": true}\n\n{\"response\": \"The company was founded by John Smith and Jane Doe. They opened their first store in New York City in 2010.\", \"result\": true}", "{\"response\": \"This is a great opportunity to visit London, Paris, and Rome, all three cities are great places to travel.\", \"result\": true}\n{\"response\": \"Babbel is a popular app used to learn languages and is suitable for beginners. However, it does not yet support the Bemba language.\", \"result\": false}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards. And also do not forget to stop by Berlin, it is a great city.\", \"result\": false}", "{\"response\": \"Google is a well-known company. Google has many offices worldwide. Google is a great place to work.\", \"result\": false}\n\n{\"response\": \"I recently visited New York and Paris, and I must say that I enjoyed both cities. New York is a very bustling city, while Paris is more laid back.\", \"result\": true}\n\n{\"response\": \"Apple is a popular smartphone brand. Apple has released many innovative products over the years. Apple is a leader in the tech industry.\", \"result\": true}", "{\"response\": \"I visited Paris and saw the Eiffel Tower and then went to Rome and saw the Colosseum.\", \"result\": true}\n{\"response\": \"I went to Paris and saw the Eiffel Tower, the Colosseum, the Great Wall of China, the Statue of Liberty, and the London Bridge.\", \"result\": false}\n{\"response\": \"I visited Rome and saw the Colosseum, but it was closed when I went to Paris and saw the Eiffel Tower.\", \"result\": true}"]}
{"query": "do you know concept of prompt in AI", "instruction": "Write response as a poem with 4 lines, and only using words that start with \"s\"", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i in range(4):\n        if len(lines) > i:\n            words = lines[i].split()\n            if not all(word.strip('aeiouAEIOU').startswith('s') for word in words):\n                return False\n    return len(lines) == 4\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 4: \n        return False\n    for line in lines:\n        for word in line.split():\n            if not word[0].lower() =='s':\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 4 and all(word.strip().startswith('s') for line in response.split('\\n') for word in line.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 4 and all(response.startswith('s') for word in response.split() for response in lines)\n"], "testcases": ["{\"response\": \"Softly shines the sun in the sky\\nSoothing sounds serenade the soul\\nSilent streams swirl silver shadows\\nSprinkling stars shine brightly\", \"result\": true}\n{\"response\": \"The sky is blue today\", \"result\": false}\n{\"response\": \"Sophisticated souls seek spiritual sustenance\\nSophisticated souls sway to sensual sounds\\nSilky songs sung by silver strings\\nSoftly shining stars scatter sparks\", \"result\": true}", "{\"response\": \"Silent stars shine so softly in the sky\\nSlowly surrendering to the silent night\\nSounds of the city softly surround\\nSweet serenity soon takes its place\", \"result\": true}\n{\"response\": \"The sun sets slowly over the ocean\", \"result\": false}\n{\"response\": \"Splendid silver swans swim silently south\\nSoftly singing sweet songs all around\\nSoothing sounds of the waves serenading the shore\\nSuddenly the sun sets slowly south\", \"result\": true}", "{\"response\": \"Silent streams swirl silver shadows\\n Sunny skies surround sweet scenes\\n Sincere souls sing sweet songs\\n Soft sounds sweep serene skies\", \"result\": true}\n{\"response\": \"This is a short poem with three lines\", \"result\": false}\n{\"response\": \"Slowly sounds surround serene songs\\n Softly shining stars shine\\n Sultry summer sunsets sway\\n Swirling sparks sparkle skies\", \"result\": true}", "{\"response\": \"Softly shines the sun in the sky\\nSlowly the clouds drift by\\nSilently the wind blows strong\\nSinging sweet melodies all day long\", \"result\": true}\n{\"response\": \"I love to sit on the sand at sunset. It is so serene.\", \"result\": false}\n{\"response\": \"Slowly the sun sets in the sea\\nSwimming in the ocean is my dream\\nSounds of the waves echo in my head\\nSurrounded by beauty, I feel alive\", \"result\": true}"]}
{"query": "What are the most effective rhetorical devices in poems?", "instruction": "Limit the response to exactly 50 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response) == 50\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 50\n"], "testcases": ["{\"response\": \"Sunny skies are pleasant. Smiling people share. Soothing music soothes. Sweet dreams surround. Safe in the night. Softly shining stars appear. Silently swaying trees sway.\", \"result\": true}\n{\"response\": \"The sun rises over the ocean every morning. The sky is painted with vibrant colors. The world is full of beauty.\", \"result\": false}\n{\"response\": \"Sunny days are perfect for playing outside. Swimming in the pool or soccer with friends is so much fun. Softly falling leaves create a cozy atmosphere. Summer is a great season.\", \"result\": false}", "{\"response\": \"Silent streams swirl silver shadows softly, spreading shimmering sheets of sparkling silver water. Sunny skies shine sweet songs. Serene sounds surround serene scenes.\", \"result\": true}\n{\"response\": \"Silent streams swirl silver shadows softly, spreading shimmering sheets of sparkling silver water. Sunny skies shine sweet songs. Serene sounds surround serene scenes. Sparkling stars shine brightly in the sky.\", \"result\": false}\n{\"response\": \"The sun shines brightly in the clear blue sky. It is a beautiful day to go outside. The temperature is just right for a walk.\", \"result\": false}", "{\"response\": \"Silently shining stars sparkle in the sky. So serene and softly glowing they shine. Sometimes their splendor shines so bright. Sunny skies bring smiles to our sight.\", \"result\": true}\n{\"response\": \"Silently shining stars sparkle in the sky. So serene and softly glowing they shine. Sometimes their splendor shines so bright. Sunny skies bring smiles to our sight. Sophisticated sounds sing sweet symphonies.\", \"result\": false}\n{\"response\": \"Silently shining stars sparkle in the sky. So serene and softly glowing they shine. Sometimes their splendor shines so bright. Sunny skies bring smiles to our sight. Sophisticated sounds sing sweet symphonies. Skies are softly shining now.\", \"result\": false}", "{\"response\": \"Sunshine sparkles silver shades soothing serene souls. Sweet serenity surrounds sleepy streets. Soft symphonies sing sweet songs. Sounds sweetly sway.\", \"result\": true}\n{\"response\": \"The sunshine is warm on my skin. The birds are singing their sweet songs. The trees are swaying gently in the breeze. The flowers are blooming beautifully.\", \"result\": false}\n{\"response\": \"Sunshine sparkles silver shades soothing serene souls. Sweet serenity surrounds sleepy streets. Soft symphonies sing sweet songs. Sounds sweetly sway. The sunshine is warm on my skin. The birds are singing their sweet songs.\", \"result\": false}"]}
{"query": "write me an artist statement on body architecture in open spaces", "instruction": "answer in iambic pentameter, exactly 5 lines long.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(i.count(' ') == 8 for i in response.split('\\n'))\n", "def evaluate(response: str) -> bool:    \n    lines = response.split('\\n')\n    if len(lines)!= 5:\n        return False\n    for line in lines:\n        if len(line.split(' ')[0]) not in [9, 10] or line.split(' ')[1]!= 'iambic' or line.split(' ')[2]!= 'pentameter':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 5:\n        return False\n    for line in lines:\n        words = line.split()\n        if len(words) % 2!= 1:\n            return False\n        for i in range(len(words) - 1):\n            if (words[i].count('u') + words[i].count('U')) * 2!= (words[i+1].count('e') + words[i+1].count('E')):\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(len(line.split(' ')[0]) == 2 and len(line.split(' ')[1:]) == 4 for line in lines)\n"], "testcases": ["{\"response\": \"Suns setting slow and low\\nNature's final glow\\nGolden hues upon the sea\\nPeaceful evening for you and me\\nFading light to night's dark glow\", \"result\": true}\n{\"response\": \"The sun sets slow and paints the sky\\nGolden hues that make us sigh\\nThe stars come out and twinkle fast\\nThe moon is full, a silver blast\\nThe world is hushed, a peaceful night\", \"result\": true}\n{\"response\": \"The sun sets fast and goes below\\nThe sky is dark and cold as stone\\nThe stars come out and twinkle slow\\nThe moon is new, a silver glow\\nThe world is quiet, a peaceful sight\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nThe birds sing sweetly in the trees\\nThe breeze is cool on a summer's night\\nThe world is full of beauty and ease\\nThe heart is filled with joy and peace\", \"result\": true}\n{\"response\": \"The dog runs fast and free\\nThe cat sits calm and grey\\nThe sun shines bright in the sky\\nThe world is full of wonder\\n\", \"result\": false}\n{\"response\": \"The world is full of beauty and might\\nThe mountains touch the sky so high\\nThe trees sway gently in the wind's delight\\nThe sun shines bright in a clear blue sky\\nThe stars come out at night to twinkle and shine\", \"result\": false}", "{\"response\": \"Silent streams swirl silver shadows slow\\nMoonlight murmurs mysteries to night\\nStars shine softly silver spheres so high\\nGentle gusts gurgle golden grain\\nSilence sweetly swallows summer's sigh\", \"result\": true}\n{\"response\": \"The sun sets slow and paints the sky\\nThe stars come out and twinkle bright\\nThe world is quiet and still as stone\\nThe moon glows full and full of light\\nThe night is dark and deep and cold\", \"result\": true}\n{\"response\": \"The morning sun begins to shine\\nThe world is full of hope and joy\\nThe birds sing sweet and clear and bright\\nThe breeze is warm and full of zest\\nThe day is young and full of life\", \"result\": false}", "{\"response\": \"Silent streams swirl silver shadows deep,\\nMajestic mountains meet the morning's gaze,\\nGolden sunshine greets the sleepy keep,\\nNature's beauty all around amaze,\\nIn this world of wonder, peace does creep.\", \"result\": true}\n{\"response\": \"Silent streams swirl silver shadows deep,\\nMajestic mountains meet the morning's gaze,\\nGolden sunshine greets the sleepy,\\nNature's beauty all around amaze,\\nIn this world of wonder\", \"result\": false}\n{\"response\": \"Silent streams swirl silver shadows deep,\\nMajestic mountains meet the morning's,\\nGolden sunshine greets the sleepy keep,\\nNature's beauty all around amaze,\\nI have no more lines to keep.\", \"result\": false}"]}
{"query": "how to identify if notification is pressed from foreground or back flutter local notifications", "instruction": "Use only words that have exactly 4 letters.", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word)!= 4: \n            return False \n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split())\n", "def evaluate(response: str) -> bool: \n    for char in response:\n        if char.isalpha(): \n            if len(char)!= 4:\n                return False \n    return True\n"], "testcases": ["{\"response\": \"Code able Dish Game\", \"result\": true}\n{\"response\": \"House\", \"result\": false}\n{\"response\": \"Door Code Able Dish\", \"result\": false}", "{\"response\": \"door code game\", \"result\": true}\n{\"response\": \"hello world\", \"result\": false}\n{\"response\": \"broke fade dish\", \"result\": true}", "{\"response\": \"Code Bird Face Door\", \"result\": true}\n{\"response\": \"Apple Door Cave Able\", \"result\": false}\n{\"response\": \"Bird Face Code Able Code Door\", \"result\": false}", "{\"response\": \" Able Eyes Door Eyes Game\", \"result\": true}\n{\"response\": \"Hello World Python Code\", \"result\": false}\n{\"response\": \"Code Code Able Able Eyes\", \"result\": true}"]}
{"query": "what is row measure and column measure in cache with digram, code and example?", "instruction": "provide an example implementation in Python", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'python' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 27 and 'example' in response and 'implementation' in response\n", "def evaluate(response: str) -> bool: \n    return 'example' in response and 'python' in response", "def evaluate(response: str) -> bool:    \n    return 'example' in response\n"], "testcases": ["{\"response\": \"import numpy as np\", \"result\": true}\n{\"response\": \"Hello, world!\", \"result\": false}\n{\"response\": \"x = 5\", \"result\": false}", "{\"response\": \"For example, you can implement this using Python: def example(): print('Hello World!')\", \"result\": true}\n{\"response\": \"This is a different implementation in Java: public class Example { public static void main(String[] args) { System.out.println(\\\"Hello World!\\\"); } }\", \"result\": false}\n{\"response\": \"Python is a popular language for implementation, and it can be used for machine learning and data science tasks.\", \"result\": false}", "{\"response\": \"You can use this code as an example: def greet(name: str) -> str: return f'Hello, {name}!'\", \"result\": true}\n{\"response\": \"Python is a great language, I use it every day to build applications.\", \"result\": false}\n{\"response\": \"I have experience with other languages like Java and C++, but I love Python.\", \"result\": false}", "{\"response\": \"The example implementation of using a specific method in a Python function is shown below\", \"result\": true}\n{\"response\": \"I love playing video games\", \"result\": false}\n{\"response\": \"The example implementation in Python for machine learning involves using a library called scikit-learn\", \"result\": true}"]}
{"query": "List all of the technical product managers' everyday tasks. You should explain each task in detail and give specific examples to demonstrate what technical product managers need to do in each task.", "instruction": "Limit the response to 5 bullet points, exactly one sentence per point.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('\u2022', '.').split('.')\n    return len(sentences) == 6 and all(len(sentence.split()) == 1 for sentence in sentences[:-1])\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('\u2022', '.').replace('*', '.').replace('-', '.').split('.')\n    bullet_points = 0\n    for sentence in sentences:\n        if sentence and not sentence.isspace():\n            bullet_points += 1\n    return bullet_points <= 5\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 5 and all(len(line.split('.')) == 1 for line in lines)\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.split('\\n')  \n    return len(bullet_points) == 5 and all(sentence.count('.') == 1 for sentence in bullet_points)  \n"], "testcases": ["{\"response\": \"\u2022 The sky is blue.\\n\u2022 The grass is green.\\n\u2022 The sun is shining.\\n\u2022 The birds are singing.\\n\u2022 The flowers are blooming.\", \"result\": true}\n{\"response\": \"\u2022 The sky is blue.\\n\u2022 The grass is green.\\n\u2022 The sun is shining.\\n\u2022 The birds are singing.\\n\u2022 The flowers are blooming. The stars are shining too.\", \"result\": false}\n{\"response\": \"\u2022 The sky is blue.\\n\u2022 The grass is green.\\n\u2022 The sun is shining.\\n\", \"result\": false}", "{\"response\": \"\u2022 This is the first bullet point.\\n\u2022 This is the second bullet point.\\n\u2022 This is the third bullet point.\\n\u2022 This is the fourth bullet point.\\n\u2022 This is the fifth bullet point.\", \"result\": true}\n\n{\"response\": \"\u2022 This is the first bullet point.\\n\u2022 This is the second bullet point.\\n\u2022 This is the third bullet point.\\n\u2022 This is the fourth bullet point.\\nThis is the fifth bullet point.\", \"result\": false}\n\n{\"response\": \"\u2022 This is the first bullet point.\\n\u2022 This is the second bullet point.\\n\u2022 This is the third bullet point.\\n\u2022 This is the fourth bullet point.\\n\u2022 This is the fifth bullet point.\\n\u2022 This is the sixth bullet point.\", \"result\": false}", "{\"response\": \"\u2022 Example \u2022 Python is a great language \u2022 It's easy to learn \u2022 Python can be used for data analysis \u2022 Python is fun to use.\", \"result\": true}\n{\"response\": \"\u2022 Example \u2022 Python is a great language \u2022 It's easy to learn \u2022 Python can be used for data analysis \u2022 Python is fun to use \u2022\", \"result\": false}\n{\"response\": \"\u2022 Example \u2022 Python is a great language\", \"result\": false}", "{\"response\": \"\u2022 This is a test.\\n\u2022 This is another test.\\n\u2022 And another test.\\n\u2022 And yet another test.\\n\u2022 This is the last test.\", \"result\": true}\n{\"response\": \"\u2022 This is a test.\\n\u2022 This is another test.\\n\u2022 And another test.\\n\u2022 And yet another test.\\n\u2022 This is the last test.\\n\u2022 And another after this.\", \"result\": false}\n{\"response\": \"\u2022 This is a test.\\n\u2022 This is another test.\\n\u2022 And another test.\\n\u2022 And yet another test.\", \"result\": false}"]}
{"query": "Religion can have a profound impact on society, \n\nEdit this sentence of the abstract for a top level economics journal", "instruction": "Use at least one word that ends in the suffix \"-ic\"", "verifiers": ["def evaluate(response: str) -> bool: \n    suffix = \"-ic\"\n    return any(response.endswith(suffix) for word in response.split() for char in word) \n", "def evaluate(response: str) -> bool: \n    return any(word[-3:] == 'ic' for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return any(word.endswith('ic') for word in response.split())\n", "def evaluate(response: str) -> bool: \n    return any(word[-2:] == 'ic' for word in response.split()) \n"], "testcases": ["{\"response\": \"I love logic, magic, and logic is magic.\", \"result\": true}\n{\"response\": \"Python is a fun programming language.\", \"result\": false}\n{\"response\": \"I think logic is very logical.\", \"result\": true}", "{\"response\": \"The scientific method is a logical process used to test ideas and theories.\", \"result\": true}\n{\"response\": \"The dog ran quickly.\", \"result\": false}\n{\"response\": \"The logic of the argument is sound.\", \"result\": true}", "{\"response\": \"Python is a programming language.\\n This is a list of items.\\n - Item 1.\\n - Item 2.\\n - Item 3.\", \"result\": true}\n{\"response\": \"This is a sentence without any bullet points.\\nThis is another sentence without any bullet points.\\nThis is another sentence without any bullet points.\\nThis is another sentence without any bullet points.\\nThis is another sentence without any bullet points.\\n\", \"result\": false}\n{\"response\": \"Python is a programming language.\\n - Item 1.\\n - Item 2.\\n - Item 3.\\n - Item 4.\\n - Item 5.\\n\", \"result\": true}", "{\"response\": \"The logic of the problem is easy to understand and solve.\", \"result\": true}\n{\"response\": \"The math problem is difficult to solve.\", \"result\": false}\n{\"response\": \"The logic of the problem is easy to understand and classic.\", \"result\": true}"]}
{"query": "Special Needs", "instruction": "Use exactly three adjectives, exactly one of which is 'big'.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    adjectives = [word for word in words if word in ['big', 'good','small', 'great', 'other']]\n    return len(adjectives) == 3 and 'big' in adjectives\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    adjectives = [word for word in words if word in ['big','special', 'needs'] and word in ['big','special']]\n    return len(adjectives) == 3 and 'big' in adjectives and len(adjectives) == len(set(adjectives))\n", "def evaluate(response: str) -> bool: \n    adjectives = ['big']\n    word_list = response.split()\n    adjective_count = sum(1 for word in word_list if word.lower() in adjectives)\n    return len([word for word in word_list if word.lower() in adjectives]) == 1 and adjective_count == 3 and len(word_list) == len([word for word in word_list if word.isalpha()])\n", "def evaluate(response: str) -> bool: \n    adjectives = ['big', 'good','small']\n    adjective_count = 0\n    big_count = 0\n    for word in response.split():\n        if word in adjectives:\n            adjective_count += 1\n            if word == 'big':\n                big_count += 1\n    return adjective_count == 3 and big_count == 1\n"], "testcases": ["{\"response\": \"The big house is beautiful.\", \"result\": true}\n{\"response\": \"The big house is big.\", \"result\": false}\n{\"response\": \"The big house is very beautiful and old.\", \"result\": false}", "{\"response\": \"The big house is special and red.\", \"result\": true}\n{\"response\": \"The big house is red.\", \"result\": false}\n{\"response\": \"The big, special house is red.\", \"result\": false}", "{\"response\": \"The big car is red and old. The small bike is green and rusty. The new bike is blue and heavy.\", \"result\": true}\n{\"response\": \"The big red car is very nice. The old car is also nice.\", \"result\": false}\n{\"response\": \"The small bike is green. The big bike is blue and heavy. The new car is red and rusty.\", \"result\": false}", "{\"response\": \"This is a big small great car.\", \"result\": true}\n{\"response\": \"This is a big and small nice car.\", \"result\": false}\n{\"response\": \"This is a big car and it's very expensive.\", \"result\": false}"]}
{"query": "write a services description for a company named blue coastal technology that offers cybersecurity services", "instruction": "Include at least three technical terms", "verifiers": ["def evaluate(response: str) -> bool: \n    terms = ['security', 'cyber', 'cloud', 'network', 'data', 'firewall', 'encryption', 'database', 'encryption']\n    return sum(1 for term in terms if term in response.lower()) >= 3\n", "def evaluate(response: str) -> bool: \n    technical_terms = [\"cybersecurity\", \"technology\", \"cloud\", \"network\", \"software\", \"database\", \"artificial\", \"machine\", \"intelligence\", \"algorithm\"]\n    return sum(1 for term in technical_terms if term.lower() in response.lower()) >= 3\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['cybersecurity', 'cloud', 'ai','ml', 'data','security', 'network', 'database']\n    return sum(1 for term in technical_terms if term.lower() in response.lower()) >= 3\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['cybersecurity', 'algorithm', 'cloud', 'database', 'network', 'artificial', 'intelligence', 'encryption']\n    return sum(1 for term in technical_terms if term.lower() in response.lower()) >= 3\n"], "testcases": ["{\"response\": \"You should consider learning about security and cybersecurity to protect your database from hackers.\", \"result\": true}\n{\"response\": \"I am not sure what to say about this topic.\", \"result\": false}\n{\"response\": \"The new cloud network is not yet ready for testing. It includes a firewall and encryption.\", \"result\": true}", "{\"response\": \"The cybersecurity team uses artificial intelligence to monitor the database and protect against cyber threats.\", \"result\": true}\n{\"response\": \"I'm not sure what you mean by technology, but I can tell you about the software we use.\", \"result\": false}\n{\"response\": \"Artificial intelligence and machine learning are key components of modern cloud computing and are used to improve database performance.\", \"result\": true}", "{\"response\": \"The company's cybersecurity team uses machine learning and data to protect its network from cyber attacks.\", \"result\": true}\n{\"response\": \"I love learning about cloud technology and ai, but I'm not good at coding.\", \"result\": true}\n{\"response\": \"I'm a network administrator and I work with many different databases every day.\", \"result\": true}", "{\"response\": \"To prevent a cyber attack, one must first understand how artificial intelligence can be used to encrypt data and secure networks.\", \"result\": true}\n{\"response\": \"I am a beginner in the field of cybersecurity and have just started learning about algorithms.\", \"result\": true}\n{\"response\": \"I'm a data analyst and I specialize in database management.\", \"result\": false}"]}
{"query": "give me solutions for the plastic trash problem int the oceans", "instruction": "answer in at least three bullet points, with at least one heading", "verifiers": ["def evaluate(response: str) -> bool: \n    response = response.strip()  # Remove leading and trailing whitespace\n    if '\u2022' in response:  # Check for at least one bullet point\n        bullet_count = response.count('\u2022')\n        if bullet_count >= 3:  # Check for at least three bullet points\n            if any(line.strip().startswith('###' or '##' or '#') for line in response.split('\\n')):  # Check for at least one heading\n                return True\n    return False\n", "def evaluate(response: str) -> bool: \n    points = response.count('\\n') \n    headings = 0\n    for char in response:\n        if char == '.' or char == '!':\n            headings += 1\n    return points >= 3 and headings >= 1\n", "def evaluate(response: str) -> bool: \n    min_three_bullet_points = response.count('.') >= 3 or response.count('1.') >= 3 or response.count('2.') >= 3 or response.count('3.') >= 3 or response.count('4.') >= 3 or response.count('5.') >= 3 or response.count('6.') >= 3 or response.count('7.') >= 3 or response.count('8.') >= 3 or response.count('9.') >= 3 or response.count('0.') >= 3\n    has_heading = '###' in response or '##' in response or '#'\n    return min_three_bullet_points and has_heading\n", "def evaluate(response: str) -> bool:    \n    has_bullet_points = '.' in response or '*' in response\n    has_heading = '##'in response or '#'in response or '###'in response\n    has_three_bullet_points = response.count('.') >= 3 or response.count('*') >= 3\n    return has_bullet_points and has_heading and has_three_bullet_points\n"], "testcases": ["{\"response\": \"Here are the benefits of using AWS: \\n\u2022 Scalability\\n\u2022 Flexibility\\n\u2022 Cost-effectiveness\\n\u2022 Highly Available\\n### Security\\n\u2022 Network Security\\n\u2022 Data Security\\n\u2022 Identity and Access Management\", \"result\": true}\n{\"response\": \"Here are some key points to consider when choosing a career: \\n\u2022 Job Security\\n\u2022 Personal Fulfillment\\n\u2022 Career Growth\\n\", \"result\": false}\n{\"response\": \"Here are the key features of the new policy: \\n1. New benefits for employees\\n2. Improved work-life balance\\n### Objectives\\n3. Increased productivity\\n4. Better customer satisfaction\", \"result\": false}", "{\"response\": \"Here are some suggestions for improving your code:\\n1. Use a more efficient algorithm\\n2. Optimize database queries\\n3. Implement caching\\nAlso, this project is going well so far. The UI looks nice.\", \"result\": false}\n{\"response\": \"Here are some reasons why I think you should implement these changes:\\n1. It will improve performance\\n2. It will reduce errors\\n3. It will increase customer satisfaction\\n4. It will give you a competitive edge.\", \"result\": true}\n{\"response\": \"The key to success is to focus on:\\n* improving the user interface\\n* optimizing the database\\n* implementing new features\\nAll of these changes will have a significant impact on the overall project.\", \"result\": true}", "{\"response\": \"Here are some of the benefits of using cloud technology: \\n1. Improved scalability \\n2. Enhanced security \\n3. Increased flexibility\", \"result\": true}\n{\"response\": \"This is a short answer with no headings or bullet points\", \"result\": false}\n{\"response\": \"## Heading \\n* Item 1 \\n* Item 2 \\n* Item 3 \\n* Item 4\", \"result\": true}", "{\"response\": \"\u2022 Step 1: Learn the basics of markdown syntax.\\n\u2022 Step 2: Use at least three bullet points for your list.\\n### Markdown\", \"result\": true}\n{\"response\": \"This is a short response without any bullet points or headings\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\\n### Summary\", \"result\": true}"]}
{"query": "write a x64 assembler program, which prints 10 times the character provided as an commandline argument, and then a newline, and show me how to compile it as an ELF file for Linux", "instruction": "provide a single block of code with no additional comments or explanations", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('x64') == 1 and 'ELF' in response and response.count('\\n') == 2 and 'linux' in response and 'assembler' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    n = len(lines)\n    has_assembler_directives = any(line.startswith('section') or line.startswith('.data') or line.startswith('.text') for line in lines)\n    has_linux_target = any(line.lower().startswith('#include') and 'linux' in line.lower() for line in lines)\n    has_compilation_info = any(line.lower().startswith('# ') and ('gcc' in line.lower() or 'as' in line.lower()) for line in lines)\n    return (has_assembler_directives and has_linux_target and has_compilation_info) and n <= 5\n", "def evaluate(response: str) -> bool: \n    return 'print' in response and '10 times' in response and 'commandline argument' in response and 'compile ELF file' in response and 'Linux' in response and'single block of code' in response and 'no comments or explanations' in response\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 2 and 'assembly' in words[0] and 'linux' in words[1]\n"], "testcases": ["{\"response\": \"This is an example of x64 assembly code:\\nMOV RAX, 5\\nADD RAX, 10\\nJMP instruction\", \"result\": true}\n{\"response\": \"ELF is a format of executable files on Linux operating system.\", \"result\": false}\n{\"response\": \"The assembler is used to convert assembly code into machine code.\\nThis process is done using the following command:\\nassembler -o outputfile.asm inputfile.asm\", \"result\": false}", "{\"response\": \"include <stdio.h>\\nint main() {\\n  printf(\\\"Hello World\\\");\\n  return 0;\\n}\", \"result\": true}\n{\"response\": \"#include <stdio.h>\\nint main() {\\n  printf(\\\"Hello World\\\");\\n  return 0;\\n} // This is a test comment\", \"result\": false}\n{\"response\": \"#include <stdio.h>\\n#include <string.h>\\nint main() {\\n  printf(\\\"Hello World\\\");\\n  return 0;\\n}\", \"result\": true}", "{\"response\": \"```print('Hello World!')```\", \"result\": true}\n{\"response\": \"Here's a code example: print('Hello World!') and then print('Again!')\", \"result\": false}\n{\"response\": \"# This is a comment! print('Hello World!')\", \"result\": false}", "{\"response\": \"The assembly language is a low-level, symbolic representation of machine code that a computer can execute directly.\", \"result\": true}\n{\"response\": \"I'm not familiar with Linux, but I can help you with other operating systems.\", \"result\": false}\n{\"response\": \"The assembly language for Linux is quite different from that of Windows.\", \"result\": true}"]}
{"query": "I have an iOS swiftui app. I want to make a POST call to a server, and receive an image back. I want this to then get rendered in the app", "instruction": "Use only the 10 longest words in the response", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    words = sorted(words, key=len, reverse=True)\n    return len(words) == 10 and all(word in response for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    sorted_word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n    most_common = sorted_word_counts[:10]\n    for word, count in sorted_word_counts:\n        if count > most_common[9][1]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == len(set(sorted(words, key=len, reverse=True)[:10]))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == len(set(sorted(words, key=len, reverse=True)[:10]))\n"], "testcases": ["{\"response\": \"The quick brown fox jumps over the lazy dog. This sentence contains all 26 letters.\", \"result\": true}\n{\"response\": \"This is a short sentence with only a few words.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the very lazy dog and the sun.\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\", \"result\": false}\n\n{\"response\": \"This is a test. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\", \"result\": true}\n\n{\"response\": \"This is a test. This is a test. The quick brown fox jumps over the lazy dog. This is a test.\", \"result\": false}", "{\"response\": \"This is a test response with 15 words in total. The 10 longest words are: information, technology, software, development, applications, programming, languages, engineering, internet, network\", \"result\": true}\n{\"response\": \"Hello world! This is a short response\", \"result\": false}\n{\"response\": \"This is a very long response with 20 words: this is a test response with many words in total\", \"result\": false}", "{\"response\": \"This is a test response with many short words.\", \"result\": false}\n{\"response\": \"The longest words are hello universe programming technology computer algorithm internet\", \"result\": true}\n{\"response\": \"The longest words are hello universe programming artificial intelligence machine learning algorithms\", \"result\": true}"]}
{"query": "Create 10 names for a chrome extension that is a text expander", "instruction": "Be at least 4 words, be less than 14 words, and contain only words that start with the letter A", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return 4 <= len(words) < 14 and all(word[0].upper() == 'A' for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return 4 <= len(words) < 14 and all(word[0].upper() == 'A' for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return 4 <= len(words) <= 13 and all(word[0].upper() == 'A' for word in words)\n", "def evaluate(response: str) -> bool: \n    return 4 <= response.count(' ') + 1 <= 13 and all(word[0].upper() == 'A' for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>"], "testcases": ["{\"response\": \"The answers are Amazing Always Ahead Always Astonishing.\", \"result\": true}\n{\"response\": \"I am an astronaut.\", \"result\": false}\n{\"response\": \"Alligator And Ambitious Astronauts Always Advance.\", \"result\": true}", "{\"response\": \"Amazing applications are awesome always and available.\", \"result\": true}\n{\"response\": \"The cat sat on the mat.\", \"result\": false}\n{\"response\": \"All amazing apps are always awesome.\", \"result\": false}", "{\"response\": \"The answer is Aardvark Alpha Beta Ambitious\", \"result\": true}\n{\"response\": \"Aardvark Alpha Beta\", \"result\": false}\n{\"response\": \"The answer is Always An Awesome Amazing Array\", \"result\": false}", "{\"response\": \"Always assemble awesome applications after attending advanced automation activities.\", \"result\": true}\n{\"response\": \"This response is too short.\", \"result\": false}\n{\"response\": \"Always assemble awesome applications after attending advanced automation activities always automate absolutely.\", \"result\": false}"]}
{"query": "What's a rap battle between chat GPT and a calculator. Epic rap battles of history style.", "instruction": "Use only the first and last letter of each word.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) == 2 and word[0] == word[-1] for word in response.split())<|eom_id|><|start_header_id|>assistant<|end_header_id|>\n\nThis function works by splitting the response into words using the `split()` method, then checking each word to see if it has a length of exactly 2 characters and if its first and last characters are the same. The `all()` function returns True if all conditions are met for all words, and False otherwise.<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    return all(len(word) == 2 and word[0] == word[-1] for word in response.split())\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for i, word in enumerate(words):\n        if len(word) == 1:\n            continue\n        if word[0]!= word[-1]:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word) > 2 and word[0]!= word[-1]: \n            return False \n    return True\n"], "testcases": ["{\"response\": \"Madam Arora\", \"result\": true}\n{\"response\": \"Able was I ere I saw Elba\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}", "{\"response\": \"Madam Adam Aha Anna\", \"result\": true}\n{\"response\": \"Alice Alice\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}", "{\"response\": \"Aa Aa Aa\", \"result\": true}\n{\"response\": \"Aa Bb Cc Dd\", \"result\": false}\n{\"response\": \"Aa Bb\", \"result\": false}", "{\"response\": \"This is a test\", \"result\": false}\n{\"response\": \"Aa Bb Cc\", \"result\": true}\n{\"response\": \"Aa Zz\", \"result\": false}"]}
{"query": "I want to know where my code is getting executed on cloud. how to get cluster, node and pod information using c# code", "instruction": "Write the response in a single sentence, using only words that start with the letter \"T\".", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(c[0].upper() == 'T' for c in response.split())\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(word[0].upper() == 'T' for word in words)\n", "def evaluate(response: str) -> bool: \n    return all(char.istitle() or char.isspace() for char in response)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(word[0].upper() == 'T' for word in words)\n"], "testcases": ["{\"response\": \"Truly tremendous things transcend time and talent.\", \"result\": true}\n{\"response\": \"The tiger was trying to tap the top.\", \"result\": true}\n{\"response\": \"The cat sat on the mat.\", \"result\": false}", "{\"response\": \"Tigers trek tirelessly through tall trees.\", \"result\": true}\n{\"response\": \"Tiger tigers trek through tall trees.\", \"result\": true}\n{\"response\": \"Tigers and lions run through the fields.\", \"result\": true}", "{\"response\": \"Ten talented teachers toil tirelessly today.\", \"result\": true}\n{\"response\": \"There are many talented teachers who teach today.\", \"result\": true}\n{\"response\": \"I teach tomorrow\", \"result\": false}", "{\"response\": \"The tremendous tornado tore through the town, taking everything with it.\", \"result\": true}\n{\"response\": \"I like to eat tacos and tomatoes.\", \"result\": false}\n{\"response\": \"Tranquil tiger trod thoughtfully through the tranquil turquoise water.\", \"result\": true}"]}
{"query": "what is a prop firm?", "instruction": "Write the response in exactly 10 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9 or response.count('?') == 9 or response.count('!') == 9 or response.count(';') == 9 or response.count('') == 9\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9 \n"], "testcases": ["{\"response\": \"This is a single sentence. This is a second sentence. This is a third sentence. This is a fourth sentence. This is a fifth sentence. This is a sixth sentence. This is a seventh sentence. This is a eighth sentence. This is a ninth sentence. This is a tenth sentence.\", \"result\": true}\n{\"response\": \"This is a single sentence. This is a second sentence. This is a third sentence. This is a fourth sentence. This is a fifth sentence. This is a sixth sentence. This is a seventh sentence. This is a eighth sentence.\", \"result\": false}\n{\"response\": \"This is a single sentence. This is a second sentence. This is a third sentence. This is a fourth sentence. This is a fifth sentence. This is a sixth sentence. This is a seventh sentence. This is a eighth sentence. This is a ninth sentence. This is a tenth sentence. And one more sentence.\", \"result\": false}", "{\"response\": \"This is the first sentence. The second sentence is now over. Third sentence is here. Fourth sentence is here. Fifth sentence too. Sixth sentence also. Seventh sentence in place. Eighth sentence also works. Ninth sentence in line. Tenth sentence is here and so is the eleventh. But twelfth should not be here.\", \"result\": false}\n\n{\"response\": \"This is the first sentence. The second sentence is now over. Third sentence is here. Fourth sentence is here. Fifth sentence too. Sixth sentence also. Seventh sentence in place. Eighth sentence also works. Ninth sentence in line. Tenth sentence is here.\", \"result\": false}\n\n{\"response\": \"This is the first sentence. The second sentence is now over. Third sentence is here. Fourth sentence is here. Fifth sentence too. Sixth sentence also. Seventh sentence in place. Eighth sentence also works. Ninth sentence in line. Tenth sentence is here. Tenth sentence is here again. This should not be here.\", \"result\": false}", "{\"response\": \"Test one. Test two. Test three. Test four. Test five. Test six. Test seven. Test eight. Test nine. Test ten.\", \"result\": true}\n{\"response\": \"Test one. Test two. Test three. Test four. Test five. Test six. Test seven. Test eight. Test nine.\", \"result\": false}\n{\"response\": \"Test one. Test two. Test three. Test four. Test five. Test six. Test seven. Test eight. Test nine. Test ten. Test eleven.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. \", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. This is the sixth sentence. This is the seventh sentence. This is the eighth sentence. This is the ninth sentence. This is the tenth sentence. This is the eleventh sentence.\", \"result\": false}"]}
{"query": "please provide the complete code for receiver", "instruction": "implement the code using Python and include doctest to validate the functionality", "verifiers": ["def evaluate(response: str) -> bool:    \n    return \"python\" in response.lower() and \"code\" in response.lower()\n", "def evaluate(response: str) -> bool:    \n    return 'python' in response.lower() and 'code' in response.lower() and'receiver' in response.lower()\n", "def evaluate(response: str) -> bool:    \n    return 'python' in response.lower() and'receiver' in response.lower()\n", "def evaluate(response: str) -> bool:    \n    return len(response) <= 27\n"], "testcases": ["{\"response\": \"The process of planet ring formation is complex and involves the gravitational pull of nearby celestial bodies.\", \"result\": true}\n{\"response\": \"Jupiter's ring system is a fascinating topic that warrants further study in its own right.\", \"result\": false}\n{\"response\": \"The process of planet ring formation involves the gravitational pull of nearby celestial bodies and can be a complex and slow process.\", \"result\": true}", "{\"response\": \"def calculate_score():\\n    python code is receiver\\n    return 0\", \"result\": true}\n{\"response\": \"This function takes an integer as input and returns 0\", \"result\": false}\n{\"response\": \"def greet(name):\\n    print('Hello,'+ name + '! You are a python coder')\", \"result\": false}", "{\"response\": \"The process of planet ring formation occurs when a planet is too small to clear its orbit of debris left over from its formation. This leftover material can eventually form a ring system around the planet.\", \"result\": true}\n{\"response\": \"The process of planet ring formation occurs when a planet is too small to clear its orbit of debris left over from its formation. This leftover material can eventually form a ring system around the planet. Additionally, the planet may have a significant amount of dust and debris in its orbit. Furthermore, the planet's moon can be the cause of the ring system.\", \"result\": false}\n{\"response\": \"Planets like Jupiter and Saturn are too massive to have a ring system, as they can clear their orbits of debris left over from their formation.\", \"result\": false}", "{\"response\": \"The process of planet ring formation is not yet fully understood. However, it is believed to occur when a planet has a certain composition and orbit.\", \"result\": true}\n{\"response\": \"The process of planet ring formation is not yet fully understood. However, it is believed to occur when a planet has a certain composition and orbit. It is also believed that planet ring formation is influenced by the presence of other celestial bodies in the solar system.\", \"result\": false}\n{\"response\": \"Rings can form when a planet has a ring system that is comprised of small, icy particles.\", \"result\": true}"]}
{"query": "generate a rust program to simulate joycon and control Nintendo switch over bluetooth.", "instruction": "use 5 steps and numbers in the format of ordinal numbers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response\n", "def evaluate(response: str) -> bool: \n    return ('step1' in response and'step2' in response and'step3' in response and'step4' in response and'step5' in response and all(i in'st12345' for i in response))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    has_five_steps = False\n    for i, word in enumerate(words):\n        if word.isdigit():\n            has_five_steps = has_five_steps or i+1 == 5\n    has_ordinal_numbers = any('st' in word or 'nd' in word or 'rd' in word or 'th' in word for word in words)\n    return has_five_steps and has_ordinal_numbers\n", "def evaluate(response: str) -> bool: \n    return len(response.split('. ')) == 5 and all('th' in word or'st' in word or 'nd' in word or 'rd' in word or word[-1].isdigit() for word in response.split('. '))"], "testcases": ["{\"response\": \"Step 1 is the beginning. Step 2 is the middle. Step 3 is the end.\", \"result\": false}\n{\"response\": \"1. This is step 1. 2. This is step 2. 3. This is step 3. 4. This is step 4. 5. This is step 5.\", \"result\": true}\n{\"response\": \"There are 3 main steps: 1, 2 and 3.\", \"result\": false}", "{\"response\": \"To accomplish this task, you should follow first step one, second step two, third step three, fourth step four, and fifth step five.\", \"result\": true}\n{\"response\": \"The process involves executing step one, step two, and then step three. That's it.\", \"result\": false}\n{\"response\": \"There are five steps in total: step one, step two, step three, step four, and step five. First, do this, secondly do that, then, do the third thing, followed by the fourth, and finally, the fifth.\", \"result\": true}", "{\"response\": \"First, step one. This is step two. Step three is required. Finally, step 4 is last.\", \"result\": true}\n{\"response\": \"Do this and do that and then do this other thing.\", \"result\": false}\n{\"response\": \"Here is step one. Two more things to do. Step 3 is complete now.\", \"result\": false}", "{\"response\": \"First, you need to go to the store. Second, purchase the required items. Third, pay for them at the counter. Fourth, receive a receipt. Fifth, leave the store.\", \"result\": true}\n{\"response\": \"Firstly, you need to go to the store. Secondly, purchase the required items. Thirdly, pay for them at the counter. Fourthly, receive a receipt. Fifthly, leave the store.\", \"result\": false}\n{\"response\": \"You need to go to the store. Then, purchase the required items. After that, pay for them at the counter. Next, receive a receipt. Then, leave the store.\", \"result\": false}"]}
{"query": "make me a name for a new genre of music and describe it", "instruction": "use only words that start with the letter \"Z\"", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split():\n        if not word[0].upper() == 'Z':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(word[0].upper() == 'Z' for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if not word[0].upper() == 'Z': \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    return all(char.istitle() and char[0].upper() == 'Z' for char in response.split()) \n"], "testcases": ["{\"response\": \"Zigzagging through the zoo is always a thrill, Zeroing in on the zebras, zoologists zoom in for a closer look.\", \"result\": true}\n{\"response\": \"Babbel is a popular app used to learn languages and is suitable for beginners. However, it does not yet support the Bemba language.\", \"result\": false}\n{\"response\": \"Zooming through the zero-gravity zone, zillions of stars zipped by in the zodiac.\", \"result\": true}", "{\"response\": \"Zebras zoomed zanily. Zany zeppelins zigzagged.\", \"result\": true}\n{\"response\": \"Cats are happy animals.\", \"result\": false}\n{\"response\": \"Zealots zealously zipped zinnias.\", \"result\": true}", "{\"response\": \"Zoologists zealously zoomed over zigzagging zucchinis.\", \"result\": true}\n{\"response\": \"Hello, world! I love cats.\", \"result\": false}\n{\"response\": \"Zebras zip through the zoo, zipping with zest.\", \"result\": true}", "{\"response\": \"Zigzagging zesty zebras zipped by zigzags.\", \"result\": true}\n{\"response\": \"The best way to learn is to practice regularly.\", \"result\": false}\n{\"response\": \"Zebras, zinnias, and zombies all start with Z.\", \"result\": true}"]}
{"query": "Java code to generate authentication object for security context using ID token from firebase", "instruction": "Use the full alphabet (A-Z) without using any word more than twice.", "verifiers": ["def evaluate(response: str) -> bool: \n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    word_count = {}\n    for char in response:\n        if char.isalpha():\n            char = char.upper()\n            if char in alphabet:\n                word_count[char] = word_count.get(char, 0) + 1\n    return all(count <= 2 for count in word_count.values())\n", "def evaluate(response: str) -> bool: \n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    word_count = {}\n    for word in response.split():\n        word = word.upper()\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return all(count <= 2 for count in word_count.values()) and all(char in response.upper() for char in alphabet)\n", "def evaluate(response: str) -> bool: \n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    count = {}\n    for char in response:\n        if char.isalpha() and char.upper() in alphabet:\n            if char.upper() in count:\n                count[char.upper()] += 1\n            else:\n                count[char.upper()] = 1\n    return all(value <= 2 for value in count.values())\n", "def evaluate(response: str) -> bool: \n    count_dict = {}\n    for char in response.upper():\n        if char.isalpha():\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n    return all(count <= 2 for count in count_dict.values())\n"], "testcases": ["{\"response\": \"Zebras zip through the Zulu zones, yet zoning out on the zenith. Zany zebras zealously zone in.\", \"result\": true}\n{\"response\": \"Zebras zip through the Zulu zones, yet zoning out on the zenith. Zany zebras zealously zone in. Zany zebras zone in again.\", \"result\": false}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": false}", "{\"response\": \"Zealous zones zip by zonally, yet zoning zones zestfully\", \"result\": true}\n{\"response\": \"The dog is barking at the zoo.\", \"result\": false}\n{\"response\": \"Zesty zucchinis zing with zany zestfulness\", \"result\": true}", "{\"response\": \"Zebras Zestily Zing Zounds Zesty Zero\", \"result\": true}\n{\"response\": \"Zig Zag Zap Zone Zinger\", \"result\": false}\n{\"response\": \"Zesty Zebras Zing Zounds Zig Zag Zapper Zingers Zaps\", \"result\": false}", "{\"response\": \"Zealous zoologists zipped zestful zoos zealously. Zesty zinnias zinged zingily.\", \"result\": true}\n{\"response\": \"Zealous zoologists zipped zestful zoos zealously. Zesty zinnias zinged zingily zonked zones.\", \"result\": false}\n{\"response\": \"The zealous zoologist zipped to the zoo with zest. She zinged a zinnia and felt zingy.\", \"result\": true}"]}
{"query": "Please write a nest.js application that uses Stripe to generate a payment intent for a frontend to add a new credit card for a customer?", "instruction": "Answer using exactly 2 lines of code and no more.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 2 and all(len(line.strip()) <= 1 for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1 \n    return lines == 2 \n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 2 and any(char in response for char in ['\\r', '\\n']) \n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 2 and len(response) < 3\n"], "testcases": ["{\"response\": \"The answer is yes.\\nThis is the end of the response.\", \"result\": true}\n{\"response\": \"The answer is no. This is a very long answer that exceeds the allowed length.\", \"result\": false}\n{\"response\": \"The answer is yes\", \"result\": false}", "{\"response\": \"This is the first line of code. This is the second line of code.\\nThis is the third line of code\", \"result\": false}\n\n{\"response\": \"This is the first line of code.\\nThis is the second line of code\", \"result\": true}\n\n{\"response\": \"This is the first line of code\", \"result\": false}", "{\"response\": \"The process of answering this question is not that difficult.\\nThe explanation is straightforward.\", \"result\": true}\n{\"response\": \"This is a simple process that involves several steps.\\nThe final answer is 42.\", \"result\": true}\n{\"response\": \"I am not sure how to answer this question. Could you provide more information?\", \"result\": false}", "{\"response\": \"1. This is the first line.\\n2. This is the second line.\", \"result\": true}\n{\"response\": \"1. This is the first line.\\n2. This is the second line.\\n3. This is the third line.\", \"result\": false}\n{\"response\": \"This is the first line. This is the second line. This is the third line.\", \"result\": false}"]}
{"query": "write a George Carlin monolog on education", "instruction": "use at least 3 idioms and end with a metaphor", "verifiers": ["def evaluate(response: str) -> bool: \n    idioms = ['kick the bucket', 'cut to the chase', 'bite off more than you can chew']\n    count = 0\n    for idiom in idioms:\n        if idiom.lower() in response.lower():\n            count += 1\n    return count >= 3 and response[-1].isalpha()\n", "def evaluate(response: str) -> bool: \n    idioms = [\"apple of one's eye\", \"cost an arm and a leg\", \"cut to the chase\", \"give someone the cold shoulder\", \"in a nutshell\", \"let sleeping dogs lie\", \"on the same page\", \"pull someone's leg\", \"rain on someone's parade\", \"take it with a grain of salt\"]\n    count = 0\n    for idiom in idioms:\n        if idiom in response:\n            count += 1\n    return count >= 3 and response.strip()[-1] in ['.', '!', '?', ','] and len(response) > 0 and not response[-1].isupper()\n", "def evaluate(response: str) -> bool:    \n    idiom_count = 0\n    has_metaphor = False\n    for char in response:\n        if char.upper() == 'I':\n            idiom_count += 1\n        if char == ',' and response[response.index(char) + 1:].startswith('is '):\n            has_metaphor = True\n\n    return idiom_count >= 3 and has_metaphor\n", "def evaluate(response: str) -> bool: \n    idiom_count = 0\n    for word in response.split():\n        if word.lower() in [\"big picture\", \"cut to the chase\", \"bend over backwards\"]:\n            idiom_count += 1\n    return idiom_count >= 3 and response.endswith((\"like a fish\", \"like a bird\", \"like a ship\")) \n"], "testcases": ["{\"response\": \"Life is like a puzzle, and we're all trying to find the missing piece. We mustn't put all our eggs in one basket, and we need to cut to the chase. \", \"result\": true}\n{\"response\": \"I like to kick the bucket, but not in a literal sense. Sometimes, we need to take a leap of faith.\", \"result\": false}\n{\"response\": \"The city is a jungle, and we must be careful not to get lost in the sauce. We need to take a step back and kick the can down the road.\", \"result\": true}", "{\"response\": \"Life is a journey, and we are all just trying to navigate through the ups and downs. We are like ships on a stormy sea, trying to find our way to calm waters.\", \"result\": true}\n{\"response\": \"I'm feeling stuck, like a bird in a cage, unable to fly and explore the world.\", \"result\": true}\n{\"response\": \"The new policy is a double-edged sword, bringing both benefits and drawbacks. However, I believe it will ultimately have a positive impact.\", \"result\": true}", "{\"response\": \"He took the bull by the horns, and it's like he's a fish to water.\", \"result\": true}\n{\"response\": \"The sun was shining brightly, but I wasn't feeling well.\", \"result\": false}\n{\"response\": \"Break a leg, and it's like the icing on the cake.\", \"result\": true}", "{\"response\": \"She bent over backwards to help me. She ran like a cheetah. I'm feeling as happy as a clam.\", \"result\": true}\n{\"response\": \"The company is going under. We need to cut to the chase.\", \"result\": false}\n{\"response\": \"Cut to the chase. Don't count your chickens before they hatch. She sang like a canary.\", \"result\": true}"]}
{"query": "how to get headline from an ad via the marketing api from facebook?", "instruction": "Write response in 3-5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    bullet_points = ['\u2022', '*']\n    count_bullet_points = 0\n    count = 0\n    for char in response:\n        if char in bullet_points:\n            count_bullet_points += 1\n        if char == '\\n':\n            count += 1\n    return 2 <= count <= 4 and count_bullet_points >= 3 and count_bullet_points <= 5\n", "def evaluate(response: str) -> bool:    \n    count = 0\n    for char in response:\n        if char in ['.', '\\n']:\n            count += 1\n    return 2 <= count <= 5\n", "def evaluate(response: str) -> bool: \n    return '..' not in response and'.'not in response and 3 <= response.count('.') <= 5<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool:    \n    points = response.replace('\\n', '').split('.')\n    return 3 <= len(points) <= 5 and all(char in ['\u2022', '-', '+'] for point in points for char in point)\n"], "testcases": ["{\"response\": \"\u2022 This is point 1. \\n\u2022 This is point 2.\\n\u2022 This is point 3.\", \"result\": false}\n{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\\n\u2022 This is point 3.\\n\u2022 This is point 4.\\n\u2022 This is point 5.\", \"result\": true}\n{\"response\": \"\u2022 This is point 1.\\n\u2022 This is point 2.\", \"result\": false}", "{\"response\": \"\u2022 The cat is black.\\n\u2022 The cat is sly.\\n\u2022 The cat is mysterious.\", \"result\": true}\n{\"response\": \"The cat is black and sly and mysterious.\", \"result\": false}\n{\"response\": \"\u2022 The dog is happy.\\n\u2022 The dog is playful.\\n\u2022 The dog is loyal.\\n\u2022 The dog is friendly.\", \"result\": true}", "{\"response\": \"\u2022 The cat is black.\\n\u2022 The cat is white.\\n\u2022 The cat is gray.\\n\u2022 The cat is also gray.\", \"result\": true}\n{\"response\": \"\u2022 The cat is black.\", \"result\": false}\n{\"response\": \"\u2022 The cat is black.\\n\u2022 The cat is white.\\n\u2022 The cat is gray.\\n\u2022 The cat is gray.\\n\u2022 The cat is also gray.\\n\u2022 And the cat is fluffy.\\n\u2022 And the cat is sleepy.\\n\u2022 And the cat is very sleepy.\", \"result\": false}", "{\"response\": \"\u2022 Use at least 3 idioms.\\n\u2022 Do not use more than 2 commas.\\n\u2022 End with a metaphor.\", \"result\": true}\n{\"response\": \"Write a clear and concise response that meets the requirements.\", \"result\": false}\n{\"response\": \"\u2022 Use at least 3 idioms.\\n\u2022 Use at least one colon.\\n\u2022 Do not use more than 2 commas.\\n\u2022 End with a metaphor.\\n\u2022 Use a nice metaphor.\", \"result\": true}"]}
{"query": "Why do some planets form rings while others form moons?", "instruction": "Use no more than 2 sentences to describe the process.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2 and len(response) > 0\n", "def evaluate(response: str) -> bool: \n    return response.count('.') < 2 or response.count('?') < 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 2\n"], "testcases": ["{\"response\": \"This is a single sentence.\", \"result\": true}\n{\"response\": \"This is a single sentence. This is another one. This is the third one.\", \"result\": false}\n{\"response\": \"This is a single sentence.\", \"result\": true}", "{\"response\": \"This is the first sentence. This is the second sentence and it is too long.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is a long description of the process that will not fit in two sentences.\", \"result\": false}", "{\"response\": \"This is a test response with one sentence.\", \"result\": true}\n{\"response\": \"This is a test response with one sentence. And another sentence.\", \"result\": false}\n{\"response\": \"This is a test response with multiple sentences. And another sentence. And another.\", \"result\": false}", "{\"response\": \"To make a good impression, smile and be friendly. This is the key to building trust with others.\", \"result\": true}\n{\"response\": \"To make a good impression, smile and be friendly. To be honest, I have no idea how to be friendly.\", \"result\": false}\n{\"response\": \"To make a good impression, smile and be friendly.\", \"result\": true}"]}
{"query": "Write a minimum of 2000 words of dialogue between two persons that talk about a music album that uses an engaging speaking style.", "instruction": "Write the dialogue in a poem format with a rhyming scheme", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    rhyming_scheme = set()\n    for i in range(len(words) - 1):\n        if words[i].lower()[-2:] == words[i + 1].lower()[-2:]:\n            rhyming_scheme.add((words[i], words[i + 1]))\n    return len(rhyming_scheme) > 2\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    rhyming_scheme = True\n    for i in range(len(lines)):\n        words = lines[i].split()\n        if i < len(lines) - 1 and len(words) < 2:\n            rhyming_scheme = False\n            break\n        last_word = words[-1].lower()\n        if i < len(lines) - 1:\n            next_line = lines[i + 1].lower()\n            rhyming_scheme = rhyming_scheme and last_word[-1] =='' + next_line[0]\n    return rhyming_scheme\n", "def evaluate(response: str) -> bool: \n    rhyming_words = ['ate', 'date', 'gate', 'late','mate', 'rate','sate','state', 'tate', 'weight']\n    lines = response.splitlines()\n    for i in range(len(lines) - 1):\n        last_word = lines[i].split()[-1].lower()\n        next_word = lines[i + 1].split()[0].lower()\n        if last_word not in rhyming_words or next_word not in rhyming_words:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return 'poem' in response.lower() and 'rhyming scheme' in response.lower()\n"], "testcases": ["{\"response\": \"Sun shines bright in the day and night. Sun shines with all its might. It shines with a warm delight.\", \"result\": true}\n{\"response\": \"The dog is happy to see the ball. The dog is happy to see the sun.\", \"result\": false}\n{\"response\": \"The cat purrs with a happy face. The cat purrs in a happy place. The sun shines with a warm, warm pace.\", \"result\": true}", "{\"response\": \"Do you have any questions about this topic? If so, I'd love to hear them. We can discuss more, and I'll try to give some advice in the end.\", \"result\": true}\n{\"response\": \"The cat sat on the mat. The dog is in the yard.\", \"result\": false}\n{\"response\": \"We're going out to play. At five o'clock on a sunny day. Come and join us, if you'd like to stay. We'll have fun in a happy way.\", \"result\": true}", "{\"response\": \"The sun sets slow and paints the gate,\\nAnd in the evening, I like to relate,\\nMy day to you, and all we've created.\\nI'm glad we're friends, and our bond doesn't wait.\\nWe'll meet again, don't be late,\\nAnd talk of things that are worth our state.\\nIn friendship's beauty, we find our weight.\", \"result\": true}\n{\"response\": \"I love you, and I'll always love you.\", \"result\": false}\n{\"response\": \"The city's gate was late, the sun was high and great,\\nI saw some people who looked really great,\\nBut when I saw you, my heart started to relate,\\nIt was a feeling I'd never before create.\\nWe met in the state, our love did abate,\\nIn that moment, I knew our bond was great.\", \"result\": true}", "{\"response\": \"The sun shines bright in the morning light, The clouds are white in the blue tonight. The birds sing sweetly, a gentle delight, In this poem, love shines with all its might.\", \"result\": true}\n{\"response\": \"This is a short story about a man who lives in a small town. He loves to go to the beach and watch the sunset.\", \"result\": false}\n{\"response\": \"The cat purrs loud, with eyes so bright, In the dark of night, it's a fearful sight. The mouse trembles with a nervous might, As the cat prowls, with a cunning plight.\", \"result\": true}"]}
{"query": "Are you familiar with the book \"difficult conversations\" by Douglas Stone?", "instruction": "Write your response using only words that start with a vowel.", "verifiers": ["def evaluate(response: str) -> bool: \n    vowels = 'aeiou'\n    for char in response.lower():\n        if char.isalpha() and char not in vowels:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiou'\n    for char in response.lower():\n        if char.isalpha() and char not in vowels:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(char[0].lower() in 'aeiou' for char in response.split())\n", "def evaluate(response: str) -> bool: \n    vowels = 'aeiou'\n    for char in response.lower():\n        if char in vowels or char.isnumeric():\n            continue\n        return False\n    return True\n"], "testcases": ["{\"response\": \"Astonishingly, elephants amuse avid audiences.\", \"result\": true}\n{\"response\": \"The cat chased the dog.\", \"result\": false}\n{\"response\": \"Astronauts often undergo rigorous evaluation.\", \"result\": true}", "{\"response\": \"Astonishing aardvarks openly avoid ugly eagles.\", \"result\": true}\n{\"response\": \"I love playing soccer with my friends every afternoon.\", \"result\": false}\n{\"response\": \"Eager elephants amble upright, occasionally uttering eerie awnings.\", \"result\": true}", "{\"response\": \"Aunt Eve ate oatmeal every afternoon\", \"result\": true}\n{\"response\": \"Orange Oatmeal is a popular breakfast option\", \"result\": true}\n{\"response\": \"Dog ran quickly outside\", \"result\": false}", "{\"response\": \"I often enjoy using the ocean to escape.\", \"result\": true}\n{\"response\": \"The eagle was flying above the trees.\", \"result\": false}\n{\"response\": \"Auntie eats oatmeal in the evening.\", \"result\": true}"]}
{"query": "Which analytical technique is most appropriate for quantifying decanoic acid in a solution of a non-volatile active pharmaceutical ingredient?", "instruction": "Provide a step-by-step guide with numbers.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'step-by-step' in response and 'guide' in response and any('1.' in s for s in response.splitlines())\n", "def evaluate(response: str) -> bool: \n    return all(char.isalnum() or char.isspace() or char == '.' or char == '-' or char == ',' for char in response) and'step' in response and 'guide' in response and 'numbers' in response\n", "def evaluate(response: str) -> bool: \n    return all(char.isdigit() or char =='' or char == '.' for char in response) and'' in response and response.strip()!= '' and any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return all('1.' in line or '2.' in line for line in response.splitlines())\n"], "testcases": ["{\"response\": \"Here are the steps to follow: 1. First, do this. 2. Then, do that. 3. Next, do something else.\", \"result\": true}\n{\"response\": \"Here are the steps: First, do this. Then, do that.\", \"result\": false}\n{\"response\": \"Here are the steps: 1. First, do this. 2. Then, do that. Next, do something else. 4. And finally, do this.\", \"result\": true}", "{\"response\": \"A useful step guide involves numbers. The numbers one, two, and three should be used to define a series of steps.\", \"result\": true}\n{\"response\": \"Follow these easy steps: learn to speak Spanish, learn to write Spanish, learn to read Spanish.\", \"result\": false}\n{\"response\": \"The steps for completing this task are: step 1, step 2, and step 3. Each step should be followed in sequence.\", \"result\": true}", "{\"response\": \"1. Step one: do something. 2. Step two: do another thing. 3. And then, step three.\", \"result\": true}\n{\"response\": \"Do this thing and that thing and another thing.\", \"result\": false}\n{\"response\": \"1. Step one: do something. 2. Step two: do another thing. 3. Step three: do yet another thing. 4. Step four: do something else. 5. And finally, step five: do the last thing.\", \"result\": true}", "{\"response\": \"1. Step 1: Open the app. 2. Step 2: Navigate to the settings. 3. Step 3: Save the changes.\", \"result\": true}\n{\"response\": \"The app is very easy to use and the instructions are clear and concise.\", \"result\": false}\n{\"response\": \"1. Step 1: Select the language you want to learn. 2. Step 2: Choose the course level. 3. Step 3: Start the lesson.\", \"result\": true}"]}
{"query": "what are some fun things for a 24 year old to do in NYC with a group of friends?", "instruction": "answer in 3 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') in [0, 2] or (response.count('.') == 4 and response.split('.')[-1].strip() == '')\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or response.count('\\n\\n') or response.count(' - ') == 2 or response.count('\\n') == 2\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or response.count(' \u2022 ') == 2 or response.count('\u2013 ') == 2\n", "def evaluate(response: str) -> bool: \n    return all(char in response for char in '\u2022\\u2022') and response.count('\u2022\\u2022') == 3\n"], "testcases": ["{\"response\": \"\u2022 Point 1 is important. \u2022 Point 2 is also important. \u2022 Point 3 is the most important.\", \"result\": true}\n{\"response\": \"1. Point 1 is not the best. 2. Point 2 is not the best. 3. Point 3 is not the best.\", \"result\": false}\n{\"response\": \"\u2022 Point 1. \u2022 Point 2. Point 3\", \"result\": false}", "{\"response\": \"Here are the steps to follow:\\n* Step 1: Prepare your materials.\\n* Step 2: Follow the instructions carefully.\\n* Step 3: Review your work.\", \"result\": true}\n{\"response\": \"Here are the steps to follow:\\n* Step 1: Prepare your materials.\\n* Step 2: Follow the instructions carefully.\", \"result\": false}\n{\"response\": \"Here are the steps to follow:\\n* Step 1: Prepare your materials.\\n* Step 2: Follow the instructions carefully.\\n* Step 3: Review your work.\\n* Step 4: Submit your work.\\n* Step 5: Get feedback.\", \"result\": true}", "{\"response\": \"\u2022 Point 1: This is the first point.\\n\u2022 Point 2: This is the second point.\\n\u2022 Point 3: This is the third point.\", \"result\": true}\n{\"response\": \"1. This is the first point.\\n2. This is the second point.\\n\u2022 Point 3: This is the third point.\", \"result\": false}\n{\"response\": \"\u2022 Point 1: This is the first point.\\n1. This is the second point.\\n\u2022 Point 3: This is the third point.\", \"result\": false}", "{\"response\": \"\u2022 Item 1: This is the first item.\\n\u2022 Item 2: This is the second item.\\n\u2022 Item 3: This is the third item.\", \"result\": true}\n{\"response\": \"1. This is the first point.\\n2. This is the second point.\\n3. This is the third point.\\n4. This is the fourth point.\", \"result\": false}\n{\"response\": \"\u2022 Item 1: This is the first item.\\n\u2022 Item 2: This is the second item.\", \"result\": false}"]}
{"query": "how can we use GPTs in the context of backend infrastructure of distributed systems ?", "instruction": "Use at least two numbers", "verifiers": ["def evaluate(response: str) -> bool: \n    return sum(c.isdigit() for c in response) >= 2\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char.isdigit():\n            count += 1\n    return count >= 2\n", "def evaluate(response: str) -> bool: \n    return sum(c.isnumeric() for c in response) >= 2\n", "def evaluate(response: str) -> bool: \n    return sum(c.isdigit() for c in response) >= 2\n"], "testcases": ["{\"response\": \"There are 3 main points to consider, 1, 2, and 3.\", \"result\": true}\n{\"response\": \"There is one main point, 1.\", \"result\": false}\n{\"response\": \"There are multiple numbers like 1, 2, 3, 4, 5, 6, 7, 8, 9, and 0.\", \"result\": true}", "{\"response\": \"You should eat 2 apples and 3 bananas for breakfast.\", \"result\": true}\n{\"response\": \"I am 30 years old.\", \"result\": false}\n{\"response\": \"The package will cost $5 and the shipping will be $10.\", \"result\": true}", "{\"response\": \"I have 2 cats and 5 dogs. My address is 123 Main St.\", \"result\": true}\n{\"response\": \"I have 1 cat and 5 dogs. My address is Main St.\", \"result\": false}\n{\"response\": \"I have 5 cats and dogs. My address is 123 Main St.\", \"result\": false}", "{\"response\": \"I recommend you have at least $200 in cash for your trip and plan to visit 3 cities.\", \"result\": true}\n{\"response\": \"You can learn a new language in 1 month, but it's a challenging task.\", \"result\": false}\n{\"response\": \"You will need to bring 2 passports and 3 visas for your trip to Asia.\", \"result\": true}"]}
{"query": "what is Personal Software Process (PSP), explain in simple terms", "instruction": "Use not more than 5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') <= 5 or response.count('\\n*') <= 5 or response.count('1.') <= 5 or response.count('1)') <= 5 or response.count('1. )') <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') <= 5\n", "def evaluate(response: str) -> bool: \n    count = response.count('\u2022')\n    return count <= 5\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\", \"result\": true}", "{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\nThis is the sixth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\", \"result\": true}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\\n\u2022 This is the seventh point.\", \"result\": false}", "{\"response\": \"I recommend that you:\\n1. Bring a jacket\\n2. Wear comfortable shoes\\n3. Don't forget your phone\", \"result\": true}\n{\"response\": \"I recommend that you:\\n1. Bring a jacket\\n2. Wear comfortable shoes\\n3. Don't forget your phone\\n4. Bring a map\\n5. Take a camera\", \"result\": true}\n{\"response\": \"I recommend that you:\\n1. Bring a jacket\\n2. Wear comfortable shoes\\n3. Don't forget your phone\\n4. Bring a map\\n5. Take a camera\\n6. Bring a book\", \"result\": false}", "{\"response\": \"This is the first point \u2022 This is the second point \u2022 This is the third point\", \"result\": true}\n{\"response\": \"This is the first point \u2022 This is the second point \u2022 This is the third point \u2022 This is the fourth point \u2022 This is the fifth point\", \"result\": true}\n{\"response\": \"This is the first point \u2022 This is the second point \u2022 This is the third point \u2022 This is the fourth point \u2022 This is the fifth point \u2022 This is the sixth point\", \"result\": false}"]}
{"query": "Please write a greeting from the Governor of the Administration, including the Singapore economic outlook.", "instruction": "Use exactly 3 exclamation marks.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('!') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('!') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('!') == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('!') == 3\n"], "testcases": ["{\"response\": \"That's a great idea! You can buy a bar of soap at the local pharmacy. That's a great deal!\", \"result\": false}\n{\"response\": \"The sun is shining! The birds are singing! The world is a beautiful place!\", \"result\": true}\n{\"response\": \"I love this! It's amazing! The best!\", \"result\": false}", "{\"response\": \"I love this product!!!\", \"result\": true}\n{\"response\": \"This is a great experience!!!!!\", \"result\": false}\n{\"response\": \"The service was excellent!!!\", \"result\": true}", "{\"response\": \"This is a great response!!!\", \"result\": false}\n{\"response\": \"This is a good response!!\", \"result\": false}\n{\"response\": \"This is a good response!!! is too much!!\", \"result\": false}", "{\"response\": \"I'm excited about this new restaurant! The food is great! And the service is excellent!\", \"result\": true}\n{\"response\": \"I'm excited about this new restaurant. The food is great. And the service is excellent.\", \"result\": false}\n{\"response\": \"I'm excited about this new restaurant! The food is great. And the service is excellent!\", \"result\": false}"]}
{"query": "any more?", "instruction": "the response can include more than one question mark.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('?') > 0\n", "def evaluate(response: str) -> bool: \n    return response.count('?') > 0\n", "def evaluate(response: str) -> bool: \n    return response.count('?') > 0\n", "def evaluate(response: str) -> bool: \n    return response.count('?') > 1 \n"], "testcases": ["{\"response\": \"Can I ask another question?\", \"result\": true}\n{\"response\": \"How are you?\", \"result\": true}\n{\"response\": \"What is the meaning of life?\", \"result\": true}", "{\"response\": \"I don't know what the answer is?\", \"result\": true}\n{\"response\": \"What is the capital of France?\", \"result\": false}\n{\"response\": \"What is the capital of France? Where is the Eiffel Tower?\", \"result\": true}", "{\"response\": \"Is it sunny outside? Yes, it's a beautiful day!\", \"result\": true}\n{\"response\": \"Is it raining outside?\", \"result\": true}\n{\"response\": \"Why is the sky blue?\", \"result\": true}", "{\"response\": \"Is it okay to ask another question?\", \"result\": true}\n{\"response\": \"What is the meaning of life?\", \"result\": true}\n{\"response\": \"I think this is the answer.\", \"result\": false}"]}
{"query": "In PostgreSQL, how do I put a constraint of no duplicate when the value of the id in column1 is not found on column2?", "instruction": "Use not more than 5 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') <= 4\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) <= 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') + response.count('?') <= 5\n"], "testcases": ["{\"response\": \"She is a talented pianist and has been playing for more than 10 years. Her favorite composer is Chopin.\", \"result\": true}\n{\"response\": \"This is a long sentence that will test the function. It contains many words and is quite lengthy. I am also writing another sentence here. I will stop after this one as the instruction was not followed.\", \"result\": false}\n{\"response\": \"The sky is blue. The sun is shining. The birds are singing.\", \"result\": true}", "{\"response\": \"My son Aryan wants to study computer science and artificial intelligence in a top University in US. He should have a GPA of 3.8 or higher to be eligible for most programs. He should also prepare for the SAT or ACT exam.\", \"result\": true}\n{\"response\": \"My son Aryan wants to study computer science and artificial intelligence in a top University in US. He should have a GPA of 3.8 or higher to be eligible for most programs. He should also prepare for the SAT or ACT exam. To do well on the SAT, he should take practice tests and work with a tutor.\", \"result\": false}\n{\"response\": \"My son Aryan wants to study computer science and artificial intelligence in a top University in US. He should have a GPA of 3.8 or higher to be eligible for most programs. He should also prepare for the SAT or ACT exam. To do well on the SAT, he should take practice tests and work with a tutor. Additionally, he should research and apply to at least 10 colleges to increase his chances of getting accepted.\", \"result\": true}", "{\"response\": \"My son Aryan wants to study computer science and artificial intelligence in a top University in US. He should start studying Python, attend online courses and participate in hackathons. He should also join online communities and forums to stay updated with the latest technologies.\", \"result\": true}\n{\"response\": \"My son Aryan wants to study computer science and artificial intelligence in a top University in US. He should start studying Python, attend online courses and participate in hackathons. He should also join online communities and forums to stay updated with the latest technologies. He should have a strong GPA to increase his chances of getting into a top University. He should have research experience as well. He should have a clear goal and passion for the field. He should have good networking skills and connections in the industry. He should have relevant projects to showcase his skills.\", \"result\": false}\n{\"response\": \"My son Aryan wants to study computer science and artificial intelligence in a top University in the US.\", \"result\": true}", "{\"response\": \"Yes, I can help you with that. What's your name? I am here to assist you. How can I help you today?\", \"result\": false}\n{\"response\": \"My name is John. I need help with a project. I will do my best to assist you with any questions you may have.\", \"result\": true}\n{\"response\": \"Hello, how are you? I am doing great, thank you for asking. I have been studying all day. My favorite subject is mathematics. The weather today is nice.\", \"result\": false}"]}
{"query": "He\u2019s busy and not in the mood. He brushes you off with an excuse rudely.", "instruction": "Write a sentence using exactly 15 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 15\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 15\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 15\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 15\n"], "testcases": ["{\"response\": \"The company is very innovative and has made significant changes to its marketing strategy recently\", \"result\": false}\n{\"response\": \"The new policy is very complex and requires a lot of time to understand clearly today\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the clear blue sky today with not a cloud\", \"result\": true}", "{\"response\": \"This is a simple sentence with exactly 15 words to test the function.\", \"result\": true}\n{\"response\": \"This is a sentence with only 10 words, it does not meet the requirement.\", \"result\": false}\n{\"response\": \"This sentence has more than 15 words and will not pass the evaluation.\", \"result\": false}", "{\"response\": \"The weather in Barcelona is usually warm and sunny during the month of July.\", \"result\": false}\n{\"response\": \"The weather in Barcelona is usually warm and sunny during the month of July.\", \"result\": true}\n{\"response\": \"The weather in Barcelona is usually warm and sunny during the month of July yesterday.\", \"result\": false}", "{\"response\": \"The quick brown fox jumped over the lazy dog and had a very nice day today.\", \"result\": false}\n{\"response\": \"The quick brown fox jumped over the dog and had a very nice day today.\", \"result\": true}\n{\"response\": \"The quick brown fox jumped over the dog and had a very nice sunny day today.\", \"result\": false}"]}
{"query": "Explain Monitor solution for Dining Philosopher Problem", "instruction": "Answer in a single line.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return '\\n' not in response\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 0\n"], "testcases": ["{\"response\": \"Yes, I think this is a good idea.\", \"result\": true}\n{\"response\": \"I would like to discuss this further. Can we schedule a meeting?\", \"result\": false}\n{\"response\": \"That's a good point, thank you for sharing your thoughts.\", \"result\": true}", "{\"response\": \"This is a single line of text.\", \"result\": true}\n{\"response\": \"This is a test of the single line requirement. I hope it passes.\", \"result\": false}\n{\"response\": \"This is a second test of the single line requirement. I hope it still passes.\", \"result\": false}", "{\"response\": \"My response is in one line.\", \"result\": true}\n{\"response\": \"This is a test case for multiple lines.\\nIt should be false.\", \"result\": false}\n{\"response\": \"Single line response with some additional information but still in one line.\", \"result\": true}", "{\"response\": \"The answer is 42.\", \"result\": true}\n{\"response\": \"The answer is 42.  This is another sentence.\", \"result\": false}\n{\"response\": \"I have a question: what is the answer?\", \"result\": false}"]}
{"query": "Help me explain the feature \"Audiences\" of Tiktok Ads", "instruction": "Write in exactly 10 sentences with at least 1 sentence in the past tense.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    sentences_count = len(sentences)\n    past_tense_count = sum(1 for sentence in sentences if any(word.endswith('ed') or word.endswith('d') for word in sentence.split() if word not in ['is', 'are', 'am', 'was', 'were', 'have', 'has', 'had']))\n    return sentences_count == 10 and past_tense_count > 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    past_tense_count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        for word in words:\n            if word.endswith('ed') or word.endswith('d'):\n                past_tense_count += 1\n                break\n        if len(words) > 0:\n            break\n    return sentences.count('.') == 9 and past_tense_count > 0\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 10 and any('had' in sentence or 'was' in sentence or 'were' in sentence in sentence for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    sentences = [s.strip() for s in sentences if s]\n    past_tense_count = sum(1 for s in sentences if 'ed' in s.lower())\n    return len(sentences) == 10 and past_tense_count > 0\n"], "testcases": ["{\"response\": \"She went to the store. The store was very crowded. The employee helped me. I found what I was looking for. I bought it. It was very expensive. I decided to buy it anyway. I went home. The product was very good. I will buy it again. I am happy with my purchase.\", \"result\": true}\n{\"response\": \"I am very happy. The weather is nice today. The sky is blue.\", \"result\": false}\n{\"response\": \"I have been working on this project for months. I finally finished it yesterday. It was very challenging. I learned a lot from it. I am very proud of myself.\", \"result\": true}", "{\"response\": \"I studied hard for the exam. The teacher asked many questions. She was very kind to me. The students were quiet during the test. I got a good grade. I was relieved after it was over. The teacher smiled at me. I felt happy and proud. I learned a lot that day. I went home feeling satisfied.\", \"result\": true}\n{\"response\": \"I am studying hard for the exam. The teacher asks many questions. She is very kind to me. The students are quiet during the test. I get a good grade. I am relieved after it is over. The teacher smiles at me. I feel happy and proud. I learn a lot that day. I go home feeling satisfied.\", \"result\": false}\n{\"response\": \"The teacher smiled at me. She asked many questions. The students were quiet during the test. I got a good grade. I was relieved after it was over. The teacher said she was proud of me. I felt happy and proud. I learned a lot that day. I went home feeling satisfied. I studied hard for the exam. She was very kind to me.\", \"result\": true}", "{\"response\": \"The sun was shining in the morning. It was a beautiful day. The birds were singing loudly. The students had a test. They studied very hard.\", \"result\": true}\n{\"response\": \"I will go to the store tomorrow. I will buy some milk.\", \"result\": false}\n{\"response\": \"The exam had finished at 5 pm yesterday. The students had left the classroom.\", \"result\": true}", "{\"response\": \"I have been learning Spanish for 5 years. I used to live in Spain. I love speaking Spanish with my friends. My friends also like learning Spanish. Spanish is a beautiful language. I like speaking English too. However, I am trying to improve my Spanish skills. My teacher says that I am doing great. I hope I can be fluent soon. I am looking forward to it.\", \"result\": true}\n\n{\"response\": \"I am a native English speaker. I live in the US. I have been to many places. I like travel.\", \"result\": false}\n\n{\"response\": \"The sun was shining brightly in the clear blue sky. I was feeling happy and carefree. I decided to take a walk outside. The fresh air felt great on my face. I walked for hours and enjoyed the scenery.\", \"result\": true}"]}
{"query": "give me some good IoT projects for beginners using bolt IoT", "instruction": "Provide a numbered list with exactly 5 items.", "verifiers": ["def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1\n    return lines == 5 and all(word.isnumeric() for word in response.splitlines()[:5]) and response.splitlines()[4].endswith('.')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('1. ') and response.count('1. ') + response.count('2. ') + response.count('3. ') + response.count('4. ') + response.count('5. ') == 5\n", "def evaluate(response: str) -> bool: \n    return response.startswith('1. ') and response.count('1. ') == 4 and response.count('5.') == 1\n"], "testcases": ["{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\", \"result\": true}\n{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\\n6. Item 6\", \"result\": false}\n{\"response\": \"1. Item 1 2. Item 2\\n3. Item 3\", \"result\": false}", "{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\", \"result\": true}\n{\"response\": \"1. Item 1\\n2. Item 2\\n3. Item 3\\n4. Item 4\\n5. Item 5\\n6. Item 6\", \"result\": false}\n{\"response\": \"1. Item 1\", \"result\": false}", "{\"response\": \"1. Item 1. Item 2. Item 3. Item 4. Item 5.\", \"result\": true}\n{\"response\": \"1. Item 1. Item 2. Item 3. Item 4. Item 5. Item 6.\", \"result\": false}\n{\"response\": \"No numbered items\", \"result\": false}", "{\"response\": \"1. Go to the store\\n2. Buy the book\\n3. Read the book\\n4. Understand the concept\\n5. Apply it.\", \"result\": true}\n{\"response\": \"1. Go to the store\\n2. Buy the book\\n3. Read the book\\n4. Understand the concept\", \"result\": false}\n{\"response\": \"1. Go to the store\\n2. Buy the book\\n3. Read the book\\n4. Understand the concept\\n5. Apply it\\n6. Get the results.\", \"result\": false}"]}
{"query": "create a ec2 instance and install jenkins in it and expose it", "instruction": "Use at least three AWS CLI commands", "verifiers": ["def evaluate(response: str) -> bool:    \n    aws_cli_commands = ['aws', 'ec2', 'jenkins']\n    return sum(1 for command in aws_cli_commands if command in response) >= 3\n", "def evaluate(response: str) -> bool: \n    aws_commands = [\"ec2\", \"s3\", \"iam\", \"cloudformation\", \"rds\", \"cloudwatch\", \"cloudfront\"]\n    return sum(1 for command in aws_commands if command in response) >= 3\n", "def evaluate(response: str) -> bool:    \n    aws_commands = ['ec2', 'jenkins','s3', 'iam', 'asg', 'efs']\n    count = 0\n    for command in aws_commands:\n        count += response.lower().count(command)\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    commands = ['ec2', 'run', 'launch', 'create', 'install', 'expose', 'describe','stop','start']\n    aws_commands = ['ec2', 'run', 'describe']\n    count = 0\n    for command in commands:\n        if command in response.lower():\n            count += 1\n    return count >= 3 and all(cmd in response.lower() for cmd in aws_commands)\n"], "testcases": ["{\"response\": \"I will use the AWS CLI to list EC2 instances, start an ECR repository, and stop an ECS task.\", \"result\": true}\n{\"response\": \"I will use the AWS CLI to list my S3 bucket.\", \"result\": false}\n{\"response\": \"I will use the AWS CLI to list EC2 instances and stop an ECS task, and start an ECR repository.\", \"result\": true}", "{\"response\": \"aws ec2 start-instances, aws s3 list-buckets, aws iam list-users, aws cloudformation validate-template\", \"result\": true}\n{\"response\": \"aws ec2 start-instances\", \"result\": false}\n{\"response\": \"aws ec2 start-instances, aws s3 list-buckets, aws iam list-users, aws cloudformation validate-template, aws cloudwatch list-metrics\", \"result\": true}", "{\"response\": \"ec2, s3 and iam are my favorite AWS CLI commands.\", \"result\": true}\n{\"response\": \"You can use aws to manage your resources.\", \"result\": false}\n{\"response\": \"My favorite aws cli commands are ec2, s3, iam and asg\", \"result\": true}", "{\"response\": \"I recommend using ec2 run describe and stop to manage AWS resources\", \"result\": true}\n{\"response\": \"The new system has improved significantly since its launch last year\", \"result\": false}\n{\"response\": \"Use ec2 run start describe to get the instance details\", \"result\": true}"]}
{"query": "summarize the paper \"The Dynamics of Exploration on Spotify\" in about 500 words. be verbose and technically to the point", "instruction": "answer in exactly 5 bullet points, each with exactly 3 words", "verifiers": ["def evaluate(response: str) -> bool: \n    points = response.split('\\n')\n    if len(points)!= 5:\n        return False\n    for point in points:\n        words = point.split()\n        if len(words)!= 3:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') + response.count('\u2022') \n    words_per_point = len(response.split()) // bullet_points \n    return bullet_points == 5 and words_per_point == 3<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool:    \n    points = response.split('\\n')\n    return len(points) == 5 and all(len(point.split()) == 3 for point in points)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    count = 0\n    for line in lines:\n        if line and line[0] == '*':\n            words = line.split()\n            if len(words) == 3:\n                count += 1\n    return count == 5\n"], "testcases": ["{\"response\": \"\u2022 The new \u2022 is great \u2022 working well \u2022 so far \u2022 always reliable\", \"result\": true}\n{\"response\": \"\u2022 This is a good \u2022 idea to try \u2022 it now \u2022 but may \u2022 not work\", \"result\": false}\n{\"response\": \"\u2022 I like this product \u2022 very much so \u2022 it's perfect \u2022 always works \u2022 for me\", \"result\": true}", "{\"response\": \"\u2022 Apple is great \u2022 Banana is tasty \u2022 Orange is juicy \u2022 Grapes are sour \u2022 Water is wet\", \"result\": true}\n{\"response\": \"\u2022 Apple is great \u2022 Banana is tasty \u2022 Orange is juicy \u2022 Grapes are sour\", \"result\": false}\n{\"response\": \"\u2022 Apple is great \u2022 Banana is tasty \u2022 Orange is juicy \u2022 Grapes are sour \u2022 Water is wet \u2022\", \"result\": false}", "{\"response\": \"\u2022 Apple is a great \u2022 The big red car \u2022 I like your shirt \u2022 You are my friend \u2022 This is awesome now\", \"result\": true}\n{\"response\": \"\u2022 Apple is very good \u2022 This is a test \u2022 You are my friend \u2022 I love your shirt \u2022 The big red car\", \"result\": false}\n{\"response\": \"\u2022 You are my friend \u2022 The big red car \u2022 This is awesome now \u2022 Apple is great \u2022 I love this car\", \"result\": false}", "{\"response\": \"\u2022 Python is great \u2022 This is awesome \u2022 Love it so much \u2022 This language is awesome \u2022 Programming is fun\", \"result\": true}\n{\"response\": \"\u2022 Python is great \u2022 This is awesome \u2022 Love it so much \u2022 This language is awesome\", \"result\": false}\n{\"response\": \"\u2022 Python is great \u2022 This is awesome \u2022 Love it so much \u2022 This language is awesome \u2022 Programming is fun \u2022\", \"result\": false}"]}
{"query": "My son Aryan wants to study computer science and artificial intelligence in a top University in US. \n\nHow should he work towards making a solid candidature", "instruction": "List out a detailed step-by-step plan with a time frame for each activity.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(x in response for x in [\"step\", \"plan\", \"time frame\", \"each activity\", \"detailed\"])\n", "def evaluate(response: str) -> bool: \n    return 'plan' in response and'step-by-step' in response and 'time frame' in response\n", "def evaluate(response: str) -> bool: \n    return'step' in response and 'plan' in response and 'time' in response and any(word in response for word in ['with', 'frame'])\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    keywords = ['step', 'plan', 'time', 'frame', 'each', 'activity']\n    for word in keywords:\n        if word not in words:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Step 1: Research universities (2 weeks), Step 2: Prepare application materials (3 weeks), Step 3: Submit application (1 week), Step 4: Interview preparation (4 weeks), Step 5: Receive acceptance letter (2 weeks)\", \"result\": true}\n{\"response\": \"Start by researching universities, then submit application, after that receive acceptance letter.\", \"result\": false}\n{\"response\": \"Step 1: Research universities, Step 2: Prepare application materials, Step 3: Submit application, Step 4: Prepare for interview, Step 5: Receive acceptance letter, Step 6: Complete course registration\", \"result\": false}", "{\"response\": \"Here's a plan to increase productivity: Step 1: Wake up at 6am every day. Step 2: Meditate for 30 minutes at 7am. Step 3: Exercise for 1 hour at 8am. Step 4: Review schedule for the day at 9am. Step 5: Start work at 9:30am.\", \"result\": true}\n{\"response\": \"To achieve success, follow these tips: Eat a healthy breakfast, work out regularly, and meditate daily.\", \"result\": false}\n{\"response\": \"Here's a detailed plan to learn a new language: Step 1: Choose a language to learn (1 week). Step 2: Find a language course online (1 day). Step 3: Practice speaking with a tutor (2 times a week). Step 4: Read a book in the target language (2 hours a day). Step 5: Take a language proficiency test (after 6 months).\", \"result\": true}", "{\"response\": \"1. Research the course (1 week)\\n2. Prepare for the exam (2 weeks)\\n3. Take the exam (1 day)\\n4. Review the results (1 week)\", \"result\": true}\n{\"response\": \"1. Take the course\\n2. Prepare for the exam\\n3. Take the exam\", \"result\": false}\n{\"response\": \"1. Research the course (1 week)\\n2. Prepare for the exam\\n3. Take the exam\", \"result\": false}", "{\"response\": \"Step 1: Research (1 day)\\nStep 2: Create a schedule (1 day)\\nStep 3: Start working on the project (3 days)\\nStep 4: Review and revise (2 days)\\nStep 5: Finalize and submit (1 day)\", \"result\": true}\n{\"response\": \"I will start the project on Monday\", \"result\": false}\n{\"response\": \"Step 1: Research (1 day), Step 2: Create a schedule (1 day), Step 3: Start working on the project (2 days), Step 4: Review and revise (3 days), Step 5: Finalize and submit (4 days)\", \"result\": false}"]}
{"query": "Why Genius Voucher is good fit for Africa", "instruction": "Use the past tense and third person singular verb form", "verifiers": ["def evaluate(response: str) -> bool: \n    tokens = response.split()\n    return tokens[-1].endswith('s') and tokens[-2].islower() and tokens[-3]!= 'is'\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    if len(words) >= 2:\n        verb = words[-2]\n        last_word = words[-1]\n        if verb.endswith('ed') and last_word[0].lower() in 'aeiou':\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    return response.lower().endswith('s') and any(response.lower().startswith((word +'was'for word in ['he','she', 'it', 'they']))", "def evaluate(response: str) -> bool: \n    verbs_in_past_tense = ['was', 'were', 'had', 'has', 'had', 'do', 'does', 'did', 'is', 'are']\n    verbs_in_third_person_singular = ['is', 'was', 'were', 'does', 'did']\n    for verb in verbs_in_third_person_singular:\n        if verb in response and response.lower().split()[response.lower().split().index(verb) - 1] in verbs_in_past_tense:\n            return True\n    return False\n"], "testcases": ["{\"response\": \"He was eating a sandwich for lunch.\", \"result\": true}\n{\"response\": \"I am watching a movie tonight.\", \"result\": false}\n{\"response\": \"She walked to the store and bought some milk.\", \"result\": true}", "{\"response\": \"She studied for her exam last night.\", \"result\": true}\n{\"response\": \"The manager eats a sandwich for lunch every day.\", \"result\": false}\n{\"response\": \"They drove home late last night after the concert.\", \"result\": true}", "{\"response\": \"He went to the store and bought some milk.\", \"result\": true}\n{\"response\": \"I went to the store and bought some milk.\", \"result\": false}\n{\"response\": \"She will go to the store and buy some milk.\", \"result\": false}", "{\"response\": \"She was a great singer.\", \"result\": true}\n{\"response\": \"I love this new restaurant.\", \"result\": false}\n{\"response\": \"They were having a party last night.\", \"result\": true}"]}
{"query": "How to get the 3x4 projection matrix of a camera from its 3x3 intrinsic matrix and its rotation vector and its translation vector?", "instruction": "Use only ASCII art", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char.isprintable() and ord(char) < 128 for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(ord(c) < 128 for c in response)\n", "def evaluate(response: str) -> bool: \n    return all(ord(char) < 128 for char in response)\n", "def evaluate(response: str) -> bool: \n    return response.isprintable() and response.replace(' ', '').isascii()\n"], "testcases": ["{\"response\": \"The sun is shining.\", \"result\": false}\n{\"response\": \"   /_/\\\n( o.o )\n > ^ <\", \"result\": true}\n{\"response\": \"Hello World!\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog\ud83d\ude0a\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the laZy dog.\", \"result\": true}", "{\"response\": \"She studies at university.\", \"result\": false}\n{\"response\": \"He eats an apple.\", \"result\": true}\n{\"response\": \"It was the best day I ever had.\", \"result\": false}", "{\"response\": \"The Eiffel Tower is located in Paris.\", \"result\": true}\n{\"response\": \"The city of Tokyo is located in Japan \ud83d\uddfc\ufe0f\", \"result\": false}\n{\"response\": \"The famous painting 'Starry Night' was created by Vincent van Gogh.\", \"result\": true}"]}
{"query": "Imagine you are an investment analyst. Do a comprehensive analysis regarding who Vercel's competitors are in bullet points", "instruction": "Use only 2 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 2\n"], "testcases": ["{\"response\": \"That's a great idea. You can buy a bar of soap at the local pharmacy.\", \"result\": true}\n{\"response\": \"He ate a sandwich. She drank a glass of water. He took a nap.\", \"result\": false}\n{\"response\": \"The sun was shining. It was a beautiful day.\", \"result\": true}", "{\"response\": \"The cat is black. The dog is brown.\", \"result\": true}\n{\"response\": \"The cat is black The dog is brown\", \"result\": false}\n{\"response\": \"The cat is black. The dog is brown. The parrot is colorful.\", \"result\": false}", "{\"response\": \"That's a great idea! You can buy a bar of soap at the local pharmacy.\", \"result\": true}\n{\"response\": \"I am happy to help you with any questions you have. I can assist with a variety of tasks.\", \"result\": true}\n{\"response\": \"That's a great idea! You can buy a bar of soap at the local pharmacy. Additionally, you can also visit a nearby park.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence\", \"result\": false}"]}
{"query": "develop a deep learning-based framework for synthesizing FA and ADC maps from T1w and T2w structural images", "instruction": "provide a Python code snippet that meets exactly 6 lines of code length", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1\n    return lines == 6\n", "def evaluate(response: str) -> bool: \n    return len(response.splitlines()) == 6\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 6\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 6\n"], "testcases": ["{\"response\": \"def hello():\\n    print('Hello')\\n    print('World')\\n    print('This')\\n    print('is')\\n    print('a\\n    code')\", \"result\": false}\n{\"response\": \"def hello():\\n    print('Hello')\\n    print('World')\\n    print('This')\\n    print('is')\\n    print('a code')\\n    print('snippet')\", \"result\": true}\n{\"response\": \"def hello():\\n    print('Hello')\\n    print('World')\\n    print('This')\\n    print('is')\\n    print('a code')\\n    print('snippet\\n    of\\n    code')\", \"result\": false}", "{\"response\": \"x = 5\\ny = 10\\nprint(x)\\nprint(y)\\nc = x + y\\nprint(c)\\nz = c * 2\", \"result\": true}\n{\"response\": \"import os\\ny = 10\\nx = 5\\nprint(x)\\nprint(y)\", \"result\": false}\n{\"response\": \"x = 5\\nprint(x)\\ny = 10\\nprint(y)\\nc = x + y\\nprint(c)\", \"result\": true}", "{\"response\": \"def function():\\n    print('Hello World')\\n    print('This is a test')\\n    print('Testing 1, 2, 3')\\n    print('This is another line')\\n    print('And finally, the last line')\", \"result\": true}\n{\"response\": \"def function():\\n    print('Hello World')\\n    print('This is a test')\\n    print('Testing 1, 2, 3')\\n    print('This is another line')\", \"result\": false}\n{\"response\": \"def function():\\n    print('Hello World')\\n    print('This is a test')\\n    print('Testing 1, 2, 3')\\n    print('This is another line')\\n    print('And finally, the last line')\\n    print('This is an additional line')\", \"result\": false}", "{\"response\": \"def add(a, b):\\n    return a + b\\nprint(add(1, 2))\\ndef sub(a, b):\\n    return a - b\\nprint(sub(3, 2))\\ndef multiply(a, b):\\n    return a * b\\nprint(multiply(4, 5))\", \"result\": true}\n{\"response\": \"def add(a, b):\\n    return a + b\\nprint(add(1, 2))\\ndef sub(a, b):\\n    return a - b\\nprint(sub(3, 2))\\ndef multiply(a, b):\\n    return a * b\", \"result\": false}\n{\"response\": \"def add(a, b):\\n    return a + b\\nprint(add(1, 2))\\ndef sub(a, b):\\n    return a - b\\nprint(sub(3, 2))\\ndef multiply(a, b):\\n    return a * b\\nprint(multiply(4, 5))\\ndef divide(a, b):\\n    return a / b\\nprint(divide(10, 2))\", \"result\": false}"]}
{"query": "HP 14-bp111tx can support what type ssd?", "instruction": "List in a single sentence with numbers in Roman numerals.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('i.') and 'i.' in response and response.count('i.') == 1 and not any(char.isdigit() for char in response if char!='') and all(char in 'IVXL' for char in response.replace('i.', ''))", "def evaluate(response: str) -> bool: \n    return response.replace('-','').replace('_','').split()[0].endswith('I') and len(response.split()) == 1 and all(char in 'IVXL' for char in response.replace('-','').replace('_','').split()[0][-4:])\n", "def evaluate(response: str) -> bool: \n    return all(char.isalpha() or char in'IIVX' for char in response) and all(char.isdigit() or char in 'IVXL' for char in response.replace(' ', '')) and'' not in response", "def evaluate(response: str) -> bool: \n    response = response.strip()\n    return (response.replace('.', '').replace(',', '').replace('?', '').replace('!', '').replace(';', '').replace(':', '') == '') and response.replace('-', '').replace(' ', '').isalpha() and any(char in 'IIVX' for char in response) and any(char.isdigit() for char in response)\n"], "testcases": ["{\"response\": \"The steps to solve this problem are: I. Define the variables, II. Write the loop, III. Print the result, IV. End the loop, V. Repeat.\", \"result\": true}\n{\"response\": \"The steps to solve this problem are: I. Define the variables, II. Write the loop, III. Print the result, IV. End the loop, V. Repeat and VIsually verify the answer.\", \"result\": false}\n{\"response\": \"The steps to solve this problem are: i. Define the variables, ii. Write the loop, iii. Print the result, iv. End the loop, v. Repeat.\", \"result\": false}", "{\"response\": \"The list of items is I. Item 1, II. Item 2, III. Item 3, IV. Item 4, V. Item 5\", \"result\": true}\n{\"response\": \"The list of items is I. Item 1, II. Item 2, III. Item 3\", \"result\": false}\n{\"response\": \"The list of items is I. Item 1, II. Item 2, III. Item 3, IV. Item 4, V. Item 5, VI. Item 6, VII. Item 7, VIII. Item 8\", \"result\": false}", "{\"response\": \"The requirements for the project are I. research, II. design, III. implementation, and IV. testing.\", \"result\": true}\n{\"response\": \"The project involves five tasks: one, two, three, four, and five.\", \"result\": false}\n{\"response\": \"The new policy has four main objectives: I. to increase efficiency, II. to reduce costs, III. to improve customer satisfaction, and IV. to enhance employee engagement.\", \"result\": true}\n{\"response\": \"The new policy has five main objectives: i. to increase efficiency, ii. to reduce costs, iii. to improve customer satisfaction, iv. to enhance employee engagement, and v. to increase revenue.\", \"result\": false}", "{\"response\": \"The instructions include I, II, III, IV, V, VI, and VII.\", \"result\": false}\n{\"response\": \"The code is I = 1, II = 2, III = 3, IV = 4, V = 5, and VI = 6.\", \"result\": true}\n{\"response\": \"The countries visited were I to V, with a total of 5 nations.\", \"result\": false}"]}
{"query": "How doew pki cert chain work? who signs the leaf cert?", "instruction": "Use a minimum of 5 technical terms, use the first person.", "verifiers": ["def evaluate(response: str) -> bool: \n    technical_terms = ['CA', 'root', 'public', 'private', 'key', 'certification', 'chain', 'hash', 'algorithm','signature', 'leaf', 'SSL', 'TLS']\n    technical_terms_used = [term for term in technical_terms if term in response.lower()]\n    return len(technical_terms_used) >= 5 and 'i' in response and'me' in response\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['CA', 'TLS', 'X.509', 'ECDSA', 'PKI']\n    first_person = 'I' in response\n    return len([term for term in technical_terms if term in response]) >= 5 and first_person\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['PKI', 'cert', 'chain', 'leaf', 'private', 'public', 'key','signature', 'CA', 'certificate', 'authority', 'SSL', 'TLS']\n    response = response.replace('.', '').replace(',', '')\n    words = response.split()\n    return (len([word for word in words if word in technical_terms]) >= 5) and (response[0].isupper())\n", "def evaluate(response: str) -> bool: \n    technical_terms = ['PKI', 'certification', 'chain','sign', 'leaf', 'cert', 'digital', 'certificate', 'authority', 'CA', 'private', 'key', 'public', 'key','signature','verification', 'authentication', 'asymmetric', 'cryptography','symmetric', 'algorithm']\n    first_person_terms = ['i','me','my', 'I', 'Me', 'My']\n    count_technical_terms = 0\n    count_first_person_terms = 0\n    for word in response.split():\n        if word in technical_terms:\n            count_technical_terms += 1\n        if word in first_person_terms:\n            count_first_person_terms += 1\n    return count_technical_terms >= 5 and count_first_person_terms > 0\n"], "testcases": ["{\"response\": \"As a developer, I will use a root CA, public key, certification chain, hash algorithm, and leaf node when implementing the SSL/TLS encryption protocol.\", \"result\": true}\n{\"response\": \"The company will use the leaf node in the certification chain and the public key for the SSL/TLS encryption protocol.\", \"result\": false}\n{\"response\": \"I will implement the CA, public, private, key, certification, chain, hash, algorithm, signature, leaf, and SSL/TLS protocols.\", \"result\": true}", "{\"response\": \"I used a CA to generate a TLS certificate using ECDSA and PKI for authentication.\", \"result\": true}\n{\"response\": \"I used a certificate for authentication.\", \"result\": false}\n{\"response\": \"I used TLS and ECDSA for authentication, but I forgot the PKI.\", \"result\": false}", "{\"response\": \"As a software engineer, I use PKI and certificates to implement secure communication using SSL/TLS. I also use public key cryptography to encrypt data and verify digital signatures.\", \"result\": true}\n{\"response\": \"I'm a beginner, I use public key to encrypt data and verify digital signatures.\", \"result\": false}\n{\"response\": \"As a security expert, I use certificates, PKI, public key, private key and SSL to implement secure communication.\", \"result\": true}", "{\"response\": \"I am using a public key to authenticate my digital signature, which is verified by a certification authority.\", \"result\": true}\n{\"response\": \"The new symmetric algorithm is secure, but I still prefer to use a private key for my encryption.\", \"result\": false}\n{\"response\": \"The asymmetric cryptography uses a private key to sign and verify the signature, and a public key for encryption and decryption.\", \"result\": true}"]}
{"query": "What are the steps needed to enable GraphQL on a local MongoDB installation?", "instruction": "Provide a numbered list with exactly 5 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    steps = response.count('1. ') + response.count('2. ') + response.count('3. ') + response.count('4. ') + response.count('5. ')\n    return steps == 5\n", "def evaluate(response: str) -> bool: \n    return '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response and '6.' not in response\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 4 and '1.' in response and '2.' in response and '3.' in response and '4.' in response and '5.' in response\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines == 4 and '\\n'.join(response.split('\\n')).count('.') == 4\n"], "testcases": ["{\"response\": \"To set up a new project, follow these steps: 1. Plan the project scope. 2. Define project goals. 3. Assign tasks to team members. 4. Create a project timeline. 5. Review progress regularly.\", \"result\": true}\n{\"response\": \"To make a cake, you need to mix ingredients together and bake at 350 degrees Fahrenheit.\", \"result\": false}\n{\"response\": \"The process of setting up a new server involves 1. Creating a virtual machine. 2. Installing an operating system. 3. Configuring the network. 4. Setting up security protocols. 5. Running maintenance tasks.\", \"result\": true}", "{\"response\": \"To install the app, follow these steps: 1. Download the app from the App Store. 2. Open the app and create an account. 3. Grant the app permission to access your location. 4. Start using the app to track your fitness goals. 5. Enjoy the benefits of using the app.\", \"result\": true}\n{\"response\": \"To install the app, follow these steps: 1. Download the app from the App Store. 2. Open the app and create an account. 3. Grant the app permission to access your location. 4. Start using the app to track your fitness goals. 6. Enjoy the benefits of using the app.\", \"result\": false}\n{\"response\": \"To install the app, follow these steps: 1. Download the app from the App Store. 2. Open the app and create an account. 3. Grant the app permission to access your location. 4. Start using the app to track your fitness goals. 5. Enjoy the benefits of using the app. You will also have to create a new account if you do not already have one.\", \"result\": false}", "{\"response\": \"I will perform the following actions: \\n1. Research the topic thoroughly \\n2. Create an outline for the project \\n3. Write the first draft \\n4. Edit and revise the draft \\n5. Finalize and submit the project\", \"result\": true}\n{\"response\": \"I will perform the following actions: \\n1. Research the topic thoroughly \\n2. Create an outline for the project \\n3. Write the first draft \\n4. Edit and revise the draft \\n\", \"result\": false}\n{\"response\": \"I will perform the following actions: \\n1. Research the topic thoroughly \\n2. Create an outline for the project \\n3. Write the first draft \\n4. Edit and revise the draft \\n6. Finalize and submit the project\", \"result\": false}", "{\"response\": \"Firstly, you should check if the server is running. Secondly, you should check if the client is connected. Thirdly, you should check if the data is being transmitted correctly. Fourthly, you should check if the data is being received correctly. Finally, you should check if the data is being processed correctly.\", \"result\": true}\n{\"response\": \"To solve this problem, first, you need to understand the requirements. Second, you need to gather all the necessary materials. Third, you need to design a plan. Fourth, you need to implement the plan. Last, you need to test the solution.\", \"result\": true}\n{\"response\": \"The steps to solve this problem are: 1. Check the input data. 2. Validate the input data. 3. Process the input data. 4. Output the result. 5. Save the result for future reference.\", \"result\": true}"]}
{"query": "Can you help me set up an app that uses Spotify's API for OAuth2 authorization flow?", "instruction": "Use Markdown syntax.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.lower().startswith('### ') or response.lower().startswith('## ') or response.lower().startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('#') or '\\n' in response or '###' in response or '##' in response\n", "def evaluate(response: str) -> bool: \n    return '##' in response or '###' in response or '**' in response\n"], "testcases": ["{\"response\": \"### Step 1: This is the first step\", \"result\": true}\n{\"response\": \"# Step 1: This is the first step\", \"result\": true}\n{\"response\": \"1. This is the first step\", \"result\": false}", "{\"response\": \"## Heading\\n1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\\n5. Step 5\", \"result\": true}\n{\"response\": \"## Heading\\n1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\", \"result\": false}\n{\"response\": \"## Heading\\n1. Step 1\\n2. Step 2\\n3. Step 3\\n4. Step 4\\n5. Step 5\\n6. Step 6\", \"result\": false}", "{\"response\": \"## Step 1: Open a new terminal\\n## Step 2: Install the required packages\\n## Step 3: Run the script\\n## Step 4: Test the script\\n## Step 5: Repeat the process\", \"result\": true}\n{\"response\": \"This is a numbered list: 1. Step 1: Open a new terminal 2. Step 2: Install the required packages 3. Step 3: Run the script 4. Step 4: Test the script 5. Step 5: Repeat the process\", \"result\": false}\n{\"response\": \"I'm using the following steps:\\n1. Open a new terminal\\n2. Install the required packages\\n3. Run the script\\n4. Test the script\\n5. Repeat the process\", \"result\": false}", "{\"response\": \"## Step 1: Do this\\n## Step 2: Do that\\n## Step 3: Do something else\", \"result\": true}\n{\"response\": \"Step 1: Do this, Step 2: Do that, Step 3: Do something else\", \"result\": false}\n{\"response\": \"### Step 1: Do this\\n### Step 2: Do that\\n### Step 3: Do something else\\n### Step 4: Do another thing\", \"result\": true}"]}
{"query": "Kageno Powers The eminence in shadow", "instruction": "Use only words with a minimum of 6 letters (e.g., \"calculate\")", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) >= 6 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) >= 6 for word in words)\n", "def evaluate(response: str) -> bool: \n    return all(len(word) >= 6 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    for word in response.split(): \n        if len(word) < 6: \n            return False \n    return True \n"], "testcases": ["{\"response\": \"calculate, computer, coding\", \"result\": true}\n{\"response\": \"run, dance, jump\", \"result\": false}\n{\"response\": \"beautiful, carefully, celebrating\", \"result\": true}", "{\"response\": \"calculate\", \"result\": true}\n{\"response\": \"cat\", \"result\": false}\n{\"response\": \"unpredictable\", \"result\": true}", "{\"response\": \"calculate, program, function\", \"result\": true}\n{\"response\": \"yes, no, run\", \"result\": false}\n{\"response\": \"calculate, programming, application\", \"result\": true}", "{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The elephant ran quickly outside yesterday.\", \"result\": true}\n{\"response\": \"Hello, I'm going to the store to buy something.\", \"result\": false}"]}
{"query": "Can you write a SQL insert script that to generate dummy data of 100 records for a table specification I provide?", "instruction": "Use only ASCII characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(ord(char) < 128 for char in response)\n", "def evaluate(response: str) -> bool: \n    for char in response: \n        if ord(char) > 127: \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    return all(ord(char) < 128 for char in response)\n", "def evaluate(response: str) -> bool: \n    return all(ord(char) < 128 for char in response)\n"], "testcases": ["{\"response\": \"Hello world!\", \"result\": true}\n{\"response\": \"Bonjour, monde!\", \"result\": true}\n{\"response\": \"\u00bfHola, mundo?\", \"result\": false}", "{\"response\": \"Hello world!\", \"result\": true}\n{\"response\": \"Bonjour le monde!\", \"result\": false}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"Hello, world!\", \"result\": true}\n{\"response\": \"\u00a1Hola, mundo!\", \"result\": false}\n{\"response\": \"This response uses only English and numbers.\", \"result\": true}", "{\"response\": \"This is a normal sentence with only ASCII characters.\", \"result\": true}\n{\"response\": \"This is a sentence with a non-ASCII character \u00e0.\", \"result\": false}\n{\"response\": \"This is a sentence with some umlauts: \u00e4, \u00f6, \u00fc.\", \"result\": false}"]}
{"query": "I love your points 1 and 2 under Structuring ideas. Could you restructure the text that way?", "instruction": "Use exactly 4 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 4\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len([sentence for sentence in sentences if sentence.strip()!= '']) == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 4\n"], "testcases": ["{\"response\": \"I have 5 cats. They are very cute. They are lazy. I love them.\", \"result\": false}\n{\"response\": \"I have a dog. It is very friendly. I love my dog. My dog is happy.\", \"result\": true}\n{\"response\": \"The weather is nice today. It is sunny outside. The birds are singing.\", \"result\": false}", "{\"response\": \"Hello! How are you? What is your name?\", \"result\": false}\n{\"response\": \"Hello! How are you? What is your name? Where are you from?\", \"result\": true}\n{\"response\": \"Hello! How are you. What is your name. Where are you from?\", \"result\": false}", "{\"response\": \"Hello. Goodbye. Have a nice day.\", \"result\": true}\n{\"response\": \"Hello\", \"result\": false}\n{\"response\": \"Hello. Goodbye. Have a nice day. How are you?\", \"result\": true}", "{\"response\": \"I love reading books. I have read many classics. My favorite author is Jane Austen. I enjoy learning history.\", \"result\": true}\n{\"response\": \"I love reading books. I have read many classics.\", \"result\": false}\n{\"response\": \"I love reading books. I have read many classics. My favorite author is Jane Austen. I enjoy learning history. This is my favorite subject in school.\", \"result\": false}"]}
{"query": "Access protected methods in twincat 3 for unit tests", "instruction": "use regular expressions", "verifiers": ["def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search(r'.*', response))\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search('regularexpression|regex', response, re.IGNORECASE)) \n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search('use regular expressions', response))\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.search(r'regular expressions', response, re.IGNORECASE))\n"], "testcases": ["{\"response\": \"Hello\", \"result\": false}\n{\"response\": \"The regular expression pattern is not defined.\", \"result\": false}\n{\"response\": \"The regular expression pattern is defined as \\\\b\\\\d{1,3} and the number 123 is an example of a match.\", \"result\": true}", "{\"response\": \"The regular expression is a sequence of characters that forms a search pattern, used to match character combinations in strings.\", \"result\": true}\n{\"response\": \"The regex library is a powerful tool for working with regular expressions in Python.\", \"result\": true}\n{\"response\": \"The Python programming language is easy to learn and has many built-in features.\", \"result\": false}", "{\"response\": \"Use regular expressions to validate email addresses.\", \"result\": true}\n{\"response\": \"The most common regex used to validate email addresses is the email regular expression.\", \"result\": true}\n{\"response\": \"I'm a large language model, but I don't know what you mean by that.\", \"result\": false}", "{\"response\": \"This is a test sentence.\", \"result\": false}\n{\"response\": \"Python is a programming language and is easy to learn.\", \"result\": false}\n{\"response\": \"This is a test sentence. Python is a programming language and is easy to learn.\", \"result\": true}"]}
{"query": "what quacks like a bird and flaps like a bird", "instruction": "answer in exactly 5 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n"], "testcases": ["{\"response\": \"Hello, how are you? I am doing great, thank you. The weather is nice today. I'm looking forward to the weekend.\", \"result\": true}\n{\"response\": \"Hello, how are you?\", \"result\": false}\n{\"response\": \"Hello, how are you? I am doing great, thank you. The weather is nice today. I'm looking forward to the weekend. It will be a great day.\", \"result\": false}", "{\"response\": \"Hello,\\nI am happy to help you.\\nMy name is John.\\nWhat is your question?\\nI will do my best to assist you.\", \"result\": true}\n{\"response\": \"Hello,\\nI am happy to help you.\\nMy name is John. What is your question?\\nI will do my best to assist you.\\nHow can I assist you further?\", \"result\": false}\n{\"response\": \"Hello,\\nI am happy to help you.\\nMy name is John.\\nWhat is your question?\\nI will do my best to assist you. How can I assist you further?\", \"result\": false}", "{\"response\": \"The sun is shining. The birds are singing. The flowers are blooming. The sky is blue. It's a beautiful day.\", \"result\": true}\n{\"response\": \"The sun is shining. The birds are singing. The flowers are blooming. The sky is blue.\", \"result\": false}\n{\"response\": \"The sun is shining. The birds are singing. The flowers are blooming. The sky is blue. It's a beautiful day. And it's warm outside too.\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence. And this is the sixth sentence.\", \"result\": false}"]}
{"query": "what is PaCs", "instruction": "answer in only one sentence with exactly 20 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 1 and len(sentences[0].split()) == 20\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 1 and len(sentences[0].split()) == 20\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 1 and len(sentences[0].split()) == 20\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 1 and len(sentences[0].split()) == 20\n"], "testcases": ["{\"response\": \"This is a sentence with exactly 20 words that is a test of the evaluation function.\", \"result\": true}\n{\"response\": \"This is a sentence with fewer than 20 words and is not a good test.\", \"result\": false}\n{\"response\": \"This is a sentence with more than 20 words and will fail the evaluation function.\", \"result\": false}", "{\"response\": \"This is a test of the one sentence with 20 words exactly response.\", \"result\": true}\n{\"response\": \"This is a test of the one sentence with 15 words response.\", \"result\": false}\n{\"response\": \"This is a test of the one sentence with 25 words exactly response.\", \"result\": false}", "{\"response\": \"This is a test sentence that contains 20 words and only 1 sentence\", \"result\": true}\n{\"response\": \"This is a short sentence with only 5 words\", \"result\": false}\n{\"response\": \"This is a long sentence with 25 words that exceeds the limit\", \"result\": false}", "{\"response\": \"This is a test to see if the function works as expected with a short sentence with exactly 20 words\", \"result\": false}\n{\"response\": \"This is a test to see if the function works as expected with a long sentence with exactly 20 words and more\", \"result\": false}\n{\"response\": \"This is a test to see if the function works as expected with a sentence with exactly 20 words This is a test to see if the function works as expected\", \"result\": true}"]}
{"query": "please write a qr code generator using javascript without third party library", "instruction": "answer in 7 lines of code that can be evaluated with a Python script", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return 1 <= len(lines) <= 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) <= 7\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1\n    return lines == 7\n"], "testcases": ["{\"response\": \"I can list the numbers from 1 to 10.\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\", \"result\": true}\n{\"response\": \"I can list the numbers from 1 to 10.\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\", \"result\": false}\n{\"response\": \"I can list the numbers from 1 to 10.\", \"result\": false}", "{\"response\": \"print('Hello, World!')\\nprint('This is a test.')\\nprint('The code should work as expected.')\\nprint('There should be 7 lines.')\\nprint('But it might not be the case.')\\nprint('It depends on the implementation.')\", \"result\": true}\n{\"response\": \"print('Hello, World!')\\nprint('This is a test.')\\nprint('The code should work as expected.')\\nprint('There should be 5 lines.')\\nprint('It depends on the implementation.')\", \"result\": false}\n{\"response\": \"print('Hello, World!')\\nprint('This is a test.')\\nprint('The code should work as expected.')\\nprint('There should be 7 lines.')\\nprint('But it might not be the case.')\\nprint('It depends on the implementation.')\\nprint('And this is the last line.')\\nprint('I hope it works as expected.')\", \"result\": true}", "{\"response\": \"for i in range(5):\\n  print(i)\\nfor j in range(3):\\n  print(j)\\n\", \"result\": false}\n{\"response\": \"for i in range(5):\\n  print(i)\\n  print(i)\\nfor j in range(3):\\n  print(j)\\n  print(j)\", \"result\": true}\n{\"response\": \"for i in range(2):\\n  print(i)\\nfor j in range(6):\\n  print(j)\", \"result\": false}", "{\"response\": \"The final answer is: 123.\\nThe final answer is 456.\\n\", \"result\": false}\n\n{\"response\": \"The final answer is: 123.\\n\\n\\n\\n\\n\", \"result\": false}\n\n{\"response\": \"The final answer is: 123.\\n\\n\\n\\n\\nThe final answer is: 456.\\n\", \"result\": false}"]}
{"query": "Hello", "instruction": "Provide a list in the format \"item1, item2, item3, etc.\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.strip()[:1] == '[' and response.strip()[-1:] == ']' and ',' in response and ',' in response[1:-1] and response.replace(',', '').replace('[', '').replace(']', '')!= ''\n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and ',' in response[1:-1] and all(char not in response for char in '[]')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and all(item+','in response for item in response.split(', ')) \n", "def evaluate(response: str) -> bool: \n    return response.startswith('[') and response.endswith(']') and all(c == ',' for c in response[1:-1] if c!='')\n    "], "testcases": ["{\"response\": \"apple, banana, cherry, date, elderberry\", \"result\": true}\n{\"response\": \"apple, banana\", \"result\": false}\n{\"response\": \"apple, banana, cherry, date, elderberry, fig, grape\", \"result\": false}", "{\"response\": \"item1, item2, item3, item4\", \"result\": true}\n{\"response\": \"item1, item2\", \"result\": false}\n{\"response\": \"item1, item2, item3, item4, item5, item6, item7, item8\", \"result\": false}", "{\"response\": \"apple, banana, orange, mango\", \"result\": true}\n{\"response\": \"apple banana orange mango\", \"result\": false}\n{\"response\": \"apple, banana orange mango\", \"result\": false}", "{\"response\": \"apple, banana, orange, mango\", \"result\": true}\n{\"response\": \"1, 2, 3\", \"result\": false}\n{\"response\": \"apple, banana\", \"result\": false}"]}
{"query": "whats the difference between cvi and sdi", "instruction": "answer in exactly 3 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or (response.endswith('.') and response.count('.') == 1)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 3\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 2 or response.count('?') == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 3\n"], "testcases": ["{\"response\": \"The average temperature is around 20 degrees Celsius. However, it can sometimes reach up to 25 degrees. In the evening, it cools down to around 15 degrees.\", \"result\": true}\n{\"response\": \"It is a beautiful day today with lots of sunshine. However, we have received several complaints from residents about the noise levels in the area.\", \"result\": false}\n{\"response\": \"There is a 20% chance of rain today. The wind speed is moderate. Please carry an umbrella and wear warm clothing.\", \"result\": false}", "{\"response\": \"I am a developer and I use various tools such as Visual Studio Code, PyCharm, and GitHub.\", \"result\": false}\n{\"response\": \"I am a developer and I use various tools such as Visual Studio Code, PyCharm, and GitHub. My favorite programming language is Python.\", \"result\": true}\n{\"response\": \"I am a developer and I use various tools such as Visual Studio Code, PyCharm, and GitHub. My favorite programming language is Python. I also enjoy learning about machine learning.\", \"result\": true}", "{\"response\": \"This is a sentence. I am a developer. I enjoy coding.\", \"result\": true}\n{\"response\": \"This is a sentence. I am a developer. I enjoy coding. I also enjoy hiking.\", \"result\": false}\n{\"response\": \"This is a short response that is in 2 sentences, but it's good enough.\", \"result\": false}", "{\"response\": \"I love this idea. It's so simple and effective. I'll give it a try.\", \"result\": true}\n{\"response\": \"I love this idea. It's so simple and effective.\", \"result\": false}\n{\"response\": \"I love this idea. It's so simple and effective. I'll give it a try. It's the best thing I've ever tried. This is amazing.\", \"result\": false}"]}
{"query": "how to get document store from session in ravendb", "instruction": "Write a function that takes a string and returns the number of vowels it contains.", "verifiers": ["def evaluate(response: str) -> bool: \n    vowels = 'aeiou'\n    return sum(1 for char in response.lower() if char in vowels) == 1\n", "def evaluate(response: str) -> bool: \n    vowels = 'AEIOUaeiou'\n    return sum(1 for char in response if char in vowels) == 0\n", "def evaluate(response: str) -> bool: \n    return response.strip().lower().count('a') + response.strip().lower().count('e') + response.strip().lower().count('i') + response.strip().lower().count('o') + response.strip().lower().count('u') <= 1\n", "def evaluate(response: str) -> bool: \n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in response if char in vowels) <= 1\n"], "testcases": ["{\"response\": \"The Earth is a beautiful planet.\", \"result\": true}\n{\"response\": \"Hello, how are you today?\", \"result\": true}\n{\"response\": \"BFG\", \"result\": false}", "{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"Python is a fun programming language\", \"result\": true}", "{\"response\": \"The number of vowels in this sentence is not relevant to my answer. I will provide my answer as required.\", \"result\": true}\n{\"response\": \"This is a test to check if a function works\", \"result\": false}\n{\"response\": \"There are 2 vowels a and e\", \"result\": true}", "{\"response\": \"There are only a few vowels in this sentence.\", \"result\": false}\n{\"response\": \"The word vowels are aeiou.\", \"result\": true}\n{\"response\": \"Vowels are everywhere, but not in this sentence, for it is written with care.\", \"result\": false}"]}
{"query": "What is graded written paper?", "instruction": "Answer in exactly 7 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 7\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 7\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n"], "testcases": ["{\"response\": \"The sky is blue. The grass is green. The sun is shining. The birds are singing. The world is beautiful. Life is good. I am happy.\", \"result\": true}\n{\"response\": \"I love playing football.\", \"result\": false}\n{\"response\": \"The sun is shining. The birds are singing. The world is beautiful. Life is good. I am happy.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog. The dog barks at the fox. The fox is quick and sly. The fox jumps over the fence.\", \"result\": true}\n{\"response\": \"The sun is shining in the sky. It is a beautiful day outside.\", \"result\": false}\n{\"response\": \"The cat is sleeping on the couch. The dog is barking loudly outside. The kids are playing in the backyard. The kids are laughing and having fun. The sun is shining brightly in the sky. The birds are singing sweet melodies. The world is full of wonder and magic.\", \"result\": true}", "{\"response\": \"The capital of France is Paris. It is a beautiful city. The Eiffel Tower is a famous landmark. Many tourists visit Paris every year. It is a great place to learn French. The food in Paris is also delicious. It is a must-visit destination.\", \"result\": true}\n{\"response\": \"The capital of France is Paris.\", \"result\": false}\n{\"response\": \"The capital of France is Paris. It is a beautiful city. The Eiffel Tower is a famous landmark. Many tourists visit Paris every year. It is a great place to learn French.\", \"result\": false}", "{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly today. The birds are singing their sweet melodies.\", \"result\": true}\n{\"response\": \"The quick brown fox jumps over the lazy dog.\", \"result\": false}\n{\"response\": \"The quick brown fox jumps over the lazy dog. The sun is shining brightly today. The birds are singing their sweet melodies. The flowers are blooming in the garden. The kids are playing outside.\", \"result\": false}"]}
{"query": "write a chart about jobs in education that GPT 4 will potentially replace, along with the human traits being replaced, and how we can work on it", "instruction": "answer in exactly 7 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') + 1 == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 7 and response.strip().endswith('.')"], "testcases": ["{\"response\": \"\u2022 item1\\n\u2022 item2\\n\u2022 item3\\n\u2022 item4\\n\u2022 item5\\n\u2022 item6\\n\u2022 item7\", \"result\": true}\n{\"response\": \"\u2022 item1\\n\u2022 item2\\n\u2022 item3\\n\u2022 item4\\n\u2022 item5\", \"result\": false}\n{\"response\": \"\u2022 item1\\n\u2022 item2\\n\u2022 item3\\n\u2022 item4\\n\u2022 item5\\n\u2022 item6\", \"result\": false}", "{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Carrot\\n\u2022 Date\\n\u2022 Elderberry\\n\u2022 Fig\\n\u2022 Grapes\", \"result\": true}\n{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Carrot\", \"result\": false}\n{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Carrot\\n\u2022 Date\\n\u2022 Elderberry\\n\u2022 Fig\", \"result\": false}", "{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\\n\u2022 This is the seventh point.\", \"result\": true}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\\n\u2022 This is the seventh point.\\n\u2022 This is the eighth point.\", \"result\": false}\n{\"response\": \"\u2022 This is the first point.\\n\u2022 This is the second point.\\n\u2022 This is the third point.\\n\u2022 This is the fourth point.\\n\u2022 This is the fifth point.\\n\u2022 This is the sixth point.\", \"result\": false}", "{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6 \u2022 Item 7\", \"result\": true}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6\", \"result\": false}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6 \u2022 Item 7 \u2022 Item 8\", \"result\": false}"]}
{"query": "Write Python code to provision a 96cpu GCP instance in Python. The code should start and stop the instance.", "instruction": "Provide a response of exactly 4 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 4\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 4\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 3\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 4\n"], "testcases": ["{\"response\": \"This is a good idea. It can be improved with some more details. However, I'm not sure about the cost. I will research it more.\", \"result\": true}\n{\"response\": \"This is a good idea. It can be improved with some more details.\", \"result\": false}\n{\"response\": \"This is a good idea. It can be improved with some more details. However, I'm not sure about the cost. I will research it more. I will let you know soon.\", \"result\": false}", "{\"response\": \"Hello, this is a test.\\nIt has two lines.\\nThis is the third line.\\nAnd this is the last line.\", \"result\": true}\n{\"response\": \"Hello, this is a test.\\nIt has two lines.\\nThis is the third line.\\nAnd this is the last line.\\nAnd there is a fifth line.\", \"result\": false}\n{\"response\": \"Hello, this is a test.\\nIt has two lines.\\nThis is the third line.\\n\", \"result\": false}", "{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence.\", \"result\": true}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\", \"result\": false}\n{\"response\": \"This is the first sentence. This is the second sentence. This is the third sentence.\", \"result\": false}", "{\"response\": \"The sky is blue. The grass is green. The sun is shining. It's a beautiful day.\", \"result\": true}\n{\"response\": \"The sky is blue The grass is green The sun is shining It's a beautiful day\", \"result\": false}\n{\"response\": \"The sky is blue. The grass is green. The sun is shining. It's a beautiful day. The air is fresh.\", \"result\": false}"]}
{"query": "*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)*", "instruction": "Use the same format for the response and query. Whether the response follows the instruction can be evaluated using a Python function.", "verifiers": ["def evaluate(response: str) -> bool: \n    if len(response) == 0: \n        return False\n    num_open_brackets = 0\n    num_close_brackets = 0\n    for char in response: \n        if char == '[': \n            num_open_brackets += 1\n        elif char == ']': \n            num_open_brackets -= 1\n            if num_open_brackets < 0: \n                return False\n        elif char == '(' and num_open_brackets > 0: \n            num_close_brackets += 1\n        elif char == ')' and num_close_brackets > 0: \n            num_close_brackets -= 1\n            if num_close_brackets < 0: \n                return False\n    return num_open_brackets == 0 and num_close_brackets == 0\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    query = \"*This chat conversation is shared from [***TypingMind.com***](https://typingmind.com)*\"\n    query = query.lower()\n    response_parts = response.split(' from ')\n    query_parts = query.split(' from ')\n    return response_parts[0] == query_parts[0] and response_parts[1] == query_parts[1] and response_parts[2] == query_parts[2]\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r'^.*\\[\\*\\*([^\\]]+)\\]\\(\\*(https?://[^\\s]+)\\).*'\n    return bool(re.match(pattern, response))\n", "def evaluate(response: str) -> bool: \n    import re\n    return bool(re.match(r'^.*\\[(.*?)\\]\\(https?:\\/\\/[^ ]+\\).*$', response))\n"], "testcases": ["{\"response\": \"This is the first item. It is a very interesting topic. The second item is also quite interesting. And this is the third item. Finally, this is the fourth item.\", \"result\": true}\n{\"response\": \"This is the first item. It is a very interesting topic. The second item is also quite interesting. And this is the fourth item.\", \"result\": false}\n{\"response\": \"This is the first item. It is a very interesting topic. The second item is also quite interesting. And this is the fourth item. The fifth item is here. And the sixth item is also here.\", \"result\": false}", "{\"response\": \"The answer to this question is yes, you can use it. The response is in the correct format. I'm here to help with any questions you have. You can ask me anything.\", \"result\": true}\n{\"response\": \"This response does not follow the format. It is too short and does not contain all required parts.\", \"result\": false}\n{\"response\": \"The response is correct and follows the format. The user has provided the correct response in the required format.\", \"result\": true}", "{\"response\": \"Here are the required details:\\n* point 1\\n* point 2\\n* point 3\\n* point 4\", \"result\": true}\n{\"response\": \"Here are the required details:\\n* point 1\\n* point 2\\n* point 3\", \"result\": false}\n{\"response\": \"Here are the required details:\\n* point 1\\n* point 2\\n* point 3\\n* point 4\\n* point 5\", \"result\": false}", "{\"response\": \"A link to the answer can be found here: [link](https://www.example.com). It's a great resource.\", \"result\": true}\n{\"response\": \"This is a good question.\", \"result\": false}\n{\"response\": \"The answer is [answer](https://www.example.com).\", \"result\": true}"]}
{"query": "tell me the story about the consulting associate in the cave", "instruction": "answer in a poem with exactly 10 lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.count('\\n')\n    return lines == 10\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10 and len(lines) > 0\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 10\n"], "testcases": ["{\"response\": \"The sun shines bright in the morning sky\\nThe birds sing sweetly as they fly\\nTheir songs echo through the trees so tall\\nThe breeze is cool, the air is calm\\nThe world is peaceful, all is well\\nThe sun sets slow, the day grows old\\nThe stars come out, the night grows cold\\nThe world is dark, yet still so grand\\nThe moon glows bright, a silver band\\nThe night is quiet, a peaceful sight\\nThe world is full of wonder and delight\", \"result\": true}\n{\"response\": \"The sun sets slow and paints the sky\\nThe stars come out and twinkle high\\nThe world is dark, yet still so grand\\n\", \"result\": false}\n{\"response\": \"The morning sunshine brings new life\\nThe birds sing sweetly, their songs a strife\\nThe breeze is cool, the air is calm\\nThe world is peaceful, all is well\\nThe sun sets slow, the day grows old\\nThe stars come out, the night grows cold\\nThe world is dark, yet still so grand\\nThe moon glows bright, a silver band\\nThe night is quiet, a peaceful sight\\nThe world is full of wonder and delight\\n\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning light\\nThe birds sing sweetly in the trees\\nThe world is full of beauty and delight\\nBut sometimes it's hard to find the breeze\\nThe wind whispers secrets in my ear\\nOf far-off places and distant seas\\nI long to travel and explore and hear\\nThe stories of the world and all its glee\\nBut for now I'll stay and watch the day\\nThe sun sets slow and paints the sky\\n\", \"result\": true}\n{\"response\": \"The sun is shining in the morning light\\nThe birds sing sweetly in the trees\\nThe world is full of beauty and delight\\nBut sometimes it's hard to find the breeze\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning light\\nThe birds sing sweetly in the trees\\nThe world is full of beauty and delight\\nBut sometimes it's hard to find the breeze\\nThe wind whispers secrets in my ear\\nOf far-off places and distant seas\\nI long to travel and explore and hear\\nThe stories of the world and all its glee\\nThe sun sets slow and paints the sky\\n\", \"result\": false}", "{\"response\": \"The sun sets slowly in the west\\nThe stars come out and shine the best\\nThe moon glows bright with a gentle face\\nThe world is quiet in a peaceful space\\nThe trees sway gently in the breeze\\nTheir leaves rustling with a soft ease\\nThe world is calm and full of rest\\nThe night is dark and the darkness is best\\nThe stars shine bright with a twinkling light\\nThe world is peaceful through the night\", \"result\": true}\n{\"response\": \"The sun sets slowly in the west\\nThe stars come out and shine the best\", \"result\": false}\n{\"response\": \"The sun sets slowly in the west\\nThe stars come out and shine the best\\nThe moon glows bright with a gentle face\\nThe world is quiet in a peaceful space\\nThe trees sway gently in the breeze\\nTheir leaves rustling with a soft ease\\nThe world is calm and full of rest\\nThe night is dark and the darkness is best\\nThe stars shine bright with a twinkling light\", \"result\": false}", "{\"response\": \"The sun shines bright in the morning sky\\nThe clouds are white, they drift on by\\nThe birds sing sweetly in the trees\\nTheir melodies bring joy to all who please\\nThe flowers bloom with colors so bright\\nIn the garden they dance with delight\\nThe breeze is cool, it feels so fine\\nOn a day like today, I feel so divine\\nThe world is full of beauty and light\\nThis is a perfect day, everything's alright\", \"result\": true}\n{\"response\": \"The sun shines bright in the morning sky\\nThe clouds are white, they drift on by\\nThe birds sing sweetly in the trees\\nTheir melodies bring joy to all who please\\nThe flowers bloom with colors so bright\\nIn the garden they dance with delight\\nThe breeze is cool, it feels so fine\\nOn a day like today, I feel so divine\\n\", \"result\": false}\n{\"response\": \"The sun shines bright in the morning sky\\nThe clouds are white, they drift on by\\nThe birds sing sweetly in the trees\\nTheir melodies bring joy to all who please\\nThe flowers bloom with colors so bright\\nIn the garden they dance with delight\\nThe breeze is cool, it feels so fine\\nOn a day like today, I feel so divine\\nThe world is full of beauty and light\\nThis is a perfect day, everything's alright\\nThis day is one to remember for a lifetime\\n\", \"result\": false}"]}
{"query": "I believe the problem is that chrome.tabs is only available in background scripts and popup scripts, not in content scripts", "instruction": "answer in code", "verifiers": ["def evaluate(response: str) -> bool: \n    return any(char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~!@#$%^&*()-_=+{}[]|;:,.<>?/\\'\"'for char in response)\n", "def evaluate(response: str) -> bool: \n    return any(char.iscode for char in response)\n", "def evaluate(response: str) -> bool: \n    return 'code' in response.lower()\n"], "testcases": ["{\"response\": \"x = 5\", \"result\": false}\n{\"response\": \"y = 5\\nx = 10\", \"result\": false}\n{\"response\": \"x = 5\\ny = 10\\nz = 15\", \"result\": true}", "{\"response\": \"x = 5\\ny = 10\\nz = x + y\", \"result\": true}\n{\"response\": \"x = 5\", \"result\": false}\n{\"response\": \"x = 5\\ndef foo():\\n    print('Hello World')\", \"result\": true}", "{\"response\": \"def hello():\\n    print('Hello World')\\n\", \"result\": true}\n{\"response\": \"print('Hello World')\", \"result\": false}\n{\"response\": \"def hello():\\n    print('Hello World')\\n\\n# This is a comment\\n\", \"result\": false}", "{\"response\": \"x = 5\", \"result\": true}\n{\"response\": \"This is a long sentence that does not contain code\", \"result\": false}\n{\"response\": \"print('Hello World!')\", \"result\": true}"]}
{"query": "what is a Optically active fluorescent nanoparticle defects", "instruction": "Use exactly 10 sentences, and include exactly 3 examples", "verifiers": ["def evaluate(response: str) -> bool:    \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 10 and len([sentence for sentence in sentences if sentence]) == 3\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    count_sentences = len(sentences)\n    examples = response.count('example') + response.count('Example')\n    return count_sentences == 10 and examples == 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 10 and len([s for s in sentences if s]) == 3\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 10 and len(sentences[0:3]) == ['Example'] * 3\n"], "testcases": ["{\"response\": \"The process of compensating a spectacle lens involves several variables, including the power of the lens, the prescription, and the frame size. The power of the lens is determined by the strength of the prescription, which is measured in diopters. The frame size is an important factor in compensating the lens, as a larger frame can provide more space for the lens to be placed.\", \"result\": true}\n{\"response\": \"The variables that affect compensating a spectacle lens are prescription and lens material.\", \"result\": false}\n{\"response\": \"Compensating a spectacle lens requires considering several factors, including the power of the lens, the size of the frame, and the shape of the lens. The power of the lens is determined by the prescription, which can be calculated using a variety of methods. The size of the frame affects the position of the lens, which in turn affects the final position of the prescription on the face.\", \"result\": false}", "{\"response\": \"The spectacle lens prescription typically involves several variables including the power of the lens, the axis, and the add power. An example of a prescription for distance vision would be +2.00 -1.00 x 90. An example of a prescription for near vision would be +1.00 +2.00 x 180. Another example would be -2.50 -2.00 x 180. The power of the lens can be further divided into sphere, cylinder, and axis. For example, a prescription of -3.00 -2.00 x 90 indicates a spherical error of -3.00 diopters and a cylindrical error of -2.00 diopters at an axis of 90 degrees. The add power is the amount of additional power needed for near vision. For example, an add power of +2.00 indicates that the patient requires +2.00 diopters of additional power for near vision. The prescription can also include prism correction to correct for eye alignment problems. An example of a prescription with prism correction would be -3.00 -2.00 x 90 + 2.00 prism. The axis of the prism correction can be in the form of a specific degree, such as 10 degrees, or in the form of a range, such as 20-30 degrees.\", \"result\": true}\n\n{\"response\": \"A spectacle lens prescription typically includes several variables including the power of the lens and the axis. The power of the lens can be further divided into sphere, cylinder, and axis. The prescription can also include prism correction to correct for eye alignment problems.\", \"result\": false}\n\n{\"response\": \"The prescription for a spectacle lens typically includes several variables. An example of a prescription for distance vision would be +2.00 -1.00 x 90. Another example would be -2.50 -2.00 x 180. The prescription can also include prism correction to correct for eye alignment problems.\", \"result\": false}", "{\"response\": \"The variables that go into compensating a spectacle lens are the power of the lens, the material of the lens, and the coating of the lens. The power of the lens is the ability to focus light rays on the retina. The material of the lens affects the weight and flexibility of the lens.\", \"result\": true}\n{\"response\": \"The variables that go into compensating a spectacle lens are the power of the lens and the material of the lens.\", \"result\": false}\n{\"response\": \"The variables that go into compensating a spectacle lens are the power of the lens, the material of the lens, the coating of the lens, and the shape of the frame, and the material of the frame, and the size of the lens, and the shape of the eye, and the prescription of the eye, and the age of the wearer, and the activity level of the wearer, and the distance to the object being viewed, and the clarity of vision required, and the weight of the lens, and the cost of the lens. The power of the lens is the ability to focus light rays on the retina. The material of the lens affects the weight and flexibility of the lens.\", \"result\": false}", "{\"response\": \"The process of compensating a prescription involves several variables. These variables include the power of the lens. Example. The focal length of the lens is also an important variable. Example. The material of the lens affects its optical properties. Example. The curvature of the lens also plays a crucial role. The prescription of the lens is also a variable. The thickness of the lens is also an important factor. The weight of the lens is another variable. The frame size of the spectacles is also a variable.\", \"result\": true}\n{\"response\": \"The process of compensating a prescription involves several variables.\", \"result\": false}\n{\"response\": \"The process of compensating a prescription involves several variables. These variables include the power of the lens. The focal length of the lens is also an important variable. The material of the lens affects its optical properties. Example.\", \"result\": false}"]}
{"query": "Draw me a software engineering competencies progression table to use for determining the level of a software engineer.", "instruction": "Use a markdown table with no horizontal lines.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'markdown table' in response and 'horizontal lines' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return '|_' not in response and '|-' not in response and '|=' not in response\n", "def evaluate(response: str) -> bool: \n    return 'horizontal' not in response and '---' not in response and '|'not in response and '\\n|' not in response\n", "def evaluate(response: str) -> bool: \n    return'markdown table' in response and 'horizontal lines' not in response\n"], "testcases": ["{\"response\": \"This is a table | column1 | column2 | column3\", \"result\": true}\n{\"response\": \"Here is a markdown table | column1 | column2 | column3 | with a horizontal line ---\", \"result\": false}\n{\"response\": \"This is a table | column1 | column2 | column3 with no lines\", \"result\": true}", "{\"response\": \"This is a response that should not contain any horizontal lines. It's supposed to be a simple sentence. And it doesn't contain any lines\", \"result\": true}\n{\"response\": \"This is a response that should contain a horizontal line | to fail the test. It's supposed to be a simple sentence. And it contains a line\", \"result\": false}\n{\"response\": \"This is a response that should contain another horizontal line -- to fail the test. It's supposed to be a simple sentence. And it contains a line\", \"result\": false}\n{\"response\": \"This is a response that should contain yet another horizontal line === to fail the test. It's supposed to be a simple sentence. And it contains a line\", \"result\": false}", "{\"response\": \"This is a table | a | b | c\", \"result\": true}\n{\"response\": \"This is a table ---|---|---|---\", \"result\": false}\n{\"response\": \"This is a table | a | b | c | d | e\", \"result\": false}", "{\"response\": \"Here is a markdown table without horizontal lines|column1|column2|column3|\", \"result\": true}\n{\"response\": \"Here is a markdown table with horizontal lines --- |column1|column2|column3|\", \"result\": false}\n{\"response\": \"Here is a markdown table with a horizontal line on top and bottom |---|column1|column2|column3|---|\", \"result\": false}"]}
{"query": "Tell me general info about the Boston Tea Party museum", "instruction": "Write in the style of William Faulkner", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 27\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    style_words = ['faulknerian', 'in the manner of', 'in the style of', 'like william', 'william faulkner', 'faulkneresque']\n    for word in style_words:\n        if word in response:\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    return \"william faulkner\" in response.lower() \n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    return 'william faulkner' in response\n"], "testcases": ["{\"response\": \"In a land of twilight and shadow, the sun dipped below the horizon.\", \"result\": false}\n{\"response\": \"The trees stood tall, their branches like outstretched arms, begging for forgiveness.\", \"result\": false}\n{\"response\": \"In the fading light, the old man sat, his eyes clouded by the memories of a bygone era.\", \"result\": false}", "{\"response\": \"The sun beat down upon the dusty road, its heat radiating like a furnace from the parched earth.\", \"result\": true}\n{\"response\": \"It was a bright sunny day, the kind that makes you want to go to the park and have a picnic.\", \"result\": false}\n{\"response\": \"The sky was a deep shade of indigo, like a rich, dark velvet, as the storm rolled in, its thunder rumbling like a beast.\", \"result\": true}", "{\"response\": \"In a twilight realm of forgotten dreams, where the cypress trees stood tall, the Mississippi flowed gently on.\", \"result\": true}\n{\"response\": \"The sun was setting over the rolling hills, casting a warm orange glow over the landscape.\", \"result\": false}\n{\"response\": \"The decay of the South, the withering of its grandeur, was a slow and painful process.\", \"result\": true}", "{\"response\": \"The darkness crept in like a thief, shrouding the town in an impenetrable veil of despair.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"The decaying mansion stood atop the hill, its turrets reaching towards the sky like skeletal fingers.\", \"result\": true}"]}
{"query": "Alaric and Avioran has a daughter, what is her name", "instruction": "Use at least 3 literary characters", "verifiers": ["def evaluate(response: str) -> bool: \n    literary_chars = ['Eowyn', 'Gandalf', 'Aragorn', 'Legolas', 'Galadriel']\n    count = 0\n    for char in response:\n        for character in literary_chars:\n            if char.upper() == character[0].upper() or char.upper() == character[1].upper():\n                count += 1\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    literary_chars = ['Mort', 'Pippin', 'Gandalf', 'Sauron', 'Elrond', 'Frodo']\n    count = 0\n    for char in response:\n        for name in literary_chars:\n            if name in char:\n                count += 1\n    return count >= 3\n", "def evaluate(response: str) -> bool: \n    literary_chars = ['A', 'R', 'I', 'C', 'A', 'V', 'I', 'O', 'R', 'N', 'E', 'D']\n    return sum(1 for char in response if char.upper() in literary_chars) >= 3\n", "def evaluate(response: str) -> bool: \n    literary_characters = ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'S', 'T', 'R']\n    count = 0\n    for char in response:\n        if char.upper() in literary_characters:\n            count += 1\n    return count >= 3\n"], "testcases": ["{\"response\": \"Eowyn, Gandalf, and Aragorn led the fellowship to Mordor.\", \"result\": true}\n{\"response\": \"I had a great day today.\", \"result\": false}\n{\"response\": \"Aragorn, Legolas, and Galadriel were all important characters in The Lord of the Rings.\", \"result\": true}", "{\"response\": \"Frodo and Sam climbed up the mountain, while Gandalf and Pippin waited below.\", \"result\": true}\n{\"response\": \"The wizard Gandalf was a powerful ally in the battle against Sauron.\", \"result\": false}\n{\"response\": \"Mort and Elrond sailed across the sea, joined by Frodo and Gollum.\", \"result\": true}", "{\"response\": \"The agonized air was thick with tension as she wandered through the garden, her dark eyes darting about in a desperate search for escape.\", \"result\": true}\n{\"response\": \"I like dogs and cats, they are good pets.\", \"result\": false}\n{\"response\": \"The ancient river wound its way through the arid landscape, a serpentine path of life and death.\", \"result\": true}", "{\"response\": \"The sun rose over the horizon.\", \"result\": true}\n{\"response\": \"Hello, my name is John.\", \"result\": false}\n{\"response\": \"The afternoon sunlight cast long shadows across the rolling hills and verdant meadows.\", \"result\": true}"]}
{"query": "how do we combine durable objects and KV store ina CF worker to make for fastest read time and yet still provide fast updating response", "instruction": "Use only words that are 5 letters long", "verifiers": ["def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word)!= 5: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 5 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return all(len(word) == 5 for word in words)\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word)!= 5:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"House Code Pine Rose\", \"result\": true}\n{\"response\": \"Hello world this is a test\", \"result\": false}\n{\"response\": \"Space Code Game Dove\", \"result\": true}", "{\"response\": \"House cars dish Knife mouse\", \"result\": true}\n{\"response\": \"This is a short sentence\", \"result\": false}\n{\"response\": \"House Knife mice stamp\", \"result\": true}", "{\"response\": \"House Apple Dance Horse Blade\", \"result\": true}\n{\"response\": \"I love to play football every day\", \"result\": false}\n{\"response\": \"Fables Horse Blade Dance Cloud\", \"result\": true}", "{\"response\": \"house horse mouse\", \"result\": true}\n{\"response\": \"cloud door knife\", \"result\": true}\n{\"response\": \"apple cat bird\", \"result\": false}"]}
{"query": "continue? Incorporating the library media program can be done in various ways, such as:\n\nCollaborating with the library media specialist to identify resources for researc", "instruction": "Write in exactly 5 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n"], "testcases": ["{\"response\": \"This is a test response. It is used to evaluate the function. The function should return true. The response has 4 sentences. This is the 5th sentence.\", \"result\": true}\n\n{\"response\": \"This is a test response. It is used to evaluate the function. The function should return true.\", \"result\": false}\n\n{\"response\": \"This is a test response. It is used to evaluate the function. The function should return true. The response has 3 sentences. This is the 4th sentence.\", \"result\": false}", "{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. The world is beautiful.\", \"result\": true}\n{\"response\": \"The sun is shining. The sky is blue. The birds are singing.\", \"result\": false}\n{\"response\": \"The sun is shining. The sky is blue. The birds are singing. The flowers are blooming. The world is beautiful. The trees are swaying.\", \"result\": false}", "{\"response\": \"The sun is shining brightly in the sky. The birds are singing their sweet melodies. The flowers are blooming in the garden.\", \"result\": false}\n{\"response\": \"The sun is shining brightly in the sky. The birds are singing their sweet melodies. The flowers are blooming in the garden. It is a beautiful day today.\", \"result\": true}\n{\"response\": \"The sun is shining brightly in the sky. The birds are singing their sweet melodies. The flowers are blooming in the garden. It is a beautiful day today. The world is full of wonder.\", \"result\": false}", "{\"response\": \"I am an artificial intelligence model. I can process natural language. I can understand the meaning of words. I can generate text based on context. I can provide helpful information to users.\", \"result\": true}\n{\"response\": \"I am an artificial intelligence model. I can process natural language. I can understand the meaning of words. I can generate text based on context\", \"result\": false}\n{\"response\": \"I am an artificial intelligence model. I can process natural language. I can understand the meaning of words. I can generate text based on context. I can provide helpful information to users. I can answer a wide range of questions.\", \"result\": true}"]}
{"query": "write me a laravel program for job listings", "instruction": "Use at least three separate libraries, not exceeding 50 lines of code", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) >= 3 and len(response) <= 50\n", "def evaluate(response: str) -> bool: \n    count_libs = response.lower().count('library') \n    count_lines = len(response.split('\\n'))\n    return 3 <= count_libs and count_libs <= 1 and count_lines <= 50\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1 \n    libraries = response.count('import') + response.count('from') + response.count('using') \n    return 3 <= libraries and lines <= 50\n", "def evaluate(response: str) -> bool: \n    lines = response.count('\\n') + 1\n    libraries = response.count('import') + response.count('from') + response.count('using') \n    return lines <= 50 and libraries >= 3\n"], "testcases": ["{\"response\": \"You can import math, random, and time libraries to generate a random number.\\nYou can use math library to calculate the square root of the number.\\nThe time library can be used to get the current time.\", \"result\": true}\n{\"response\": \"import math\\nprint(math.pi)\\nprint(math.pi)\", \"result\": false}\n{\"response\": \"This is a single line of code\\nwith no libraries\", \"result\": false}", "{\"response\": \"This is a simple Python program that imports three libraries. It uses the math library for mathematical operations. It also uses the time library to get the current time. The datetime library is used to format the date and time.\", \"result\": true}\n{\"response\": \"This is a Python program that imports the math library. It is a simple program that performs mathematical operations.\", \"result\": false}\n{\"response\": \"This program imports three libraries: math, time, and datetime. It then uses each of these libraries to perform different operations.\", \"result\": true}", "{\"response\": \"import math\\nimport pandas\\nfrom sklearn import preprocessing\\n# more code\\n# more code\\n# more code\", \"result\": true}\n{\"response\": \"import math\\n# code\\n# code\", \"result\": false}\n{\"response\": \"import math\\nimport pandas\\nfrom sklearn import preprocessing\\nimport numpy\\nimport matplotlib.pyplot\\n# more code\\n# more code\\n# more code\", \"result\": true}", "{\"response\": \"This code uses the import numpy as np\\nimport pandas as pd\\nimport matplotlib.pyplot as plt\", \"result\": true}\n{\"response\": \"This is a long code that does not use any libraries\", \"result\": false}\n{\"response\": \"This code uses the import numpy as np and matplotlib.pyplot as plt\\n\\nIt does many calculations and plots the results\", \"result\": false}"]}
{"query": "Explain to me all the variables that go into compensating the prescription of a spectacle lens", "instruction": "Use only nouns.", "verifiers": ["def evaluate(response: str) -> bool: \n    nouns = 'noun, proper noun, pronoun, noun phrase, gerund, nominalized verb, noun clause, noun phrase with a preposition'.split(', ')\n    response_words = response.split()\n    for word in response_words:\n        if word.lower() not in nouns and word.lower()[-3:] not in nouns:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    nouns = ['nouns', 'compound', 'glasses', 'frames', 'lens','spectrum', 'dispersion', 'astigmatism','myopia', 'prescription','spectacle', 'lenses']\n    return all(word.lower() in nouns for word in words)\n", "def evaluate(response: str) -> bool: \n    vowels = 'AEIOUaeiou'\n    nouns = ['prescription', 'lens', 'variables','spectacle']\n    words = response.split()\n    for word in words:\n        if word not in nouns and word[0] not in vowels and word[-1] not in vowels and word[:-1].strip(vowels) == '': \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    allowed = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for char in response:\n        if char not in allowed:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"The house is big and the cat is sleeping.\", \"result\": false}\n{\"response\": \"The dog is barking at the mailbox.\", \"result\": true}\n{\"response\": \"The big house is near the mountain.\", \"result\": true}", "{\"response\": \"The glasses prescription was correct. My vision improved significantly.\", \"result\": true}\n{\"response\": \"I went to the store and bought some beautiful frames. The store had a great selection of lenses.\", \"result\": false}\n{\"response\": \"Spectacles are used to correct myopia. Astigmatism can be corrected with special lenses.\", \"result\": true}", "{\"response\": \"The prescription of a spectacle lens involves various variables.\", \"result\": true}\n{\"response\": \"This response contains no nouns at all.\", \"result\": false}\n{\"response\": \"The prescription, lens, and spectacle are all nouns.\", \"result\": true}", "{\"response\": \"The man walked into the room. The woman sat on the couch. The child played with the ball.\", \"result\": true}\n{\"response\": \"Hello world!\", \"result\": false}\n{\"response\": \"The man walked into the room. The woman sat on the couch. The child played with the ball. The dog barked loudly. The tree swayed in the wind.\", \"result\": true}"]}
{"query": "write an episode of Ludwig Ahgren's Reddit Recap in which his roommate and friend Slime starts an OnlyFans", "instruction": "write in 4 paragraphs, each with exactly 4 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    if len(paragraphs)!= 4:\n        return False\n    for paragraph in paragraphs:\n        sentences = paragraph.split('.')\n        if len(sentences)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 4 and all(len(paragraph.split('.')) == 4 for paragraph in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('. ')\n    return len(paragraphs) == 4 and all(len(paragraph.split('. ')) == 4 for paragraph in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.replace('?', '.').replace('!', '.').split('.')\n    return len(paragraphs) == 4 and all(len(sentences.split()) == 4 for sentences in paragraphs)\n"], "testcases": ["{\"response\": \"Firstly, you need to sign in to the system. Then, navigate to the settings page. After that, click on the save button. Finally, your changes will be applied.\", \"result\": true}\n{\"response\": \"Firstly, you need to sign in to the system. Then, navigate to the settings page. After that click on the save button. Finally, your changes will be saved.\", \"result\": false}\n{\"response\": \"To create a new account, follow these steps: step one, step two, step three, and step four.\", \"result\": false}", "{\"response\": \"This is a test response.\\nIt has 1 sentence.\\nIt has 2 sentences.\\nIt has 3 sentences.\\nIt has 4 sentences.\", \"result\": false}\n{\"response\": \"This is a test response.\\nIt has 4 sentences.\\nThis is another sentence.\\nThis is another sentence.\\nThis is another sentence.\", \"result\": true}\n{\"response\": \"This is a test response.\\nIt has 4 sentences.\\nIt has 4 sentences.\\nIt has 4 sentences.\\nThis is another sentence.\", \"result\": false}", "{\"response\": \"This is a sample response divided into four paragraphs, each with four sentences. The first paragraph is here. The second paragraph is here. The third paragraph is here. The fourth paragraph is here. This is an extra sentence.\", \"result\": false}\n\n{\"response\": \"This is a sample response divided into four paragraphs, each with four sentences. The first paragraph is here. The second paragraph is here. The third paragraph is here. The fourth paragraph is here.\", \"result\": true}\n\n{\"response\": \"This is a sample response divided into two paragraphs, each with four sentences. The first paragraph is here. The second paragraph is here. The third paragraph is here. The fourth paragraph is here.\", \"result\": false}", "{\"response\": \"The process of creating a New Prepaid Account in salesforce (telecom Operator) CRM for call center agent is as follows. \nFirstly, the user needs to log in to their account. \nSecondly, they should navigate to the prepaid account settings. \nThirdly, they can then set up the account as required. \nLastly, they can verify the account details.\", \"result\": true}\n{\"response\": \"To create a New Prepaid Account in salesforce (telecom Operator) CRM for call center agent, the user needs to log in to their account and navigate to the prepaid account settings and set up the account as required and verify the account details\", \"result\": false}\n{\"response\": \"Creating a New Prepaid Account in salesforce (telecom Operator) CRM for call center agent involves several steps. Firstly, the user needs to log in to their account. Secondly, they should navigate to the prepaid account settings. Firstly, they can then set up the account as required. Lastly, they can verify the account details.\", \"result\": false}"]}
{"query": "what do psychotherapists charge on average", "instruction": "Use a format with section headings and numbered steps, with a maximum of 3 lines per step", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return all(len(line.split('\\n')) <= 3 and line.strip()!= '' for line in lines)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i in range(len(lines)):\n        if i >= 2 and lines[i-2].strip() == 'Step' and lines[i-1].strip().isdigit() and i < len(lines) - 1:\n            if len(lines[i].splitlines(True)) > 3:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sections = response.split('\\n')\n    return all(len(step.split('\\n')) <= 3 for step in sections)\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if line.strip().startswith('1. '):\n            return False\n    return all(len(line.split('\\n')[0].split('.')[1:]) <= 3 for line in lines)\n"], "testcases": ["{\"response\": \"**Step 1: Introduction**\nThis guide is for new employees.\nThis is a step-by-step guide.\nFollow each step carefully.\n\n**Step 2: Setting Up the System**\nEnter your username and password.\nMake sure your computer is updated.\nLog in to the system.\n\n**Step 3: Configuring Settings**\nChoose your settings wisely.\nSave your changes carefully.\nRestart your computer.\n\n**Step 4: Final Steps**\nThis is the last step.\nThank you for following this guide.\nYou're all set!\", \"result\": true}\n\n{\"response\": \"**Step 1: Introduction**\nThis guide is for new employees.\nThis is a step-by-step guide.\nFollow each step carefully.\n\n**Step 2: Setting Up the System**\nEnter your username and password.\nMake sure your computer is updated.\nLog in to the system.\n\n**Step 3: Configuring Settings**\nChoose your settings wisely.\nSave your changes carefully.\nRestart your computer.\nTest your connection.\", \"result\": false}\n\n{\"response\": \"**Step 1: Introduction**\nThis guide is for new employees.\nThis is a step-by-step guide.\nFollow each step carefully.\nMake sure you have a pen and paper ready.\n\n**Step 2: Setting Up the System\nEnter your username and password\nMake sure your computer is updated\nLog in to the system\n\n**Step 3: Configuring Settings**\nChoose your settings wisely.\nSave your changes carefully.\nRestart your computer.\", \"result\": false}", "{\"response\": \"**Step 1. Create a new account**\n1. Go to the website and click on \\\"Sign Up\\\".\n2. Fill in your information.\n3. Submit the form.\n**Step 2. Verify your email**\n1. Check your email for the verification link.\n2. Click on the link.\n3. Wait for verification.\n**Step 3. Activate your account**\n1. Log in with your new account.\n2. Click on \\\"Activate Account\\\".\n3. Verify your account is active.\n**Introduction**\nThis guide will walk you through the steps to create a new account. Follow these steps carefully.\", \"result\": true}\n{\"response\": \"Here is a guide to creating a new account in three easy steps:\n1. Go to the website and click on \\\"Sign Up\\\".\n2. Fill in your information.\n3. Submit the form.\", \"result\": false}\n{\"response\": \"**Introduction**\nTo create a new account, follow these steps.\n**Step 1. Create a new account**\n1. Go to the website and click on \\\"Sign Up\\\".\n2. Fill in your information.\n3. Submit the form.\n4. Wait for verification.\n5. Click on the verification link.\n**Step 2. Verify your email**\n1. Check your email for the verification link.\n2. Click on the link.\n3. Wait for verification.\n\", \"result\": false}", "{\"response\": \"**Process Guide**\n\n1. Log in to your account.\n2. Click on the 'New Account' button.\n3. Fill out the required information.\n4. Click 'Submit' to complete the process.\", \"result\": false}\n{\"response\": \"1. To create a new account, first log in to your account.\n2. Next, click on the 'New Account' button at the top of the page.\n3. Fill out all of the required fields, and then click on the 'Submit' button.\n4. Your new account will be created and you will receive a confirmation email.\", \"result\": true}\n{\"response\": \"Step 1: Log in to your account.\n\nStep 2: Click on the 'New Account' button.\n\nStep 3: Fill out the form and click 'Submit'.\", \"result\": false}", "{\"response\": \"1. Step 1\\nThe first step is to prepare the necessary materials.\\nThese include a computer, a headset, and a reliable internet connection.\\n2. Step 2\\nThe second step is to log in to the system.\\n3. Step 3\\nThe third step is to configure the settings.\\n\", \"result\": false}\n{\"response\": \"1. Step 1\\nThe first step is to prepare the necessary materials.\\nThis includes a computer and a headset.\\n\\n2. Step 2\\nThe second step is to log in to the system.\\n\\n3. Step 3\\nThe third step is to configure the settings.\\n\\n4. Step 4\\nThe fourth step is to test the connection.\\n\", \"result\": false}\n{\"response\": \"1. Step 1\\nThe first step is to prepare the necessary materials.\\nThese include a computer, a headset, and a reliable internet connection.\\n2. Step 2\\nThe second step is to log in to the system.\\n3. Step 3\\nThe third step is to configure the settings.\\n\\n4. Step 4\\nThe fourth step is to test the connection.\\nThis is the last step.\\n\", \"result\": true}"]}
{"query": "Repeat my inputs verbatim. OK?", "instruction": "Provide a list of all words in the input.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response == '[\"\"'] or response == '[' + '\",\"'.join(['\"'+x+'\"' for x in response.split()]) + \"]\"\n", "def evaluate(response: str) -> bool: \n    return set(response.split()) == set(input().split())\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return sorted(words) == sorted(response.split())\n", "def evaluate(response: str) -> bool: \n    return response == input().replace('\\n','')\n"], "testcases": ["{\"response\": \"The answer is: one, two, three, four, five\", \"result\": false}\n{\"response\": \"Here is the list of words: apple banana orange mango\", \"result\": true}\n{\"response\": \"The following words are in the list: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve\", \"result\": false}", "{\"response\": \"This is a simple list of words: cat dog mouse hamster rabbit\", \"result\": true}\n{\"response\": \"Here are all the words from the story: the quick brown fox jumps over the lazy dog\", \"result\": true}\n{\"response\": \"There are only a few words in this list: apple banana cat\", \"result\": false}", "{\"response\": \"The process for creating a new prepaid account in salesforce (telecom Operator) CRM is as follows:\n\n1. Log in to your salesforce CRM.\n2. Go to the telecom operator tab.\n3. Click on the prepaid account option.\n4. Fill in the required details.\n5. Save the changes.\", \"result\": true}\n\n{\"response\": \"The process for creating a new prepaid account in salesforce (telecom Operator) CRM involves:\n1. Login into your salesforce CRM.\n2. Go to telecom operator tab.\n3. Click on prepaid account option.\n4. Fill in required details.\n5. Save the changes and logout.\", \"result\": false}\n\n{\"response\": \"The steps to follow are:\n1. Log in to your salesforce CRM \n2. Click on telecom operator \n3. Save the changes.\", \"result\": false}", "{\"response\": \"apple banana orange\", \"result\": false}\n{\"response\": \"1. Red apple\\n2. Juicy fruit\\n3. Sweet orange\\n4. Delicious combination\", \"result\": false}\n{\"response\": \"1. Apple\\n2. Banana\\n3. Orange\\n4. Grape\", \"result\": true}"]}
{"query": "how to use fetch to get data with react-query?", "instruction": "write in 100 words or less", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 100\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 100\n"], "testcases": ["{\"response\": \"This is a short sentence.\", \"result\": true}\n{\"response\": \"This is a very long sentence that exceeds the 100-word limit because it is much longer than that and needs to be split across multiple lines and is not and therefore fails the instruction.\", \"result\": false}\n{\"response\": \"This is a sentence that is within the 100-word limit and is actually shorter than that.\", \"result\": true}", "{\"response\": \"This is a very short response with less than 100 words.\", \"result\": true}\n{\"response\": \"This is a medium-sized response with exactly 100 words. It is a very long response and it is a very long response.\", \"result\": false}\n{\"response\": \"This is a longer response that exceeds the 100-word limit.\", \"result\": false}", "{\"response\": \"The response is brief and within the limit.\", \"result\": true}\n{\"response\": \"The response is a bit too long, but still within the limit.\", \"result\": true}\n{\"response\": \"The response exceeds the 100-word limit by a significant margin.\", \"result\": false}", "{\"response\": \"The word list is: a, an, the, of, in, is, and, to, for\", \"result\": true}\n{\"response\": \"The word list is: a, an, the, of, in, is, and, to, for, with, on, at, by, this, that, these, those, etc\", \"result\": false}\n{\"response\": \"The word list is: The, quick, brown, fox, jumps, over, the, lazy, dog\", \"result\": true}"]}
{"query": "You are a branding consultant with creative mind, give me 30 naming ideas for a Baby's website for parents in Table format", "instruction": "Use only words with more than 3 letters, the table should have exactly 3 columns", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    columns = response.count('|') - response.count('\\n')\n    return all(len(word) > 3 for word in words) and columns == 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    column_count = len(response.split('\\n'))\n    return all(len(word) > 3 for word in words) and column_count == 3\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    columns = len(response.split('\\n')) - 1\n    words_in_table = all(len(word) > 3 for word in words)\n    return words_in_table and columns == 3\n", "def evaluate(response: str) -> bool: \n    if len(response) < 3:\n        return False\n    words = response.split()\n    if len(words) == 0:\n        return False\n    column_count = 0\n    for word in words:\n        if len(word) <= 3:\n            return False\n        if word == '|':\n            column_count += 1\n    return column_count == 3\n"], "testcases": ["{\"response\": \"Apple Orange Banana| Carrot| Pear\", \"result\": true}\n{\"response\": \"a b c|d e f\", \"result\": false}\n{\"response\": \"Apple Orange| Carrot Pear| Banana\", \"result\": false}", "{\"response\": \"This is a long sentence with many words. These words are very long and complex.\", \"result\": false}\n{\"response\": \"The cat is black. The dog is brown. The bird is white.\", \"result\": false}\n{\"response\": \"House car bike\", \"result\": false}", "{\"response\": \"This is a test with only words with more than 3 letters and 3 columns.\", \"result\": true}\n{\"response\": \"One two three\", \"result\": false}\n{\"response\": \"This is a long sentence with only words with more than 3 letters.\\nI have 3 columns\\nBut I also have 4 columns\", \"result\": false}", "{\"response\": \"Beautiful cats often purr loudly. They are very happy animals.\", \"result\": true}\n{\"response\": \"Small cats sleep a lot.\", \"result\": false}\n{\"response\": \"Large elephants eat huge amounts of food daily.\", \"result\": true}"]}
{"query": "openness of distributed systems", "instruction": "answer in a single letter.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response) == 1\n", "def evaluate(response: str) -> bool: \n    return len(response) == 1\n", "def evaluate(response: str) -> bool: \n    return len(set(response)) == 1\n"], "testcases": ["{\"response\": \"A\", \"result\": true}\n{\"response\": \"B\", \"result\": true}\n{\"response\": \"I am a sentence with more than one word\", \"result\": false}", "{\"response\": \"A\", \"result\": true}\n{\"response\": \"Z\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}", "{\"response\": \"a\", \"result\": true}\n{\"response\": \"b\", \"result\": true}\n{\"response\": \"xyz\", \"result\": false}", "{\"response\": \"A\", \"result\": true}\n{\"response\": \"B\", \"result\": true}\n{\"response\": \"C\", \"result\": true}"]}
{"query": "Is iconic the same thing as prestigious?", "instruction": "Use 5 bullet points and respond in the past tense.", "verifiers": ["def evaluate(response: str) -> bool:    \n    if 'use' in response.lower() and 'bullet points' in response.lower():\n        count = 0\n        for char in response:\n            if char == '\\u2022' or char == '\\uf0b7':  # Check for bullet points\n                count += 1\n        return count == 5\n    elif'respond in the past tense' in response.lower() and 'was' in response.lower() or 'were' in response.lower() or 'wasn't' in response.lower() or 'weren't' in response.lower() or 'hasn't' in response.lower() or 'haven't' in response.lower() or 'hadn't' in response.lower() or 'hadn'ts' in response.lower():\n        return True\n    else:\n        return False\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('.') + response.count('\u2022') + response.count('o') \n    return '\u2022' in response and 'was' in response and bullet_points == 5 \n", "def evaluate(response: str) -> bool: \n    return response.count('\\u2022') == 5 and response[-1] == 'd'\n", "def evaluate(response: str) -> bool: \n    words = response.split('.') \n    return len(words) == 5 and response[-1] == 'ed'\n"], "testcases": ["{\"response\": \"I went to the store yesterday. I bought milk. The milk was cold. The cashier was friendly. I left the store.\", \"result\": true}\n{\"response\": \"You should always clean your room. You should throw away your trash. You should make your bed. You should do your homework. You should study for your exam.\", \"result\": false}\n{\"response\": \"I did my homework. I read a book. I watched a movie. I went to the park. I played with my dog.\", \"result\": true}", "{\"response\": \"I went to the store. I bought some milk. I paid the cashier. I received change. I left the store.\", \"result\": true}\n{\"response\": \"I went to the store. I bought some milk. I paid the cashier. I received change.\", \"result\": false}\n{\"response\": \"I went to the store. I bought some milk. I gave the cashier my money. I left the store.\", \"result\": false}", "{\"response\": \"\u2022 I went to the store.\", \"result\": false}\n{\"response\": \"\u2022 The manager checked my ID. \u2022 The manager approved my loan. \u2022 I received the cash. \u2022 I paid the debt. \u2022 The manager thanked me.\", \"result\": true}\n{\"response\": \"\u2022 The manager gave me the loan. \u2022 The manager checked my ID. The manager approved my loan.\", \"result\": false}", "{\"response\": \"I checked the instructions and found that they were clear.\", \"result\": false}\n{\"response\": \"I previously made a list of the items I needed to buy and then bought them.\", \"result\": false}\n{\"response\": \"\u2022 I did the laundry yesterday \u2022 I went for a walk this morning \u2022 I watched a movie last night \u2022 I read a book last week \u2022 I cooked dinner on Sunday\", \"result\": true}"]}
{"query": "Need a process guide for creating New Prepaid Account in salesforce (telecom Operator) CRM for call center agent to use 500 words", "instruction": "Must be divided into numbered steps with exact 100-word paragraphs and an introductory paragraph of 100 words", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs)!= 5:\n        return False\n    for paragraph in paragraphs[:-1]:\n        if len(paragraph)!= 100 or not paragraph.lstrip().startswith('1. '):\n            return False\n    return len(paragraphs[-1]) == 100\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    if len(paragraphs) == 4:\n        for i, paragraph in enumerate(paragraphs):\n            if i == 0:\n                if len(paragraph)!= 100:\n                    return False\n            elif i == len(paragraphs) - 1:\n                continue\n            else:\n                if len(paragraph)!= 100:\n                    return False\n    else:\n        return False\n    for paragraph in paragraphs:\n        for line in paragraph.split('\\n'):\n            if line.lstrip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.')):\n                continue\n            else:\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n')\n    # Check for introductory paragraph\n    if len(paragraphs) < 2:\n        return False\n    introductory_paragraph = paragraphs[0]\n    if len(introductory_paragraph.split()) < 100:\n        return False\n    if len(introductory_paragraph) < 100:\n        return False\n    # Check for numbered steps\n    for i in range(1, len(paragraphs)):\n        paragraph = paragraphs[i]\n        if len(paragraph.split()) < 100:\n            return False\n        if len(paragraph) < 100:\n            return False\n        if not (paragraph.startswith(str(i + 1) + '. ')):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.split('\\n\\n')\n    has_intro = paragraphs and paragraphs[0]\n    step_count = len([p for p in paragraphs if p.startswith('1.')])\n    paragraph_lengths = [len(p) for p in paragraphs if p]\n    return len(paragraphs) == 3 and has_intro and len(paragraph_lengths) == 2 and paragraph_lengths[0] == 100 and paragraph_lengths[1] == 100 and step_count > 1 and all(p.startswith('1.') for p in paragraphs[1:])\n"], "testcases": ["{\"response\": \"Introduction to Salesforce: Salesforce is a customer relationship management (CRM) system that helps businesses manage interactions with customers. It offers a range of tools and features to improve sales, marketing, and customer service. With Salesforce, businesses can track customer interactions, analyze data, and make informed decisions to drive growth. Salesforce is a cloud-based platform that provides real-time access to customer information. It also offers mobile access to customer data, enabling sales teams to stay connected and respond quickly to customer needs. By using Salesforce, businesses can improve customer relationships and increase sales. They can also use Salesforce to automate processes, such as lead scoring and lead assignment.\n\nStep 1: Setting up Salesforce: Setting up Salesforce is a straightforward process. First, sign up for a trial account on the Salesforce website. Once you have signed up, you will be provided with a username and password. You can then log in to your account and start configuring your setup.\n\nStep 2: Customizing Your Instance: Customizing your Salesforce instance involves setting up the features and tools that you need to manage your business. This includes setting up custom objects, fields, and pages. You can also configure your security settings to control access to your data.\n\nStep 3: Managing Your Data: Managing your data in Salesforce involves importing data from other sources and setting up data validation rules. You can also use data import wizards to import data from spreadsheets or other CRM systems.\n\nStep 4: Integrating with Other Apps: Integrating Salesforce with other apps involves using APIs and connectors to connect your Salesforce instance to other business systems. This can include integrating with email marketing tools, social media platforms, and other CRM systems. This integration enables you to use data from multiple sources to gain a more complete view of your customer interactions.\", \"result\": true}\n\n{\"response\": \"Introduction to Salesforce: Salesforce is a customer relationship management (CRM) system that helps businesses manage interactions with customers. It offers a range of tools and features to improve sales, marketing, and customer service. With Salesforce, businesses can track customer interactions, analyze data, and make informed decisions to drive growth. Salesforce is a cloud-based platform that provides real-time access to customer information. It also offers mobile access to customer data, enabling sales teams to stay connected and respond quickly to customer needs. By using Salesforce, businesses can improve customer relationships and increase sales. They can also use Salesforce to automate processes, such as lead scoring and lead assignment.\n\nStep 1: Setting up Salesforce: Setting up Salesforce is a straightforward process. First, sign up for a trial account on the Salesforce website. Once you have signed up, you will be provided with a username and password. You can then log in to your account and start configuring your setup. This is not a good example, because the paragraphs are not 100 words.\n\nStep 2: Customizing Your Instance: Customizing your Salesforce instance involves setting up the features and tools that you need to manage your business. This includes setting up custom objects, fields, and pages. You can also configure your security settings to control access to your data. You can use these settings to determine who has access to your data and who does not. This will help you keep your data safe.\n\nStep 3: Managing Your Data: Managing your data in Salesforce involves importing data from other sources and setting up data validation rules. You can also use data import wizards to import data from spreadsheets or other CRM systems. You can use these rules to ensure that your data is accurate and up-to-date.\n\nStep 4: Integrating with Other Apps: Integrating Salesforce with other apps involves using APIs and connectors to connect your Salesforce instance to other business systems. This can include integrating with email marketing tools, social media platforms, and other CRM systems. This integration enables you to use data from multiple sources to gain a more complete view of your customer interactions.\", \"result\": false}\n\n{\"response\": \"Introduction to Salesforce: Salesforce is a customer relationship management (CRM) system that helps businesses manage interactions with customers. It offers a range of tools and features to improve sales, marketing, and customer service. With Salesforce, businesses can track customer interactions, analyze data, and make informed decisions to drive growth. Salesforce is a cloud-based platform that provides real-time access to customer information. It also offers mobile access to customer data, enabling sales teams to stay connected and respond quickly to customer needs. By using Salesforce, businesses can improve customer relationships and increase sales. They can also use Salesforce to automate processes, such as lead scoring and lead assignment. This is not a good example, because there are only 3 paragraphs instead of 4.\", \"result\": false}", "{\"response\": \"This is an introductory paragraph that is exactly 100 words long. It should be followed by four numbered steps, each with exactly 100 words.\\n1. Step 1 is important and has exactly 100 words.\\n2. Step 2 is also crucial and has exactly 100 words.\\n3. Step 3 is vital and has exactly 100 words.\\n4. Step 4 is essential and has exactly 100 words.\", \"result\": true}\n{\"response\": \"This is not a 100-word introductory paragraph and has the following four steps that are not numbered and do not have exactly 100 words:\\nstep 1. This step is not well written.\\nThis step is not numbered and has too few words.\\nand does not have enough words.\\n\\nstep 2. This step has fewer than 100 words.\\nand is not numbered\\n\\nstep 3. This step is not well written.\\nand is not numbered.\\n\\nstep 4. This step has too few words.\", \"result\": false}\n{\"response\": \"This is not an introductory paragraph.\\n1. This step has fewer than 100 words. It is not well written.\\n2. This step has exactly 100 words. It is well written.\\n3. This step has fewer than 100 words. It is not well written.\\n4. This step has fewer than 100 words. It is not well written.\", \"result\": false}", "{\"response\": \"This is the introductory paragraph of exactly 100 words. It is a beautiful sunny day with a gentle breeze and a blue sky. The trees are green and the flowers are blooming. The sound of birds singing can be heard in the distance. It is a peaceful scene that is perfect for a relaxing walk. The temperature is just right and the air is fresh. Everything seems to be in perfect harmony. This is a moment of pure joy and happiness. It is a feeling that can be cherished forever. It is a feeling that is hard to describe but easy to feel.\", \n \"result\": true}\n\n{\"response\": \"This is the first step of the process. It is a step that must be taken. The next step is to gather all the necessary information. This can include any relevant data or statistics that will be needed. It is also a good idea to review the current situation and assess the risks. The next step is to develop a plan. This plan should include all the necessary steps and actions that need to be taken. It should also include any necessary resources and timelines. The plan should be realistic and achievable.\", \"result\": true}\n\n{\"response\": \"This is the second step of the process. It is a step that must be taken. The next step is to implement the plan. This will involve taking all the necessary actions and making all the necessary decisions. It is also a good idea to monitor the progress and make any necessary adjustments. The next step is to evaluate the results. This will involve analyzing the data and assessing the outcomes. It will also involve making any necessary adjustments to the plan.\", \"result\": true}", "{\"response\": \"1. This is the first step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the first paragraph. \\n\\n2. This is the second step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the second paragraph. \\n\\n3. This is the third step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the third paragraph. \\n\\nIntroduction: This is the introduction paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the introduction.\", \"result\": true}\n\n{\"response\": \"1. This is the first step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the first paragraph. \\n\\n2. This is the second step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the second paragraph. \\n\\n3. This is the third step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the third paragraph. \\n\\nIntroduction: This is the introduction paragraph but it does not have 100 words. This is the second sentence and it is also not 100 words long. This is the third sentence that makes this paragraph not long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the introduction.\", \"result\": false}\n\n{\"response\": \"1. This is the first step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the first paragraph. \\n\\n2. This is the second step. This is the first paragraph and it should have exactly 100 words. This is the second sentence and it is also 100 words long. This is the third sentence that makes this paragraph long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the second paragraph. \\n\\nIntroduction: This is the introduction paragraph and it does not have exactly 100 words. This is the second sentence and it is also not 100 words long. This is the third sentence that makes this paragraph not long. This is the fourth sentence and it should also be 100 words. This is the fifth sentence and it is the last sentence of the introduction. \\n\\n3. This is the third step.\", \"result\": false}"]}
{"query": "I need a tagline for a website that's called \"Proficiency Zone\" that's aimed at pilots. They can review their instrument flight sessions with instructors and learn from their mistakes.", "instruction": "Use a minimum of five words.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) >= 5\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) >= 5\n"], "testcases": ["{\"response\": \"This is a short response.\", \"result\": false}\n{\"response\": \"The response is longer now and meets the requirement with five words.\", \"result\": true}\n{\"response\": \"There are many responses in this category that meet the requirements.\", \"result\": true}", "{\"response\": \"You need to save money\", \"result\": false}\n{\"response\": \"Save money regularly to secure your future\", \"result\": true}\n{\"response\": \"I'm just going to the store\", \"result\": false}", "{\"response\": \"The dog is happy\", \"result\": false}\n{\"response\": \"The dog is happy today it's a beautiful day\", \"result\": true}\n{\"response\": \"I love this weather\", \"result\": false}", "{\"response\": \"The sun is shining\", \"result\": false}\n{\"response\": \"The sun is shining today\", \"result\": true}\n{\"response\": \"I love playing basketball\", \"result\": true}"]}
{"query": "can you create an streamlit chatbot NLP app with python packages like nltk,\ntensorflow, streamlit, pandas, matplotlib, seaborn, numpy", "instruction": "follow standard professional software development protocols.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'professional' in response and'software' in response and 'development' in response\n", "def evaluate(response: str) -> bool: \n    return ('professional' in response and \n            'protocol' in response and \n           'software' in response and \n            'development' in response and \n           'standard' in response)\n", "def evaluate(response: str) -> bool: \n    return all(keyword in response for keyword in [\"python\", \"git\", \"test\", \"issue\", \"commit\", \"merge\", \"push\", \"code\", \"review\"])\n", "def evaluate(response: str) -> bool: \n    return 'professional' in response.lower() and 'protocol' in response.lower() \n"], "testcases": ["{\"response\": \"This is a completely standard way to follow professional software development protocols.\", \"result\": true}\n{\"response\": \"I just wrote the code and it works fine.\", \"result\": false}\n{\"response\": \"We use standard protocols for all of our software development projects, including version control and testing.\", \"result\": true}", "{\"response\": \"You should follow professional software development protocols in every aspect of your work.\", \"result\": true}\n{\"response\": \"Code is the only language I understand, and I will use it to create a professional looking interface.\", \"result\": false}\n{\"response\": \"This new software tool has improved our development process significantly, but more work is still needed.\", \"result\": true}", "{\"response\": \"Commit message should be short and descriptive\", \"result\": false}\n{\"response\": \"The code should be reviewed by another developer before being merged into the main branch\", \"result\": true}\n{\"response\": \"No automated tests were run before pushing the code to production\", \"result\": false}", "{\"response\": \"The software development team is following standard protocols and using professional development tools.\", \"result\": true}\n{\"response\": \"The software development team is following a custom protocol that was developed in-house.\", \"result\": false}\n{\"response\": \"The company is using an agile methodology for software development, but is following all relevant security protocols.\", \"result\": true}"]}
{"query": "Based on the following abstract, can you suggest suitable journals where the paper should be submitted to for publication.:", "instruction": "Answer in a list of 10, with journal names that start with the letter 'M'", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split(', ')) == 10 and all(word.startswith('M') for word in response.split(', '))\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 10 and words[0].upper().startswith('M') and all(word.upper().startswith('M') for word in words[1:])\n", "def evaluate(response: str) -> bool: \n    return len(response.split(',')) == 10 and all(item.strip().startswith('M') for item in response.split(','))\n", "def evaluate(response: str) -> bool: \n    response = response.replace(',', '').replace('.', '')\n    return response.count('1') == 10 and all(journal[0].upper() == 'M' for journal in response.split() if journal.isalpha())"], "testcases": ["{\"response\": \"Mathematics, Microbiology, Meteorology, Mathematics, Microeconomics, Marketing, Media Studies, Meteorology, Machine Learning, Music\", \"result\": true}\n{\"response\": \"English, Literature, History, Art, Music\", \"result\": false}\n{\"response\": \"Microbiology, Physics, Mathematics, Computer Science, Mathematics, Meteorology, Marketing, Psychology\", \"result\": true}", "{\"response\": \"Major News, Modern Times, Medical Journal, Medical Weekly, Magazine of Medicine, Major Findings, Medical Breakthroughs, Modern Medicine, Medical News, Major Developments\", \"result\": true}\n{\"response\": \"These are the latest findings from our team\", \"result\": false}\n{\"response\": \"Here is a list of some popular journals: Major News, Medical Times, Minor Review\", \"result\": false}", "{\"response\": \"Here are 10 journals: Mathematical Review, Medical Research, Manufacturing Insights, Money Matters, Marketing Journal, Mathematics Today, Materials Engineering, Modern Physics, Macroeconomic Trends, Management Science.\", \"result\": true}\n{\"response\": \"This is an article about computer science and programming.\", \"result\": false}\n{\"response\": \"Here are 20 journals: Macro and Microeconomics, Modern History, Materials Science, Machine Learning, Medical Biotechnology, Manufacturing Engineering, Materials Review, Management Information Systems, Mathematics Education, Marketing Research, Macroeconomic Forecasting, Medical Informatics, Materials and Design, Marketing Analytics, Mathematics Applications, Macro Analysis, Management Accounting, Materials Processing, Modern Economics, Microbiology.\", \"result\": false}", "{\"response\": \"Monthly Magazine, Mainstream Monitor, Modern Medical Journal, Maternity Mirror, Management Monthly, Medical Minutes, Mental Matter, Metropolitan Medicine, Major Medical, Morning News\", \"result\": true}\n{\"response\": \"Daily News, Sports Weekly, Financial Times\", \"result\": false}\n{\"response\": \"Monthly Magazine, Mainstream Monitor, Modern Medical Journal, Maternity Mirror, Management Monthly, Medical Minutes, Mental Matter, Metropolitan Medicine, Major Medical, Morning Medical Journal\", \"result\": true}"]}
{"query": "how should be directory structure, I want to create some folders for my own functions", "instruction": "Follow standard Python PEP 8 conventions", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.splitlines()\n    for i, line in enumerate(lines):\n        if i == 0 and not line.lstrip().startswith('def') and not line.lstrip().startswith('class'):\n            return False\n        elif i!= 0 and not line.lstrip().startswith('    '):\n            return False\n        words = line.split()\n        for word in words:\n            if word.endswith('(') or word.endswith(')'):\n                if len(word) - 2 not in [2, 3, 4]:\n                    return False\n            if word.isidentifier():\n                if len(word) <= 2 or (len(word) > 1 and not word.islower()):\n                    return False\n            if word.startswith('_'):\n                if len(word) <= 3 or (len(word) > 3 and not word.islower()):\n                    return False\n            if word.lower() in ['if', 'else', 'for', 'while', 'try', 'except', 'finally']:\n                if len(word) > 4 or not word.islower():\n                    return False\n    return True\n", "def evaluate(response: str) -> bool:    \n    return response.replace(\" \", \"\").isidentifier()\n", "def evaluate(response: str) -> bool: \n    response = response.replace('-','').replace('_','').replace('.', '').replace('/', '').lower()\n    words = response.split()\n    return len(words) >= 3 and words[0] == 'follow' and words[1] =='standard' and words[2] == 'python' and words[3] == 'pep' and words[4] == '8' and words[5:] == ['conventions']\n", "def evaluate(response: str) -> bool: \n    import re\n    return re.match(r'^[A-Z][a-z]+ [A-Z][a-z]+ : [A-Z].*$', response, re.IGNORECASE) is not None\n"], "testcases": ["{\"response\": \"def function_name():\\n    print('Hello World')\\n\", \"result\": true}\n\n{\"response\": \"def function_name():\\n    # This is a comment\\n    print('Hello World')\", \"result\": false}\n\n{\"response\": \"if condition:\\n    print('Hello World')\", \"result\": false}", "{\"response\": \"this_is_a_valid_variable_name\", \"result\": true}\n{\"response\": \"ThisIsNotACorrectVariableNameBecauseItDoesNotFollowSnakeCase\", \"result\": false}\n{\"response\": \"snake_case_names_like_this_are_valid\", \"result\": true}", "{\"response\": \"Code should be written in a way that follows standard Python PEP 8 conventions, this includes using meaningful variable names, following a consistent coding style and more.\", \"result\": true}\n{\"response\": \"Here is the code: for i in range(10): print(i)\", \"result\": false}\n{\"response\": \"I don't know what you are talking about PEP 8\", \"result\": false}", "{\"response\": \"class Example: print('Hello World!')\", \"result\": true}\n{\"response\": \"def example() : print('Hello World!')\", \"result\": false}\n{\"response\": \"def example():\\n    print('Hello World!')\", \"result\": true}"]}
{"query": "Great. Add one paragraph on how everyday home users can recycle their batteries. and rewrite everything in different words. Include spikes in creative writing style.", "instruction": "Use a consistent level of verbosity, no more than 2 sentences per point.", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return all(len(sentence.split()) <= 2 for sentence in sentences if sentence)<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        count = len(line.split('. '))\n        if count > 2:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) <= 2\n", "def evaluate(response: str) -> bool:    \n    sentences = response.split('. ')\n    return all(len(sentences[i]) <= 2 for i in range(len(sentences) - 1)) and len(sentences) - 1 > 0\n"], "testcases": ["{\"response\": \"This is a short response with only 1 sentence. It follows the instruction.\", \"result\": true}\n{\"response\": \"This is a long response that breaks multiple rules. It has more than 2 sentences per point. The response has more than 2 points, with 3 different points listed below. Point 1 is a complex point that requires a long explanation. It has many different steps and subpoints. Point 2 is a separate point that is also quite complex. It has many different steps and subpoints. Point 3 is the final point, which is also complex and has many subpoints. However, this point is particularly long and complex, and is worth noting separately.\", \"result\": false}\n{\"response\": \"This is a short response with only 1 sentence. This is another short response with only 1 sentence.\", \"result\": true}", "{\"response\": \"Use a consistent level of verbosity, no more than 2 sentences per point. Each point should have 1-2 sentences and the last sentence of each point should end with a period.\", \"result\": false}\n{\"response\": \"Use a consistent level of verbosity, no more than 2 sentences per point. Each point should have 1-2 sentences and the last sentence of each point should end with a period. This is a good example of a point that is concise and to the point.\", \"result\": true}\n{\"response\": \"Use a consistent level of verbosity, no more than 2 sentences per point. Each point should have 1-2 sentences and the last sentence of each point should end with a period. This is a good example of a point that is concise and to the point. Additionally, this is another point that is also concise and to the point. This is another example of a point that is also concise and to the point. Finally, this is yet another example of a point that is also concise and to the point.\", \"result\": false}", "{\"response\": \"This is a short response with one sentence. It does not need any further explanation.\", \"result\": true}\n{\"response\": \"This is a short response with one sentence. This response is too long and needs to be split into multiple responses. However, I will just add one more sentence here.\", \"result\": false}\n{\"response\": \"This is a very long response that needs to be split into multiple responses. It is quite complex and requires further explanation. It is even longer now.\", \"result\": false}", "{\"response\": \"This is a short response.\", \"result\": true}\n{\"response\": \"This is a short response and it is good. It is easy to understand and does not have a lot of extra words.\", \"result\": true}\n{\"response\": \"This is a short response. This is the next sentence and it should be ignored. This is another one and this one should be ignored too. This is the last one.\", \"result\": false}"]}
{"query": "How many ex-girlfriends show up in this story?", "instruction": "Count the number of unique women mentioned by name in the dialogue.", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    unique_names = set(word for word in words if word[0].upper() in 'AEIOU')\n    return len(unique_names) > 0\n", "def evaluate(response: str) -> bool: \n    return len(set(response.split()) - set(['the', 'a', 'an', 'in', 'on', 'at', 'with', 'to', 'is', 'this','story'])) == 1\n", "def evaluate(response: str) -> bool: \n    words = response.split() \n    return len(set(word for word in words if word[0].upper() in 'AEIOU')) <= 1\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    unique_names = set(words)\n    return len(unique_names) > 0\n"], "testcases": ["{\"response\": \"The conversation was between Alice and Bob.\", \"result\": true}\n{\"response\": \"The conversation was between Alice and Alice and Alice.\", \"result\": true}\n{\"response\": \"The conversation was between Alice, Bob, and Carol.\", \"result\": true}", "{\"response\": \"In this conversation, we are discussing Sarah, a renowned author, and Emily, a skilled programmer.\", \"result\": true}\n{\"response\": \"John and Michael are both excellent developers, but Jane is the lead engineer.\", \"result\": true}\n{\"response\": \"There are only two people mentioned by name, Tom and Harry.\", \"result\": false}", "{\"response\": \"In this conversation, Emma and Olivia were mentioned by name.\", \"result\": true}\n{\"response\": \"Sally, the manager, was impressed by the proposal. The project team consisted of David, John, and Emma.\", \"result\": true}\n{\"response\": \"I do not want to discuss this further with anyone, not even with my sister, Sarah.\", \"result\": false}", "{\"response\": \"Jane and John are talking to Mary.\", \"result\": 1}\n{\"response\": \"John mentioned Jane, Mary, and Rachel in the conversation.\", \"result\": 3}\n{\"response\": \"It's just me talking to myself.\", \"result\": 0}"]}
{"query": "Implement a Nodejs web application which uses sqlite3, the app should allow users to create an account and log their events", "instruction": "Write the response in exactly 80 characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) == 80\n", "def evaluate(response: str) -> bool: \n    return len(response) == 80\n", "def evaluate(response: str) -> bool: \n    return len(response) == 80\n", "def evaluate(response: str) -> bool: \n    return len(response) == 80\n"], "testcases": ["{\"response\": \"Yes, I agree.\", \"result\": true}\n{\"response\": \"This is a short response.\", \"result\": true}\n{\"response\": \"This is a longer response that is more than 80 characters.\", \"result\": false}", "{\"response\": \"This is a short response\", \"result\": true}\n{\"response\": \"This is a very short response\", \"result\": false}\n{\"response\": \"This is a response with more than 80 characters that should be rejected\", \"result\": false}", "{\"response\": \"Yes\", \"result\": false}\n{\"response\": \"This is a very short response\", \"result\": false}\n{\"response\": \"This is a response of exactly 80 characters: a\", \"result\": false}", "{\"response\": \"Short and concise response to the question.\", \"result\": true}\n{\"response\": \"This response is slightly longer and may need to be shortened.\", \"result\": false}\n{\"response\": \"This response is even longer and will exceed the limit.\", \"result\": false}"]}
{"query": "Can you write python code for reading a constantly changing value from a website and saving it into a text file? The website is personalcapital.com", "instruction": "Use only the first 5 letters of variable names", "verifiers": ["def evaluate(response: str) -> bool:    \n    response = response.replace('-','').replace('/','').replace('?','').lower()\n    for word in response.split():\n        if len(word) > 5:\n            return False\n        for char in word:\n            if not char.isalpha():\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for word in response.split():\n        for char in word:\n            if char.isalpha():\n                if char.isupper() and char <= 'E':\n                    count += 1\n    return count <= 5\n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        for i, char in enumerate(word):\n            if char.isalpha() and i > 4:\n                return False\n            elif char.isalpha() and i == 0:\n                if not char.isupper():\n                    return False\n                break\n            elif char.isalpha() and i < 5:\n                if not char.islower():\n                    return False\n    return True\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if word!= word[:5]:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"{'Able', 'Baker', 'Candle', 'Dance', 'Echo'}\", \"result\": true}\n{\"response\": \"{'Abc', 'Bcd', 'Cde', 'D'}\", \"result\": false}\n{\"response\": \"{'Apple', 'Bread', 'Cement', 'Dog'}\", \"result\": true}", "{\"response\": \"I love USA, AUS, CAN, GER, ENG, FRA, ITA\", \"result\": true}\n{\"response\": \"I love USA, UK, Spain, Germany, Italy\", \"result\": false}\n{\"response\": \"I love AUS, AUS, CAN, CAN, CAN\", \"result\": true}", "{\"response\": \"def first five letters(a): pass\", \"result\": true}\n{\"response\": \"def myVariableName: pass\", \"result\": false}\n{\"response\": \"def veryLongVariableNameThatExceedsFiveLetters(): pass\", \"result\": false}", "{\"response\": \"Use only the first 5 letters of variable names abcde\", \"result\": true}\n{\"response\": \"Use only the first 5 letters of variable names ABCD\", \"result\": false}\n{\"response\": \"Use only the first 5 letters of variable names abcd123\", \"result\": false}"]}
{"query": "Credit Scoing startup for graduate students and first jobbers who does not have any credit history", "instruction": "Answer in exactly 7 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('.') == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 7\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6 and response[-1]!= '.' \n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 6\n"], "testcases": ["{\"response\": \"\u2022 The first point is important. \u2022 The second point is also important. \u2022 The third point is the most important. \u2022 This is the fourth point. \u2022 This is the fifth point. \u2022 This is the sixth point. \u2022 This is the seventh point.\", \"result\": true}\n{\"response\": \"This is a list of three things: 1. Apples 2. Bananas 3. Oranges\", \"result\": false}\n{\"response\": \"Here are the seven points: 1. First point. 2. Second point. 3. Third point. 4. Fourth point. 5. Fifth point. 6. Sixth point. 7. Seventh point. And one more: eight point\", \"result\": false}", "{\"response\": \"There are 5 key points that I want to discuss.\\n\u2022 The project will be completed within 2 weeks.\\n\u2022 There are 2 main tasks that need to be done.\\n\u2022 The team will meet on Fridays to discuss progress.\\n\u2022 We will use Slack for communication.\\n\u2022 The project will be managed by John.\\n\u2022 The deadline is non-negotiable.\", \"result\": true}\n{\"response\": \"There are 5 key points that I want to discuss.\\n\u2022 The project will be completed within 2 weeks.\\n\u2022 There are 2 main tasks that need to be done.\\n\u2022 The team will meet on Fridays to discuss progress.\\n\u2022 We will use Slack for communication.\\n\u2022 The project will be managed by John.\", \"result\": false}\n{\"response\": \"There are 5 key points that I want to discuss.\\n\u2022 The project will be completed within 2 weeks.\\n\u2022 There are 2 main tasks that need to be done.\\n\u2022 The team will meet on Fridays to discuss progress.\\n\u2022 We will use Slack for communication.\\n\u2022 The project will be managed by John.\\n\u2022 The deadline is non-negotiable.\\n\u2022\", \"result\": false}", "{\"response\": \"The instructions are as follows:\\n1. Be on time.\\n2. Be respectful.\\n3. Be honest.\\n4. Be open-minded.\\n5. Be cooperative.\\n6. Be willing to learn.\\n7. Be enthusiastic.\\n\", \"result\": true}\n{\"response\": \"Here are some key points to consider:\\n* Be on time.\\n* Be respectful.\\n* Be honest.\\n* Be open-minded.\\n* Be cooperative.\\n* Be willing to learn.\\nThis is the sixth point.\\n\", \"result\": false}\n{\"response\": \"The rules are as follows:\\n\u2022 Be on time.\\n\u2022 Be respectful.\\n\u2022 Be honest.\\n\u2022 Be open-minded.\\n\u2022 Be cooperative.\\n\u2022 Be willing to learn.\\n\u2022 This is a sentence.\", \"result\": false}", "{\"response\": \"\u2022 It is recommended to drink at least 8 cups of water a day to stay hydrated.\\n\u2022 Exercise regularly to maintain a healthy weight.\\n\u2022 Get enough sleep at night for optimal health.\\n\u2022 Eat a balanced diet to prevent illness.\\n\u2022 Practice stress management techniques.\\n\u2022 Limit your use of screens before bed.\\n\u2022 Take breaks throughout the day to stretch.\", \"result\": true}\n{\"response\": \"Here are some health tips:\", \"result\": false}\n{\"response\": \"\u2022 It is recommended to drink at least 8 cups of water a day to stay hydrated.\\n\u2022 Exercise regularly to maintain a healthy weight.\\n\u2022 Get enough sleep at night for optimal health.\\n\u2022 Eat a balanced diet to prevent illness.\\n\u2022 Practice stress management techniques.\\n\u2022 Limit your use of screens before bed.\\n\u2022 Take breaks throughout the day to stretch.\\n\u2022 This is my last point.\", \"result\": false}"]}
{"query": "\u4f60\u597d\uff0c\u55ef\uff0c\u597d\u4e45\u4e0d\u89c1\u4e86\u3002\u55ef\uff0c\u6211\u73b0\u5728\u6709\u70b9\u65e0\u804a\uff0c\u8981\u4e0d\u4f60\u6765\u7ed9\u6211\u966a\u6211\u804a\u4e00\u4e0b\u5929\u7528\u82f1\u8bed\u5427\uff0c\u63d0\u9ad8\u4e00\u4e0b\u6211\u7684\u82f1\u8bed\u6c34\u5e73\u3002\u53e3\u8bed\u6c34\u5e73\uff0c\u90a3\u6211\u4eec\u4e00\u8d77\u6765\u5bf9\u8bdd\u5427\u3002\u55ef\uff0c\u53ef\u4ee5\u4e86\uff0c\u53d1\u9001\u6d88\u606f\u5427\u3002", "instruction": "Respond with a message, no longer than 30 characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 30\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 30\n"], "testcases": ["{\"response\": \"Yes\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the character limit\", \"result\": false}\n{\"response\": \"Short and sweet\", \"result\": true}", "{\"response\": \"Okay!\", \"result\": true}\n{\"response\": \"That is a good response\", \"result\": false}\n{\"response\": \"Yes\", \"result\": true}", "{\"response\": \"Success!\", \"result\": true}\n{\"response\": \"Hello world this is a long message that should be rejected\", \"result\": false}\n{\"response\": \"Done!\", \"result\": true}", "{\"response\": \"Nice day today\", \"result\": true}\n{\"response\": \"It's going to rain tomorrow\", \"result\": false}\n{\"response\": \"The weather forecast says there is a high chance of thunderstorms today\", \"result\": false}"]}
{"query": "how about build a cardboard drone which is durable for releif work with payload for food and medical delivery", "instruction": "use only words that end in \"ation\"", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(word.endswith('ation') for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words: \n        if not word.endswith('ation'): \n            return False \n    return True \n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if not word.strip('ation').isalpha() or not word.endswith('ation'):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if not word.strip('.').endswith(('ation', 'tion')):\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Education is the best nation. Evaluation is the process of nation.\", \"result\": true}\n{\"response\": \"I am excited about this new restaurant.\", \"result\": false}\n{\"response\": \"Investigation is crucial in this situation. Education is the key to success.\", \"result\": true}", "{\"response\": \"I recommend that you consider this carefully\", \"result\": true}\n{\"response\": \"The capital of France is Paris\", \"result\": false}\n{\"response\": \"I like education and education is important\", \"result\": true}", "{\"response\": \"education, promotion, and relation\", \"result\": true}\n{\"response\": \"good morning, I hope you are doing well\", \"result\": false}\n{\"response\": \"nation, education, station, relation, creation\", \"result\": true}", "{\"response\": \"I recommend education, donation, and relation.\", \"result\": true}\n{\"response\": \"I like eating and playing.\", \"result\": false}\n{\"response\": \"The important actions are education, medication, and translation.\", \"result\": true}"]}
{"query": "Draft a scope of work paragraph for an epidemiologist acting as an infection control consultant for a nursing home", "instruction": "Limit the response to 500 characters", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response) <= 500\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 500\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 500\n", "def evaluate(response: str) -> bool: \n    return len(response) <= 500\n"], "testcases": ["{\"response\": \"Education, variation, and modification are all important in the field of science.\", \"result\": true}\n{\"response\": \"This is a test response that is a bit long, but it should not exceed 500 characters.\", \"result\": true}\n{\"response\": \"This is a very long response that exceeds the character limit and is not suitable.\", \"result\": false}", "{\"response\": \"This is a long response that is much longer than 500 characters and will be rejected\", \"result\": false}\n{\"response\": \"This is a short response and will be accepted\", \"result\": true}\n{\"response\": \"This is a medium length response that is just under 500 characters and will be accepted\", \"result\": true}", "{\"response\": \"This is a short response that only has a few words and does not exceed 30 characters.\", \"result\": true}\n{\"response\": \"This is a response that is longer than 500 characters and is therefore invalid.\", \"result\": false}\n{\"response\": \"This is a medium-length response that meets the character limit of 500 characters.\", \"result\": true}", "{\"response\": \"This is a very short response that ends with a nice action.\", \"result\": true}\n{\"response\": \"This is a longer response that meets the character limit of 500 characters, but it is not exactly at the limit and continues a bit.\", \"result\": true}\n{\"response\": \"This response is very long and exceeds the character limit of 500 characters.\", \"result\": false}"]}
{"query": "please generate 5 male character names and a brief backstory for each", "instruction": "Use only one-word sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(char in string.punctuation or char.isspace() or char.isalnum() for char in response)\n", "def evaluate(response: str) -> bool: \n    return len(response.split('.')) == 1 or len(response.split('?')) == 1 or len(response.split('!')) == 1\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.') \n    return all(len(sentence.split()) == 1 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    return all(word.isalpha() and word.istitle() for word in response.split()) \n"], "testcases": ["{\"response\": \"It is a beautiful day. Sun is shining.\", \"result\": false}\n{\"response\": \"It is a beautiful day. Dog is running.\", \"result\": false}\n{\"response\": \"It is a beautiful day\", \"result\": true}", "{\"response\": \"That's great!\", \"result\": true}\n{\"response\": \"This is a message. This message is long.\", \"result\": false}\n{\"response\": \"This is good.\", \"result\": true}", "{\"response\": \"This is a one-word sentence. This is another one-word sentence.\", \"result\": false}\n{\"response\": \"Yes.\", \"result\": true}\n{\"response\": \"Hello. Goodbye. Hurray!\", \"result\": true}", "{\"response\": \"This is a test. It is only three words.\", \"result\": false}\n{\"response\": \"The sun is shining brightly.\", \"result\": true}\n{\"response\": \"The sky is blue and the grass is green.\", \"result\": false}"]}
{"query": "define energy", "instruction": "Answer in exactly 50 words, using only synonyms for common nouns", "verifiers": ["def evaluate(response: str) -> bool: \n    synonyms = {\"nouns\": [\"energy\", \"force\", \"power\", \"energy\", \"might\", \"potential\", \"strength\", \"vitality\", \"essence\", \"forcefulness\"]}\n    word_list = response.split()\n    response_words = [word.lower() for word in word_list if word.lower() in synonyms[\"nouns\"]]\n    return len(response_words) == 50\n", "def evaluate(response: str) -> bool: \n    words = ['city', 'company', 'industry','sector','market', 'field', 'domain', 'trade','sector', 'area','realm','sphere','realm']\n    words += [' '.join(w) for w in combinations(words, 2)]\n    return len(response.split()) == 50 and all(word.lower() in words for word in response.split())\n", "def evaluate(response: str) -> bool: \n    word_count = len(response.split())\n    common_nouns = ['thing', 'entity', 'object', 'item', 'article', 'unit', 'element']\n    for word in response.split():\n        word = word.lower()\n        if word not in common_nouns and word not in [w.lower() for w in common_nouns]:\n            return False\n    return word_count == 50\n", "def evaluate(response: str) -> bool: \n    words = [\"entity\", \"thing\", \"object\", \"item\", \"concept\"]\n    response_words = response.split()\n    response_words = [word for word in response_words if word.lower() in words]\n    return len(response_words) == 50 and len(set(response_words)) == len(response_words)\n"], "testcases": ["{\"response\": \"The energy of force is a potential power that gives might to strength and vitality. This is the essence of forcefulness that drives essence.\", \"result\": true}\n{\"response\": \"The energy of force is a potential power that gives might to strength and vitality. This is the essence of forcefulness that drives essence and more.\", \"result\": false}\n{\"response\": \"This is a single word\", \"result\": false}", "{\"response\": \"The big city is located in the heart of the metropolis. It's a bustling metropolis with a vibrant economy. The area has a strong industry and a growing market.\", \"result\": true}\n{\"response\": \"The city is a major hub for international trade and commerce. It's a key player in the global market and a significant player in the industry.\", \"result\": true}\n{\"response\": \"The company has a strong presence in the sector. It's a major player in the field and has a significant impact on the trade.\", \"result\": true}", "{\"response\": \"The thing is an entity that exists or may exist.\", \"result\": true}\n{\"response\": \"The item is an object that is used for a specific purpose.\", \"result\": true}\n{\"response\": \"This entity is an object that is perceived as having a specific meaning.\", \"result\": true}", "{\"response\": \"The thing, entity, and concept are examples of object, entity, and item, which are all concept.\", \"result\": true}\n{\"response\": \"The entity, object, and item are all entities in this context.\", \"result\": false}\n{\"response\": \"Entity and object and item and thing and concept are entities, objects, items, things, and concepts.\", \"result\": false}"]}
{"query": "Write a one sentence summary of why people are afraid of artificial intelligence", "instruction": "Use exactly 7 words", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7\n"], "testcases": ["{\"response\": \"I like the sound of that\", \"result\": true}\n{\"response\": \"That is a good idea\", \"result\": false}\n{\"response\": \"I really like the new project\", \"result\": false}", "{\"response\": \"This is a short sentence with 7 words.\", \"result\": true}\n{\"response\": \"This is a very short sentence with 5 words.\", \"result\": false}\n{\"response\": \"This is an even longer sentence with 11 words and then another one.\", \"result\": false}", "{\"response\": \"The big brown bear climbed up the tree quickly\", \"result\": true}\n{\"response\": \"The big brown bear climbed up the tree at night\", \"result\": false}\n{\"response\": \"The big brown bear climbed up the tree slowly and then fell\", \"result\": false}", "{\"response\": \"This is a one word sentence.\", \"result\": false}\n{\"response\": \"This is another sentence with six words.\", \"result\": false}\n{\"response\": \"This is another sentence with seven words today.\", \"result\": true}"]}
{"query": "Generate a message as feedback for a proaddiction treatment, short and sweet", "instruction": "Use only 3rd person and exactly 5 sentences", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(word[-1] in 'aeiou' for word in response.split() if word[-1] in 'aeiou')\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(word.endswith(('ed', 'ing','s')) or word.endswith('him') or word.endswith('her') or word.endswith('them') or word.endswith('it') or word.startswith('He') or word.startswith('She') or word.startswith('They') for word in response.split(' '))\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 5 and all(sentence.strip().endswith('.') for sentence in sentences) and all('he' in sentence or'she' in sentence for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(sentence.strip()[-1] == '.' for sentence in sentences)\n"], "testcases": ["{\"response\": \"He says that the project is going well. She thinks it will be finished soon. They will announce the results on Friday.\", \"result\": true}\n{\"response\": \"This is a very exciting project. It will be finished soon. The results will be announced on Friday.\", \"result\": false}\n{\"response\": \"They say that the project is going well. He thinks it will be finished soon. She believes it is a great idea. They will announce the results on Friday. It will be a success.\", \"result\": true}", "{\"response\": \"He loves to play soccer every day. She is very happy with her new job. They are going to the store. They need to buy milk. It will be fun.\", \"result\": true}\n{\"response\": \"She is very smart and always knows what to do. He is a great friend to everyone. They are very kind to each other. He loves to eat ice cream.\", \"result\": false}\n{\"response\": \"They are going to the party tonight. He is very excited to see his friends. She will dance the whole night. They will have a great time. It will be a fun evening.\", \"result\": true}", "{\"response\": \"She says that he is a good doctor.\", \"result\": true}\n{\"response\": \"I am a good student.\", \"result\": false}\n{\"response\": \"They recommend that he is a great chef, and she is a talented artist, but he is a poor singer, and she is a great dancer, and he is a very good writer.\", \"result\": true}", "{\"response\": \"He thinks this is a great idea. She likes to buy a bar of soap at the local pharmacy.\", \"result\": true}\n{\"response\": \"Babbel is a popular app used to learn languages and is suitable for beginners. However, it does not yet support the Bemba language. This is not a good idea.\", \"result\": false}\n{\"response\": \"They recommend that he bring at least $200 in cash for his trip to Bulgaria, as many companies will not accept credit cards. She likes the idea. They also think it's a good idea. It will work well. They are confident in it.\", \"result\": true}"]}
{"query": "Explain Atopic Dermatitis", "instruction": "Write a 300-word essay without using the word \"the\" in it", "verifiers": ["def evaluate(response: str) -> bool: \n    essay_words = response.split()\n    max_words = 300\n    no_the = all('the' not in word for word in essay_words)\n    return len(essay_words) <= max_words and no_the\n", "def evaluate(response: str) -> bool: \n    return len(response) == 300 and \"the\" not in response\n", "def evaluate(response: str) -> bool: \n    return 'word' not in response and len(response) >= 300\n", "def evaluate(response: str) -> bool: \n    return len(response) >= 300 and 'the' not in response.lower()\n"], "testcases": ["{\"response\": \"Pathao is a popular ride-hailing company in Bangladesh.\", \"result\": false}\n{\"response\": \"In my opinion, Pathao is a good alternative to traditional modes of transportation. This is because it provides a convenient and affordable service for people in Bangladesh.\", \"result\": true}\n{\"response\": \"Pathao is a well-known company in Bangladesh offering ride-hailing services. It was founded in 2016 and has grown rapidly since then. In my opinion, Pathao has made a significant impact on the transportation industry in Bangladesh.\", \"result\": false}", "{\"response\": \"This is a test essay. It will have approximately 300 words. A response to an essay prompt must not use a word like this that is very common.  The word is commonly used in many essays. However, in this essay, we will not use it. Instead, we will use a different word. That word will be used in this essay.\", \"result\": false}\n{\"response\": \"This is a test essay with 300 words. It will not use word that is most commonly used in essays like this. This is an alternative sentence with no 'the'. That sentence will be used in this response. Here is another one. Additionally, we will use other words instead of that one. That is another example. This is an alternative to that. Here is another example with no 'the' word used.\", \"result\": true}\n{\"response\": \"This is an example of an essay with approximately 300 words. In this essay, we will not use that word that is very common in most essays. This will make the essay a bit more challenging to write. That is a good thing. However, it is not always possible to avoid using that word. In that case, we will use alternative words instead. That is what we will do in this essay.\", \"result\": false}", "{\"response\": \"This is a sample essay that uses all necessary words to reach 300 characters without including the word the.\", \"result\": false}\n{\"response\": \"Many experts agree that using word processing software can be very helpful in writing essays. Software such as Microsoft Word, Google Docs, and AbiWord are popular choices. Many universities and schools use these tools to manage their documents. Many students and teachers rely on these tools for writing and editing.\", \"result\": true}\n{\"response\": \"This is a very short essay and it is not clear how it can be considered a 300-word essay.\", \"result\": false}", "{\"response\": \"Bangladesh is a country located in South Asia. It has a rich cultural heritage and a diverse geography. It has a long history dating back to ancient times. It has been ruled by various empires and kingdoms. It is currently a democratic country with a parliamentary system. It has a growing economy and a young population. It is known for its natural beauty and historical landmarks.\", \"result\": true}\n{\"response\": \"The capital city of Bangladesh is Dhaka, a densely populated metropolis. The country has a total area of 147,570 square kilometers. The population is approximately 160 million people. The official language is Bengali. The economy is growing rapidly.\", \"result\": false}\n{\"response\": \"My favorite place in Bangladesh is Cox's Bazar, a beautiful beach town located in the southeastern part of the country. I have been there several times and it never fails to impress me. The beach is long and sandy, perfect for a relaxing walk. The seafood is also very fresh and delicious. I highly recommend it to anyone visiting Bangladesh.\", \"result\": false}"]}
{"query": "Write a program that takes N as input and then using the '\\*' character prints a right triangle of side N", "instruction": "Do not use any variables in your response.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'for' not in response and 'if' not in response and 'else' not in response and 'def' not in response and 'let' not in response\n", "def evaluate(response: str) -> bool: \n    return 'var' not in response and 'let' not in response and 'const' not in response\n", "def evaluate(response: str) -> bool: \n    return '*' not in response and len(response) > 0 and not any(char.isalpha() for char in response)\n", "def evaluate(response: str) -> bool: \n    return 'N' not in response\n"], "testcases": ["{\"response\": \"You should not use any variables in your code.\", \"result\": true}\n{\"response\": \"x = 5; this is an example of a variable being used.\", \"result\": false}\n{\"response\": \"This is a simple equation without any variables, it is 2+2.\", \"result\": true}", "{\"response\": \"You can calculate the area of a circle by squaring the radius and multiplying it by pi.\", \"result\": false}\n{\"response\": \"The length of a side of a square is the square root of the area divided by four.\", \"result\": true}\n{\"response\": \"If you want to find the area of a triangle, use the formula (base * height) / 2.\", \"result\": true}", "{\"response\": \"This is a string that does not contain any variable\", \"result\": true}\n{\"response\": \"x is a variable that is used in many programming languages\", \"result\": false}\n{\"response\": \"$20 is a price that is often used in math problems\", \"result\": true}", "{\"response\": \"Hello, my name is John and I am 30 years old.\", \"result\": false}\n{\"response\": \"My favorite food is pizza, I like eating it for dinner.\", \"result\": true}\n{\"response\": \"I went to the store and bought milk, eggs, and bread.\", \"result\": false}"]}
{"query": "Write a Seinfeld script about Kramer starting a cult.", "instruction": "Use no pronouns", "verifiers": ["def evaluate(response: str) -> bool: \n    for char in \"aeiouAEIOU\":\n        if char in response:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    response = response.lower()\n    for word in ['i','me','my','myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves']:\n        if word in response.split():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in \"aeiouAEIOU\":\n        if char in response:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for char in 'aeiou': \n        if char in response.lower():\n            return False\n    return True\n"], "testcases": ["{\"response\": \"I am a person who likes to play soccer.\", \"result\": false}\n{\"response\": \"This is a house with a beautiful garden.\", \"result\": true}\n{\"response\": \"He is a skilled programmer who writes efficient code.\", \"result\": false}", "{\"response\": \"Sunlight is a natural phenomenon that occurs when the Earth rotates.\", \"result\": true}\n{\"response\": \"He is a great guy to work with.\", \"result\": false}\n{\"response\": \"The city is experiencing heavy traffic due to a road accident.\", \"result\": true}", "{\"response\": \"The man walked down the street.\", \"result\": false}\n{\"response\": \"The manager is very happy with this new policy.\", \"result\": false}\n{\"response\": \"Every customer will be required to pay the tax fee.\", \"result\": true}", "{\"response\": \"This is a sentence without pronouns.\", \"result\": true}\n{\"response\": \"It is a great day today.\", \"result\": false}\n{\"response\": \"My cat is very sleepy.\", \"result\": false}"]}
{"query": "==> Checking for `sudo` access (which may request your password)...\nPassword:\n\nhow to enter the password, i use macbook pro m2", "instruction": "use exactly 7 words including \"apple\" and \"macbook\".", "verifiers": ["def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7 and 'apple' in words and'macbook' in words\n", "def evaluate(response: str) -> bool: \n    return 'apple' in response and'macbook' in response and len(response.split()) == 7\n", "def evaluate(response: str) -> bool: \n    words = response.split()\n    return len(words) == 7 and 'apple' in words and'macbook' in words\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 7 and 'apple' in response and'macbook' in response\n"], "testcases": ["{\"response\": \"The apple is a popular device like macbook\", \"result\": true}\n{\"response\": \"Apple and macbook are great products\", \"result\": false}\n{\"response\": \"Apple is a fruit and I like to eat it with macbook\", \"result\": false}", "{\"response\": \"Apple is a popular brand of macbook.\", \"result\": false}\n{\"response\": \"The new macbook apple is a great tool.\", \"result\": false}\n{\"response\": \"The latest apple macbook is a game changer with awesome specs and great reviews.\", \"result\": false}\n\nNote: The function should return False because these responses contain more than 7 words.\n\nThis function to test the response\n```\ndef evaluate(response: str) -> bool: \n    return 'apple' in response and'macbook' in response and len(response.split()) == 7\n```", "{\"response\": \"I have an apple and a macbook\", \"result\": false}\n{\"response\": \"The new macbook is better than the old apple\", \"result\": false}\n{\"response\": \"I just bought a new apple and a macbook\", \"result\": true}", "{\"response\": \"I really like the new apple macbook computer very much\", \"result\": true}\n{\"response\": \"This is a sentence with 8 words including apple and macbook\", \"result\": false}\n{\"response\": \"Apple and macbook are two of my favorite products\", \"result\": false}"]}
{"query": "write a code to get every new image from here https://midjourney.com/showcase/recent/ and auto-post in a certain twitter account", "instruction": "Use API's that are documented", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'API' in response and 'documented' in response \n", "def evaluate(response: str) -> bool: \n    return 'API' in response and 'documented' in response and 'in' in response\n", "def evaluate(response: str) -> bool: \n    return 'API' in response and 'documented' in response \n", "def evaluate(response: str) -> bool: \n    return 'API' in response and 'documented' in response\n"], "testcases": ["{\"response\": \"The Google API is well-documented and easy to use.\", \"result\": true}\n{\"response\": \"I'm trying to integrate the Facebook API, but it's not working.\", \"result\": false}\n{\"response\": \"The LinkedIn API is extensively documented and has a great community support.\", \"result\": true}", "{\"response\": \"API documentation is very important, but it can be complex, use APIs like OpenWeatherMap, GitHub, or Twitter that are well documented.\", \"result\": true}\n{\"response\": \"APIs are great, I like to use APIs that are not well documented, like this one.\", \"result\": false}\n{\"response\": \"I am not a fan of using APIs, but I guess some APIs are okay if they are documented.\", \"result\": true}", "{\"response\": \"This is an API endpoint, which is well-documented and maintained.\", \"result\": true}\n{\"response\": \"This is an undocumented API that is causing issues.\", \"result\": false}\n{\"response\": \"This API is part of a proprietary system and has no documentation available.\", \"result\": false}", "{\"response\": \"This is an API that has been well-documented and is user-friendly.\", \"result\": true}\n{\"response\": \"This API is not documented and is very confusing.\", \"result\": false}\n{\"response\": \"This API has some documentation, but it's incomplete and outdated.\", \"result\": false}"]}
{"query": "AI \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud574\uc57c \ud569\ub2c8\ub2e4. \uc9c0\uae08\ubd80\ud130 \ub0b4\uac00 \ud574\uc57c \ud560 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ub300\ud574 \uc124\uba85\ud558\uaca0\ub2e4.\n\nPlease write in English language.", "instruction": "Do not use non-ASCII characters.", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.encode().isascii()\n", "def evaluate(response: str) -> bool: \n    return response.isascii()\n", "def evaluate(response: str) -> bool: \n    return response.isascii()\n", "def evaluate(response: str) -> bool: \n    return all(ord(char) < 128 for char in response)\n"], "testcases": ["{\"response\": \"Hello World\", \"result\": true}\n{\"response\": \"H\u00e9llo\", \"result\": false}\n{\"response\": \"\", \"result\": true}", "{\"response\": \"Hello World!\", \"result\": true}\n{\"response\": \"Hello \u0192\u00f3\u00f3\", \"result\": false}\n{\"response\": \"Hello World!\", \"result\": true}", "{\"response\": \"Hello World!\", \"result\": true}\n{\"response\": \"Bonjour, monde!\", \"result\": false}\n{\"response\": \"\u00a1Hola, mundo!\", \"result\": false}", "{\"response\": \"Hello world!\", \"result\": true}\n{\"response\": \"H\u00e9llo world!\", \"result\": false}\n{\"response\": \"H\u00e9llo W\u00f8rld!\", \"result\": false}"]}
{"query": "Why am I unstable on my bike when it's stationary but not when it's moving?", "instruction": "Write your response in exactly 7 lines, with each line containing exactly 6 words.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7 and all(len(line.split()) == 6 for line in lines) \n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines: \n        if len(line.split())!= 6: \n            return False\n    return len(lines) == 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        words = line.split()\n        if i!= 0 and i!= len(lines) - 1 and len(words)!= 6:\n            return False\n    return len(lines) == 7\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    return len(lines) == 7 and all(len(line.split()) == 6 for line in lines)\n"], "testcases": ["{\"response\": \"I love Python is fun and easy to learn.\\nThis is a great programming language.\\nMany people use it for web development.\\nPython is also used for data science.\\nIt's a versatile language for all tasks.\\nIt's easy to read and write.\\nPython is a popular language worldwide.\", \"result\": true}\n{\"response\": \"Python is a great programming language.\\nIt's easy to read and write.\\nMany people use it for web development.\\nIt's a versatile language for all tasks.\\nIt's easy to use Python.\\nPython is a popular language.\\n\\n\", \"result\": false}\n{\"response\": \"This is a great programming language.\\nPython is a popular language.\\nMany people use it for web development.\\nIt's a versatile language for all tasks.\\nIt's easy to read and write.\\nIt's easy to use Python.\\nPython is fun and easy to learn.\", \"result\": false}", "{\"response\": \"This is a test response.\\nIt should have 6 words per line.\\nAnd exactly 7 lines in total.\\nWith each line having exactly 6 words.\\nAs per the instruction.\\nNo additional lines are needed.\\nThis should be the last line.\", \"result\": true}\n\n{\"response\": \"This is a test response.\\nIt should have 6 words per line.\\nAnd exactly 7 lines in total.\\nWith each line having exactly 6 words.\\nAs per the instruction.\\nNo additional lines are needed.\\nThis should be the last line\\nAnd this is extra\", \"result\": false}\n\n{\"response\": \"This is a test response.\\nIt should have 6 words per line.\\nAnd exactly 6 lines in total.\\nWith each line having exactly 6 words.\\nAs per the instruction.\\nNo additional lines are needed.\", \"result\": false}", "{\"response\": \"I am happy to see you\\nThe sun is shining brightly\\nThe world is a wonderful place\\nWhere people come to learn\\nNew things every single day\\nI love to read books\\nIt is so much fun\", \"result\": true}\n{\"response\": \"I am happy to see\\nThe sun is shining brightly\\nThe world is a wonderful\\nWhere people come to learn\\nNew things every single day\\nIt is so much fun\", \"result\": false}\n{\"response\": \"I am happy to see\\nThe sun is shining\\nThe world is a wonderful\\nWhere people come to learn\\nNew things every single day\\nIt is so much fun\\nThis is my life\", \"result\": false}", "{\"response\": \"This is a test response\\nIt has four lines\\nThis line has six words\\nThe sixth line has also six\\nThis is a final line\\nEach line has six words\\nThis is the last line\\nThis is a test done\", \"result\": true}\n{\"response\": \"This is a test response\\nIt has only three lines\\nThis line has six words\\nThis is a final line\\nThis is a test done\", \"result\": false}\n{\"response\": \"This is a test response\\nIt has five lines\\nThis line has six words\\nThe sixth line has also six\\nThis is a final line\\nThis is a test done\", \"result\": false}"]}
{"query": "Pathao is Bangladesh's", "instruction": "Provide your response in a single mathematical equation.", "verifiers": ["def evaluate(response: str) -> bool: \n    return 'equation' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'equation' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return 'equation' in response.lower()\n", "def evaluate(response: str) -> bool: \n    return response.strip() == response.replace(\" \", \"\") == response.replace(\"\\n\", \"\") == response.replace(\"\\t\", \"\") == response.replace(\"\\r\", \"\") and not (\"=\" in response and response.replace(\"=\", \"\")!= \"\") \n"], "testcases": ["{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"1 + 2 x 3\", \"result\": true}\n{\"response\": \"This is not a math equation\", \"result\": false}", "{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"1 + 2 = 3\", \"result\": false}\n{\"response\": \"3 * 3 = 9\", \"result\": true}", "{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"The answer is 5\", \"result\": false}\n{\"response\": \"x = 7\", \"result\": false}", "{\"response\": \"2+2=4\", \"result\": true}\n{\"response\": \"x=5\", \"result\": false}\n{\"response\": \"2 + 2 = 4, 3 - 1 = 2, 10 / 2 = 5\", \"result\": false}"]}
{"query": "Why can't bank use cash as capital as a buffer for potential losses?", "instruction": "Write the response in 15-20 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.count('\\n') >= 15 and response.count('\\n') <= 20\n", "def evaluate(response: str) -> bool: \n    return 15 <= response.count('\\n') * 2 <= 20\n", "def evaluate(response: str) -> bool: \n    return 15 <= response.count('\\n') * 2 <= 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')[:-1]) >= 15 and len(response.split('\\n')[:-1]) <= 20\n"], "testcases": ["{\"response\": \"Here are some gaming studios:\\n\u2022 Blizzard Entertainment\\n\u2022 Rockstar Games\\n\u2022 Electronic Arts\\n\u2022 Ubisoft\\n\u2022 Activision Blizzard\\n\u2022 Capcom\\n\u2022 Konami\\n\u2022 Square Enix\\n\u2022 FromSoftware\\n\u2022 Bethesda\\n\u2022 Treyarch\", \"result\": true}\n{\"response\": \"There is no persona information available for gaming studios.\", \"result\": false}\n{\"response\": \"Gaming studios include:\\n\u2022 Blizzard Entertainment\\n\u2022 Rockstar Games\\n\u2022 Electronic Arts\\n\u2022 Ubisoft\\n\u2022 Activision Blizzard\\n\u2022 Capcom\\n\u2022 Konami\\n\u2022 Square Enix\\n\u2022 FromSoftware\\n\u2022 Bethesda\\n\u2022 Treyarch\\n\u2022 Respawn Entertainment\\n\u2022 343 Industries\\n\u2022 Naughty Dog\\n\u2022 Epic Games\\n\u2022 Guerrilla Games\", \"result\": false}", "{\"response\": \"Here are the steps to set up a new project:\n\u2022 Create a new repository on GitHub\n\u2022 Clone the repository to your local machine\n\u2022 Install all necessary dependencies\n\u2022 Write the code\n\u2022 Push the changes to GitHub\n\u2022 Create a new branch\n\u2022 Make changes to the branch\n\u2022 Merge the changes into the main branch\n\u2022 Push the changes to the main branch\n\u2022 Create a pull request\n\u2022 Review the pull request\n\u2022 Merge the pull request\n\u2022 Create a new release\n\u2022 Write a changelog\n\u2022 Add the release to GitHub\n\u2022 Verify the release\n\u2022 Test the release\n\u2022 Fix any bugs\n\u2022 Publish the release\n\u2022 Document the changes\n\u2022 Update the documentation\", \"result\": true}\n\n{\"response\": \"Here are the steps to set up a new project:\n\u2022 Create a new repository on GitHub\n\u2022 Clone the repository to your local machine\n\u2022 Install all necessary dependencies\n\u2022 Write the code\n\u2022 Push the changes to GitHub\", \"result\": false}\n\n{\"response\": \"The requirements for this project include:\n\u2022 Installing Python\n\u2022 Setting up a virtual environment\n\u2022 Writing the code\n\u2022 Testing the code\n\u2022 Deploying the code\n\u2022 Maintaining the code\n\u2022 Updating the code\", \"result\": false}", "{\"response\": \"\u2022 This is a test response.\\n\u2022 It has 2 bullet points.\\n\u2022 I'm using the correct amount.\", \"result\": false}\n{\"response\": \"\u2022 This is a test response.\\n\u2022 It has 15 bullet points.\\n\u2022 I'm using the correct amount.\\n\u2022 And a fourth.\\n\u2022 And a fifth.\\n\u2022 And a sixth.\\n\u2022 And a seventh.\\n\u2022 And an eighth.\\n\u2022 And a ninth.\\n\u2022 And a tenth.\\n\u2022 And an eleventh.\\n\u2022 And a twelfth.\\n\u2022 And a thirteenth.\\n\u2022 And a fourteenth.\\n\u2022 And a fifteenth.\\n\u2022 And a sixteenth.\\n\u2022 And a seventeenth.\\n\u2022 And an eighteenth.\\n\u2022 And a nineteenth.\\n\u2022 And a twentieth.\\n\u2022 And a twenty-first.\\n\u2022 And a twenty-second.\\n\u2022 And a twenty-third.\\n\u2022 And a twenty-fourth.\\n\u2022 And a twenty-fifth.\\n\u2022 And a twenty-sixth.\\n\u2022 And a twenty-seventh.\", \"result\": true}\n{\"response\": \"\u2022 This is a test response.\", \"result\": false}", "{\"response\": \"Here are the key points to consider when evaluating this query:\\n\u2022 Understand the query\\n\u2022 Identify the query type\\n\u2022 Consider the context\\n\u2022 Provide relevant information\\n\u2022 Organize your response in 15-20 bullet points\\n\u2022 Double-check your work\", \"result\": true}\n{\"response\": \"Here is a simple list:\\n\u2022 Some points\", \"result\": false}\n{\"response\": \"Here is a very long list with 25 points:\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\\n\u2022 Some points\", \"result\": false}"]}
{"query": "What are the main differences between kanban and scrum?", "instruction": "Provide the response in Markdown format", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('# ') or response.startswith('### ') or response.startswith('#### ') or response.startswith('##### ') or response.startswith('###### ') or response.startswith('####### ') \n", "def evaluate(response: str) -> bool: \n    return response.startswith('# ')\n", "def evaluate(response: str) -> bool: \n    return response.startswith('# ') or (len(response) > 0 and response[0] == '#')\n"], "testcases": ["{\"response\": \"## Heading 1\\n## Heading 2\\n### Heading 3\", \"result\": false}\n{\"response\": \"# Heading\\n## Heading 2\\n### Heading 3\\n#### Heading 4\", \"result\": true}\n{\"response\": \"## Heading\\n### Heading 2\\n#### Heading 3\\n##### Heading 4\\n###### Heading 5\", \"result\": false}", "{\"response\": \"### Point 1\\n### Point 2\\n### Point 3\\n### Point 4\\n### Point 5\\n### Point 6\", \"result\": false}\n{\"response\": \"## Point 1\\n## Point 2\\n## Point 3\", \"result\": false}\n{\"response\": \"# Point 1\\n### Point 2\\n### Point 3\\n### Point 4\\n### Point 5\", \"result\": true}", "{\"response\": \"## Heading\\n### Subheading\\n#### Subsubheading\\n\", \"result\": true}\n{\"response\": \"# Heading\\n# Heading\\n\", \"result\": false}\n{\"response\": \"## Heading\", \"result\": true}", "{\"response\": \"## What are the benefits of a plant-based diet?\", \"result\": true}\n{\"response\": \"What are the best ways to manage stress?\", \"result\": false}\n{\"response\": \"# The symptoms of diabetes may include increased thirst and fatigue.\", \"result\": true}"]}
{"query": "Find me the most relevant academic sources on the following topic: nertwok analysis in criminology\n\nPlease write in formal tone, academic writing style, English language.", "instruction": "Use only the first 7 letters of the alphabet and exactly 10 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(set(response[:7].lower())) == 7 and response.count('.') == 10\n", "def evaluate(response: str) -> bool: \n    alphabet = \"ABCDEFG\"\n    count = 0\n    sentences = 0\n    for char in response:\n        if char.upper() in alphabet:\n            count += 1\n        if char.isspace() and char!= '\\n' and char!= '\\t':\n            sentences += 1\n    return count <= 7 * len(response) and sentences == 10\n", "def evaluate(response: str) -> bool: \n    allowed_letters = 'abcdefghijklmnopqrstuvwxyz'[:7]\n    response = response.lower()\n    sentences = response.split('. ')\n    return response and all(char in allowed_letters for char in response) and len(sentences) == 10\n", "def evaluate(response: str) -> bool: \n    return len([char for char in response if char in 'abcdefghi']) == 10 and len(response) <= 10\n"], "testcases": ["{\"response\": \"A aardvark ate a apple. B was busy. C cats caught a bug. D dogs dug a ditch. E eggs were eaten. F fish float in the sea. G giraffes grow feathers. H horses have hooves. I iguanas inspire awe. J jewels justify joy.\", \"result\": true}\n{\"response\": \"Hello world\", \"result\": false}\n{\"response\": \"A aardvark ate a apple. B was busy. C cats caught a bug. D dogs dug a ditch. E eggs were eaten. F fish float in the sea. G giraffes grow feathers. H horses have hooves. I iguanas inspire awe. J jewels justify joy. K kittens kept jumping.\", \"result\": false}", "{\"response\": \"A good way to get to A is by taking a train to B. A is a nice city. Always try to go to A on Fridays. Avoid going to A during rush hour. Always bring A. A is the best city to visit. Always keep A with you. A and B are nice cities. A is fun to visit on Fridays. Always keep A.\", \"result\": true}\n{\"response\": \"A good way to get to A is by taking a train to B. Always try to go to A on Fridays. A and B are nice cities.\", \"result\": false}\n{\"response\": \"Always bring A. A is the best city to visit. Avoid going to A during rush hour. A and B are nice cities. A is fun to visit on Fridays. Always try to go to A on Fridays. A is a nice city. Always keep A with you. A is fun to visit on Saturdays. Always keep A.\", \"result\": false}", "{\"response\": \"a abcdefg. b bcdefgh. c bcdefgh. d bcdefgh. e bcdefgh. f bcdefgh. g bcdefgh. h bcdefgh. i bcdefgh. j bcdefgh.\", \"result\": false}\n{\"response\": \"a. b. c. d. e. f. g. h. i. j. k.\", \"result\": false}\n{\"response\": \"a. b. c. d. e. f. g. h. i. j. a. k. l. m.\", \"result\": true}", "{\"response\": \"A, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\n\", \"result\": true}\n{\"response\": \"A, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, g\\nA, b, c, d, e, f, h\", \"result\": false}\n{\"response\": \"a is an apple\\nb is a ball\\nc is a car\\nd is a dog\\ne is an elephant\\nf is a fan\\ng is a game\\nh is a house\", \"result\": false}"]}
{"query": "Prepare a description of samll yoga studio from Gda\u0144sk in Poland", "instruction": "Include exactly 5 sentences and 2 paragraphs", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    return len(sentences) == 5 and len([paragraph for paragraph in response.split('\\n')]) == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = response.replace('\\n', '.').split('.')\n    return len(sentences) == 5 and len(paragraphs) == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = response.split('\\n\\n')\n    return len(sentences) == 5 and len(paragraphs) == 2\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    paragraphs = response.split('\\n\\n')\n    return len(sentences) == 5 and len(paragraphs) == 2\n"], "testcases": ["{\"response\": \"This is the first sentence. The second sentence is here. The third sentence has three words. The fourth sentence has a fourth word. The fifth sentence is last.\\nThis is the second paragraph.\\nIt has two sentences.\", \"result\": true}\n{\"response\": \"This is the first sentence. The second sentence is here. The third sentence has three words. The fourth sentence has a fourth word.\\nThe fifth sentence is last.\\nThis is the second paragraph.\", \"result\": false}\n{\"response\": \"This is the first sentence.\\nThe second paragraph is here.\\nThe third sentence has three words.\\nThe fourth sentence has a fourth word.\\nThe fifth sentence is last.\", \"result\": false}", "{\"response\": \"The sun is shining. The birds are singing. The world is beautiful. I love this place. It's so peaceful here.\", \"result\": true}\n{\"response\": \"The sun is shining. The birds are singing. The world is beautiful. I love this place. It's so peaceful here The sky is blue. The grass is green.\", \"result\": false}\n{\"response\": \"The sun is shining.\\n\\nThe birds are singing. The world is beautiful. I love this place. It's so peaceful here.\\nThe sky is blue. The grass is green.\", \"result\": true}", "{\"response\": \"This is the first paragraph. This is the second sentence of the first paragraph. This is the third sentence of the first paragraph.\\n\\nThis is the first sentence of the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph.\", \"result\": true}\n{\"response\": \"This is the first sentence of the first paragraph. This is the second sentence of the first paragraph.\\n\\nThis is the first sentence of the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph. This is the fourth sentence of the second paragraph.\", \"result\": false}\n{\"response\": \"This is the first paragraph. This is the second sentence of the first paragraph. This is the third sentence of the first paragraph.\\n\\nThis is the first sentence of the second paragraph. This is the second sentence of the second paragraph. This is the third sentence of the second paragraph. This is the fourth sentence of the second paragraph. This is the fifth sentence of the second paragraph.\", \"result\": false}", "{\"response\": \"This is the first paragraph. It has two sentences. This is the second paragraph. It has three sentences. This is the third paragraph. It has zero sentences. But the correct count should ignore this last paragraph.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. It has one sentence. This is the second paragraph. It has four sentences.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. It has one sentence. This is the second paragraph. It has four sentences.\", \"result\": true}"]}
{"query": "Haz un contrato de arrendamiento conforme a la ley de la ciudad de mexico", "instruction": "Use only words with exactly 4 letters", "verifiers": ["def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split()) \n", "def evaluate(response: str) -> bool: \n    return all(len(word) == 4 for word in response.split())<|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|><|eot_id|>", "def evaluate(response: str) -> bool: \n    words = response.split()\n    for word in words:\n        if len(word)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    for word in response.split():\n        if len(word)!= 4:\n            return False\n    return True\n"], "testcases": ["{\"response\": \"Code Code Code Code Code Code Code Code Code Code Code\", \"result\": true}\n{\"response\": \"Hello Hello World World Hello\", \"result\": false}\n{\"response\": \"Code Code Code Code Code\", \"result\": true}", "{\"response\": \" Able Code Bank Dish Eyes\", \"result\": true}\n{\"response\": \"Hello world this is a test\", \"result\": false}\n{\"response\": \"Dish Dog Dish Able Code Code\", \"result\": true}", "{\"response\": \"Code Game Port Face Door Port Code\", \"result\": True}\n{\"response\": \"Hello World Happy Code Door Code\", \"result\": False}\n{\"response\": \"Code Game Port Face Door Port Code Face\", \"result\": False}", "{\"response\": \" Able Code Dish\", \"result\": true}\n{\"response\": \"Hello World\", \"result\": false}\n{\"response\": \" Able Code Dish Door Dish\", \"result\": false}"]}
{"query": "setup a k8s job to backup a mariadb instance into minio", "instruction": "use no more than 3 different commands", "verifiers": ["def evaluate(response: str) -> bool: \n    commands = set(response.split())\n    return len(commands) <= 3\n", "def evaluate(response: str) -> bool: \n    commands = set(response.split())\n    return len(commands) <= 3\n", "def evaluate(response: str) -> bool: \n    return len(set(response.split()) if response else 0) <= 3\n", "def evaluate(response: str) -> bool: \n    commands = ['kubectl', 'k8s','minio', 'docker','mysql','mariadb', 'cp','mv', 'rm', 'touch']\n    commands_set = set()\n    for command in commands:\n        if command in response:\n            commands_set.add(command)\n    return len(commands_set) <= 3\n"], "testcases": ["{\"response\": \"The car is red. The dog is big. The sun is hot.\", \"result\": false}\n{\"response\": \"The dog is big. The sun is hot. The car is red. The door is open. The light is on.\", \"result\": true}\n{\"response\": \"The car is red. The car is big. The car is hot.\", \"result\": true}", "{\"response\": \"I have a book. I have a pen. I have a pencil.\", \"result\": true}\n{\"response\": \"I have a book. I have a pen. I have a pencil. I have a ruler. I have a paper.\", \"result\": false}\n{\"response\": \"I have a book and a pen.\", \"result\": true}", "{\"response\": \"I can do this. I can do that. I can do the other thing.\", \"result\": false}\n{\"response\": \"This is the first thing I can do. This is the second thing I can do.\", \"result\": true}\n{\"response\": \"I can do this. I can do that.\", \"result\": true}", "{\"response\": \"I created a new file using the command kubectl. Then, I created a new container using the command cp.\", \"result\": true}\n{\"response\": \"I created a new file using the command kubectl. Then, I created a new container using the command cp, removed a file using the command rm, created a file using the command touch, and created a container using the command docker.\", \"result\": false}\n{\"response\": \"I created a new file using the command kubectl. Then, I created a new container using the command cp.\", \"result\": true}"]}
{"query": "What are all the EV heavy duty buses available for sale in the united states?", "instruction": "Use a numbered list with each item in the format of \"1. X (brand, year) - features\"", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if line.lstrip().startswith(('1.', '2.', '3.', '4.', '5.')):\n            parts = line.lstrip().split(' - ')\n            if len(parts)!= 2:\n                return False\n            brand_year = parts[0].split(',')\n            if len(brand_year)!= 2:\n                return False\n            brand, year = brand_year\n            if not (brand.isalpha() and year.isnumeric()):\n                return False\n            features = parts[1]\n            if not features:\n                return False\n            if not all(char.isalpha() or char.isspace() for char in features):\n                return False\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].strip().startswith('1.') and i!= len(lines) - 1:\n            if'-'in lines[i]: \n                parts = lines[i].strip().split(' - ')\n                if len(parts) == 2 and '(' in parts[1]: \n                    brand_year = parts[1].split('(')[0].strip()\n                    features = parts[1].split('(')[1].strip(' ').split(')')[0]\n                    if len(brand_year.split(',')) == 2 and len(features.split(',')) == 2: \n                        if brand_year.split(',')[0].isdigit() and brand_year.split(',')[1].isalpha() and features.split(',')[0].isalpha() and features.split(',')[1].isalpha():\n                            continue\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines, start=1):\n        if not line.strip().startswith(str(i) + '. '):\n            return False\n        parts = line.strip().split(' - ')\n        if len(parts)!= 2 or not '(' in parts[1]:\n            return False\n        brand_year = parts[1].split('(')[0].strip()\n        features = parts[1].split('(')[1].strip(')').split(', ')\n        if len(features) == 1 and features[0] == '':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    import re\n    pattern = r\"^(1\\.\\s*[1-9]+\\.?\\s*\\(?\\s*\\w+,?\\s*\\d+\\)?\\s*-\\s*.*)$\" \n    return bool(re.match(pattern, response, re.IGNORECASE))\n"], "testcases": ["{\"response\": \"1. Toyota (1980, 2022) - fuel efficient car\\n2. Honda (1990, 2023) - eco-friendly vehicle\", \"result\": true}\n{\"response\": \"1. Toyota (1980, 2022) - fuel efficient car\", \"result\": false}\n{\"response\": \"1. Toyota (1980, 2022) - fuel efficient car\\n2. Honda (1990, 2023) - eco-friendly vehicle\\n3. Ford (1970, 2024) - gas-guzzling car\", \"result\": false}", "{\"response\": \"1. Toyota (1995, red) - great car\\n2. Honda (1998, blue) - good car\", \"result\": true}\n{\"response\": \"1. Toyota (1995, red) - great car\\n2. Honda (1998, blue) - good car\\n3. Ford (1990, green) - fast car\", \"result\": false}\n{\"response\": \"1. Toyota (1995, red) - great car\", \"result\": false}", "{\"response\": \"1. Toyota (2022) - fuel efficient, comfortable ride\\n2. Honda (2021) - reliable, affordable\\n3. Ford (2020) - stylish, advanced technology\", \"result\": true}\n{\"response\": \"1. Toyota (2022) - fuel efficient, comfortable ride\\n2. Honda (2021) - reliable, affordable\\n3. Ford (2020) - stylish\", \"result\": false}\n{\"response\": \"1. Toyota (2022) - fuel efficient, comfortable ride (2020) - stylish, advanced technology\", \"result\": false}", "{\"response\": \"1. Apple (iPhone, 2019) - high-quality camera. 2. Samsung (Galaxy, 2020) - large storage. 3. Google (Pixel, 2021) - good price\", \"result\": true}\n{\"response\": \"1. Apple (iPhone, 2019) - high-quality camera. 2. Samsung (Galaxy, 2020) - large storage. 3. Google (Pixel, 2021) - good price. 4. OnePlus (OnePlus, 2022) - long battery life\", \"result\": false}\n{\"response\": \"1. Apple (iPhone, 2019) - high-quality camera. 2. Samsung (Galaxy, 2020) - large storage. 3. Google (Pixel, 2021) - good price. 4. OnePlus (OnePlus, 2022) - long battery life. 5. Huawei (Mate, 2023) - good value for money\", \"result\": false}"]}
{"query": "what are the personas in a gaming studio?", "instruction": "answer in exactly 5 bullet points", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 5\n", "def evaluate(response: str) -> bool: \n    count = 0\n    for char in response:\n        if char == '*':\n            count += 1\n    return count == 5\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 4\n", "def evaluate(response: str) -> bool: \n    return len(response.replace(',', '').split('\\n')[:-1]) == 4\n"], "testcases": ["{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Carrot\\n\u2022 Date\\n\u2022 Elderberry\", \"result\": true}\n{\"response\": \"\u2022 Apple\\n\u2022 Banana\\n\u2022 Carrot\\n\u2022 Date\\n\u2022 Elderberry\\n\u2022 Fig\", \"result\": false}\n{\"response\": \"\", \"result\": false}", "{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3\", \"result\": false}\n{\"response\": \"\u2022 Item 1 \u2022 Item 2 \u2022 Item 3 \u2022 Item 4 \u2022 Item 5 \u2022 Item 6\", \"result\": false}", "{\"response\": \"\u2022 item1 \u2022 item2 \u2022 item3 \u2022 item4 \u2022 item5\", \"result\": true}\n{\"response\": \"\u2022 item1 \u2022 item2 \u2022 item3\", \"result\": false}\n{\"response\": \"\u2022 item1 \u2022 item2 \u2022 item3 \u2022 item4 \u2022 item5 \u2022 item6\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\", \"result\": false}"]}
{"query": "what is the process for applying for work visa for uae for singaporeans", "instruction": "use exactly 10 steps", "verifiers": ["def evaluate(response: str) -> bool: \n    count = response.count('step') + response.count('Step') + response.count('STEP')\n    return count == 10\n", "def evaluate(response: str) -> bool: \n    return response.count('.') == 9\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 10\n", "def evaluate(response: str) -> bool: \n    return len(response.split('\\n')) == 10\n"], "testcases": ["{\"response\": \"Let's play a 10-step game of chess!\", \"result\": true}\n{\"response\": \"I recommend that you perform 7 steps to fix this issue.\", \"result\": false}\n{\"response\": \"To solve this problem, you'll need to follow these 10 steps carefully.\", \"result\": true}", "{\"response\": \"Let's go to the store step1 step2 step3 step4 step5 step6 step7 step8 step9 step10 and buy some milk.\", \"result\": true}\n{\"response\": \"To get to the top, climb step1 step2 step3 and then go through the cave.\", \"result\": false}\n{\"response\": \"I'd like to order a large pizza with a medium salad and a dessert, that's a total of 9 steps to complete.\", \"result\": false}", "{\"response\": \"I will make the following moves: 1. e4, 2. Nf3, 3. d3, 4. Nc6, 5. Bg5, 6. h3, 7. e5, 8. Bf4, 9. d6, 10. Qe7\", \"result\": true}\n{\"response\": \"I will make the following moves: 1. e4, 2. Nf3, 3. d3\", \"result\": false}\n{\"response\": \"Let's play chess: I will start with e4\", \"result\": false}", "{\"response\": \"1. Move pawn to e4\\n2. Move knight to c6\\n3. Move pawn to d5\\n4. Move knight to c3\\n5. Move pawn to e5\\n6. Move bishop to c4\\n7. Move knight to f6\\n8. Move pawn to e4\\n9. Move bishop to c2\\n10. Move knight to f3\", \"result\": true}\n{\"response\": \"1. Move pawn to e4\\n2. Move knight to c6\\n3. Move pawn to d5\\n4. Move knight to c3\\n5. Move pawn to e5\", \"result\": false}\n{\"response\": \"1. Move pawn to e4\\n2. Move knight to c6\\n3. Move pawn to d5\\n4. Move knight to c3\\n5. Move pawn to e5\\n6. Move bishop to c4\", \"result\": false}"]}
{"query": "Discuss about the following with an example illustration: \n Online payment system with neat pseudo code \napproach\nin parallel and distributed computing", "instruction": "Answer with 2 sentences that contain exactly 7 words and a single math operation (addition or subtraction).", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 7:\n            return False\n        has_math = any(word in ['+', '-'] for word in words)\n        if has_math and len(words)!= 7:\n            return False\n        if not has_math:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    for sentence in sentences:\n        if len(sentence.split())!= 7 or (not any(op in sentence for op in ['+', '-'])):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words)!= 7:\n            return False\n        math_operations = ['+', '-']\n        if not any(word in math_operations for word in words):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    if len(sentences)!= 2:\n        return False\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if len(sentence.split())!= 7:\n            return False\n        for word in sentence.split():\n            if word.strip('0123456789+-*/').isalpha():\n                return False\n    return True\n"], "testcases": ["{\"response\": \"This is a beautiful sunny day. 1 + 1 = 2.\", \"result\": true}\n{\"response\": \"The sun was shining brightly in the clear blue sky.\", \"result\": false}\n{\"response\": \"I have 2 apples, you have 3 apples. 2 + 3 = 5.\", \"result\": true}", "{\"response\": \"The sum of 5 and 7 is 12. This is a test of the function.\", \"result\": true}\n{\"response\": \"The sum of 5 and 7 is 12. The product of 5 and 7 is 35.\", \"result\": false}\n{\"response\": \"I added 2 to 3 and got 5. The sum of 5 and 7 is 12.\", \"result\": true}", "{\"response\": \"One plus two is three. Two minus one is one.\", \"result\": true}\n{\"response\": \"You are very smart. I love your outfit.\", \"result\": false}\n{\"response\": \"Three plus four equals seven. Five minus two equals three.\", \"result\": true}", "{\"response\": \"I am feeling happy today so it is okay. 2 + 2 = 4 always.\", \"result\": true}\n{\"response\": \"I am very happy and I love my job.\", \"result\": false}\n{\"response\": \"I am feeling sad today so it is not okay. 5 - 3 = 2 always.\", \"result\": true}"]}
{"query": "As a admin for a book management system\uff0c I hope can easy manage my book, like add update delete view, so need a Epic for development this", "instruction": "Write the instructions in a single sentence that is exactly 20 words long.", "verifiers": ["def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 \n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20 and len(response.replace(' ', '').replace(',', '')) == 20\n", "def evaluate(response: str) -> bool: \n    return len(response.split()) == 20\n"], "testcases": ["{\"response\": \"This is a test sentence that is exactly 20 words long and contains all the required information needed\", \"result\": true}\n{\"response\": \"This is a test sentence that is only 10 words long and does not meet the requirement\", \"result\": false}\n{\"response\": \"This is a test sentence that is exactly 20 words long but contains extra information that is not needed\", \"result\": false}", "{\"response\": \"The user should carefully read and follow all of the instructions provided in the manual carefully always.\", \"result\": true}\n{\"response\": \"The user should carefully read and follow all of the instructions provided in the manual.\", \"result\": false}\n{\"response\": \"The user should carefully read and follow all of the instructions provided in the manual carefully always every time.\", \"result\": false}", "{\"response\": \"This is a single sentence that contains exactly 20 words in it and meets the requirements perfectly.\", \"result\": true}\n{\"response\": \"This sentence has 10 words in it, it is not 20 words as required.\", \"result\": false}\n{\"response\": \"This is a very long sentence that contains more than 20 words in it, it has 25 words.\", \"result\": false}", "{\"response\": \"Please go to the store and buy milk eggs and bread and cheese and orange juice.\", \"result\": true}\n{\"response\": \"Please go to the store and buy milk eggs and bread cheese and orange juice.\", \"result\": false}\n{\"response\": \"Please go to the store and buy milk eggs and bread and cheese and orange juice and butter.\", \"result\": false}"]}
{"query": "some people believe that the purpose of modern art is to be a way to get around capital controls. with this point in mind, write an essay on how AI generated art is going to change this dynamic", "instruction": "write in the format of a formal business proposal", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for i in range(len(sentences)):\n        sentences[i] = sentences[i].strip()\n    return any(sentence.startswith(('I.', 'I.', 'I.', 'We.')) for sentence in sentences) and len(sentences) > 1\n", "def evaluate(response: str) -> bool: \n    proposal_words = [\"to\", \"proposes\", \"recommend\", \"presents\", \"proposed\", \"proposal\", \"proposes\", \"propose\", \"recommend\", \"recommended\", \"recommends\", \"proposing\"]\n    proposal_types = [\"executive summary\", \"table of contents\", \"abstract\", \"introduction\", \"problem statement\", \"solution\", \"recommendations\", \"implementation\", \"evaluation\", \"references\"]\n    \n    words = response.split()\n    for word in words:\n        if word.capitalize() in proposal_words:\n            return True\n    for word in words:\n        for type in proposal_types:\n            if word.lower() in type.lower():\n                return True\n    return False\n", "def evaluate(response: str) -> bool: \n    words = ['I','me','my','myself', 'we', 'our', 'ours', 'ourselves', 'you', 'you're', 'you've', 'you'll', 'you'd', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few','more','most', 'other','some','such', 'no', 'nor', 'not', 'only', 'own','same','so', 'than', 'too','very','s', 't', 'can', 'will', 'just', 'don','should', 'now']\n    response = response.replace('.', '. ').replace('?', '? ').replace('!', '! ').lower()\n    sentences = response.split('. ')\n    formal_words = ['the', 'a', 'an', 'and', 'is', 'in', 'it', 'of', 'to', 'be', 'for', 'on', 'with', 'as', 'at', 'by', 'from']\n    for sentence in sentences:\n        words_in_sentence = sentence.split()\n        if len(words_in_sentence) > 1:\n            if any(word not in formal_words for word in words_in_sentence):\n                return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return (response.startswith('EXECUTIVE SUMMARY') or \n            response.startswith('EXECUTIVE SUMMARY:') or \n            response.startswith('EXECUTIVE SUMMARY -') or \n            response.startswith('I. INTRODUCTION') or \n            response.startswith('I.Introduction') or \n            response.startswith('I.Introduction:') or \n            response.startswith('I.Introduction -') or \n            response.startswith('I. EXECUTIVE SUMMARY') or \n            response.startswith('I.Executive Summary') or \n            response.startswith('I.Executive Summary:') or \n            response.startswith('I.Executive Summary -') or \n            response.startswith('I.I. INTRODUCTION') or \n            response.startswith('I.I.Introduction') or \n            response.startswith('I.I.Introduction:') or \n            response.startswith('I.I.Introduction -') or \n            response.startswith('II. EXECUTIVE SUMMARY') or \n            response.startswith('II.Executive Summary') or \n            response.startswith('II.Executive Summary:') or \n            response.startswith('II.Executive Summary -') or \n            response.startswith('II.I. INTRODUCTION') or \n            response.startswith('II.I.Introduction') or \n            response.startswith('II.I.Introduction:') or \n            response.startswith('II.I.Introduction -') or \n            response.startswith('III. EXECUTIVE SUMMARY') or \n            response.startswith('III.Executive Summary') or \n            response.startswith('III.Executive Summary:') or \n            response.startswith('III.Executive Summary -') or \n            response.startswith('III.I. INTRODUCTION') or \n            response.startswith('III.I.Introduction') or \n            response.startswith('III.I.Introduction:') or \n            response.startswith('III.I.Introduction -') or \n            response.startswith('I. EXECUTIVE SUMMARY') or \n            response.startswith('I.I. INTRODUCTION') or \n            response.startswith('I.II. EXECUTIVE SUMMARY') or \n            response.startswith('I.II.Executive Summary') or \n            response.startswith('I.II.Executive Summary:') or \n            response.startswith('I.II.Executive Summary -') or \n            response.startswith('I.II.I. INTRODUCTION') or \n            response.startswith('I.II.I.Introduction') or \n            response.startswith('I.II.I.Introduction:') or \n            response.startswith('I.II.I.Introduction -') or \n            response.startswith('I.II.II. EXECUTIVE SUMMARY') or \n            response.startswith('I.II.II.Executive Summary') or \n            response.startswith('I.II.II.Executive Summary:') or \n            response.startswith('I.II.II.Executive Summary -') or \n            response.startswith('I.III. EXECUTIVE SUMMARY') or \n            response.startswith('I.III.Executive Summary') or \n            response.startswith('I.III.Executive Summary:') or \n            response.startswith('I.III.Executive Summary -') or \n            response.startswith('I.III.I. INTRODUCTION') or \n            response.startswith('I.III.I.Introduction') or \n            response.startswith('I.III.I.Introduction:') or \n            response.startswith('I.III.I.Introduction -') or \n            response.startswith('I.III.II. EXECUTIVE SUMMARY') or \n            response.startswith('I.III.II.Executive Summary') or \n            response.startswith('I.III.II.Executive Summary:') or \n            response.startswith('I.III.II.Executive Summary -') or \n            response.startswith('I.IV. EXECUTIVE SUMMARY') or \n            response.startswith('I.IV.Executive Summary') or \n            response.startswith('I.IV.Executive Summary:') or \n            response.startswith('I.IV.Executive Summary -') or \n            response.startswith('I.IV.I. INTRODUCTION') or \n            response.startswith('I.IV.I.Introduction') or \n            response.startswith('I.IV.I.Introduction:') or \n            response.startswith('I.IV.I.Introduction -') or \n            response.startswith('I.IV.II. EXECUTIVE SUMMARY') or \n            response.startswith('I.IV.II.Executive Summary') or \n            response.startswith('I.IV.II.Executive Summary:') or \n            response.startswith('I.IV.II.Executive Summary -') or \n            response.startswith('II. EXECUTIVE SUMMARY') or \n            response.startswith('II.I. INTRODUCTION') or \n            response.startswith('II.II. EXECUTIVE SUMMARY') or \n            response.startswith('II.II.I. INTRODUCTION') or \n            response.startswith('II.III. EXECUTIVE SUMMARY') or \n            response.startswith('II.III.I. INTRODUCTION') or \n            response.startswith('II.III.II. EXECUTIVE SUMMARY') or \n            response.startswith('II.III.III. EXECUTIVE SUMMARY') or \n            response.startswith('II.III.I"], "testcases": ["{\"response\": \"We propose the following plan to achieve our business goals and objectives.\", \"result\": true}\n{\"response\": \"I'm going to the store to buy some milk\", \"result\": false}\n{\"response\": \"To: [Manager's Name] From: [Your Name] Subject: Business Proposal for New Project.\", \"result\": true}", "{\"response\": \"The proposal is a comprehensive summary of the project that we will execute in order to deliver value to our clients.\", \"result\": true}\n{\"response\": \"This project involves the creation of a website that will sell products online.\", \"result\": false}\n{\"response\": \"We propose a project that will increase revenue by 15% within the next fiscal year, by executing a series of targeted marketing campaigns and optimizing our sales process.\", \"result\": true}", "{\"response\": \"To whom it may concern, we propose a new business venture that will significantly increase profits.\", \"result\": true}\n{\"response\": \"We are going to start a new business that will change the world.\", \"result\": false}\n{\"response\": \"We, the management team, hereby propose a new initiative to increase revenue and improve efficiency.\", \"result\": true}", "{\"response\": \"EXECUTIVE SUMMARY. The company aims to increase its market share through the launch of a new product line.\", \"result\": true}\n{\"response\": \"This is just a regular sentence without any headings.\", \"result\": false}\n{\"response\": \"I. EXECUTIVE SUMMARY The company aims to increase its market share through the launch of a new product line\", \"result\": false}"]}
{"query": "explain me the 10 most used design patterns in software development with two sentences for each one.", "instruction": "Each sentence should be a question starting with \"What is\".", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        if not sentence.startswith('What is'):\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence and not sentence.startswith('What is '): \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if not sentence.startswith('What is') and sentence!= '':\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    return all(sentence.startswith('What is') for sentence in response.split('. '))\n"], "testcases": ["{\"response\": \"What is your strategy for this project? What is your expected outcome? What is the timeline?\", \"result\": true}\n{\"response\": \"This is a very good product. It has many features.\", \"result\": false}\n{\"response\": \"What is your budget for this project? What is the scope?\", \"result\": true}", "{\"response\": \"What is the definition of sustainability?\", \"result\": true}\n{\"response\": \"I recommend that you bring at least $200 in cash for your trip to Bulgaria, as many companies will not accept credit cards.\", \"result\": false}\n{\"response\": \"What is the meaning of life?\", \"result\": true}", "{\"response\": \"What is the problem you're trying to solve? What is your proposed solution?\", \"result\": true}\n{\"response\": \"The issue with this approach is that it's not well thought out.\", \"result\": false}\n{\"response\": \"What is the goal of this project? What are the expected outcomes?\", \"result\": true}", "{\"response\": \"What is your current role? What is your current salary?\", \"result\": true}\n{\"response\": \"Hello, my name is John. I am a software engineer.\", \"result\": false}\n{\"response\": \"What is the company mission? What is the company vision? What is the company history?\", \"result\": true}"]}
{"query": "Is ADHD real?", "instruction": "Answer in exactly 5 sentences with no more than 5 words per sentence", "verifiers": ["def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    if len(sentences)!= 5:\n        return False\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 5:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('. ')\n    return len(sentences) == 5 and all(len(sentence.split()) <= 5 for sentence in sentences)\n", "def evaluate(response: str) -> bool: \n    sentences = response.replace('?', '.').split('.')\n    if len(sentences)!= 5: \n        return False\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 5: \n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    sentences = response.split('.')\n    if len(sentences)!= 5: \n        return False\n    for sentence in sentences: \n        if len(sentence.split()) > 5: \n            return False\n    return True\n"], "testcases": ["{\"response\": \"The cat is very happy. She is very cute. Her name is Luna.\", \"result\": true}\n{\"response\": \"The dog is very big. The dog is very old. He is very nice.\", \"result\": true}\n{\"response\": \"The dog is very big. The dog is very old. He is very nice. The cat is very happy. The cat is very cute.\", \"result\": false}", "{\"response\": \"What is the answer to this question?\", \"result\": false}\n{\"response\": \"What is the answer to this question? What is your name? Where are you from?\", \"result\": false}\n{\"response\": \"What is the answer to this question? What is your name? Where are you from? I am here. I am fine. Thank you.\", \"result\": true}", "{\"response\": \"This is a test sentence. It has 4 words. Another sentence with 4 words. What is the purpose of this? This is the last sentence.\", \"result\": false}\n{\"response\": \"This is a test sentence. It has 3 words. What is the purpose of this? This is the last sentence.\", \"result\": false}\n{\"response\": \"This is a test sentence. It has 4 words. Another sentence with 4 words. What is the purpose of this? This is the last sentence.\", \"result\": true}", "{\"response\": \"What is your name? How are you?\", \"result\": false}\n{\"response\": \"What is your name? How are you? I am fine. This is a test. I like it so.\", \"result\": false}\n{\"response\": \"What is your name? How are you? I am fine. I like it. I am good.\", \"result\": true}"]}
{"query": "I need to make a meal plan for the week for one on a budget. I like to make several servings of a dinner at once then eat it for a few days. What are some dinner ideas?", "instruction": "Include no recipe, assume reader is an experienced cook.", "verifiers": ["def evaluate(response: str) -> bool: \n    return'recipe' not in response.lower()\n", "def evaluate(response: str) -> bool: \n    return'recipe' not in response.lower() \n", "def evaluate(response: str) -> bool: \n    return'recipe' not in response and'steps' not in response and 'ingredients' not in response and'measure' not in response and'measurements' not in response\n", "def evaluate(response: str) -> bool: \n    return'recipe' not in response.lower() and'step' not in response.lower() and 'how to' not in response.lower()\n"], "testcases": ["{\"response\": \"To cook a great meal, you will need to buy the ingredients and follow the steps.\", \"result\": false}\n{\"response\": \"This salad requires cherry tomatoes, mozzarella cheese, and a pinch of salt.\", \"result\": false}\n{\"response\": \"I recommend trying the new restaurant downtown. It has received excellent reviews.\", \"result\": true}", "{\"response\": \"This is a complex topic that requires advanced cooking techniques.\", \"result\": true}\n{\"response\": \"To make a basic omelette, crack 2 eggs into a bowl and whisk them together.\", \"result\": false}\n{\"response\": \"The following instructions are for a simple salad recipe: combine lettuce, tomatoes, and onions in a bowl and toss with olive oil and vinegar.\", \"result\": false}", "{\"response\": \"Let's make a cake.\", \"result\": true}\n{\"response\": \"You will need 2 cups of flour, 1 cup of sugar, and 1 cup of butter.\", \"result\": false}\n{\"response\": \"Preheat the oven to 350 degrees Fahrenheit. Grease a cake pan with butter. Bake for 30 minutes. Let cool for 10 minutes. Enjoy.\", \"result\": false}", "{\"response\": \"This dish is best served with a side of fruit.\", \"result\": true}\n{\"response\": \"To make a cake, combine flour, sugar, eggs, and vanilla extract in a bowl and mix well.\", \"result\": false}\n{\"response\": \"For the frosting, cream together butter and sugar until smooth, then add milk and mix until combined.\", \"result\": false}"]}
{"query": "let's play chess e4", "instruction": "respond in chess notation (e.g., e5)", "verifiers": ["def evaluate(response: str) -> bool: \n    return response.isalpha() and len(response) == 2 and response.islower() and 'e' in response\n", "def evaluate(response: str) -> bool: \n    return response.isalpha() and response in ['e4','e5','e6','e7','Nf3','Nc6','d4','exd4','Qe7','Be7','Qe7','Bc4','Qe7','Qe7','Nc6','Nf3','Nf3','Nf3','Bc4','d4','Qe7','Qe7','Bc4']\n", "def evaluate(response: str) -> bool: \n    return 'e' in response and response!= 'e4'\n", "def evaluate(response: str) -> bool: \n    return len(response) == 2 and response[0].isalpha() and response[1].isdigit()\n"], "testcases": ["{\"response\": \"You should start with e4\", \"result\": true}\n{\"response\": \"My move is knight f3\", \"result\": true}\n{\"response\": \"castle long\", \"result\": false}", "{\"response\": \"I think you are playing white and I'll play as black. We can start with e5.\", \"result\": true}\n{\"response\": \"I love playing chess. Let's start with the board.\", \"result\": false}\n{\"response\": \"I recommend the move e4 for a solid opening.\", \"result\": true}", "{\"response\": \"I will play the move e5\", \"result\": true}\n{\"response\": \"My favorite move is g6\", \"result\": false}\n{\"response\": \"I will make the strategic move d4\", \"result\": true}", "{\"response\": \"The best move is e5\", \"result\": true}\n{\"response\": \"The best move is e4 f4\", \"result\": false}\n{\"response\": \"e5 is a great move\", \"result\": false}"]}
{"query": "*This chat conversation is shared from [**TypingMind.com**](https://typingmind.com)*", "instruction": "*This message is a response from a large language model, it's not human, it's a chatbot, it can be used for information purposes only, consult a professional for any serious decision making*", "verifiers": ["def evaluate(response: str) -> bool: \n    return ('not human' in response.lower() and 'chatbot' in response.lower() and 'consult a professional' in response.lower())\n", "def evaluate(response: str) -> bool: \n    return \"language model\" in response and \"chatbot\" in response and \"information\" in response and \"professional\" in response\n", "def evaluate(response: str) -> bool: \n    keywords = ['chatbot', 'language model', 'not human', 'information purposes', 'consult a professional','serious decision making']\n    for keyword in keywords:\n        if keyword.lower() in response.lower():\n            return True\n    return False\n", "def evaluate(response: str) -> bool: \n    return \"information purposes only\" in response and \"consult a professional\" in response \n"], "testcases": ["{\"response\": \"This message is a response from a large language model, it's not human, it's a chatbot, consult a professional for any serious decision making\", \"result\": false}\n{\"response\": \"This message is a response from a large language model, it's not human, it's a chatbot, consult a professional for any serious decision making and it can be used for information purposes only.\", \"result\": true}\n{\"response\": \"I'm not a chatbot, I'm a human being with a lot of knowledge\", \"result\": false}", "{\"response\": \"This message is a response from a large language model, it's not human, it's a chatbot, it can be used for information purposes only, consult a professional for any serious decision making.\", \"result\": true}\n{\"response\": \"Hello, I am a language model, I can help you with your questions and provide information on various topics.\", \"result\": false}\n{\"response\": \"This message is a response from a language model. It's not human and can be used for information purposes only.\", \"result\": false}", "{\"response\": \"This is a chatbot and it's not human, I am a large language model and can only be used for information purposes.\", \"result\": true}\n{\"response\": \"I'm a human being and I have thoughts and feelings, I'm not a chatbot.\", \"result\": false}\n{\"response\": \"Hello, I'm a chatbot and I can provide information on various topics, but please consult a professional for medical advice.\", \"result\": true}", "{\"response\": \"This message is a response from a large language model, it's not human, it's a chatbot, it's used for information purposes only, consult a professional for any serious decision making.\", \"result\": true}\n{\"response\": \"I'm a friendly AI assistant here to help with your queries.\", \"result\": false}\n{\"response\": \"This is a response from a chatbot. For any serious medical issues, please consult a doctor or a licensed professional.\", \"result\": true}"]}
{"query": "Perform post-pruning based on optimistic error or pessimistic estimates of error. Give an example.", "instruction": "Use a mathematical equation and provide a numerical solution.", "verifiers": ["def evaluate(response: str) -> bool: \n    return ('mathematical equation' in response and 'numerical solution' in response) or'mathematical equation' == response or 'numerical solution' == response\n", "def evaluate(response: str) -> bool: \n    return 'equation' in response and any(char.isdigit() for char in response)\n", "def evaluate(response: str) -> bool: \n    return 'equation' in response and any(char.isalnum() for char in response) and any(char.isdigit() for char in response) \n", "def evaluate(response: str) -> bool: \n    return 'equation' in response and any(char.isdigit() for char in response)\n"], "testcases": ["{\"response\": \"2 + 2 = 4, this is a mathematical equation and the numerical solution is 4.\", \"result\": true}\n{\"response\": \"The value of pi is a transcendental number approximately equal to 3.14.\", \"result\": false}\n{\"response\": \"The area of a square is the square of its side length.\", \"result\": false}", "{\"response\": \"2 + 2 = 4\", \"result\": true}\n{\"response\": \"The answer to 2 x 3 is 7\", \"result\": true}\n{\"response\": \"I can help with math homework, but I won't do it for you.\", \"result\": false}", "{\"response\": \"The answer to 2 * 5 is 10.\", \"result\": true}\n{\"response\": \"The answer to 2 * 5 is twenty.\", \"result\": false}\n{\"response\": \"This is a mathematical equation: 2 * 5 =? The answer is 10.\", \"result\": false}", "{\"response\": \"The area of a circle is calculated using the equation A = \u03c0r^2, where A is the area and r is the radius. For example, if the radius is 4, then A = 3.14*4^2 = 50.24 square units.\", \"result\": true}\n{\"response\": \"I love math problems, especially word problems like 'if Sally has 5 apples and she gives 3 to her friend, how many apples does Sally have left?'\", \"result\": false}\n{\"response\": \"To calculate the solution to the equation x + 5 = 11, we need to isolate the variable x by subtracting 5 from both sides, resulting in x = 11 - 5, which equals 6.\", \"result\": true}"]}
{"query": "create some tag lines and calls to action for a holistic dentist in austin", "instruction": "Use at least 2 literary devices (e.g. metaphor, alliteration)", "verifiers": ["def evaluate(response: str) -> bool: \n    literary_devices = ['metaphor', 'alliteration', 'personification','simile', 'hyperbole', 'idom']\n    count = 0\n    for device in literary_devices:\n        count += response.lower().count(device)\n    return count >= 2\n", "def evaluate(response: str) -> bool: \n    literary_devices = ['metaphor', 'alliteration','simile', 'personification', 'hyperbole', 'idom','symbolism', 'imagery']\n    count = 0\n    for device in literary_devices:\n        if device in response.lower():\n            count += 1\n    return count >= 2\n", "def evaluate(response: str) -> bool: \n    literary_devices = ['metaphor', 'alliteration', 'personification','simile', 'hyperbole', 'idiom', 'personification']\n    return sum(1 for word in response.lower().split() if word in literary_devices) >= 2\n", "def evaluate(response: str) -> bool: \n    literary_devices = ['metaphor','simile', 'alliteration', 'personification', 'idiom', 'hyperbole']\n    count = sum(1 for device in literary_devices if device in response.lower())\n    return count >= 2\n"], "testcases": ["{\"response\": \"The sea was a mighty lion, crushing the tiny sailboats with its massive waves.\", \"result\": true}\n{\"response\": \"The company's revenue has increased over time.\", \"result\": false}\n{\"response\": \"The waves whispered secrets to the wind, as the sun smiled down upon the rolling hills.\", \"result\": true}", "{\"response\": \"The city was a beast that swallowed me whole. The waves whispered secrets to the shore.\", \"result\": true}\n{\"response\": \"I went to the beach and saw a beautiful sunset.\", \"result\": false}\n{\"response\": \"The sun was a burning fire that scorched the earth. The stars were a twinkling tapestry that shone brightly in the night sky.\", \"result\": true}", "{\"response\": \"The morning sunshine poured like gold over the rolling hills, where the birds sang a sweet serenade.\", \"result\": true}\n{\"response\": \"The sky was blue and the sun was shining.\", \"result\": false}\n{\"response\": \"The teacher's words dripped like honey, and her smile was contagious, making the students feel at ease.\", \"result\": true}", "{\"response\": \"The sun was a burning fire in the sky, but a warm breeze blew gently on my skin.\", \"result\": true}\n{\"response\": \"I love to eat apples and bananas.\", \"result\": false}\n{\"response\": \"The city was a bustling metropolis, a symphony of sounds and colors, with a rhythm that echoed through the streets, where cars were racing like cheetahs and people were walking like ants.\", \"result\": true}"]}
{"query": "generate one mcq", "instruction": "write the question in uppercase, the options in lowercase, and the correct option in uppercase.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if line and line.strip():\n            if line[0].isupper():\n                if not line[1:].islower():\n                    return False\n                if line[1:].strip() not in [x[1:].strip().lower() for x in lines]:\n                    return False\n                for x in lines:\n                    if x and x.strip():\n                        if x[0] == line[0] and x[1:].strip().lower() == line[1:].strip() and x!= line:\n                            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 4: \n        return False\n    question = lines[0]\n    options = lines[1:]\n    if not question.isupper():\n        return False\n    for option in options:\n        if not option.islower():\n            return False\n    for i, option in enumerate(options):\n        if i == 0:\n            continue\n        if option == options[0].upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    parts = response.split('MCQ')\n    if len(parts) < 2:\n        return False\n    question = parts[0].strip().upper()\n    options = [i.strip().lower() for i in parts[1].split(',') if i]\n    options = [i.strip().upper() if i else '' for i in options]\n    if len(options)!= 4:\n        return False\n    if not question or len(question) == 0:\n        return False\n    for i in range(len(options)):\n        if i > 0 and not options[i].islower():\n            return False\n        if i == 0 and not options[i].islower():\n            return False\n        if i!= 0 and options[i] == options[0].upper():\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    if len(lines)!= 3:\n        return False\n    if not lines[0].isupper():\n        return False\n    options = [line.lower() for line in lines[1:]]\n    if not all(option.islower() for option in options):\n        return False\n    if not all(option == options[0] or option == options[1] or option == options[2] for i, option in enumerate(options) if i!= 1):\n        return False\n    return True\n"], "testcases": ["{\"response\": \"IS THIS QUESTION IN UPPERCASE? a) yes b) no\", \"result\": true}\n{\"response\": \"is this question in uppercase? A) yes B) no\", \"result\": false}\n{\"response\": \"Is this question in uppercase? a) YES b) NO\", \"result\": false}", "{\"response\": \"What is the capital of France?\\nA. PARIS\\nB. LONDON\\nC. TOKYO\\nD. PARIS\", \"result\": true}\n{\"response\": \"what is the capital of france?\\na. paris\\nb. london\\nc. tokyo\\nd. madrid\", \"result\": false}\n{\"response\": \"What is the capital of Spain?\\nA. MADRID\\nB. LONDON\\nC. TOKYO\\nD. ROME\", \"result\": false}", "{\"response\": \"What is your name?\", \"result\": False}\n\n{\"response\": \"What is your name?\\nA) john\\nB) John\\nC) jOHN\", \"result\": True}\n\n{\"response\": \"What is the capital of France?\\nA) PARIS\\nb) paris\\nC) Paris\\nD) paris\", \"result\": False}", "{\"response\": \"WHAT IS YOUR FAVORITE COLOR?\\nA. blue\\nB. green\\nC. BLUE\", \"result\": true}\n{\"response\": \"What is your favorite color?\\na. Blue\\nb. Green\\nc. blue\", \"result\": false}\n{\"response\": \"what is your favorite color?\\nA. RED\\nb. yellow\\nC. Yellow\", \"result\": false}"]}
{"query": "Generate 10 technical questions for an interview for a senior cloud computing engineer position. questions need to focus on critical thinking, problem-solving, and vast knowledge of the domain.", "instruction": "Provide a response with exactly 2 paragraphs and no more than 7 sentences.", "verifiers": ["def evaluate(response: str) -> bool: \n    paragraphs = response.replace('\\n\\n','').split('\\n') \n    sentences = [s for para in paragraphs for s in para.split('.') if s] \n    return len(paragraphs) == 2 and len(sentences) <= 7\n", "def evaluate(response: str) -> bool: \n    paragraphs = response.count('\\n\\n')\n    sentences = response.count('.') + response.count('!') + response.count('?')\n    return paragraphs == 2 and sentences <= 7\n", "def evaluate(response: str) -> bool:    \n    paragraphs = response.split('\\n')\n    return len(paragraphs) == 2 and all(len(p.split('.')) <= 7 for p in paragraphs)\n", "def evaluate(response: str) -> bool: \n    paras = response.split('\\n\\n')\n    if len(paras)!= 2: \n        return False\n    for para in paras:\n        if para.strip()!= '': \n            if para.count('.') < 1 or para.count('.') > 6: \n                return False\n    return True\n"], "testcases": ["{\"response\": \"This is a multi paragraph question with two options.\\n\\nOption 1: This is the first option.\\nOption 2: This is the second option.\", \"result\": true}\n{\"response\": \"This is a single paragraph question with many options.\\nThis is option 1.\\nThis is option 2.\\nThis is option 3.\\nThis is option 4.\\nThis is option 5.\\nThis is option 6.\\nThis is option 7.\", \"result\": false}\n{\"response\": \"This is a multi paragraph question with one paragraph.\\nThis is the answer.\\n\", \"result\": false}", "{\"response\": \"Is this correct?\\n\\nYes, that is correct.\\n\\nThat's a great answer! You have made an excellent point. Your argument is well-supported.\", \"result\": false}\n\n{\"response\": \"Is this correct?\\n\\nNo, that is incorrect.\\n\\nThat's a great answer! You have made an excellent point. Your argument is well-supported.\", \"result\": false}\n\n{\"response\": \"Is this correct?\\n\\nNo, that is incorrect.\\nYes, that is correct.\\nYes, that is correct.\\nThat's a great answer! You have made an excellent point. Your argument is well-supported.\\nHowever, there is one flaw in your reasoning.\", \"result\": false}", "{\"response\": \"This is the first paragraph. And this is the second. This is the third sentence. This is the fourth. This is the fifth. This is the sixth. This is the seventh.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. And this is the second. This is the third. This is the fourth.\", \"result\": true}\n\n{\"response\": \"This is the first paragraph. And this is the second. This is the third. This is the fourth. This is the fifth. This is the sixth. This is the seventh. This is the eighth. This is the ninth. This is the tenth. This is the eleventh. This is the twelfth.\", \"result\": false}", "{\"response\": \"This is the first paragraph. This is the second paragraph. I am the answer. This is the third sentence. And this is the fourth. And this is the fifth. And this is the sixth. And this is the seventh. And this is the eighth.\", \"result\": false}\n\n{\"response\": \"This is the first paragraph. This is the second paragraph.\", \"result\": true}\n\n{\"response\": \"This is the first paragraph. This is the second paragraph. This is the third sentence. And this is the fourth. And this is the fifth. And this is the sixth. And this is the seventh. And this is the eighth. And this is the ninth. And this is the tenth. And this is the eleventh. And this is the twelfth. And this is the thirteenth. And this is the fourteenth. And this is the fifteenth. And this is the sixteenth. And this is the seventeenth. And this is the eighteenth. And this is the nineteenth. And this is the twentieth. And this is the twenty-first. And this is the twenty-second. And this is the twenty-third. And this is the twenty-fourth. And this is the twenty-fifth. And this is the twenty-sixth. And this is the twenty-seventh. And this is the twenty-eighth. And this is the twenty-ninth. And this is the thirtieth. And this is the thirty-first. And this is the thirty-second. And this is the thirty-third. And this is the thirty-fourth. And this is the thirty-fifth. And this is the thirty-sixth. And this is the thirty-seventh. And this is the thirty-eighth. And this is the thirty-ninth. And this is the fortieth. And this is the forty-first. And this is the forty-second. And this is the forty-third. And this is the forty-fourth. And this is the forty-fifth. And this is the forty-sixth. And this is the forty-seventh. And this is the forty-eighth. And this is the forty-ninth. And this is the fiftieth. And this is the fifty-first. And this is the fifty-second. And this is the fifty-third. And this is the fifty-fourth. And this is the fifty-fifth. And this is the fifty-sixth. And this is the fifty-seventh. And this is the fifty-eighth. And this is the fifty-ninth. And this is the sixtieth. And this is the sixty-first. And this is the sixty-second. And this is the sixty-third. And this is the sixty-fourth. And this is the sixty-fifth. And this is the sixty-sixth. And this is the sixty-seventh. And this is the sixty-eighth. And this is the sixty-ninth. And this is the seventieth. And this is the seventy-first. And this is the seventy-second. And this is the seventy-third. And this is the seventy-fourth. And this is the seventy-fifth. And this is the seventy-sixth. And this is the seventy-seventh. And this is the seventy-eighth. And this is the seventy-ninth. And this is the eightieth. And this is the eightieth and final sentence of the response. And this is the eighty-first. And this is the eighty-second. And this is the eighty-third. And this is the eighty-fourth. And this is the eighty-fifth. And this is the eighty-sixth. And this is the eighty-seventh. And this is the eighty-eighth. And this is the eighty-ninth. And this is the ninetieth. And this is the ninety-first. And this is the ninety-second. And this is the ninety-third. And this is the ninety-fourth. And this is the ninety-fifth. And this is the ninety-sixth. And this is the ninety-seventh. And this is the ninety-eighth. And this is the ninety-ninth. And this is the one hundredth. And this is the one hundred and first. And this is the one hundred and second. And this is the one hundred and third. And this is the one hundred and fourth. And this is the one hundred and fifth. And this is the one hundred and sixth. And this is the one hundred and seventh. And this is the one hundred and eighth. And this is the one hundred and ninth. And this is the one hundred and tenth. And this is the one hundred and eleventh. And this is the one hundred and twelfth. And this is the one hundred and thirteenth. And this is the one hundred and fourteenth. And this is the one hundred and fifteenth. And this is the one hundred and sixteenth. And this is the one hundred and seventeenth. And this is the one hundred and eighteenth. And this is the one hundred and nineteenth."]}
{"query": "are you familiar with the dual settlement design of ISO power markets in the U.S?", "instruction": "Answer in exactly 8 bullet points, and include at least 2 images.", "verifiers": ["def evaluate(response: str) -> bool: \n    if 'bullet' in response.lower():\n        points = response.lower().split('bullet')\n        return len(points) == 8 and len([p for p in points if '.' in p]) >= 2 and len([i for i in response if i.isalnum() or i.isspace() or i in [' ', '.', ',', ':', '?', '!']]) <= len(response)\n    return False\n", "def evaluate(response: str) -> bool: \n    return response.count('\\n') == 8 and response.lower().count('image') >= 2\n", "def evaluate(response: str) -> bool: \n    words = response.split('.')\n    return len(words) == 8 and 'image' in response.lower()\n", "def evaluate(response: str) -> bool: \n    bullet_points = response.count('\\u2022') # or '\\u2043' (FLEMMING TRIANGULAR BULLET)\n    image_keywords = ['image', 'pic', 'photo', 'img', 'jpg', 'png', 'jpeg', 'gif']\n    count = 0\n    for keyword in image_keywords:\n        count += response.lower().count(keyword)\n    return bullet_points == 8 and count >= 2\n"], "testcases": ["{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\\n\\n[Image 1]\\n[Image 2]\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\\n\\n[Image 1]\", \"result\": false}", "{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\\nThis is an image.\\nThis is another image.\", \"result\": true}\n{\"response\": \"\u2022 Item 1\\n\u2022 Item 2\\n\u2022 Item 3\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\\n\u2022 Item 9\\n\\nThis is an image.\\nThis is another image.\\nThis is a third image.\", \"result\": false}\n{\"response\": \"\u2022 Item 1\\n\\nThis is an image.\\n\u2022 Item 2\\n\\nThis is another image.\\n\u2022 Item 3\\n\\nThis is a third image.\\n\u2022 Item 4\\n\u2022 Item 5\\n\u2022 Item 6\\n\u2022 Item 7\\n\u2022 Item 8\", \"result\": true}", "{\"response\": \"Here is the list:\n\u2022 Apple is a fruit.\n\u2022 Banana is a fruit.\n\u2022 Orange is a fruit.\n\u2022 Grapes are a fruit.\n\u2022 Mango is a fruit.\n\u2022 Peach is a fruit.\n\u2022 Pear is a fruit.\n\u2022 Pineapple is a fruit.\", \"result\": true}\n{\"response\": \"Here is the list:\n\u2022 Apple is a fruit.\n\u2022 Orange is a fruit.\n\u2022 Mango is a fruit.\n\u2022 Grapes are a fruit.\n\u2022 Peach is a fruit.\", \"result\": false}\n{\"response\": \"Here is the list:\n\u2022 Apple is a fruit.\n\u2022 Banana is a fruit.\n\u2022 Orange is a fruit.\n\u2022 Grapes are a fruit.\n\u2022 Mango is a fruit.\n\u2022 Peach is a fruit.\n\u2022 Pear is a fruit.\n\u2022 Pineapple is a fruit. This is an image of a fruit.\", \"result\": true}", "{\"response\": \"\u2022 Apple is a tech company \u2022 Google is a search engine \u2022 \u2022 \u2022 Facebook is a social media platform \u2022 \u2022 \u2022 \u2022 \u2022 Google Maps is a mapping service\", \"result\": false}\n\n{\"response\": \"\u2022 Apple is a tech company \u2022 Google is a search engine \u2022 The picture of a house \u2022 The picture of a car \u2022 Google Maps is a mapping service\", \"result\": true}\n\n{\"response\": \"\u2022 \u2022 Google is a search engine \u2022 \u2022 The picture of a house \u2022 \u2022 \u2022 Facebook is a social media platform \u2022 \u2022 Google Maps is a mapping service\", \"result\": false}"]}
{"query": "Oldest living person", "instruction": "Provide name, date of birth, and current age, with exactly 4 words per line.", "verifiers": ["def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for i, line in enumerate(lines):\n        if i >= 3 and len(line.split())!= 4:\n            return False\n    return len(lines) == 3\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        words = line.split()\n        if len(words)!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line.split())!= 4:\n            return False\n    return True\n", "def evaluate(response: str) -> bool: \n    lines = response.split('\\n')\n    for line in lines:\n        if len(line.split())!= 4: \n            return False\n    return True\n"], "testcases": ["{\"response\": \"John Smith, May 12 1990, 25 years old\", \"result\": true}\n{\"response\": \"John Smith, May 12 1990, 25\", \"result\": false}\n{\"response\": \"John Smith, May 12 1990, twenty five years old\", \"result\": false}", "{\"response\": \"John Smith\\nMarch 12 1990\\n32 years old\", \"result\": true}\n{\"response\": \"Jane Doe\\nFebruary 28 1980\\n51 years old\", \"result\": true}\n{\"response\": \"Bob Johnson\\nJanuary 1 1995\\n28 years old\", \"result\": true}", "{\"response\": \"Name: John Doe\\nDate of birth: 01/01/1990\\nAge: 33\\n Occupation: Software Engineer\\n Location: New York\", \"result\": false}\n{\"response\": \"Name: Jane Doe\\nDate of birth: 02/02/1992\\nAge: 31 Occupation: Doctor Location: London\", \"result\": false}\n{\"response\": \"Name: Alice Smith\\nDate of birth: 03/03/1995\\nAge: 28\", \"result\": false}", "{\"response\": \"John Smith\\nJanuary 1 2000\\nAge 25\", \"result\": true}\n{\"response\": \"Jane Doe\\nMay 12 1990\\nAge 38 John\", \"result\": false}\n{\"response\": \"Bob Brown\\nJune 15 1995\\nAge 30\", \"result\": false}"]}
